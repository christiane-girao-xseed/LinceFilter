// Generated by Xseed Version 9.5.65 ( Date: 18/11/2020 09:07:2424 hs  User: DEFAULT )
import java.io.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import javax.servlet.http.*;
import java.math.*;
import HLegacy.*;


public class RCLIEN extends XseedReport implements Runnable
{
final String LAN_INVALIDMAINT           = "Invalid maintenance field.";
final String LAN_INVALIDINCLUSION       = "Invalid Add. Item already exists.";
final String LAN_SUCCESSINCLUSION       = "Successful Add.";
final String LAN_INVALIDMODIFY          = "Invalid Change. Item does not exist.";
final String LAN_SUCCESSMODIFY          = "Successful Change.";
final String LAN_INVALIDDELETE          = "Invalid Delete. Item does not exist.";
final String LAN_SUCCESSDELETE          = "Successful Delete.";
final String LAN_INVALIDPURGE           = "Invalid Purge. Item does not exist.";
final String LAN_SUCCESSPURGE           = "Successful Purge.";
final String LAN_INVALIDCONSULT         = "Inquiry not executed. Item does not exist.";
final String LAN_SUCCESSCONSULT         = "Successful Inquiry.";
final String LAN_DELETEDITEM            = "Inquiry executed. Item logically deleted.";
final String LAN_LOGICALLYDELETED       = "Inquiry not executed. Item logically deleted.";
final String LAN_FILLORDINATE           = "Ordinate must be entered.";
final String LAN_INQATENDOFLG           = "INQ not allowed at the end of LG.";
final String LAN_ITEMNOTREC             = "Item not registered on Ispec";
final String LAN_ITEMDELETED            = "Item logically deleted on Ispec";
final String LAN_ITEMMUSTBEFILLED       = "Item must be filled";
final String LAN_INVALIDDATE            = "Invalid Date";
final String LAN_ISPECNOTDEFINED        = "Ispec not defined";
final String LAN_REPORTNOTDEFINED       = "Report not defined";
final String LAN_INVALIDVALUE           = "Invalid numeric value on field ";
final String LAN_INVALIDNUMERIC         = "Invalid char in numeric fields.";
final String MSG_SUCCESSFULL_ENTRY      = "Successfull entry";
final String MSG_ORDINATE_REQUIRED      = "Ordinated required";
final String MSG_INVALIDKEYF11          = "The key F11 is disabled.";
final String MSG_INVALIDKEYALTLEFT      = "The key ALT <- is disabled.";
final String MSG_INVALIDKEYALTRIGHT     = "The key ALT -> is disabled.";
final String MSG_INVALIDKEYCTRLN        = "The key CTRL-N is disabled.";
final String MSG_INVALIDKEYCTRLU        = "The key CTRL-U is disabled.";
final String MSG_MANYDECIMALS           = " too many decimals on field ";
final String MSG_MANYNUMBER             = " numeric value too large on field ";
final String MSG_XMITERROR              = "Page already submitted. Wait ... ";
final String MSG_GOBACK                 = "Go Back";
final String MSG_INVALIDDCT             = "Invalid Value";
final String MSG_WAITXMIT               = "Transmitting the screen. Wait ... ";
final String MSG_REQUIREDDECIMALCHAR    = " decimal separator is required on field ";
final String ODBC_CLIEN_FIELDS = "CODCLI";
String ExtractVariableLine="";
private void GLB_LP_Initialize ()
{
}
// Defining Table Itens
double CLIEN_CODCLI;
String CLIEN_MAINT;
// Defining Table Work Itens
String CLIEN_XSEEDTITLE;
String CLIEN_XSEEDSTATUS;
boolean CLIEN_XSEEDEOF;
boolean CLIEN_XSEEDSEEK;
ResultSet CLIEN_TAB;
Connection  CLIEN_CON;
Statement CLIEN_CMD;
// F3_ITENS();
double F3_F3TOTAL;
XseedCriticalPoint xseedCP;

File extractFile; // Declaração do arquivo de EXTRACT
String runQueueNumber = "";





// variaveis globais automatica
private String F3_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F3_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "======================";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F3_2");
       return("");
    }
}
private String F3_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "Record Number:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(18 - pos - wCaption.length() ," ");
        pos = 18;
        Buffer = Buffer + format(F3_F3TOTAL,"ZZZZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F3_3");
       return("");
    }
}

public static void main (String args[])
    throws Exception
{
    int i = args[0].indexOf("=");
    if (i != -1)
    {   if (args[0].substring(0,i).trim().equals("WFL")==true)
        {   RCLIEN newRep = new RCLIEN(args[0].substring(i+1));
            newRep.runReport();
            System.exit((int)newRep.GLB.TASK);
        }
        else
        {   RCLIEN newRep = new RCLIEN(args[0], args[1], args[2]);
            newRep.GLB.DEVICE = args[3];
            newRep.runReport();
            System.exit((int)newRep.GLB.TASK);
        }
    }
    else
    {   RCLIEN newRep = new RCLIEN(args[0], args[1], args[2]);
        newRep.GLB.DEVICE = args[3];
        newRep.runReport();
        System.exit((int)newRep.GLB.TASK);
    }
}

public RCLIEN ()
{
}
public RCLIEN (HttpSession session)
{
    getAttribute (session);
}
public void getAttribute (HttpSession session)
{

    GLB.DSN = (String)session.getAttribute("GLB_DSN");
    if (GLB.DSN == null)
    {
	   session.setAttribute("GLB_DSN", "");
	   GLB.DSN = "";
    }

    GLB.INITSTN = (String)session.getAttribute("GLB_STN");
    if (GLB.INITSTN == null)
    {
	   session.setAttribute("GLB_INITSTN", "");
		GLB.INITSTN = "";
    }

    GLB.USERNAME = (String)session.getAttribute("GLB_USERNAME");
    if (GLB.USERNAME == null)
    {
	    session.setAttribute("GLB_USERNAME", "");
		GLB.USERNAME = "";
    }

    GLB.PASSWORD = (String)session.getAttribute("GLB_PASSWORD");
    if (GLB.PASSWORD==null)
    {
        session.setAttribute("GLB_PASSWORD", "");
        GLB.PASSWORD= "";
    }

    GLB.FILESDIR = (String)session.getAttribute("GLB_FILESDIR");
    if (GLB.FILESDIR==null)
    {
        session.setAttribute("GLB_FILESDIR", "");
	  	GLB.FILESDIR = "";
    }

    GLB.AUDITDIR = (String)session.getAttribute("GLB_AUDITDIR");
    if (GLB.AUDITDIR==null)
    {
        session.setAttribute("GLB_AUDITDIR", "");
	  	GLB.AUDITDIR = "";
    }

    GLB.BACKUPDIR = (String)session.getAttribute("GLB_BACKUPDIR");
    if (GLB.BACKUPDIR==null)
    {
        session.setAttribute("GLB_BACKUPDIR", "");
	  	GLB.BACKUPDIR = "";
    }

    GLB.TEMPDIR = (String)session.getAttribute("GLB_TEMPDIR");
    if (GLB.TEMPDIR==null)
    {
        session.setAttribute("GLB_TEMPDIR", "");
	  	GLB.TEMPDIR = "";
    }

    GLB.SYSTEMDIR = (String)session.getAttribute("GLB_SYSTEMDIR");
    if (GLB.SYSTEMDIR==null)
    {
        session.setAttribute("GLB_SYSTEMDIR", "");
	  	GLB.SYSTEMDIR = "";
    }

    GLB.DOCDIR = (String)session.getAttribute("GLB_DOCDIR");
    if (GLB.DOCDIR==null)
    {
        session.setAttribute("GLB_DOCDIR", "");
	  	GLB.DOCDIR = "";
    }

    GLB.EXTRACTSDIR = (String)session.getAttribute("GLB_EXTRACTSDIR");
    if (GLB.EXTRACTSDIR==null)
    {
        session.setAttribute("GLB_EXTRACTSDIR", "");
	  	GLB.EXTRACTSDIR = "";
    }

    GLB.MSGSDIR = (String)session.getAttribute("GLB_MSGSDIR");
    if (GLB.MSGSDIR==null)
    {
        session.setAttribute("GLB_MSGSDIR", "");
	 	GLB.MSGSDIR = "";
    }

    GLB.ICONSDIR = (String)session.getAttribute("GLB_ICONSDIR");
    if (GLB.ICONSDIR==null)
    {   session.setAttribute("GLB_ICONSDIR", "");
        GLB.ICONSDIR = "";
    }

    GLB.BATCHDIR = (String)session.getAttribute("GLB_BATCHDIR");
    if (GLB.BATCHDIR==null)
    {
        session.setAttribute("GLB_BATCHDIR", "");
	  	GLB.BATCHDIR = "";
    }

    GLB.CLONEAPPDIR = (String)session.getAttribute("GLB_CLONEAPPDIR");
    if (GLB.CLONEAPPDIR==null)
    {
        session.setAttribute("GLB_CLONEAPPDIR", "");
	  	GLB.CLONEAPPDIR = "";
    }
	
    GLB.CLONERTSDIR = (String)session.getAttribute("GLB_CLONERTSDIR");
    if (GLB.CLONERTSDIR==null)
    {
        session.setAttribute("GLB_CLONERTSDIR", "");
	  	GLB.CLONERTSDIR = "";
    }

    GLB.PARAM = (String)session.getAttribute("GLB_PARAM");
    if (GLB.PARAM == null)
    {
        session.setAttribute("GLB_PARAM", "");
	  	GLB.PARAM = "";
    }

    GLB.DEVICE = (String)session.getAttribute("GLB_DEVICE");
    if (GLB.DEVICE==null)
    {
        session.setAttribute("GLB_DEVICE", "");
	 	GLB.DEVICE = "";
    }
	
	GLB.DBNAME = (String)session.getAttribute("GLB_DBNAME");
    if (GLB.DBNAME==null)
    {
        session.setAttribute("GLB_DBNAME", "");
	  	GLB.DBNAME = "";
    }

    GLB.SERVER = (String)session.getAttribute("GLB_SERVER");
    if (GLB.SERVER == null)
    {
	   session.setAttribute("GLB_SERVER", "");
	   GLB.SERVER = "";
    }

    GLB.FULLSTN = (String)session.getAttribute("GLB_FULLSTN");
    if (GLB.FULLSTN == null)
    {
	   session.setAttribute("GLB_FULLSTN", "");
	   GLB.FULLSTN = "";
    }
    GLB.DBTYPE = (String)session.getAttribute("GLB_DBTYPE");
    if (GLB.DBTYPE == null)
    {
	   session.setAttribute("GLB_DBTYPE", "");
	   GLB.DBTYPE = "";
    }
    GLB.LANGUAGE = (String)session.getAttribute("GLB_LANGUAGE");
    if (GLB.LANGUAGE==null)
    {
       session.setAttribute("GLB_LANGUAGE", "");
       GLB.LANGUAGE = "";
    }
    GLB.REPLANG = (String)session.getAttribute("GLB_REPLANG");
    if (GLB.REPLANG==null)
    {
       session.setAttribute("GLB_REPLANG", "");
       GLB.REPLANG = "";
    }
    GLB.STALANG = (String)session.getAttribute("GLB_STALANG");
    if (GLB.STALANG==null)
    {
       session.setAttribute("GLB_STALANG", "");
       GLB.STALANG = "";
    }
}

public RCLIEN (

  String pDsn,        String pInitStn,    String pUsername,  String pPassword,
  boolean pAuditJob,  String pAuditAct,   String pFilesDir,  String pAuditDir,
  String pBackupDir,  String pTempDir,    String pSystemDir, String pDocDir,
  String pExtractDir, String pMsgDir,     String pIconsDir,  String pBatchDir,
  String pCloneAppDir,String pCloneRtsDir,String pMyStatus,  String pParam,
  String pDevice,     String pServer,     String pDbName,    String pFullStn )
{	
    getAttribute (pDsn, pInitStn, pUsername, pPassword, pAuditJob, pAuditAct,
        pFilesDir, pAuditDir, pBackupDir, pTempDir, pSystemDir, pDocDir, pExtractDir,
        pMsgDir, pIconsDir, pBatchDir, pCloneAppDir, pCloneRtsDir, pMyStatus,pParam,
        pDevice, pServer, pDbName, pFullStn);
}

public void getAttribute (

  String pDsn,        String pInitStn,    String pUsername,  String pPassword,
  boolean pAuditJob,  String pAuditAct,   String pFilesDir,  String pAuditDir,
  String pBackupDir,  String pTempDir,    String pSystemDir, String pDocDir,
  String pExtractDir, String pMsgDir,     String pIconsDir,  String pBatchDir,
  String pCloneAppDir,String pCloneRtsDir,String pMyStatus,  String pParam,
  String pDevice,     String pServer,     String pDbName,    String pFullStn )

{   GLB.DSN = pDsn;
    GLB.INITSTN = pInitStn;
    GLB.USERNAME = pUsername;
    GLB.PASSWORD = pPassword;
    GLB.AUDITJOB = pAuditJob;
    GLB.AUDITACT = pAuditAct;
    GLB.FILESDIR = pFilesDir;
    GLB.AUDITDIR = pAuditDir;
    GLB.BACKUPDIR = pBackupDir;
    GLB.TEMPDIR = pTempDir;
    GLB.SYSTEMDIR = pSystemDir;
    GLB.DOCDIR = pDocDir;
    GLB.EXTRACTSDIR = pExtractDir;
    GLB.MSGSDIR = pMsgDir;
    GLB.ICONSDIR = pIconsDir;
    GLB.BATCHDIR = pBatchDir;
    GLB.CLONEAPPDIR = pCloneAppDir;
    GLB.CLONERTSDIR = pCloneRtsDir;
    GLB.MYSTATUS = pMyStatus;
    GLB.PARAM = pParam;
    GLB.DEVICE = pDevice;
    GLB.SERVER = pServer;
    GLB.DBNAME = pDbName;
    GLB.FULLSTN = pFullStn;
}

private void readAppIni(String pAppIniPath)
       throws Exception
{
    try
    {
        String AppIniLine;
        File  appinifile = new File(pAppIniPath + File.separatorChar + "APP.INI");
        FileInputStream   appinistream = new FileInputStream(pAppIniPath + File.separatorChar + "APP.INI");
        BufferedReader    appini = new BufferedReader(new InputStreamReader(appinistream));
        AppIniLine = "";
        while (AppIniLine != null)
        {   AppIniLine = appini.readLine();
            if (AppIniLine != null)
            {
              getSetupOptions(AppIniLine);
            }
        }
        appinistream.close();
        appini = null;
        appinistream = null;
        appinifile = null;


   }
   catch (Exception e)
   {
      //ShowErrorMsg (e,"ReadAppAppIni");
   }
}

private void getSetupOptions(String pLine)
    throws Exception
{
    try
    {
        String BeforeWord;
        String AfterWord;
        int i;
        i = pLine.indexOf(";");
        if (i == -1)
        {
           i = pLine.indexOf("=");
        }
        if (i != -1)
        {
           BeforeWord = pLine.substring(0, i).toUpperCase();
           AfterWord = pLine.substring(i + 1);

           if (BeforeWord.trim().toUpperCase().equals("APPNAME") )
               GLB.APPNAME = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("DBNAME") )
               GLB.DBNAME = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("DSN") )
               GLB.DSN = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("TARGETOS") )
               GLB.TARGETOS = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("STN") )
               GLB.STN  = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("USER") )
               GLB.USERCODE = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("MSGTIMER") )
               GLB.MSGTIMER = (short)Integer.parseInt(AfterWord.trim(),10);
           else if (BeforeWord.trim().toUpperCase().equals("FILESPATH") )
               GLB.FILESDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("AUDITPATH") )
               GLB.AUDITDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("BACKUPPATH") )
               GLB.BACKUPDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("SYSTEMPATH") )
               GLB.SYSTEMDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("DOCPATH") )
               GLB.DOCDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("ICONSPATH") )
               GLB.ICONSDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("TEMPPATH") )
               GLB.TEMPDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("MSGSPATH") )
               GLB.MSGSDIR= AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("BATCHPATH") )
               GLB.BATCHDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("CLONEAPPDIR") )
               GLB.CLONEAPPDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("CLONERTSDIR") )
               GLB.CLONERTSDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("CLONEAPPPATH") )
               GLB.CLONEAPPDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("CLONERTSPATH") )
               GLB.CLONERTSDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("EXTRACTSPATH") )
               GLB.EXTRACTSDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("FIREUPISPEC") )
               GLB.FIREUPISPEC = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("SERVER") )
               GLB.SERVER = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("DBUSERNAME") )
               GLB.USERNAME = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("DBPASSWORD") )
           {
               GLB.PASSWORD = AfterWord.trim();
               if (GLB.PASSWORD.trim().toUpperCase().equals("$(PWD)")==true)
               {
                  GLB.PASSWORD = "$(PWD)";
               }
           }
           else if (BeforeWord.trim().toUpperCase().equals("AUDITSESSION") )
		   {
        	    if (AfterWord.trim().toUpperCase().equals("TRUE") )
                {
            	    GLB.AUDITJOB = true;
        	    }
                else
                {
                    GLB.AUDITJOB = false;
                }
    	  }
          /*else if (BeforeWord.trim().toUpperCase().equals("AUDITONCLIENT") )
            {
               if (AfterWord.trim().toUpperCase().equals("TRUE") )
                  wAuditOnClient = true;
               else
                  wAuditOnClient = false;
            }
          */
          else if (BeforeWord.trim().toUpperCase().equals("CLONEAPP") )
            {
               if (AfterWord.trim().toUpperCase().equals("TRUE") )
                  GLB.CLONEAPP = true;
               else
                  GLB.CLONEAPP = false;
            }
          else if (BeforeWord.trim().toUpperCase().equals("CLONERTS") )
            {
               if (AfterWord.trim().toUpperCase().equals("TRUE") )
                  GLB.CLONERTS = true;
               else
                  GLB.CLONERTS = false;
            }
          else if (BeforeWord.trim().toUpperCase().equals("DBTYPE") )
          {
              GLB.DBTYPE = AfterWord.trim();
          }
    }  // fim if externo

  }
  catch (Exception e)
  {
      //ShowErrorMsg (e,"GetSetupOptions");
  }
}

public RCLIEN (
      String pInitStn, String pParam, String pAppIniPath)
{
    try
	{   // Default Values
	    GLB.FILESDIR = "FILES";
        GLB.AUDITDIR = "AUDIT";
        GLB.BACKUPDIR = "BACKUP";
        GLB.DOCDIR = "DOC";
        GLB.ICONSDIR = "ICONS";
        GLB.TEMPDIR = "TEMP";
        GLB.MSGSDIR = "MSGS";
        GLB.BATCHDIR = "BATCH";
        GLB.EXTRACTSDIR = "EXTRACTS";
        GLB.CLONEAPPDIR = "PACKAGE";
        GLB.CLONERTSDIR = "RTSPACKAGE";
        GLB.STN  = "XSEED";
        GLB.USERCODE = "XSEED";
		
        GLB.INITSTN = pInitStn;
        GLB.PARAM = pParam;
        readAppIni(pAppIniPath);

    }
    catch(Exception e)
    {
    }
}

public void remote (String pInitStn, String pParam, String pAppIniPath, String pDevice)
{
    try
	{   // Default Values
	    GLB.FILESDIR = "FILES";
        GLB.AUDITDIR = "AUDIT";
        GLB.BACKUPDIR = "BACKUP";
        GLB.DOCDIR = "DOC";
        GLB.ICONSDIR = "ICONS";
        GLB.TEMPDIR = "TEMP";
        GLB.MSGSDIR = "MSGS";
        GLB.BATCHDIR = "BATCH";
        GLB.EXTRACTSDIR = "EXTRACTS";
        GLB.CLONEAPPDIR = "PACKAGE";
        GLB.CLONERTSDIR = "RTSPACKAGE";
        GLB.STN  = "XSEED";
        GLB.USERCODE = "XSEED";
		
        GLB.INITSTN = pInitStn;
        GLB.PARAM = pParam;
        GLB.DEVICE = pDevice;
        readAppIni(pAppIniPath);

    }
    catch(Exception e)
    {
    }
}

private void readWFL(String pWFLFile)
       throws Exception
{
    try
    {
        String WFLLine;
        File  WFLFile = new File(pWFLFile);
        FileInputStream   WFLstream = new FileInputStream(pWFLFile);
        BufferedReader    WFLreader = new BufferedReader(new InputStreamReader(WFLstream));
        WFLLine = "";
        while (WFLLine != null)
        {   WFLLine = WFLreader.readLine();
            if (WFLLine != null)
            {
              getWFLOptions(WFLLine);
            }
        }
        WFLreader = null;
        WFLstream = null;
        WFLFile = null;
        GLB.BDSUFFIX = GLB.PID + "_" + GLB.BDSUFFIX;
   }
   catch (Exception e)
   {
      ShowErrorMsg (e,"readWFL");
   }
}

private void getWFLOptions(String pLine)
    throws Exception
{
    try
    {
        String BeforeWord;
        String AfterWord;
        int i;
        i = pLine.indexOf(";");
        if (i == -1)
        {
           i = pLine.indexOf("=");
        }
        if (i != -1)
        {
            BeforeWord = pLine.substring(0, i).trim().toUpperCase();
            AfterWord = pLine.substring(i + 1).trim();   	          	           	

            if (BeforeWord.equals("ACCEPTFILE") )
                GLB.ACCEPTFILE = AfterWord;
           	               	
            else if (BeforeWord.equals("LOG") )
                GLB.AUDITACT = AfterWord;

            else if (BeforeWord.equals("BDNAME") )
                GLB.BDNAME = AfterWord;

            else if ( (BeforeWord.equals("PRINTDIR")) || (BeforeWord.equals("BACKUPDIR")) || (BeforeWord.equals("BACKUPPATH")))
                GLB.BACKUPDIR = AfterWord;

            else if (BeforeWord.equals("PID") )
                GLB.PID = AfterWord;

            else if (BeforeWord.equals("SUFFIX") )
                GLB.BDSUFFIX = AfterWord;

            else if (BeforeWord.equals("INITSTN") )
                GLB.INITSTN = AfterWord;

            else if (BeforeWord.equals("USERCODE") )
                GLB.USERCODE = AfterWord;

            else if (BeforeWord.equals("PRINT") )
                GLB.TITLE = AfterWord;
            else if (BeforeWord.equals("PRINTA") )
                GLB.TITLEA = AfterWord;
            else if (BeforeWord.equals("PRINTB") )
                GLB.TITLEB = AfterWord;
            else if (BeforeWord.equals("PRINTC") )
               	GLB.TITLEC = AfterWord;
            else if (BeforeWord.equals("PRINTD") )
                GLB.TITLED = AfterWord;
            else if (BeforeWord.equals("PRINTE") )
                GLB.TITLEE = AfterWord;
            else if (BeforeWord.equals("PRINTF") )
                GLB.TITLEF = AfterWord;
            else if (BeforeWord.equals("PRINTG") )
                GLB.TITLEG = AfterWord;
            else if (BeforeWord.equals("PRINTH") )
                GLB.TITLEH = AfterWord;
            else if (BeforeWord.equals("PRINTI") )
                GLB.TITLEI = AfterWord;
            else if (BeforeWord.equals("PRINTJ") )
                GLB.TITLEJ = AfterWord;
            else if (BeforeWord.equals("PRINTK") )
                GLB.TITLEK = AfterWord;
            else if (BeforeWord.equals("PRINTL") )
                GLB.TITLEL = AfterWord;
            else if (BeforeWord.equals("PRINTM") )
                GLB.TITLEM = AfterWord;
            else if (BeforeWord.equals("PRINTN") )
               	GLB.TITLEN = AfterWord;
            else if (BeforeWord.equals("PRINTO") )
               	GLB.TITLEO = AfterWord;
            else if (BeforeWord.equals("PRINTP") )
               	GLB.TITLEP = AfterWord;
            else if (BeforeWord.equals("PRINTQ") )
               	GLB.TITLEQ = AfterWord;
            else if (BeforeWord.equals("PRINTR") )
            	GLB.TITLER = AfterWord;
            else if (BeforeWord.equals("PRINTS") )
               	GLB.TITLES = AfterWord;
            else if (BeforeWord.equals("PRINTT") )
               	GLB.TITLET = AfterWord;
            else if (BeforeWord.equals("PRINTU") )
               	GLB.TITLEU = AfterWord;
            else if (BeforeWord.equals("PRINTV") )
               	GLB.TITLEV = AfterWord;
            else if (BeforeWord.equals("PRINTW") )
               	GLB.TITLEW = AfterWord;
            else if (BeforeWord.equals("PRINTX") )
               	GLB.TITLEX = AfterWord;
            else if (BeforeWord.equals("PRINTY") )
               	GLB.TITLEY = AfterWord;
            else if (BeforeWord.equals("PRINTZ") )
               	GLB.TITLEZ = AfterWord;

            else if (BeforeWord.equals("FILEA") )
               	GLB.EXA_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEB") )
               	GLB.EXB_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEC") )
               	GLB.EXC_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILED") )
               	GLB.EXD_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEE") )
               	GLB.EXE_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEF") )
            	GLB.EXF_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEG") )
               	GLB.EXG_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEH") )
               	GLB.EXH_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEI") )
               	GLB.EXI_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEJ") )
               	GLB.EXJ_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEK") )
               	GLB.EXK_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEL") )
            	GLB.EXL_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEM") )
               	GLB.EXM_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEN") )
               	GLB.EXN_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEO") )
               	GLB.EXO_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEP") )
               	GLB.EXP_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEQ") )
               	GLB.EXQ_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILER") )
            	GLB.EXR_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILES") )
               	GLB.EXS_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILET") )
               	GLB.EXT_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEU") )
               	GLB.EXU_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEV") )
               	GLB.EXV_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEW") )
               	GLB.EXW_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEX") )
               	GLB.EXX_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEY") )
               	GLB.EXY_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEZ") )
               	GLB.EXZ_XSEEDTITLE = AfterWord;

    }  // fim if externo

  }
  catch (Exception e)
  {
      ShowErrorMsg (e,"GetWFLOptions");
  }
}

private void readXseedIni()
       throws Exception
{
    try
    {   GLB.APPNAME = XseedINI.getAppName();
        GLB.AUDITDIR = XseedINI.getAuditPath();	
        GLB.BACKUPDIR = XseedINI.getBackupPath();
        GLB.BATCHDIR = XseedINI.getBatchPath();		
        if (XseedINI.getCloneApp().equals("TRUE") == true)
        {	GLB.CLONEAPP = true;		
        }
        else
        {	GLB.CLONEAPP = false;
        }
        GLB.CLONEAPPDIR = XseedINI.getCloneAppPath();
        if (XseedINI.getCloneRts().equals("TRUE") == true)
        {	GLB.CLONERTS = true;		
        }
        else
        {	GLB.CLONERTS = false;
        }		
        GLB.CLONERTSDIR = XseedINI.getCloneRtsPath();		
        GLB.DBNAME = XseedINI.getDBName();
        GLB.PASSWORD = XseedINI.getDBPassword();		
        GLB.USERNAME = XseedINI.getDBUsername();
        GLB.DOCDIR =  XseedINI.getDocPath();
        GLB.DSN =  XseedINI.getDSN();
        GLB.EXTRACTSDIR = XseedINI.getExtractsPath();
        GLB.FILESDIR =  XseedINI.getFilesPath();
        GLB.FIREUPISPEC = XseedINI.getFireupIspec();
        GLB.ICONSDIR = XseedINI.getIconsPath();
        GLB.MSGSDIR = XseedINI.getMsgsPath();
        GLB.MSGTIMER = (short)Integer.parseInt(XseedINI.getMsgTimer(),10);
        GLB.SERVER = XseedINI.getServer();		
        GLB.SYSTEMDIR = XseedINI.getSystemPath();
        GLB.STN  = XseedINI.getSTN();
        GLB.TARGETOS = XseedINI.getTargetOS();
        GLB.TEMPDIR = XseedINI.getTempPath();
        GLB.USERCODE = XseedINI.getUserCode();
        GLB.DBTYPE = XseedINI.getDBType();
   }
   catch (Exception e)
   {
      ShowErrorMsg (e,"readXseedIni");
   }
}


public RCLIEN (
     String pWFLFile)
{
    try
    {   // Default Values
		
        GLB.FILESDIR = "FILES";
        GLB.AUDITDIR = "AUDIT";
        GLB.BACKUPDIR = "BACKUP";
        GLB.DOCDIR = "DOC";
        GLB.ICONSDIR = "ICONS";
        GLB.TEMPDIR = "TEMP";
        GLB.MSGSDIR = "MSGS";
        GLB.BATCHDIR = "BATCH";
        GLB.EXTRACTSDIR = "EXTRACTS";
        GLB.CLONEAPPDIR = "PACKAGE";
        GLB.CLONERTSDIR = "RTSPACKAGE";
        GLB.STN  = "XSEED";
        GLB.USERCODE = "XSEED";		
        GLB.INITSTN = "XSEED";
	GLB.WFL = true;

        readXseedIni();

        readWFL(pWFLFile);

    }
    catch(Exception e)
    {
    }
}

public String getReportFilename()
{
    return(GLB.ReportFilename);
}

public String getParameters()
{
    return(GLB.PARAM);
}

public void run()
{
    try
    {
        runReport();   		
    }
    catch (Exception e)
    {
    }
}


public int runReport()
{
    try
    {
    GLB.PARAM = format(GLB.PARAM, 2000);
    GLB.REPNAME = "RCLIEN";
    if ( (GLB.LSN.trim()).equals("") == true)
    {  GLB.LSN = "0";
    }
    InitialSettings();

         AuditBOP();


    OpenPrintFiles();
    OpenFiles();

    AuditBOT();

    Logic();
    AuditEOT();

    ClosePrintFiles();


    CommitTransaction();
    CloseFiles();

    if ((((GLB.DEVICE.trim()).toUpperCase()).equals("RP") == true) || (((GLB.DEVICE.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORT == true)
        {   GLB.SHADOW = " ";
            P_PRINTER ();
        }
     }
     else if (((GLB.DEVICE.trim()).toUpperCase()).equals("VD") == true)
     {  if (GLB.INITREPORT == true)
        {   GLB.SHADOW = " ";
            P_VIDEO();
        }
     }
     else
     {   if (GLB.INITREPORT == true)
         {   GLB.SHADOW = " ";
             P_LINEPRINTER();
          }
    }

    AuditEOP();
    AuditEOJ();

    return(0);
    }
    catch (Exception e)
    {
        if (routineErrorMsg.equals("") == true)
	    { 	
	       routineErrorMsg = e.getMessage();	
	       routineErrorName = "runReport";
        }	
	
        abortTransaction(" Fatal Error on " + routineErrorName + ": " + routineErrorMsg);
	
        if (GLB.TASK==51) return (-2);
        else if (GLB.TASK==52) return (-3);
        else if (GLB.TASK==53) return (-4);
        else if (GLB.TASK==54) return (-5);
        else return(-1);
    }
}


public int runSync()
{
    try
    {

    GLB.REPNAME = "RCLIEN";
    if ( (GLB.LSN.trim()).equals("") == true)
    {  GLB.LSN = "0";
    }
    InitialSettings();

    AuditBOP();


    OpenPrintFiles();
    OpenFiles();

    AuditBOT();

    Logic();
    AuditEOT();

    ClosePrintFiles();


    CommitTransaction();
    CloseFiles();

    if ((((GLB.DEVICE.trim()).toUpperCase()).equals("RP") == true) || (((GLB.DEVICE.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORT == true)
        {   GLB.SHADOW = " ";
            P_PRINTER ();
        }
     }
     else if (((GLB.DEVICE.trim()).toUpperCase()).equals("VD") == true)
     {  if (GLB.INITREPORT == true)
        {   GLB.SHADOW = " ";
            P_VIDEO();
        }
     }
     else
     {   if (GLB.INITREPORT == true)
         {   GLB.SHADOW = " ";
             P_LINEPRINTER();
          }
    }

    AuditEOP();
    AuditEOJ();

    return(0);
    }
    catch (Exception e)
    {
        if (routineErrorMsg.equals("") == true)
	    { 	
	       routineErrorMsg = e.getMessage();	
	       routineErrorName = "runSync";
        }	
	
        abortTransaction(" Fatal Error on " + routineErrorName + ": " + routineErrorMsg);
	
        if (GLB.TASK==51) return (-2);
        else if (GLB.TASK==52) return (-3);
        else if (GLB.TASK==53) return (-4);
        else if (GLB.TASK==54) return (-5);
        else return(-1);
    }
}



private void Logic ()
    throws Exception
{
    try
    {
    GLB.DEVICE = move("VD", GLB.DEVICE, 2);
    beginPage(" ","1");
    GLB.SECURE = false;
    GLB.STATUS = CLIEN_LookupEvery();
    while (CLIEN_XSEEDEOF == false)
    {   CLIEN_LookupMoveNext();
        if (CLIEN_XSEEDEOF == true)
        {   break;
        }
        GLB.SHADOW = " ";
        P_2("PRINT.FRAME");
    }
    GLB.SHADOW = " ";
    P_3("PRINT.FRAME");
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "Logic");
    }
}

private void P_1 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_1();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_1");
    }
}
private void P_2 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GLB.TOTAL = add(cDec("1"), GLB.TOTAL, 12, 2, "SIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_2();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_2");
    }
}
private void P_3 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F3_F3TOTAL = move (GLB.TOTAL, F3_F3TOTAL, 5, 0,"UNSIGNED");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_3();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_3");
    }
}
private void F_1()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_1");

     }
 }
private void F_2()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_2");

     }
 }
private void F_3()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F3_1());
            P_CheckPage();
            GLB.LP.println(F3_2());
            P_CheckPage();
            GLB.LP.println(F3_3());
        }
    F3_F3TOTAL = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_3");

     }
 }

private void P_BEGINPAGE ()
    throws Exception
{
    try
    {
    if (GLB.SHADOW.trim().equals("") == true)
    {   if (GLB.INITREPORT == true)
        {   if (GLB.INITHEADER.equals("TRUE") == true)
            {   printPageMark(GLB.LP, GLB.PAGEMARK);
                GLB.PRINT_XSEEDWRITES = GLB.PRINT_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORT = true;
        }
        GLB.INITHEADER = "TRUE";
        GLB.PAGECOUNT = GLB.PAGECOUNT + 1;
        GLB.LINECOUNT = 0;
        GLB.ADVANCE = false;
    }
         if (GLB.BP_INDEX != 0)
         {
            for (int I = 1; I <= GLB.BP_INDEX; I++)
            {
	            if (GLB.BP[I][SHADOW].equals(GLB.SHADOW) == true)
	            {
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("1") == true)
    {    P_1("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("2") == true)
    {    P_2("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("3") == true)
    {    P_3("PRINT.FRAME");
    }
                }
            }
         }

         if (GLB.SHADOW.trim().equals("") == true)
         {
            GLB.LINECOUNT = GLB.LINECOUNT + 1;
         }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "BeginPage");
    }
}

private void P_CheckPage ()
  throws Exception
{
    if (GLB.INITREPORT == false)
    {
        if ( GLB.LP_XSEEDTITLE != null  && GLB.LP_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LP = new PrintStream(new FileOutputStream(GLB.LP_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LP_XSEEDTITLE = newBackup(GLB.TITLE,"");
            GLB.LP = new PrintStream(new FileOutputStream(GLB.LP_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNT = GLB.LINECOUNT + 1;
    if (GLB.LINECOUNT > GLB.FORMDEPTH || GLB.ADVANCE == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORT = true;
    GLB.PRINT_XSEEDWRITES= GLB.PRINT_XSEEDWRITES + 1;
}

private void P_LINEPRINTER()
    throws Exception
{
    try
    {

    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_LINEPRINTER");
    }
}

private void P_VIDEO ()
    throws Exception
{
    try
    {
         if ((GLB.SHADOW.trim().equals("")==true))
         {
            GLB.WTITLE = GLB.LP_XSEEDTITLE;
         }

         GLB.ReportFilename = GLB.WTITLE;
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_VIDEO");
    }
}

private void P_PRINTER ()
    throws Exception
{
    try

    {
        double wNumcopies = 0;
        String wPrinter = "";
        String wFormId = "";

        GLB.SAVCOPIES = GLB.NUMCOPIES;
        if ((GLB.SHADOW.trim().equals("")==true))
        {
           GLB.WTITLE = GLB.LP_XSEEDTITLE;
           GLB.WSTATION = GLB.STATION;
           wNumcopies = GLB.NUMCOPIES;
           wFormId = GLB.FORMID;
           if (GLB.PRINTER.equals("") == false)
           {
              wPrinter = GLB.PRINTER;
           }
           else if (GLB.STATION.equals("") == false)
           {
              wPrinter = GLB.STATION;
           }
        }
        xseedSpool(wPrinter, GLB.WTITLE, cStr(wNumcopies), wFormId);
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_PRINTER");;
    }
}

private void P_InitialValues ()
    throws Exception
{
    F3_F3TOTAL = 0;
}

private void OpenPrintFiles()
    throws Exception
{
    try
    {

        createUserTempDir();



    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "OpenPrintFiles");;
    }
}

private void ClosePrintFiles()
    throws Exception
{
    try
    {
        if (GLB.INITREPORT == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LP.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LP_XSEEDTITLE);
            }
            GLB.LP.close();
            AuditMSG("Close (" + GLB.LP_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINT_XSEEDWRITES));
        }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "ClosePrintFiles");;
    }
}

private void OpenFiles()
throws Exception
{   try
    {
       if (GLB.DSN.trim().equals("") == true)
       {
           GLB.DSN = "LINCE";
       }
       Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
       GLB.CONNECTION = DriverManager.getConnection("jdbc:sqlserver://" + GLB.SERVER + ":1433;SelectMethod=cursor;User=" + GLB.USERNAME + ";PassWord=" + GLB.PASSWORD + ";DataBaseName="  + GLB.DSN);
       GLB.CONNECTION.setAutoCommit(false);
       CLIEN_CON = GLB.CONNECTION;
       CLIEN_CON.setAutoCommit(false);
       CLIEN_InitFile();
    }
    catch(SQLException e)
    {   ShowDataMsg(e, "OpenFiles","");
    }
    catch(ClassNotFoundException e)
    {   ShowErrorMsg (e,"OpenFiles");
    }
}

private void CloseFiles()
   throws Exception
{
   try
   {
        if (CLIEN_TAB!=null)
        {
            CLIEN_TAB.close();
            CLIEN_TAB = null;
        }
        if (CLIEN_CMD!=null)
        {
            CLIEN_CMD.close();
            CLIEN_CMD = null;
        }
        if (XSEED_SQL!=null)
        {
            XSEED_SQL.close();
            XSEED_SQL = null;
        }
        if (XSEED_CMD!=null)
        {
            XSEED_CMD.close();
            XSEED_CMD = null;
        }
        if (GLB.CALLABLECMD != null)
        {
           GLB.CALLABLECMD.close();
           GLB.CALLABLECMD=null;
        }
        GLB.CONNECTION.close();
    }
    catch(SQLException e)
    {
        ShowDataMsg(e,"CloseFiles","");
    }
}

private String CLIEN_LookupEvery()
   throws Exception
{   String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CLIEN_XSEEDEOF = false;
        CLIEN_XSEEDSEEK = true;
        sqlCommand = "select  " + ODBC_CLIEN_FIELDS + "  from CLIEN with (NOLOCK INDEX=FCODCLI) ";
        sqlCommand = sqlCommand + " ORDER BY CODCLI ASC ";
        if (CLIEN_CMD == null)
        {   CLIEN_CMD = CLIEN_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CLIEN_TAB != null)
        {   CLIEN_TAB.close();
        }
        CLIEN_TAB = CLIEN_CMD.executeQuery(sqlCommand);
        if (CLIEN_TAB.next())
        {   xsdStatus = "";
            CLIEN_TableToFile();
        }
        else
        {   CLIEN_XSEEDEOF = true;
        }
        return(xsdStatus);
       }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CLIEN_LookupEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CLIEN_LookupMoveNext()
   throws Exception
{   try
    {
        if (CLIEN_XSEEDEOF == true)
        {   return;
        }
        if (CLIEN_XSEEDSEEK == false)
        {   if (CLIEN_TAB.next())
            {    CLIEN_TableToFile();
            }
            else
            {   CLIEN_XSEEDEOF = true;
            }
         }
         else
         {    CLIEN_XSEEDSEEK = false;
         }
    }
    catch (SQLException e)
    {
     ShowDataMsg(e,"CLIEN_LookupMoveNext", "");
    }
}
private void CLIEN_InitFile()
{
    CLIEN_CODCLI = 0;
    CLIEN_MAINT = "";
}
private void CLIEN_TableToFile ()
  throws Exception
{   try
    {
        if (CLIEN_XSEEDEOF == true)
        {    return;
        }
       CLIEN_CODCLI = CLIEN_TAB.getDouble("CODCLI");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CLIEN_TableToFile","");
    }
}


private void P_InitialValuesGSD()
    throws Exception
{
    try
    {
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_InitialValuesGSD");;
    }
}



private void InitialSettings()
    throws Exception
{
    try
    {
        GLB.RANDOM = 2729;
        GLB.APPNAME = "LINCE";
        GLB.DBTITLE = GLB.FILESDIR.trim() + File.separatorChar + "LINCE.MDB";
        GLB.BASE = 1957;
        GLB.CENTURY = Double.parseDouble(String.valueOf(GLB.BASE).substring(0,2).trim());
        GLB.DCTYPE = "UK";
        GLB.CONSOLE = false;
         GLB.STATION = GLB.STN;
         GLB.DEVICE = GLB.DEVICE.trim();

         if ( (GLB.DEVICE.equals("LP") == false) &&
              (GLB.DEVICE.equals("RP") == false) &&
              (GLB.DEVICE.equals("TP") == false) &&
              (GLB.DEVICE.equals("VD") == false) )
         {
            GLB.DEVICE = "LP";
         }

         P_InitialValues();
         P_InitialValuesGSD();

         initBPArray ();

         currentDate();

    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "InitialSettings");;
    }
}

private void abortTransaction(String msg)
{
    try
    {
        GLB.ABORT = true;
        ClosePrintFiles();
        AuditERR(msg);
        RollBackTransaction();
        CloseFiles();
        if (GLB.TASK == 0) {
            GLB.TASK = 1.0;
        }

    }
    catch (Exception e)
    {	if (GLB.TASK == 0) {
            GLB.TASK = 1.0;
        }
        /* do not throw exception! */
    }
}


public String getGlbParam ()
   throws Exception
{   try
    {   return(GLB.PARAM);
    }
    catch (Exception e)
    {
        ShowErrorMsg(e, "getGlbParam");
        return("");
    }
}

public void setGlbParam (String pParam)
   throws Exception
{   try
    {   GLB.PARAM = move(pParam, GLB.PARAM , 2000);
        GLB.PARAM = format(GLB.PARAM , 2000);
    }
    catch (Exception e)
    {
        ShowErrorMsg(e, "setGlbParam");
    }
}
public double getGlbTask ()
   throws Exception
{   try
    {   return(GLB.TASK);
    }
    catch (Exception e)
    {
        ShowErrorMsg(e, "getGlbTask");
        return(0.0);
    }
}

public String getGlbRepStatus ()
   throws Exception
{   try
    {   return(GLB.REPSTATUS);
    }
    catch (Exception e)
    {
        ShowErrorMsg(e, "getGlbRepStatus");
        return("");
    }
}


private void P_STDONCHANGE()
  throws Exception
{
    BigDecimal avg = bigZeros;
}

}
