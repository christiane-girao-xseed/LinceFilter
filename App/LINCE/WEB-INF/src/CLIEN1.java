// Generated by Xseed Version 9.5.65 ( Date: 18/11/2020 08:34:4343 hs  User: DEFAULT )
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import java.util.zip.*;
import java.math.*;
import java.lang.reflect.*;
import HLegacy.*;


public class CLIEN extends XseedIspec
{
Integer cycleCounter;
String runQueueNumber = "";
PrintWriter outHTML;


final String LAN_INVALIDMAINT           = "Invalid maintenance field.";
final String LAN_INVALIDINCLUSION       = "Invalid Add. Item already exists.";
final String LAN_SUCCESSINCLUSION       = "Successful Add.";
final String LAN_INVALIDMODIFY          = "Invalid Change. Item does not exist.";
final String LAN_SUCCESSMODIFY          = "Successful Change.";
final String LAN_INVALIDDELETE          = "Invalid Delete. Item does not exist.";
final String LAN_SUCCESSDELETE          = "Successful Delete.";
final String LAN_INVALIDPURGE           = "Invalid Purge. Item does not exist.";
final String LAN_SUCCESSPURGE           = "Successful Purge.";
final String LAN_INVALIDCONSULT         = "Inquiry not executed. Item does not exist.";
final String LAN_SUCCESSCONSULT         = "Successful Inquiry.";
final String LAN_DELETEDITEM            = "Inquiry executed. Item logically deleted.";
final String LAN_LOGICALLYDELETED       = "Inquiry not executed. Item logically deleted.";
final String LAN_FILLORDINATE           = "Ordinate must be entered.";
final String LAN_INQATENDOFLG           = "INQ not allowed at the end of LG.";
final String LAN_ITEMNOTREC             = "Item not registered on Ispec";
final String LAN_ITEMDELETED            = "Item logically deleted on Ispec";
final String LAN_ITEMMUSTBEFILLED       = "Item must be filled";
final String LAN_INVALIDDATE            = "Invalid Date";
final String LAN_ISPECNOTDEFINED        = "Ispec not defined";
final String LAN_REPORTNOTDEFINED       = "Report not defined";
final String LAN_INVALIDVALUE           = "Invalid numeric value on field ";
final String LAN_INVALIDNUMERIC         = "Invalid char in numeric fields.";
final String MSG_SUCCESSFULL_ENTRY      = "Successfull entry";
final String MSG_ORDINATE_REQUIRED      = "Ordinated required";
final String MSG_INVALIDKEYF11          = "The key F11 is disabled.";
final String MSG_INVALIDKEYALTLEFT      = "The key ALT <- is disabled.";
final String MSG_INVALIDKEYALTRIGHT     = "The key ALT -> is disabled.";
final String MSG_INVALIDKEYCTRLN        = "The key CTRL-N is disabled.";
final String MSG_INVALIDKEYCTRLU        = "The key CTRL-U is disabled.";
final String MSG_MANYDECIMALS           = " too many decimals on field ";
final String MSG_MANYNUMBER             = " numeric value too large on field ";
final String MSG_XMITERROR              = "Page already submitted. Wait ... ";
final String MSG_GOBACK                 = "Go Back";
final String MSG_INVALIDDCT             = "Invalid Value";
final String MSG_WAITXMIT               = "Transmitting the screen. Wait ... ";
final String MSG_REQUIREDDECIMALCHAR    = " decimal separator is required on field ";
final String ODBC_CLIEN_FIELDS = "CODCLI,ENDCLI,MAINT,NOMCLI";
// Defining Table Itens
double CLIEN_CODCLI;
String CLIEN_ENDCLI;
String CLIEN_MAINT;
String CLIEN_NOMCLI;
// Defining Table Work Itens
String CLIEN_XSEEDTITLE;
String CLIEN_XSEEDSTATUS;
boolean CLIEN_XSEEDEOF;
boolean CLIEN_XSEEDSEEK;
ResultSet CLIEN_TAB;
Connection  CLIEN_CON;
Statement CLIEN_CMD;
double SCREEN_CODCLI = 0;
String SCREEN_NOMCLI = "";
String SCREEN_ENDCLI = "";
String SCREEN_XSEEDMSG = "";
String SCREEN_MAINT = "ADD";

public void doGet(HttpServletRequest  request,
                  HttpServletResponse response)
       throws ServletException, IOException
{
    doPost(request,response);
}

public void doPost(HttpServletRequest request,
                   HttpServletResponse response)
       throws ServletException, IOException
{
CLIEN ispecCLIEN = new CLIEN();
try
{
    response.setContentType("text/html");
    setNoCache(request,response);
    ispecCLIEN.session = request.getSession(true);
    ispecCLIEN.request = request;
    ispecCLIEN.response = response;
    ispecCLIEN.ISPEC = "CLIEN";
    if (ispecCLIEN.checkOnXmit(ispecCLIEN.session) == true)
    {
        ispecCLIEN.BuildErrorXmit(response.getWriter());
        return;
    }

    ispecCLIEN.setOnXmit(ispecCLIEN.session);
    if (ispecCLIEN.checkTimeout(ispecCLIEN.session) == false)
    {
        ispecCLIEN.ReadClipboard(ispecCLIEN.session);
        ispecCLIEN.OpenFiles();
        if (request.getParameter("onSession")==null)
        {
            ispecCLIEN.IspecLoad();
        }
        else
        {
            ispecCLIEN.FormToScreen(request);
            ispecCLIEN.IspecCycle();
        }
        ispecCLIEN.WriteClipboard(ispecCLIEN.session);
        ispecCLIEN.CommitTransaction();
        ispecCLIEN.ispecRecall(request,response,ispecCLIEN.session);
        ispecCLIEN.CommitTransaction();
        ispecCLIEN.CloseFiles();
    }
    else
    {
        ispecCLIEN.GLB.TIMEOUTACTION = "app";
        ispecCLIEN.BuildPageTimeout(response.getWriter());
    }
    ispecCLIEN.resetOnXmit(ispecCLIEN.session);

}
catch (Exception e)
{
    if (ispecCLIEN.GLB.ABORT == true)
    {
        try
        {
        ispecCLIEN.FormToScreen(request);
        ispecCLIEN.CommitTransaction();
        ispecCLIEN.ispecRecall(request,response,ispecCLIEN.session);
        ispecCLIEN.CommitTransaction();
        ispecCLIEN.CloseFiles();
        ispecCLIEN.resetOnXmit(ispecCLIEN.session);
        }
        catch (Exception eAbort)
        {
           if (ispecCLIEN.routineErrorMsg.equals("") == true)
           {
              ispecCLIEN.routineErrorMsg = eAbort.getMessage();
              ispecCLIEN.routineErrorName = "doPost";
           }

           ispecCLIEN.AbortTransaction(ispecCLIEN.routineErrorMsg);
           try
           {
              ispecCLIEN.CloseFiles();
           }
           catch (Exception exc) { }
           ispecCLIEN.BuildErrorPage(response.getWriter(), ispecCLIEN.routineErrorName, ispecCLIEN.routineErrorMsg);
           ispecCLIEN.resetOnXmit(ispecCLIEN.session);

        }
    }
    else
    {
       if (ispecCLIEN.routineErrorMsg.equals("") == true)
       {
          ispecCLIEN.routineErrorMsg = e.getMessage();
          ispecCLIEN.routineErrorName = "doPost";
       }

       ispecCLIEN.AbortTransaction(ispecCLIEN.routineErrorMsg);
       try
       {
          ispecCLIEN.CloseFiles();
       }
       catch (Exception exc) { }
       ispecCLIEN.BuildErrorPage(response.getWriter(), ispecCLIEN.routineErrorName, ispecCLIEN.routineErrorMsg);
       ispecCLIEN.resetOnXmit(ispecCLIEN.session);
    }
}
}

private void setNoCache(HttpServletRequest request,HttpServletResponse response)
{
    if (request.getProtocol().compareTo("HTTP/1.0") == 0)
    {
        response.setHeader("Pragma", "no-cache");
    }
    else if (request.getProtocol().compareTo("HTTP/1.1") == 0)
    {
        response.setHeader("Cache-Control", "no-cache");
    }
}

public void BuildPage (PrintWriter out, HttpServletRequest request)
  throws Exception
{
   try
   {
      AuditSCR("OUT");
      int i = 0;
      int index = 0;


      out.println("<HTML>");
      out.println("<HEAD>");
      out.println("<style type=\"Text/css\">");
      out.println("SPAN {");
      out.println("   font-family: VERDANA;");
      out.println("   font-size: 8pt;");
      out.println("   background-color: #FFFFFF;");
      out.println("   color: #000000;");
      out.println("   text-align:left");
      out.println("}");
      out.println("BODY {");
      out.println("   background-color: #FFFFFF;");
      out.println("}");
      out.println("INPUT {");
      out.println("   font-family: VERDANA;");
      out.println("   font-size: 8pt;");
      out.println("   text-align:left");
      out.println("}");
      out.println("BUTTON {");
      out.println("   font-family: VERDANA;");
      out.println("   font-size: 8pt;");
      out.println("   padding:0px;");
      out.println("   margin:0px;");
      out.println("}");
      out.println("SELECT {");
      out.println("   font-family: VERDANA;");
      out.println("   font-size: 8pt;");
      out.println("}");
      out.println("TABLE {");
      out.println("   font-family: VERDANA;");
      out.println("   font-size: 8pt;");
      out.println("   background-color: #FFFFFF;");
      out.println("}");
      out.println("FIELDSET {");
      out.println("   font-family: VERDANA;");
      out.println("   font-size: 8pt;");
      out.println("   background-color: #FFFFFF;");
      out.println("   color: #000000;");
      out.println("   padding:0px;");
      out.println("   margin:0px;");
      out.println("}");
      out.println("LEGEND {");
      out.println("   font-family: VERDANA;");
      out.println("   font-size: 8pt;");
      out.println("   background-color: #FFFFFF;");
      out.println("   color: #000000;");
      out.println("}");
      out.println("#idLBLINCLUDE{position:absolute;top:0px;left:136px;width:54px;height:17px;cursor:pointer;cursor:hand;font-weight:bold;color:800000;background-color:DFDFDF;}");
      out.println("#idLBLMODIFY{position:absolute;top:0px;left:192px;width:54px;height:17px;cursor:pointer;cursor:hand;font-weight:bold;color:800000;background-color:DFDFDF;}");
      out.println("#idLBLDELETE{position:absolute;top:0px;left:248px;width:54px;height:17px;cursor:pointer;cursor:hand;font-weight:bold;color:800000;background-color:DFDFDF;}");
      out.println("#idLBLINQUIRY{position:absolute;top:0px;left:304px;width:54px;height:17px;cursor:pointer;cursor:hand;font-weight:bold;color:800000;background-color:DFDFDF;}");
      out.println("#idLBLFIRST{position:absolute;top:0px;left:360px;width:54px;height:17px;cursor:pointer;cursor:hand;font-weight:bold;color:800000;background-color:DFDFDF;}");
      out.println("#idLBLNEXT{position:absolute;top:0px;left:416px;width:54px;height:17px;cursor:pointer;cursor:hand;font-weight:bold;color:800000;background-color:DFDFDF;}");
      out.println("#idLBLBACK{position:absolute;top:0px;left:472px;width:54px;height:17px;cursor:pointer;cursor:hand;font-weight:bold;color:800000;background-color:DFDFDF;}");
      out.println("#idLBLLAST{position:absolute;top:0px;left:528px;width:54px;height:17px;cursor:pointer;cursor:hand;font-weight:bold;color:800000;background-color:DFDFDF;}");
      out.println("#idLBLREFRESH{position:absolute;top:0px;left:584px;width:54px;height:17px;cursor:pointer;cursor:hand;font-weight:bold;color:800000;background-color:DFDFDF;}");
      out.println("#idLBLBAR{position:absolute;top:0px;left:640px;width:124px;height:17px;color:800000;background-color:DFDFDF;}");
      out.println("#idMAINT{position:absolute;top:38px;left:584px;width:40px;height:19px;visibility:Hidden;}");
      out.println("#idLB_CODCLI{position:absolute;top:76px;left:136px;width:80px;height:19px;}");
      out.println("#idCODCLI{position:absolute;top:76px;left:216px;width:56px;height:19px;text-align:right;}");
      out.println("#idLB_NOMCLI{position:absolute;top:95px;left:136px;width:80px;height:19px;}");
      out.println("#idNOMCLI{position:absolute;top:95px;left:216px;width:256px;height:19px;}");
      out.println("#idLB_ENDCLI{position:absolute;top:114px;left:136px;width:80px;height:19px;}");
      out.println("#idENDCLI{position:absolute;top:114px;left:216px;width:256px;height:19px;}");
      out.println("#idXSEEDMSG{position:absolute;top:418px;left:152px;width:626px;height:17px;font-weight:bold;border:0;color:FF0000;}");
      out.println("</style>");
      out.println("<TITLE>TESTE</TITLE>");
      out.println("<script language = \"JavaScript\">");
      out.println("var flagEnter = 999");
      out.println("var flagTxt = 0");
      out.println("function jKeyPress(pEvent)");
      out.println("{");
      out.println("    var mNavigator = window.navigator.appName;");
      out.println("    var isIE = mNavigator.match(/Microsoft/gi);");
      out.println("    var isFF = mNavigator.match(/Netscape/gi);");
      out.println("    var evt;");
      out.println("    if (isIE) evt = pEvent.keyCode;");
      out.println("    else if (isFF) evt = pEvent.charCode;");
      if (GLB.DecimalChar==',')
          out.println("    return ( (evt<20) || (evt >47 && evt<58) || (evt==44) );");
      else
          out.println("    return ( (evt<20) || (evt >47 && evt<58) || (evt==46) );");
      out.println("}");
      out.println("function jFocusA(pObj)");
      out.println("{ pObj.select();");
      out.println("}");
      out.println("function jFocusN(pObj)");
      out.println("{ if (pObj.value == 0)");
      out.println("    pObj.value =\"\";");
      out.println("  pObj.select();");
      out.println("}");
      out.println("function jBlurN(pObj)");
      out.println("{ if (pObj.value == \"\")");
      out.println("    pObj.value = 0;");
      out.println("}");
      out.println("function LBLINCLUDE_OnClick()");
      out.println("{");
      out.println("  var obj = document.getElementById(\"idMAINT\");");
      out.println("  if( ( obj != null ) && ( obj.tagName == \"INPUT\") ) {");
      out.println("     frmCLIEN.MAINT.value = \"ADD\";");
      out.println("  } ");
      out.println("  jXmit();");
      out.println("}");
      out.println("function LBLMODIFY_OnClick()");
      out.println("{");
      out.println("  var obj = document.getElementById(\"idMAINT\");");
      out.println("  if( ( obj != null ) && ( obj.tagName == \"INPUT\") ) {");
      out.println("     frmCLIEN.MAINT.value = \"CHG\";");
      out.println("  } ");
      out.println("  jXmit();");
      out.println("}");
      out.println("function LBLDELETE_OnClick()");
      out.println("{");
      out.println("  var obj = document.getElementById(\"idMAINT\");");
      out.println("  if( ( obj != null ) && ( obj.tagName == \"INPUT\") ) {");
      out.println("     frmCLIEN.MAINT.value = \"DEL\";");
      out.println("  } ");
      out.println("  jXmit();");
      out.println("}");
      out.println("function LBLINQUIRY_OnClick()");
      out.println("{");
      out.println("  var obj = document.getElementById(\"idMAINT\");");
      out.println("  if( ( obj != null ) && ( obj.tagName == \"INPUT\") ) {");
      out.println("     frmCLIEN.MAINT.value = \"REC\";");
      out.println("  } ");
      out.println("  jXmit();");
      out.println("}");
      out.println("function LBLFIRST_OnClick()");
      out.println("{");
      out.println("  var obj = document.getElementById(\"idMAINT\");");
      out.println("  if( ( obj != null ) && ( obj.tagName == \"INPUT\") ) {");
      out.println("     frmCLIEN.MAINT.value = \"FIR\";");
      out.println("  } ");
      out.println("  jXmit();");
      out.println("}");
      out.println("function LBLNEXT_OnClick()");
      out.println("{");
      out.println("  var obj = document.getElementById(\"idMAINT\");");
      out.println("  if( ( obj != null ) && ( obj.tagName == \"INPUT\") ) {");
      out.println("     frmCLIEN.MAINT.value = \"NEX\";");
      out.println("  } ");
      out.println("  jXmit();");
      out.println("}");
      out.println("function LBLBACK_OnClick()");
      out.println("{");
      out.println("  var obj = document.getElementById(\"idMAINT\");");
      out.println("  if( ( obj != null ) && ( obj.tagName == \"INPUT\") ) {");
      out.println("     frmCLIEN.MAINT.value = \"BAC\";");
      out.println("  } ");
      out.println("  jXmit();");
      out.println("}");
      out.println("function LBLLAST_OnClick()");
      out.println("{");
      out.println("  var obj = document.getElementById(\"idMAINT\");");
      out.println("  if( ( obj != null ) && ( obj.tagName == \"INPUT\") ) {");
      out.println("     frmCLIEN.MAINT.value = \"LAS\";");
      out.println("  } ");
      out.println("  jXmit();");
      out.println("}");
      out.println("function LBLREFRESH_OnClick()");
      out.println("{");
      out.println("  var obj = document.getElementById(\"idMAINT\");");
      out.println("  if( ( obj != null ) && ( obj.tagName == \"INPUT\") ) {");
      out.println("     frmCLIEN.MAINT.value = \"REF\";");
      out.println("  } ");
      out.println("  jXmit();");
      out.println("}");
      out.println("function jValN(pObj,pDad,pLength)");
      out.println("{ var i = 0;");
      out.println("  var number=\"\";");
      out.println("  newWord = pObj.value;");
      out.println("  for (i = 0; i < newWord.length; i++)");
      out.println("  { if (!(((newWord.charAt(i) >= \"0\") && (newWord.charAt(i) <= \"9\")) ||(newWord.charAt(i) == \"" + GLB.SeparatorChar + "\")))");
      out.println("    { alert(pObj.value + \" " + LAN_INVALIDVALUE + " \" + pDad + \".\");");
      out.println("      pObj.focus();");
      out.println("      return(false);");
      out.println("    }");
      out.println("  }");
      out.println("  for(i =0; i < newWord.length; i++)");
      out.println("  { if (newWord.charAt(i) != \"" + GLB.SeparatorChar + "\")");
      out.println("    {  number = number + newWord.charAt(i);");
      out.println("    }");
      out.println("  }");
      out.println("  if (number.length > pLength)");
      out.println("  {   alert(pObj.value + \"" + MSG_MANYNUMBER + "\" + pDad + \".\");");
      out.println("      pObj.focus();");
      out.println("      return(false);");
      out.println("  }");
      out.println("  return(true);");
      out.println("}");
      out.println("function jValDecN(pObj,pDad,pLength,pDecimals)");
      out.println("{ var i = 0;");
      out.println("  var number=\"\";");
      out.println("  newWord = pObj.value;");
      out.println("  for (i = 0; i < newWord.length; i++)");
      out.println("  { if (!(((newWord.charAt(i) >= \"0\") && (newWord.charAt(i) <= \"9\")) || (newWord.charAt(i) == \"" + GLB.DecimalChar + "\") || (newWord.charAt(i) == \"" + GLB.SeparatorChar + "\")))");
      out.println("    { alert(pObj.value + \" " + LAN_INVALIDVALUE + " \" + pDad + \".\");");
      out.println("      pObj.focus();");
      out.println("      return(false);");
      out.println("    }");
      out.println("  }");
      out.println("  for(i =0; i < newWord.length; i++)");
      out.println("  { if (newWord.charAt(i) != \"" + GLB.SeparatorChar + "\")");
      out.println("    {  number = number + newWord.charAt(i);");
      out.println("    }");
      out.println("  }");
      out.println("  if (number.indexOf(\"" + GLB.DecimalChar + "\") != -1) ");
      out.println("  {   for (i = 0; i < number.length; i++)");
      out.println("      {  if (number.charAt(i) == \"" +  GLB.DecimalChar + "\")");
      out.println("         {    if (i  >  pLength - pDecimals)");
      out.println("              {   alert(pObj.value + \"" + MSG_MANYNUMBER + "\" + pDad + \".\");");
      out.println("                  pObj.focus();");
      out.println("                  return(false);");
      out.println("              }");
      out.println("              if (number.length - i - 1 > pDecimals)");
      out.println("              {   alert(pObj.value + \"" + MSG_MANYDECIMALS + "\" + pDad + \".\");");
      out.println("                  pObj.focus();");
      out.println("                  return(false);");
      out.println("              }");
      out.println("         }");
      out.println("     }");
      out.println("  }");
      out.println("  else");
      out.println("  {");
      out.println("      if (number.length > pLength - pDecimals)");
      out.println("      {   alert(pObj.value + \"" + MSG_MANYNUMBER + "\" + pDad + \".\");");
      out.println("          pObj.focus();");
      out.println("          return(false);");
      out.println("      }");
      out.println("  }");
      out.println("  return(true);");
      out.println("}");
      out.println("function jValPag()");
      out.println("{");
      out.println("  if (jValN(frmCLIEN.CODCLI,\"CODCLI\",5) == false)");
      out.println("    return(false);");
      out.println("  return(true);");
      out.println("}");
      out.println("function jCursor ()");
      out.println("{");
      if ((rTrim(GLB.CURSOR)).toUpperCase().equals(""))
      {
         GLB.CURSOR ="CODCLI";
      }
      out.println("  if (frmCLIEN." + (rTrim(GLB.CURSOR)).toUpperCase() + ".type != \"hidden\")");
      out.println("    frmCLIEN." + (rTrim(GLB.CURSOR)).toUpperCase() + ".focus();");
      out.println("}");
      out.println("function jXmit ()");
      out.println("{ if (jValPag() == true)");
      out.println("  {");
      out.println("    frmCLIEN.XSEEDMSG.value=\"" + MSG_WAITXMIT.trim() + "\";");
      out.println("    if (frmCLIEN.__isProcessing.value == \"0\")");
      out.println("    {");
      out.println("        frmCLIEN.__isProcessing.value = \"1\";");
      out.println("        frmCLIEN.submit();");
      out.println("    }");
      out.println("    else");
      out.println("    {");
      out.println("       frmCLIEN.XSEEDMSG.value=\"" + MSG_XMITERROR.trim() + "\";");
      out.println("    }");
      out.println("  }");
      out.println("}");
      out.println("function jMaint (action)");
      out.println("{ frmCLIEN.MAINT.value = action;");
      out.println("}");
      out.println("function jOption(ControlName, CheckedValue)");
      out.println("{ var i;");
      out.println("  for (i=0; i < frmCLIEN.length; i++)");
      out.println("  { if (frmCLIEN[i].type == \"radio\")");
      out.println("    { if (frmCLIEN[i].name != ControlName)");
      out.println("      {");
      out.println("      }");
      out.println("      else");
      out.println("      { frmCLIEN[i].value = CheckedValue;");
      out.println("      }");
      out.println("    }");
      out.println("  }");
      out.println("}");
      out.println("function jKey(pEvent)");
      out.println("{");
      out.println("  if (flagEnter == 0)");
      out.println("  {");
      out.println("     flagEnter = 999;");
      out.println("     return false;");
      out.println("  }");
      out.println("  if (pEvent.keyCode == 8)");
      out.println("  {");
      out.println("     if (flagTxt == 999)");
      out.println("     {");
      out.println("        return true;");
      out.println("     }");
      out.println("     window.event.keyCode = 0;");
      out.println("     return false;");
      out.println("  }");
      out.println("  if (pEvent.keyCode == 122)");
      out.println("  {");
      out.println("     alert(\"" + MSG_INVALIDKEYF11 + "\");");
      out.println("     window.event.keyCode = 0;");
      out.println("     return false;");
      out.println("  }");
      out.println("  if (pEvent.ctrlKey && pEvent.keyCode == 85)");
      out.println("  {");
      out.println("     alert(\"" + MSG_INVALIDKEYCTRLU + "\");");
      out.println("     return false;");
      out.println("  }");
      out.println("  if (pEvent.ctrlKey && pEvent.keyCode == 78)");
      out.println("  {");
      out.println("     alert(\"" + MSG_INVALIDKEYCTRLN + "\");");
      out.println("     return false;");
      out.println("  }");
      out.println("  if (pEvent.altKey && pEvent.keyCode == 37)");
      out.println("  {");
      out.println("     alert(\"" + MSG_INVALIDKEYALTLEFT + "\");");
      out.println("     return false;");
      out.println("  }");
      out.println("  if (pEvent.altKey && pEvent.keyCode == 39)");
      out.println("  {");
      out.println("     alert(\"" + MSG_INVALIDKEYALTRIGHT + "\");");
      out.println("     return false;");
      out.println("  }");
      out.println("  if (pEvent.keyCode == 27) jMsg(false);");
      out.println("  if (pEvent.keyCode == 34) jXmit();");
      out.println("  if (pEvent.keyCode == 13) jXmit();");
      out.println("  if (pEvent.keyCode == 35) frmCLIEN.ENDCLI.focus();");
      out.println("  if (pEvent.keyCode == 36) frmCLIEN.CODCLI.focus();");
      out.println("}");
      out.println("function jMsg(pParam)");
      out.println("{ var message = \"\";");
      if ((GLB.MSGINDEX == 0) || (GLB.MSGINDEX == 1) || (GLB.MSGINDEX == -1))
      {
          out.println("  if (pParam == true)");
          out.println("  {");
          if (GLB.MSGINDEX != 0)
          {   if (GLB.MSGINDEX == -1)
              {   out.println("  frmCLIEN.XSEEDMSG.value = \"" + replaceSpecialCharacter(GLB.MSGHEADER[GLB.MSGINDEX*-1]) + " " + replaceSpecialCharacter(GLB.MSGTRAILER [GLB.MSGINDEX*-1]) + "\";");
              }
              else
              {   out.println("  frmCLIEN.XSEEDMSG.value = \"" + replaceSpecialCharacter(GLB.MSGHEADER[GLB.MSGINDEX]) + " " + replaceSpecialCharacter(GLB.MSGTRAILER [GLB.MSGINDEX]) + "\";");
              }
          }
          out.println("    return;");
          out.println("  }");
      }
      if (GLB.MSGINDEX != 0)
      {   if (GLB.MSGINDEX > 0)
          {  for (i = 1; i <= GLB.MSGINDEX; i++)
             {
                 out.println("  message = message + \""  + replaceSpecialCharacter(GLB.MSGHEADER[i].trim()) + " " + replaceSpecialCharacter(GLB.MSGTRAILER[i].trim()) + "\";");
                 if (i < GLB.MSGINDEX)
                     out.println("  message = message + \"\\n\";");
             }
          }
          else
          {  index = GLB.MSGINDEX;
             index = index * -1;
             for (i = index; i >= 1; i--)
             {
                 out.println("  message = message + \""  + replaceSpecialCharacter(GLB.MSGHEADER[i].trim()) + " " + replaceSpecialCharacter(GLB.MSGTRAILER[i].trim()) + "\";");
                 if (i > 1)
                    out.println("  message = message + \"\\n\";");
             }
          }
          out.println("  alert(message);");
      }
      else
      {
          out.println("  alert(\"No Messages found.\");");
      }
      out.println("}");
      out.println("function rTrim(value)");
      out.println("{ while(''+value.charAt(value.length-1)==' ')");
      out.println("    value=value.substring(0,value.length-1);");
      out.println("  return value;");
      out.println("}");
      out.println("function jForm()");
      out.println("{  var i;");
      if (SCREEN_MAINT.length() > 3)
         SCREEN_MAINT = SCREEN_MAINT.substring(0,3);
      out.println("  frmCLIEN.MAINT.value = \"" + rTrim(replaceSpecialCharacter(SCREEN_MAINT)) + "\";");
      out.println("  frmCLIEN.CODCLI.value = \"" + format(SCREEN_CODCLI, "#####") + "\";");
      if (SCREEN_NOMCLI.length() > 30)
         SCREEN_NOMCLI = SCREEN_NOMCLI.substring(0,30);
      out.println("  frmCLIEN.NOMCLI.value = \"" + rTrim(replaceSpecialCharacter(SCREEN_NOMCLI)) + "\";");
      if (SCREEN_ENDCLI.length() > 30)
         SCREEN_ENDCLI = SCREEN_ENDCLI.substring(0,30);
      out.println("  frmCLIEN.ENDCLI.value = \"" + rTrim(replaceSpecialCharacter(SCREEN_ENDCLI)) + "\";");
      out.println("}");
      out.println("function jRep()");
      out.println("{");
      if (GLB.ReportFilename.equals("") == false)
      {
          SimpleDateFormat wFormatter = new SimpleDateFormat("yyyyMMddHHmmssSSS");
          String wNow = wFormatter.format(new java.util.Date());
          out.println("  var reportWindow = null;");
          out.println("  reportWindow = window.open(\"XseedRoc?name="  + rTrim(replaceSpecialCharacter(GLB.ReportFilename)) + "\",\"Rep" + wNow+ "\", \"toolbar=1, menubar=1,scrollbars=1,location=0,resizable=1\");");
          out.println("  reportWindow.focus();");
      }
      out.println("}");
      out.println("function jTeach()");
      out.println("{");
      if (GLB.TEACH.equals("") == false)
      {
          out.println("  var teachWindow = null;");
          out.println("  teachWindow = window.open(\"XseedDoc\",\"Doc\", \"toolbar=0, menubar=0,scrollbars=1,location=0,resizable=1,top=50,left=150,height=450,width=615\");");
          out.println("  teachWindow.focus();");
      }
      out.println("}");
      out.println("</script>");
      out.println("</HEAD>");
      out.println("<BODY onLoad=\"jForm();jMsg(true);jCursor();jRep();jTeach();\" onkeydown=\"return(jKey(event))\" " + GLB.BODYTAG + ">");
      out.println("<FORM Name = \"frmCLIEN\" id = \"frmCLIEN\" method = \"post\" >");
      out.println("  <SPAN id=\"idLBLINCLUDE\" onClick=\"LBLINCLUDE_OnClick();\">Include</SPAN>");
      out.println("  <SPAN id=\"idLBLMODIFY\" onClick=\"LBLMODIFY_OnClick();\">Modify</SPAN>");
      out.println("  <SPAN id=\"idLBLDELETE\" onClick=\"LBLDELETE_OnClick();\">Delete</SPAN>");
      out.println("  <SPAN id=\"idLBLINQUIRY\" onClick=\"LBLINQUIRY_OnClick();\">Inquiry</SPAN>");
      out.println("  <SPAN id=\"idLBLFIRST\" onClick=\"LBLFIRST_OnClick();\">First</SPAN>");
      out.println("  <SPAN id=\"idLBLNEXT\" onClick=\"LBLNEXT_OnClick();\">Next</SPAN>");
      out.println("  <SPAN id=\"idLBLBACK\" onClick=\"LBLBACK_OnClick();\">Back</SPAN>");
      out.println("  <SPAN id=\"idLBLLAST\" onClick=\"LBLLAST_OnClick();\">Last</SPAN>");
      out.println("  <SPAN id=\"idLBLREFRESH\" onClick=\"LBLREFRESH_OnClick();\">Refresh</SPAN>");
      out.println("  <SPAN id=\"idLBLBAR\"></SPAN>");
      out.println("  <input type=\"hidden\" name=\"MAINT\" id=\"idMAINT\" onfocus=\"flagTxt=999;jFocusA(this)\" onblur=\"flagTxt=0\" maxlength=\"3\" >");
      out.println("  <SPAN id=\"idLB_CODCLI\">CODIGO</SPAN>");
      out.println("  <input type=\"text\" name=\"CODCLI\" id=\"idCODCLI\" onfocus=\"flagTxt=999;jFocusN(this)\" onblur=\"flagTxt=0;jBlurN(this)\" maxlength=\"5\" onkeypress=\"return(jKeyPress(event))\" >");
      out.println("  <SPAN id=\"idLB_NOMCLI\">NOME</SPAN>");
      out.println("  <input type=\"text\" name=\"NOMCLI\" id=\"idNOMCLI\" onfocus=\"flagTxt=999;jFocusA(this)\" onblur=\"flagTxt=0\" maxlength=\"30\" >");
      out.println("  <SPAN id=\"idLB_ENDCLI\">ENDERECO</SPAN>");
      out.println("  <input type=\"text\" name=\"ENDCLI\" id=\"idENDCLI\" onfocus=\"flagTxt=999;jFocusA(this)\" onblur=\"flagTxt=0\" maxlength=\"30\" >");
      out.println("  <input type=\"text\" name=\"XSEEDMSG\" id=\"idXSEEDMSG\" readonly tabindex=\"-1\" maxlength=\"50\" >");
      out.println("<input type=\"hidden\" id=\"onSession\" name=\"onSession\">");
      out.println("<input type=\"hidden\" id=\"__isProcessing\" name=\"__isProcessing\" value =\"0\">");
      out.println("</FORM>");
      out.println("</BODY>");
      out.println("</HTML>");
   }
   catch (Exception e)
   {   ShowErrorMsg (e,"BuildPage");
   }
}
  public void BuildErrorPage(PrintWriter out, String routineName, String  routineMsg)
  {
      out.println("<HTML>");
      out.println("<style type=\"Text/css\">");
      out.println("BODY {");
      out.println("   background-color: #C0C0C0;");
      out.println("}");
      out.println("</style>");
      out.println("<script language=\"JavaScript\">");
      out.println("function validatePage()");
      out.println("{");
      out.println("return(true);");
      out.println("}");
      out.println("function jXmit()");
      out.println("{");
      out.println("   if (validatePage() == true)");
      out.println("       {       document.frmCLIENERROR.submit();");
      out.println("       }");
      out.println("}");
      out.println("function jKey(pEvent)");
      out.println("{");
      out.println("}");
      out.println("</script>");
      out.println("<BODY onkeydown=\"return(jKey(event))\">");
      out.println("<FORM Name = \"frmCLIENERROR\" id = \"frmCLIENERROR\" method = \"post\">");
      out.println("<font color=\"blue\" size=5>Fatal Error</font>");
      out.println("<BR>");
      out.println("<P>");
      out.println("<font color=\"black\" size=4>Ispec:CLIEN</font>");
      out.println("<BR>");
      out.println("<P>");
      out.println("<font color=\"black\" size=4>Routine : " + routineName + "</font>");
      out.println("<P>");
      out.println("<font color=\"black\" size=4>System Message : " + routineMsg + "</font>");
      out.println("<P>");
      out.println("<input type=\"button\" name=\"Button1\" id=\"Button1\" value=\"Go Back\" onClick=\"jXmit();\">");
      out.println("</FORM>");
      out.println("</BODY>");
      out.println("</HTML>");
  }
  public void BuildErrorXmit(PrintWriter out)
  {
      out.println("<HTML>");
      out.println("<style type=\"Text/css\">");
      out.println("BODY {");
      out.println("   background-color: #C0C0C0;");
      out.println("}");
      out.println("</style>");
      out.println("<script language=\"JavaScript\">");
      out.println("function jXmit()");
      out.println("{");
      out.println("   document.frmCLIENONXMIT.submit();");
      out.println("}");
      out.println("function jKey(pEvent)");
      out.println("{");
      out.println("}");
      out.println("</script>");
      out.println("<BODY onkeydown=\"return(jKey(event))\">");
      out.println("<FORM Name = \"frmCLIENONXMIT\" id = \"frmCLIENONXMIT\" method = \"post\" ACTION=\"CLIEN\">");
      out.println("<P>");
      out.println("<font color=\"red\" size=5>" + MSG_XMITERROR + "</font>");
      out.println("<BR>");
      out.println("<P>");
      out.println("<input type=\"button\" name=\"Button1\" id=\"Button1\" value=\"" + MSG_GOBACK + "\" onClick=\"jXmit();\">");
      out.println("</FORM>");
      out.println("</BODY>");
      out.println("</HTML>");
      out.close();
  }
public void FormToScreen(HttpServletRequest request)
   throws Exception
{
    try
    {
        if (request == null)
        {
            return;
        }
        if (request.getParameter("MAINT") == null)
        {    SCREEN_MAINT = "";
        }
        else
        {    SCREEN_MAINT = request.getParameter("MAINT");
        }
        if (request.getParameter("CODCLI") == null)
        {    SCREEN_CODCLI = 0;
        }
        else
        {
            SCREEN_CODCLI = move(cDbl(request.getParameter("CODCLI"), GLB.DecimalChar ), SCREEN_CODCLI, 5, 0,"SIGNED");
        }
        if (request.getParameter("NOMCLI") == null)
        {    SCREEN_NOMCLI = "";
        }
        else
        {    SCREEN_NOMCLI = request.getParameter("NOMCLI");
        }
        if (request.getParameter("ENDCLI") == null)
        {    SCREEN_ENDCLI = "";
        }
        else
        {    SCREEN_ENDCLI = request.getParameter("ENDCLI");
        }
        AuditSCR("INP");
   }
   catch (Exception e)
   {   ShowErrorMsg (e,"FormToScreen");
   }
 }

public boolean preCheck(String pRoutine, String pIspec)
  throws Exception
{
    try
    {
        return(true);
    }
    catch(Exception e)
    {   ShowErrorMsg(e, "preCheck");
    	return(false);
    }
}


private void IspecLoad()
  throws Exception
{
    try
    {   /* Executing Initialize */

        InitialSettings();


        /* Executing PreCheck */

        if (preCheck("LOAD",ISPEC) == false)
        {
           return;
        }

        currentDate();
        InitScreen();
        MessageFromAnotherIspec();


        /* Executing PreScreen */
        PreScreen();
        updGlbWork();

    }
    catch (Exception e)
    {    ShowErrorMsg(e,"IspecLoad");
    }
}

public void IspecRefresh()
  throws Exception
{
    try
    {
        /* Executing Initialize */

        InitialSettings();
        currentDate();
        InitScreen();
        GLB.ERROR = "";

        /* Executing PreScreen */
        PreScreen();
        updGlbWork();

    }
    catch (Exception e)
    {    ShowErrorMsg(e,"IspecRefresh");
    }
}


public void IspecCycle()
   throws Exception
{
    try
    {   /* Executing Initialize */

        InitialSettings();


        /* Executing PreCheck */

        if ( preCheck("CYCLE",ISPEC) == false )
        {
           return;
        }

        currentDate();
        GLB.ERROR = "";

        /* Initializing Inquiry Fields */

     SCREEN_XSEEDMSG = "";

        singleCycle();

        updGlbWork();


   }
   catch(Exception e)
   {    ShowErrorMsg(e, "IspecCycle");
   }
}


public void ispecRecall(HttpServletRequest requestObject, HttpServletResponse responseObject, HttpSession sessionObject)
 throws Exception
{
    try
    {	
       if (GLB.ABORTMSG.equals("") == false)
       {
           BuildAbortPage(responseObject.getWriter());
           GLB.ABORTMSG = "";
       }
       else if (GLB.REDIRECT.equals("") == false)
       {
          responseObject.sendRedirect(GLB.REDIRECT);
       }
       else if ((GLB.RECALL.equals("") == false) &&
              (GLB.RECALL.toUpperCase().equals(ISPEC.toUpperCase()) == false))
       {
           if (GLB.RECALL.equals("BYE") == true)
           {
               responseObject.sendRedirect("XseedBye");
           }
           else
           {   if (preCheck("RECALL",GLB.RECALL) == false)
               {   GLB.MSGHEADER[1] = GLB.MSGHEADER[GLB.MSGINDEX];
                   GLB.MSGTRAILER[1] = GLB.MSGTRAILER[GLB.MSGINDEX];
                   GLB.MSGINDEX = 1;
                   BuildPage(responseObject.getWriter(), requestObject);
                   return;
               }
               LoadIspec(responseObject, sessionObject, GLB.RECALL); // execute normal RECALL
           }
       }
       else
       {
           BuildPage(responseObject.getWriter(), requestObject);
       }
    }
    catch (Exception e)
    {   ShowErrorMsg (e," ispecRecall");
    }
}



public void PreScreen()
  throws Exception
{  try
   {
   }
   catch(Exception e)
   {
       ShowErrorMsg(e, "PreScreen");
   }
}

public void PreLogic()
  throws Exception
{  try
   {
        GLB.TEACH = "";
    if( ((rTrim(SCREEN_MAINT)).equals(rTrim("REF"))==true))
    {
        GLB.RECALL = ISPEC;
        GLB.ERROR = "*****";
        GLB.RETURNPS = true;
        updGlbWork();
        if (true) {
            return;    //END.EXIT
        }
    }
   }
   catch(Exception e)
   {
       ShowErrorMsg(e, "PreLogic");
   }
}

public void Logic()
  throws Exception
{  try
   {
   }
   catch(Exception e)
   {  ShowErrorMsg(e, "Logic");
   }
}

private void EdtLogic ()
    throws Exception
{
   try
   {
   }
   catch(Exception e)
   {  ShowErrorMsg(e, "EditLogic");
   }
}


public void Validate()
  throws Exception
{   try
    {
    if (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.FIR) == true)
    {   AutoFir();
        SCREEN_MAINT = GLB.FIR;
    }
    else if (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.NEX) == true)
    {   AutoNex();
        SCREEN_MAINT = GLB.NEX;
    }
    else if (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.LAS) == true)
    {    AutoLas();
         SCREEN_MAINT = GLB.LAS;
    }
    else if (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.BAC) == true)
    {    AutoBac();
         SCREEN_MAINT = GLB.BAC;
    }
    else if (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.REC) == true)
    {    AutoRec();
         SCREEN_MAINT = GLB.REC;
    }
    if ((rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.REC) == true) ||
        (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.FIR) == true) ||
        (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.NEX) == true) ||
        (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.BAC) == true) ||
        (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.LAS) == true))
    {  GLB.EXIT = true;
       return;
    }
        if (SCREEN_CODCLI == 0)
        {
            message("CODCLI", LAN_FILLORDINATE);
        }
    if (GLB.ERROR.equals("*****")==true)
    {   if ((rTrim(SCREEN_MAINT).equals(GLB.ADD)==true) ||
             (rTrim(SCREEN_MAINT).equals(GLB.CHG)==true))
        {   return;
        }
        else
        {   GLB.ERROR = "";
            GLB.MSGINDEX = 0;
        }
    }
    if (rTrim(SCREEN_MAINT).equals(GLB.ADD)==true)
    {   VerifyAdd();
    }
    else if (rTrim(SCREEN_MAINT).equals(GLB.CHG)==true)
    {   VerifyChg();
    }
    else if (rTrim(SCREEN_MAINT).equals(GLB.DEL)==true)
    {    VerifyDel();
    }
    else if (rTrim(SCREEN_MAINT).equals(GLB.INQ)==true)
    {    AutoInq();
    }
    else
    {    message ("Error", LAN_INVALIDMAINT);
    }
    }
    catch(Exception e)
    {    ShowErrorMsg(e, "Validate");
    }
}


public void Update()
  throws Exception
{  try
   {
    if (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.ADD) == true)
    {   AutoAdd();
    }
    else if (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.CHG) == true)
    {   AutoChg();
    }
    else if (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.DEL) == true)
    {   AutoDel();
    }
    else if (rTrim(SCREEN_MAINT.toUpperCase()).equals(GLB.INQ) == true)
    {   message ("Error", LAN_INQATENDOFLG);
    }
    else
    {   message ("Error", LAN_INVALIDMAINT);
    }
    if ((rTrim(GLB.ERROR).equals("*****")==false) && (GLB.RECALL.equals("")==true))
    {  SCREEN_MAINT = GLB.ADD;
    }
   }
   catch(Exception e)
   {    ShowErrorMsg(e, "Update");
   }
}



public void ValidatePhase()
  throws Exception
{  try
   {

   }
   catch(Exception e)
   {
      ShowErrorMsg(e,"ValidatePhase");
   }
}

public void UpdatePhase ()
   throws Exception
{   try
    {
    }
    catch(Exception e)
    {
        ShowErrorMsg(e,"UpdatePhase");
    }
}


private void InitScreen()
  throws Exception
{  try
   {
    SCREEN_MAINT = "";
    SCREEN_CODCLI = 0;
    SCREEN_NOMCLI = "";
    SCREEN_ENDCLI = "";
    SCREEN_XSEEDMSG = "";
    SCREEN_MAINT = GLB.ADD;
   }
   catch(Exception e)
   {    ShowErrorMsg(e, "InitScreen");
   }
}

private void ScreenToFile()
  throws Exception
{  try
   {
    CLIEN_MAINT = SCREEN_MAINT;
    CLIEN_CODCLI = SCREEN_CODCLI;
    CLIEN_NOMCLI = SCREEN_NOMCLI;
    CLIEN_ENDCLI = SCREEN_ENDCLI;
   }
   catch(Exception e)
   {
        ShowErrorMsg(e, "ScreenToFile");
   }
}

private void ChgScreenFile()
  throws Exception
{   try
    {
        if ((rTrim(SCREEN_MAINT)).equals("") == false)
            CLIEN_MAINT = SCREEN_MAINT;
        if (SCREEN_CODCLI != 0)
            CLIEN_CODCLI = SCREEN_CODCLI;
        if ((rTrim(SCREEN_NOMCLI)).equals("") == false)
            CLIEN_NOMCLI = SCREEN_NOMCLI;
        if ((rTrim(SCREEN_ENDCLI)).equals("") == false)
            CLIEN_ENDCLI = SCREEN_ENDCLI;
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"ChgScreenToFile");
    }
}

private void FileToScreen()
  throws Exception
{  try
   {
    SCREEN_MAINT = CLIEN_MAINT;
    SCREEN_CODCLI = CLIEN_CODCLI;
    SCREEN_NOMCLI = CLIEN_NOMCLI;
    SCREEN_ENDCLI = CLIEN_ENDCLI;
   }
   catch(Exception e)
   {    ShowErrorMsg(e, "FileToScreen");
   }
}

private void AutoAdd()
  throws Exception
{   try
    {
        ScreenToFile();
        CLIEN_Insert();
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {   message ("ERROR", LAN_INVALIDINCLUSION);
            return;
        }
        if (GLB.RECALL.equals("")==true)
        {   message ("ATTENTION", LAN_SUCCESSINCLUSION);
            GLB.ERROR = "";
            GLB.RETURNPS = true;
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"AutoAdd");
    }
}
private void VerifyAdd()
  throws Exception
{   try
    {
        if (SCREEN_CODCLI==0.0)
        {
            message("ERROR","Ordinate Required");
            return;
        }
        CLIEN_LookupOne (SCREEN_CODCLI);
        if ((GLB.STATUS.trim()).equals("*****")==false)
        {   message ("ERROR", LAN_INVALIDINCLUSION);
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"VerifyAdd");
    }
}
private void AutoChg()
  throws Exception
{   try
    {
        ChgScreenFile();
        CLIEN_Modify();
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {   message ("ERROR", LAN_INVALIDMODIFY);
            return;
        }
        if (GLB.RECALL.equals("")==true)
        {   message ("ATTENTION", LAN_SUCCESSMODIFY);
            GLB.ERROR = "";
            GLB.RETURNPS = true;
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"AutoChg");
    }
}
private void VerifyChg ()
  throws Exception
{   try
    {
        CLIEN_LookupOne (SCREEN_CODCLI);
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {   message ("ERROR", LAN_INVALIDMODIFY);
        }
    }
    catch (Exception e)
    {   ShowErrorMsg (e,"VerifyChg");
    }
}
private void AutoDel()
  throws Exception
{   try
    {
        ChgScreenFile();
        CLIEN_MAINT = "D";
        CLIEN_Modify();
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {  message ("ERROR", LAN_INVALIDDELETE);
           return;
        }
        if (GLB.RECALL.equals("")==true)
        {   message ("ATTENTION", LAN_SUCCESSDELETE);
            GLB.ERROR = "";
            GLB.RETURNPS = true;
        }
    }
    catch (Exception e)
    {   ShowErrorMsg (e,"AutoDel");
    }
}
private void VerifyDel()
  throws Exception
{   try
    {   CLIEN_LookupOne (SCREEN_CODCLI);
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {  message ("ERROR", LAN_INVALIDDELETE);
        }
    }
    catch (Exception e)
    {   ShowErrorMsg (e,"VerifyDel");
    }
}
private void AutoPur()
  throws Exception
{   try
    {   ScreenToFile();
        CLIEN_Delete();
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {   message ("ERROR", LAN_INVALIDPURGE);
            return;
        }
        if (GLB.RECALL.equals("")==true)
        {   message ("ATTENTION", LAN_SUCCESSPURGE);
            GLB.ERROR = "";
            GLB.RETURNPS = true;
        }
    }
    catch (Exception e)
    {   ShowErrorMsg (e,"AutoPur");
    }
}
private void VerifyPur ()
  throws Exception
{   try
    {   CLIEN_LookupOne (SCREEN_CODCLI);
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {   message ("ERROR", LAN_INVALIDPURGE);
        }
    }
    catch (Exception e)
    {   ShowErrorMsg (e,"VerifyPur");
    }
}
private void AutoRec()
  throws Exception
{   try
    {   CLIEN_LookupOne (SCREEN_CODCLI);
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {   message ("ERROR", LAN_INVALIDCONSULT);
            return;
        }
        if (rTrim(CLIEN_MAINT).equals("D") == true)
        {   message ("ATTENTION", LAN_DELETEDITEM);
        }
        else
        {   message ("ATTENTION", LAN_SUCCESSCONSULT);
        }
        FileToScreen();
        recall ();
    }
    catch (Exception e)
    {   ShowErrorMsg (e,"AutoRec");
    }
}
private void AutoInq()
  throws Exception
{   try
    {   CLIEN_LookupOne (SCREEN_CODCLI);
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {   message ("ERROR", LAN_INVALIDCONSULT);
            return;
        }
        if (rTrim(CLIEN_MAINT).equals("D")==true)
        {   message ("ATTENTION", LAN_LOGICALLYDELETED);
            return;
        }
        GLB.ERROR = "";
    }
    catch (Exception e)
    {   ShowErrorMsg (e,"AutoInq");
    }
}
private void AutoFir()
  throws Exception
{   try
    {   CLIEN_LookupFirst (SCREEN_CODCLI);
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {  message ("ERROR", LAN_INVALIDCONSULT);
           return;
        }
        if (rTrim(CLIEN_MAINT).equals("D")==true)
        {   message ("ATTENTION", LAN_DELETEDITEM);
        }
        else
        {   message ("ATTENTION", LAN_SUCCESSCONSULT);
        }
        FileToScreen();
        recall ();
    }
    catch (Exception e)
    {   ShowErrorMsg (e,"AutoFir");
    }
}
private void AutoNex()
  throws Exception
{   try
    {    CLIEN_LookupNext (SCREEN_CODCLI);
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {  message ("ERROR", LAN_INVALIDCONSULT);
           return;
        }
        if (rTrim(CLIEN_MAINT).equals("D")==true)
        {   message ("ATTENTION", LAN_DELETEDITEM);
        }
        else
        {   message ("ATTENTION", LAN_SUCCESSCONSULT);
        }
        FileToScreen();
        recall ();
    }
    catch (Exception e)
    {   ShowErrorMsg (e,"AutoNex");
    }
}
private void AutoBac()
  throws Exception
{   try
    {    CLIEN_LookupPrevious (SCREEN_CODCLI);
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {  message ("ERROR", LAN_INVALIDCONSULT);
           return;
        }
        if (rTrim(CLIEN_MAINT).equals("D")==true)
        {   message ("ATTENTION", LAN_DELETEDITEM);
        }
        else
        {   message ("ATTENTION", LAN_SUCCESSCONSULT);
        }
        FileToScreen();
        recall ();
    }
    catch (Exception e)
    {   ShowErrorMsg (e,"AutoBac");
    }
}
private void AutoLas()
  throws Exception
{   try
    {   CLIEN_LookupLast (SCREEN_CODCLI);
        if ((GLB.STATUS.trim()).equals("*****")==true)
        {   message ("ERROR", LAN_INVALIDCONSULT);
            return;
        }
        if (rTrim(CLIEN_MAINT).equals("D")==true)
        {   message ("ATTENTION", LAN_DELETEDITEM);
        }
        else
        {   message ("ATTENTION", LAN_SUCCESSCONSULT);
        }
        FileToScreen();
        recall ();
    }
    catch (Exception e)
    {   ShowErrorMsg (e,"AutoLas");
    }
}

private void OpenFiles()
throws Exception
{   try
    {
       AuditBOT(request);
       if (GLB.DSN.trim().equals("") == true)
       {
           GLB.DSN = "LINCE";
       }
       Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
       GLB.CONNECTION = DriverManager.getConnection("jdbc:sqlserver://" + GLB.SERVER + ":1433;SelectMethod=cursor;User=" + GLB.USERNAME + ";PassWord=" + GLB.PASSWORD + ";DataBaseName="  + GLB.DSN);
       GLB.CONNECTION.setAutoCommit(false);
       CLIEN_CON = GLB.CONNECTION;
       CLIEN_CON.setAutoCommit(false);
       CLIEN_InitFile();
    }
    catch(SQLException e)
    {   ShowDataMsg(e, "OpenFiles","");
    }
    catch(ClassNotFoundException e)
    {   ShowErrorMsg (e,"OpenFiles");
    }
}

private void CloseFiles()
   throws Exception
{
   try
   {
        if (CLIEN_TAB!=null)
        {
            CLIEN_TAB.close();
            CLIEN_TAB = null;
        }
        if (CLIEN_CMD!=null)
        {
            CLIEN_CMD.close();
            CLIEN_CMD = null;
        }
        if (XSEED_SQL!=null)
        {
            XSEED_SQL.close();
            XSEED_SQL = null;
        }
        if (XSEED_CMD!=null)
        {
            XSEED_CMD.close();
            XSEED_CMD = null;
        }
        if (GLB.CALLABLECMD != null)
        {
           GLB.CALLABLECMD.close();
           GLB.CALLABLECMD=null;
        }
        GLB.CONNECTION.close();
        AuditEOT();
    }
    catch(SQLException e)
    {
        ShowDataMsg(e,"CloseFiles","");
        AuditEOT();
    }
}
private void CLIEN_InitFile()
{
    CLIEN_CODCLI = 0;
    CLIEN_ENDCLI = "";
    CLIEN_MAINT = "";
    CLIEN_MAINT = "";
    CLIEN_NOMCLI = "";
}
private void CLIEN_TableToFile ()
  throws Exception
{   try
    {
        if (CLIEN_XSEEDEOF == true)
        {    return;
        }
       CLIEN_CODCLI = CLIEN_TAB.getDouble("CODCLI");
       CLIEN_ENDCLI = CLIEN_TAB.getString("ENDCLI");
       CLIEN_MAINT = CLIEN_TAB.getString("MAINT");
       CLIEN_NOMCLI = CLIEN_TAB.getString("NOMCLI");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CLIEN_TableToFile","");
    }
}
private void CLIEN_Delete()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "delete  from CLIEN where ";
        sqlCommand = sqlCommand + "CODCLI = " + cStr(CLIEN_CODCLI);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
        if (recordsAffected == 0)
        {   GLB.STATUS = "*****";
        }
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else
        {   ShowErrorMsg (e,"CLIEN_Delete");
        }
     }
}
private void CLIEN_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        CLIEN_MAINT = "A";
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert  into CLIEN (";
        sqlCommand = sqlCommand + " CODCLI";
        sqlCommand = sqlCommand + ",ENDCLI";
        sqlCommand = sqlCommand + ",MAINT";
        sqlCommand = sqlCommand + ",NOMCLI";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CLIEN_CODCLI);
        if (CLIEN_ENDCLI.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CLIEN_ENDCLI)) + "'";
        }
        if (CLIEN_MAINT.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CLIEN_MAINT)) + "'";
        }
        if (CLIEN_NOMCLI.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CLIEN_NOMCLI)) + "'";
        }
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CLIEN_Insert");
            }
        }
    }
}
private void CLIEN_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update  CLIEN set ";
        sqlCommand = sqlCommand + "CODCLI = " + cStr(CLIEN_CODCLI);
        if (CLIEN_ENDCLI.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",ENDCLI = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",ENDCLI = '" + ReplaceQuotes(rTrim(CLIEN_ENDCLI)) + "'";
        }
        if ((CLIEN_MAINT.trim()).equals("") == true)
        {   sqlCommand = sqlCommand + ",MAINT = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",MAINT = '" + CLIEN_MAINT.substring(0,1) + "'";
        }
        if (CLIEN_NOMCLI.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",NOMCLI = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",NOMCLI = '" + ReplaceQuotes(rTrim(CLIEN_NOMCLI)) + "'";
        }
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + "CODCLI = " + cStr(CLIEN_CODCLI);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CLIEN_Modify");
         }
     }
}
private void CLIEN_LookupFirst(double Ordinate)
   throws Exception
{   String sqlCommand="";
    try
    {
        GLB.STATUS = "*****";
        CLIEN_XSEEDEOF = false;
        CLIEN_XSEEDSEEK = true;
        sqlCommand = "select top 1  " + ODBC_CLIEN_FIELDS + " from CLIEN with (NOLOCK INDEX=FCODCLI) order by CODCLI";
        if (CLIEN_CMD == null)
        {   CLIEN_CMD = CLIEN_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CLIEN_TAB != null)
        {   CLIEN_TAB.close();
        }
        CLIEN_TAB = CLIEN_CMD.executeQuery(sqlCommand);
        if (CLIEN_TAB.next())
        {   GLB.STATUS = "";
            CLIEN_TableToFile();
        }
   }
   catch (SQLException e)
   {
       ShowDataMsg(e,"CLIEN_LookupFirst", sqlCommand);
   }
}
private void CLIEN_LookupLast(double Ordinate)
   throws Exception
{   String sqlCommand="";
    try
    {	  GLB.STATUS = "*****";
        CLIEN_XSEEDEOF = false;
        CLIEN_XSEEDSEEK = true;
        sqlCommand = "SELECT top 1  " + ODBC_CLIEN_FIELDS + " FROM CLIEN with (NOLOCK INDEX=FCODCLI) ORDER BY CODCLI DESC";
        if (CLIEN_CMD == null)
        {   CLIEN_CMD = CLIEN_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CLIEN_TAB != null)
        {   CLIEN_TAB.close();
        }
        CLIEN_TAB = CLIEN_CMD.executeQuery(sqlCommand);
        if (CLIEN_TAB.next())
        {   GLB.STATUS = "";
            CLIEN_TableToFile();
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CLIEN_LookupLast", sqlCommand);
    }
}
private void CLIEN_LookupNext(double Ordinate)
   throws Exception
{   String sqlCommand="";
    try
    {
        GLB.STATUS = "*****";
        CLIEN_XSEEDEOF = false;
        CLIEN_XSEEDSEEK = true;
        sqlCommand = "SELECT top 1  " + ODBC_CLIEN_FIELDS + " FROM CLIEN with (NOLOCK INDEX=FCODCLI) ";
        sqlCommand = sqlCommand + " WHERE CODCLI > " + cStr(Ordinate) + " ORDER BY CODCLI ASC";
        if (CLIEN_CMD == null)
        {   CLIEN_CMD = CLIEN_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CLIEN_TAB != null)
        {   CLIEN_TAB.close();
        }
        CLIEN_TAB = CLIEN_CMD.executeQuery(sqlCommand);
        if (CLIEN_TAB.next())
        {   GLB.STATUS = "";
            CLIEN_TableToFile();
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CLIEN_LookupNext", sqlCommand);
    }
}
private void CLIEN_LookupPrevious(double Ordinate)
   throws Exception
{   String sqlCommand="";
    try
    {
        GLB.STATUS = "*****";
        CLIEN_XSEEDEOF = false;
        CLIEN_XSEEDSEEK = true;
        sqlCommand = "SELECT top 1  " + ODBC_CLIEN_FIELDS + " FROM CLIEN with (NOLOCK INDEX=FCODCLI) ";
        sqlCommand = sqlCommand + " WHERE CODCLI < " + cStr(Ordinate) + " ORDER BY CODCLI DESC";
        if (CLIEN_CMD == null)
        {   CLIEN_CMD = CLIEN_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CLIEN_TAB != null)
        {   CLIEN_TAB.close();
        }
        CLIEN_TAB = CLIEN_CMD.executeQuery(sqlCommand);
        if (CLIEN_TAB.next())
        {   GLB.STATUS = "";
            CLIEN_TableToFile();
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CLIEN_LookupPrevious", sqlCommand);
    }
}
private void CLIEN_LookupOne(double Ordinate)
   throws Exception
{   String sqlCommand="";
    try
    {
        GLB.STATUS = "*****";
        CLIEN_XSEEDEOF = false;
        CLIEN_XSEEDSEEK = true;
        sqlCommand = "select  " + ODBC_CLIEN_FIELDS + " from CLIEN with (NOLOCK INDEX=FCODCLI) ";
        sqlCommand = sqlCommand + " where CODCLI = " + cStr(Ordinate);
        if (CLIEN_CMD == null)
        {   CLIEN_CMD = CLIEN_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CLIEN_TAB != null)
        {   CLIEN_TAB.close();
        }
        CLIEN_TAB = CLIEN_CMD.executeQuery(sqlCommand);
        if (CLIEN_TAB.next())
        {   GLB.STATUS = "";
            CLIEN_TableToFile();
        }
        else
        {   CLIEN_XSEEDEOF = true;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CLIEN_LookupOne", sqlCommand);
    }
}

private void AbortTransaction (String msg)
{  try
   {   GLB.ABORT = true;
       RollBackTransaction(msg);
   }
   catch (Exception e)
   {  // do not  throw Exception
   }
}




public void InitialSettings()
  throws Exception
{
   try
   {
        GLB.STATION = GLB.STN;
        GLB.RANDOM = 2729;
        GLB.APPNAME = "LINCE";
        GLB.DBTITLE = GLB.FILESDIR.trim() + "\\LINCE.MDB";
        GLB.BASE = 1957;
        GLB.CENTURY = Double.parseDouble(String.valueOf(GLB.BASE).substring(0,2).trim());
        GLB.DCTYPE = "UK";
        ISPEC = "CLIEN";
        GLB.RESTORE = true;
   }
   catch(Exception e)
   {    ShowErrorMsg(e, "InitialSettings");
   }
}


public void AuditSCR (String pValue)
   throws Exception
{
    if (GLB.AUDITJOB == false)
    {
       return;
    }
    String msg="";
    try
    {

        msg = msg + "[" + SCREEN_MAINT.trim() + "]";
        msg = msg + "[" + cStr(SCREEN_CODCLI) + "]";
        msg = msg + "[" + SCREEN_NOMCLI.trim() + "]";
        msg = msg + "[" + SCREEN_ENDCLI.trim() + "]";

        PrintStream audit = new PrintStream(new FileOutputStream(GLB.AUDITACT,true));      			
        audit.println(pValue + ":" + msg.trim());
        audit.close();
    }
    catch (Exception e)
    {
        AuditCrash(pValue + ":" + msg.trim());
    }
}


public void updGlbWork()
  throws Exception
{
}

}
