// Generated by Xseed Version 9.5.59 ( Date: 17/11/2020 13:56:3232 hs  User: OPERACAO )
import java.io.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import javax.servlet.http.*;
import java.math.*;
import HLegacy.*;


public class CGR032 extends XseedReport implements Runnable
{
final String LAN_INVALIDMAINT           = "Campo de manutenção inválido.";
final String LAN_INVALIDINCLUSION       = "Inclusão Inválida. Item já existe.";
final String LAN_SUCCESSINCLUSION       = "Inclusão efetuada com sucesso.";
final String LAN_INVALIDMODIFY          = "Alteração Inválida. Item não existe.";
final String LAN_SUCCESSMODIFY          = "Alteração efetuada com sucesso.";
final String LAN_INVALIDDELETE          = "Deleção Inválida. Item não existe.";
final String LAN_SUCCESSDELETE          = "Deleção efetuada com sucesso.";
final String LAN_INVALIDPURGE           = "Purge Inválido. Item não existe.";
final String LAN_SUCCESSPURGE           = "Purge efetuado com sucesso.";
final String LAN_INVALIDCONSULT         = "Consulta não efetuada. Item inexistente.";
final String LAN_SUCCESSCONSULT         = "Consulta efetuada com sucesso.";
final String LAN_DELETEDITEM            = "Consulta efetuada. Item deletado logicamente.";
final String LAN_LOGICALLYDELETED       = "Consulta não efetuada. Item deletado logicamente.";
final String LAN_FILLORDINATE           = "Ordinate deve ser preenchido.";
final String LAN_INQATENDOFLG           = "INQ não permitido ao final da LG.";
final String LAN_ITEMNOTREC             = "Item não cadastrado no Ispec";
final String LAN_ITEMDELETED            = "Item deletado logicamente no Ispec";
final String LAN_ITEMMUSTBEFILLED       = "Item com preenchimento obrigatório";
final String LAN_INVALIDDATE            = "Data Inválida";
final String LAN_ISPECNOTDEFINED        = "Ispec não definido";
final String LAN_REPORTNOTDEFINED       = "Report não definido";
final String LAN_INVALIDVALUE           = "Valor numérico inválido no campo ";
final String LAN_INVALIDNUMERIC         = "Caracter inválido em campo numérico.";
final String MSG_SUCCESSFULL_ENTRY      = "Transação efetuada com sucesso";
final String MSG_ORDINATE_REQUIRED      = "Ordinate requerido";
final String MSG_INVALIDKEYF11          = "A tecla F11 está desabilitada.";
final String MSG_INVALIDKEYALTLEFT      = "A tecla ALT <- está desabilitada.";
final String MSG_INVALIDKEYALTRIGHT     = "A tecla ALT -> está desabilitada.";
final String MSG_INVALIDKEYCTRLN        = "A tecla CTRL-N está desabilitada.";
final String MSG_INVALIDKEYCTRLU        = "A tecla CTRL-U está desabilitada.";
final String MSG_MANYDECIMALS           = " casas decimais em excesso no campo ";
final String MSG_MANYNUMBER             = " valor numérico muito grande no campo ";
final String MSG_XMITERROR              = "Página já transmitida. Aguarde...";
final String MSG_GOBACK	                = "Voltar";
final String MSG_INVALIDDCT             = "Valor inválido";
final String MSG_WAITXMIT               = "Transmitindo a tela. Aguarde...";
final String MSG_REQUIREDDECIMALCHAR    = " separador de decimal deve ser digitado no campo ";
final String ODBC_GS101_FIELDS = "NRINSCRE,NRCGCNUM,NRCGCFIL,NRCGCDIG,NMLOCALI,DSENDERE,NRENDLOC,NMEMPEXT,NMEMPRES,CDUFLOCA,NRREGJUN,DIREGJUN,ROWID";
final String ODBC_CG124_FIELDS = "AMMOVTOX,CDEMPRES,CDFILIAL,CDFISCAL,CDNATCOM,DSIMPOST,INICMIPI,INORIGEM,TPIMPOST,NRSEQUEN,VLIMPICM,VLBASICM,VLCONTAB,VLINTICM,VLOUTICM,NRDECEND,VLBASIPI,VLIMPIPI,VLINTIPI,VLOUTIPI,ROWID";
final String ODBC_AV101_FIELDS = "NMCLIENT,CDDOPAIS,NRCEPLOC,NRCEPCOM,CDFISJUR,INSIMNAC,CDVDCONS,ROWID";
final String ODBC_SU101_FIELDS = "NMFORNEC,CDDOPAIS,NRCEPLOC,CDFISJUR,ROWID";
final String ODBC_MK102_FIELDS = "NMPROFES,CDDOPAIS,NRCEPLOC,ROWID";
final String ODBC_MK101_FIELDS = "NMCLIENT,CDDOPAIS,NRCEPLOC,CDFISJUR,ROWID";
final String ODBC_CG111_FIELDS = "TPREGIMP,VLINTEGR,VLBASICM,VLBASIPI,VLIMPICM,VLIMPIPI,VLINTICM,VLINTIPI,VLOUTICM,VLOUTIPI,VLCONTNC,VLBICMNC,VLBASSTR,VLICMSTR,AMMOVTOX,CDEMPRES,CDFILIAL,CDREFIMP,CDNATCOM,INSITREG,CDUFMUNI,ROWID";
final String ODBC_CG122_FIELDS = "CDEMPRES,AMMOVTOX,CDCLIFOR,CDFILIAL,INCLIFOR,INENTSAI,INSITREG,VLMOVIME,ROWID";
final String ODBC_AV119_FIELDS = "CDESTADO,NRNOTAFI,TPSERIEN,CDMODENF,TPREGIST,NRORDEMB,DIEMINOT,DISAINOT,INSITNOT,CDDESMER,CDVDCONS,INPEDESP,CDTIPFAT,DIDEVOLU,PCICMNOT,VLTOICMN,CDPAISEN,NRCEPENT,CDCLIENT,CDFILIAL,VLTAXFRE,CDMERCAD,PCICMTXF,VLSEGEXP,VLICMTXF,VLIPITXF,VLBRUTOP,CDDEPNFI,INCLIFOR,NRSOLICI,VLIPINOT,VLLIQUID,INDESPCO,ROWID";
final String ODBC_CG133_FIELDS = "CDCONTAX,CDEMPRES,CDMODENF,CDNATCOM,CDNATOPE,CDUFMUNI,DIEMINOT,DISAINOT,INCONFIN,INDECEND,INORIGEM,INSITNOT,INSITREG,INZONAFR,NRCFICMP,NRNOTAFI,NRNOTFIN,PCICMNAT,PCICMPRO,TPREGIST,TPSERIEN,VLBASICM,VLBASIPI,VLBASSTR,VLCONTAX,VLBASDID,VLICMDID,VLICMDIO,VLFCPDES,VLICMPRO,VLICMSTR,VLIMPICM,VLIMPIPI,VLISEICM,VLISEIPI,VLLIQUID,VLOUTICM,VLOUTIPI,VLPERICM,VLPERIPI,ROWID";
final String ODBC_CG140_FIELDS = "TPREGIST,CDEMPRES,CDFILIAL,AMMOVTOX,CDUFMUNI,CDFISCAL,NRSEQUEN,CDAJAPUR,DIIMPORT,DSIMPOST,TPIMPOST,VLICMSTR,VLCONTAB,VLBASSTR,ROWID";
final String ODBC_GS114_FIELDS = "INSOLICI,DIINEXEC,THINEXEC,NRSOLICI,NRUSUARI,CDEMPRES,CDATVREP,DIFIEXEC,THFIEXEC,ROWID";
final String ODBC_GS125_FIELDS = "CDELEMTO,DSELEMEN,VLELEMEN,CDDOITEM,CDEMPRES,INCHAVDS,INSITREG,ROWID";
final String ODBC_CG168_FIELDS = "CDEMPRES,CDCLAFIS,VLMOVIME,INSITREG,ROWID";
final String ODBC_GS109_FIELDS = "CDINDFIN,ROWID";
final String ODBC_GS103_FIELDS = "CDUFMUNI,ROWID";
final String ODBC_AV120_FIELDS = "VLPISCZF,VLLIQUID,CDNATOPE,VLBRUTOP,PCICMPRO,VLICMPRO,VLICMZFP,CDEMPRES,CDFILIAL,CDMODENF,TPREGIST,NRNOTAFI,CDCONCRE,CDNATCOM,PCIPIPRO,INBRIDNF,VLDESCNT,CDOCONAT,VLIPIPRO,INIPIDBC,VLIPIDEV,VLADIBIC,VLBASRIC,VLBASSTR,VLBASDID,VLICMDID,VLICMDIO,VLFCPDES,VLICMSTR,VLFCPSTR,CDCLAFIS,CDPRODUT,CDITEMXX,CDDEBICM,VLDESCON,INORIPRO,QTFATURA,CDTRIDIF,INBRINDE,ROWID";
final String ODBC_CG110_FIELDS = "PCICMFIS,CDNATOPE,CDNATCOM,CDOCONAT,CDTRIICM,INCALICM,INCALCST,CDTRIIPI,INATUDIP,ROWID";
final String ODBC_CG123_FIELDS = "AMMOVTOX,CDCLAFIS,CDEMPRES,CDFILIAL,INENTSAI,INSITREG,VLMOVIME,ROWID";
final String ODBC_CG105_FIELDS = "CDCTACON,NRCGCNUM,VLSALCON,CDEMPRES,TPLANCTO,AMSALCON,INSITREG,ROWID";
final String ODBC_CG102_FIELDS = "TPCTACON,CDCLACON,CDECUSTO,CDRAZAUX,INCONCIL,ROWID";
final String ODBC_CG106_FIELDS = "VLPROGMO,VLPROUMG,VLREALCR,VLREALMO,VLREALMG,CDECUSTO,AMSALCON,CDCLACUS,CDCONCLA,CDEMPRES,CDNVCCUS,ROWID";
final String ODBC_CG107_FIELDS = "VLLANCRE,VLLANDEB,VLDIFLAN,INLOTLIS,NRUSUALT,CDATIVID,CDEMPRES,CDORILAN,DILANCTO,INSITREG,NRFORMCG,NRLOTECG,NRUSUCRI,TPLANCTO,ROWID";
final String ODBC_CG104_FIELDS = "TPLANCTO,DILANCTO,NRLOTECG,NRFORMCG,NRSEQLAN,CDCLACUS,CDCTACON,CDORILAN,CDEMPRES,CDHISTOR,DSCOMPHI,INSINLAN,INSITREG,VLLANCAM,ROWID";
final String ODBC_CG118_FIELDS = "CDCTACON,CDEMPRES,DICONCIL,DILANCTO,INSITREG,NRFORMCG,NRLOTECG,NRSEQLAN,ROWID";
final String ODBC_GS107_FIELDS = "NMEMAILX,NMUSUARI,DSCARGOX,DSSAUASS,NMFUNASS,DSDEPASS,DSCONASA,DSCONASB,DSCONASC,NRFAXCOM,CDUSUARI,NRCEPRES,ROWID";
final String ODBC_DS103_FIELDS = "NRUSUARI,ROWID";
final String ODBC_GS130_FIELDS = "DSELEMEN,VLELEM16,CDDOITEM,CDELEM16,CDEMPRES,INSITREG,ROWID";
final String ODBC_GS106_FIELDS = "CDITEORI,TPCODIFI,INPOREMP,INCHAVDS,ROWID";
final String ODBC_PR101_FIELDS = "DSPRODUT,PQLIQPRO,CDTRIDIF,INVENDAX,CDLINPRO,CDCLAFIS,ROWID";
final String ODBC_SU103_FIELDS = "QTPESMAT,ROWID";
final String ODBC_AV112_FIELDS = "VLPMPROF,ROWID";
final String ODBC_TP101_FIELDS = "VLPMPROF,ROWID";
final String ODBC_CE121_FIELDS = "CDDOPAIS,NRCEPLOC,ROWID";
final String ODBC_CE118_FIELDS = "CDDOPAIS,NRCEPLOC,ROWID";
final String ODBC_AV281_FIELDS = "CDDOPAIS,NRCEPLOC,NRCEPCOM,ROWID";
XseedFile  GLBEXD = new XseedFile();
XseedFile  GLBEXE = new XseedFile();
XseedFile  GLBEXH = new XseedFile();
XseedFile  GLBEXI = new XseedFile();
XseedFile  GLBEXP = new XseedFile();
XseedFile  GLBEXS = new XseedFile();
XseedFile  GLBEXU = new XseedFile();
XseedFile  GLBEXW = new XseedFile();
XseedFile  GLBEXY = new XseedFile();
String ExtractVariableLine="";
int GLBSOD;
int GLBSOE;
int GLBSOH;
int GLBSOP;
int GLBSOS;
int GLBSOU;
int GLBSOW;
int GLBSOY;
double D_EXCDNATDIA=0.0;
double D_EXCDPRODUT=0.0;
String D_EXCDUFMUNI="";
double D_EXINBRINDE=0.0;
double D_EXINCLIENT=0.0;
double D_EXNRNOTDIA=0.0;
double D_EXPCICMDIA=0.0;
double D_EXVLBASDIA=0.0;
double D_EXVLCONDIA=0.0;
double D_EXVLICMDIA=0.0;
double D_EXVLIMPDIA=0.0;
String GLBEXD_XSEEDREG;
private void P_WriteGLBEXD ()
   throws Exception
{
    try
    {
        char [] GLBEX_XSEEDREG = new char[77];
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(D_EXNRNOTDIA,GLBEX_XSEEDREG,0, 9,9,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(D_EXCDPRODUT,GLBEX_XSEEDREG,9, 16,7,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(D_EXINBRINDE,GLBEX_XSEEDREG,16, 17,1,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(D_EXCDNATDIA,GLBEX_XSEEDREG,17, 21,4,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(D_EXVLCONDIA,GLBEX_XSEEDREG,21, 33,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(D_EXVLBASDIA,GLBEX_XSEEDREG,33, 45,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(D_EXVLIMPDIA,GLBEX_XSEEDREG,45, 57,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(D_EXVLICMDIA,GLBEX_XSEEDREG,57, 69,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(D_EXPCICMDIA,GLBEX_XSEEDREG,69, 74,5,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(D_EXCDUFMUNI,GLBEX_XSEEDREG,74,76,2);
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(D_EXINCLIENT,GLBEX_XSEEDREG,76, 77,1,0, "UNSIGNED");
        GLBEXD_XSEEDREG = String.valueOf(GLBEX_XSEEDREG);
        if (ExtractVariableLine.equalsIgnoreCase("TRUE")) {
            GLBEXD_XSEEDREG = rTrim(GLBEXD_XSEEDREG);
        }
        GLB.EXD_XSEEDWRITES = GLB.EXD_XSEEDWRITES + 1;
        GLB.EXD = GLBEXD;
        GLB.EXD_FILENAME = GLBEXD_XSEEDTITLE;
        if (GLB.BUFFERSIZE > 1.0)
        {   if (GLB.EXD_XSEEDCOUNT < GLB.BUFFERSIZE)
            {   if (GLB.EXD_XSEEDCOUNT != 0 )
                {   GLB.EXD_XSEEDBUFFER.append("\n");
                }
                else
                {   GLB.EXD_XSEEDBUFFER = new StringBuffer();
                }
                GLB.EXD_XSEEDBUFFER.append(GLBEXD_XSEEDREG);
                GLB.EXD_XSEEDCOUNT++;
            }
            else
            {   GLB.EXD_XSEEDBUFFER.append("\n");
                GLB.EXD_XSEEDBUFFER.append(GLBEXD_XSEEDREG);
                GLBEXD.write(GLB.EXD_XSEEDBUFFER.toString());
                GLB.EXD_XSEEDCOUNT = 0;
                GLB.EXD_XSEEDBUFFER = new StringBuffer();
            }
        }
        else
        {   GLBEXD.write(GLBEXD_XSEEDREG);
        }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_WriteGLBEXD");
    }
}
private void P_ReadGLBEXD ()
   throws Exception
{
    try
    {
        GLBEXD_XSEEDREG = format(GLBEXD_XSEEDREG,77);
        D_EXNRNOTDIA = cDbl(GLBEXD_XSEEDREG.substring(0, 9));
        D_EXCDPRODUT = cDbl(GLBEXD_XSEEDREG.substring(9, 16));
        D_EXINBRINDE = cDbl(GLBEXD_XSEEDREG.substring(16, 17));
        D_EXCDNATDIA = cDbl(GLBEXD_XSEEDREG.substring(17, 21));
        D_EXVLCONDIA = cDbl(GLBEXD_XSEEDREG.substring(21, 33));
        D_EXVLCONDIA = divide(100.0,D_EXVLCONDIA, 12, 2,"UNSIGNED","TRUNCATE");
        D_EXVLBASDIA = cDbl(GLBEXD_XSEEDREG.substring(33, 45));
        D_EXVLBASDIA = divide(100.0,D_EXVLBASDIA, 12, 2,"UNSIGNED","TRUNCATE");
        D_EXVLIMPDIA = cDbl(GLBEXD_XSEEDREG.substring(45, 57));
        D_EXVLIMPDIA = divide(100.0,D_EXVLIMPDIA, 12, 2,"UNSIGNED","TRUNCATE");
        D_EXVLICMDIA = cDbl(GLBEXD_XSEEDREG.substring(57, 69));
        D_EXVLICMDIA = divide(100.0,D_EXVLICMDIA, 12, 2,"UNSIGNED","TRUNCATE");
        D_EXPCICMDIA = cDbl(GLBEXD_XSEEDREG.substring(69, 74));
        D_EXPCICMDIA = divide(100.0,D_EXPCICMDIA, 5, 2,"UNSIGNED","TRUNCATE");
        D_EXCDUFMUNI = GLBEXD_XSEEDREG.substring(74, 76);
        D_EXINCLIENT = cDbl(GLBEXD_XSEEDREG.substring(76, 77));
        GLBEXD_XSEEDREG = GLBEXD.read();
        GLB.EXD_XSEEDREADS = GLB.EXD_XSEEDREADS + 1;
        GLB.EXD = GLBEXD;
        GLB.EXD_FILENAME = GLBEXD_XSEEDTITLE;
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_ReadGLBEXD");
    }
}
double E_EXCDCLIDEP=0.0;
double E_EXCDDEPNFI=0.0;
double E_EXCDTIPDEP=0.0;
double E_EXDIEMIDEP=0.0;
double E_EXINCLIDEP=0.0;
double E_EXNRNOTDEP=0.0;
double E_EXNRUSUNFI=0.0;
double E_EXVLTOICMN=0.0;
String GLBEXE_XSEEDREG;
private void P_WriteGLBEXE ()
   throws Exception
{
    try
    {
        char [] GLBEX_XSEEDREG = new char[44];
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(E_EXCDDEPNFI,GLBEX_XSEEDREG,0, 2,2,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(E_EXNRNOTDEP,GLBEX_XSEEDREG,2, 11,9,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(E_EXCDCLIDEP,GLBEX_XSEEDREG,11, 17,6,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(E_EXINCLIDEP,GLBEX_XSEEDREG,17, 18,1,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(E_EXDIEMIDEP,GLBEX_XSEEDREG,18, 26,8,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(E_EXCDTIPDEP,GLBEX_XSEEDREG,26, 28,2,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(E_EXVLTOICMN,GLBEX_XSEEDREG,28, 40,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(E_EXNRUSUNFI,GLBEX_XSEEDREG,40, 44,4,0, "UNSIGNED");
        GLBEXE_XSEEDREG = String.valueOf(GLBEX_XSEEDREG);
        if (ExtractVariableLine.equalsIgnoreCase("TRUE")) {
            GLBEXE_XSEEDREG = rTrim(GLBEXE_XSEEDREG);
        }
        GLB.EXE_XSEEDWRITES = GLB.EXE_XSEEDWRITES + 1;
        GLB.EXE = GLBEXE;
        GLB.EXE_FILENAME = GLBEXE_XSEEDTITLE;
        if (GLB.BUFFERSIZE > 1.0)
        {   if (GLB.EXE_XSEEDCOUNT < GLB.BUFFERSIZE)
            {   if (GLB.EXE_XSEEDCOUNT != 0 )
                {   GLB.EXE_XSEEDBUFFER.append("\n");
                }
                else
                {   GLB.EXE_XSEEDBUFFER = new StringBuffer();
                }
                GLB.EXE_XSEEDBUFFER.append(GLBEXE_XSEEDREG);
                GLB.EXE_XSEEDCOUNT++;
            }
            else
            {   GLB.EXE_XSEEDBUFFER.append("\n");
                GLB.EXE_XSEEDBUFFER.append(GLBEXE_XSEEDREG);
                GLBEXE.write(GLB.EXE_XSEEDBUFFER.toString());
                GLB.EXE_XSEEDCOUNT = 0;
                GLB.EXE_XSEEDBUFFER = new StringBuffer();
            }
        }
        else
        {   GLBEXE.write(GLBEXE_XSEEDREG);
        }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_WriteGLBEXE");
    }
}
private void P_ReadGLBEXE ()
   throws Exception
{
    try
    {
        GLBEXE_XSEEDREG = format(GLBEXE_XSEEDREG,44);
        E_EXCDDEPNFI = cDbl(GLBEXE_XSEEDREG.substring(0, 2));
        E_EXNRNOTDEP = cDbl(GLBEXE_XSEEDREG.substring(2, 11));
        E_EXCDCLIDEP = cDbl(GLBEXE_XSEEDREG.substring(11, 17));
        E_EXINCLIDEP = cDbl(GLBEXE_XSEEDREG.substring(17, 18));
        E_EXDIEMIDEP = cDbl(GLBEXE_XSEEDREG.substring(18, 26));
        E_EXCDTIPDEP = cDbl(GLBEXE_XSEEDREG.substring(26, 28));
        E_EXVLTOICMN = cDbl(GLBEXE_XSEEDREG.substring(28, 40));
        E_EXVLTOICMN = divide(100.0,E_EXVLTOICMN, 12, 2,"UNSIGNED","TRUNCATE");
        E_EXNRUSUNFI = cDbl(GLBEXE_XSEEDREG.substring(40, 44));
        GLBEXE_XSEEDREG = GLBEXE.read();
        GLB.EXE_XSEEDREADS = GLB.EXE_XSEEDREADS + 1;
        GLB.EXE = GLBEXE;
        GLB.EXE_FILENAME = GLBEXE_XSEEDTITLE;
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_ReadGLBEXE");
    }
}
double H_EXCDCLIFOR=0.0;
double H_EXINCLIFOR=0.0;
double H_EXVLMOVIME=0.0;
String GLBEXH_XSEEDREG;
private void P_WriteGLBEXH ()
   throws Exception
{
    try
    {
        char [] GLBEX_XSEEDREG = new char[21];
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(H_EXINCLIFOR,GLBEX_XSEEDREG,0, 1,1,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(H_EXCDCLIFOR,GLBEX_XSEEDREG,1, 7,6,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(H_EXVLMOVIME,GLBEX_XSEEDREG,7, 21,14,0, "UNSIGNED");
        GLBEXH_XSEEDREG = String.valueOf(GLBEX_XSEEDREG);
        if (ExtractVariableLine.equalsIgnoreCase("TRUE")) {
            GLBEXH_XSEEDREG = rTrim(GLBEXH_XSEEDREG);
        }
        GLB.EXH_XSEEDWRITES = GLB.EXH_XSEEDWRITES + 1;
        GLB.EXH = GLBEXH;
        GLB.EXH_FILENAME = GLBEXH_XSEEDTITLE;
        if (GLB.BUFFERSIZE > 1.0)
        {   if (GLB.EXH_XSEEDCOUNT < GLB.BUFFERSIZE)
            {   if (GLB.EXH_XSEEDCOUNT != 0 )
                {   GLB.EXH_XSEEDBUFFER.append("\n");
                }
                else
                {   GLB.EXH_XSEEDBUFFER = new StringBuffer();
                }
                GLB.EXH_XSEEDBUFFER.append(GLBEXH_XSEEDREG);
                GLB.EXH_XSEEDCOUNT++;
            }
            else
            {   GLB.EXH_XSEEDBUFFER.append("\n");
                GLB.EXH_XSEEDBUFFER.append(GLBEXH_XSEEDREG);
                GLBEXH.write(GLB.EXH_XSEEDBUFFER.toString());
                GLB.EXH_XSEEDCOUNT = 0;
                GLB.EXH_XSEEDBUFFER = new StringBuffer();
            }
        }
        else
        {   GLBEXH.write(GLBEXH_XSEEDREG);
        }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_WriteGLBEXH");
    }
}
private void P_ReadGLBEXH ()
   throws Exception
{
    try
    {
        GLBEXH_XSEEDREG = format(GLBEXH_XSEEDREG,21);
        H_EXINCLIFOR = cDbl(GLBEXH_XSEEDREG.substring(0, 1));
        H_EXCDCLIFOR = cDbl(GLBEXH_XSEEDREG.substring(1, 7));
        H_EXVLMOVIME = cDbl(GLBEXH_XSEEDREG.substring(7, 21));
        H_EXVLMOVIME = divide(100.0,H_EXVLMOVIME, 14, 2,"UNSIGNED","TRUNCATE");
        GLBEXH_XSEEDREG = GLBEXH.read();
        GLB.EXH_XSEEDREADS = GLB.EXH_XSEEDREADS + 1;
        GLB.EXH = GLBEXH;
        GLB.EXH_FILENAME = GLBEXH_XSEEDTITLE;
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_ReadGLBEXH");
    }
}
double I_EXCDMODENF=0.0;
double I_EXCDNATCOM=0.0;
double I_EXCDNATOPE=0.0;
String I_EXCDUFMUNI="";
double I_EXDIEMINOT=0.0;
double I_EXDISAINOT=0.0;
double I_EXINCONFIN=0.0;
double I_EXINDECEND=0.0;
double I_EXINORIGEM=0.0;
double I_EXNRCANCEL=0.0;
double I_EXNRCFICMP=0.0;
double I_EXNRCONTAX=0.0;
double I_EXNRNOTAFI=0.0;
double I_EXNRNOTFIN=0.0;
String I_EXNRSERIEX="";
double I_EXPCICMNAT=0.0;
double I_EXPCICMPRO=0.0;
double I_EXTPREGIST=0.0;
double I_EXVLBASDID=0.0;
double I_EXVLBASICM=0.0;
double I_EXVLBASIPI=0.0;
double I_EXVLBASSTR=0.0;
double I_EXVLCONTAX=0.0;
double I_EXVLFCPDES=0.0;
double I_EXVLICMDID=0.0;
double I_EXVLICMDIO=0.0;
double I_EXVLICMPRO=0.0;
double I_EXVLICMSTR=0.0;
double I_EXVLIMPICM=0.0;
double I_EXVLIMPIPI=0.0;
double I_EXVLISEICM=0.0;
double I_EXVLISEIPI=0.0;
double I_EXVLLIQUID=0.0;
double I_EXVLOUTICM=0.0;
double I_EXVLOUTIPI=0.0;
double I_EXVLPERICM=0.0;
double I_EXVLPERIPI=0.0;
String GLBEXI_XSEEDREG;
private void P_WriteGLBEXI ()
   throws Exception
{
    try
    {
        char [] GLBEX_XSEEDREG = new char[303];
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXNRSERIEX,GLBEX_XSEEDREG,0,3,3);
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXNRNOTAFI,GLBEX_XSEEDREG,3, 12,9,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXDIEMINOT,GLBEX_XSEEDREG,12, 20,8,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLCONTAX,GLBEX_XSEEDREG,20, 33,13,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXNRCONTAX,GLBEX_XSEEDREG,33, 39,6,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXCDNATOPE,GLBEX_XSEEDREG,39, 43,4,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXCDNATCOM,GLBEX_XSEEDREG,43, 45,2,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLBASICM,GLBEX_XSEEDREG,45, 58,13,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLPERICM,GLBEX_XSEEDREG,58, 63,5,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLIMPICM,GLBEX_XSEEDREG,63, 76,13,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLISEICM,GLBEX_XSEEDREG,76, 89,13,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLOUTICM,GLBEX_XSEEDREG,89, 102,13,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXDISAINOT,GLBEX_XSEEDREG,102, 110,8,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXCDUFMUNI,GLBEX_XSEEDREG,110,112,2);
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXNRNOTFIN,GLBEX_XSEEDREG,112, 119,7,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLBASSTR,GLBEX_XSEEDREG,119, 133,14,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLICMSTR,GLBEX_XSEEDREG,133, 147,14,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLBASIPI,GLBEX_XSEEDREG,147, 160,13,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLPERIPI,GLBEX_XSEEDREG,160, 165,5,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLIMPIPI,GLBEX_XSEEDREG,165, 178,13,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLISEIPI,GLBEX_XSEEDREG,178, 191,13,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLOUTIPI,GLBEX_XSEEDREG,191, 204,13,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXNRCANCEL,GLBEX_XSEEDREG,204, 205,1,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXINDECEND,GLBEX_XSEEDREG,205, 206,1,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXNRCFICMP,GLBEX_XSEEDREG,206, 212,6,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXINCONFIN,GLBEX_XSEEDREG,212, 213,1,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXPCICMNAT,GLBEX_XSEEDREG,213, 218,5,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXINORIGEM,GLBEX_XSEEDREG,218, 219,1,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLLIQUID,GLBEX_XSEEDREG,219, 233,14,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLICMPRO,GLBEX_XSEEDREG,233, 247,14,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXPCICMPRO,GLBEX_XSEEDREG,247, 251,4,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLBASDID,GLBEX_XSEEDREG,251, 265,14,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLICMDID,GLBEX_XSEEDREG,265, 277,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLICMDIO,GLBEX_XSEEDREG,277, 289,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXVLFCPDES,GLBEX_XSEEDREG,289, 301,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXCDMODENF,GLBEX_XSEEDREG,301, 302,1,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(I_EXTPREGIST,GLBEX_XSEEDREG,302, 303,1,0, "UNSIGNED");
        GLBEXI_XSEEDREG = String.valueOf(GLBEX_XSEEDREG);
        if (ExtractVariableLine.equalsIgnoreCase("TRUE")) {
            GLBEXI_XSEEDREG = rTrim(GLBEXI_XSEEDREG);
        }
        GLB.EXI_XSEEDWRITES = GLB.EXI_XSEEDWRITES + 1;
        GLB.EXI = GLBEXI;
        GLB.EXI_FILENAME = GLBEXI_XSEEDTITLE;
        if (GLB.BUFFERSIZE > 1.0)
        {   if (GLB.EXI_XSEEDCOUNT < GLB.BUFFERSIZE)
            {   if (GLB.EXI_XSEEDCOUNT != 0 )
                {   GLB.EXI_XSEEDBUFFER.append("\n");
                }
                else
                {   GLB.EXI_XSEEDBUFFER = new StringBuffer();
                }
                GLB.EXI_XSEEDBUFFER.append(GLBEXI_XSEEDREG);
                GLB.EXI_XSEEDCOUNT++;
            }
            else
            {   GLB.EXI_XSEEDBUFFER.append("\n");
                GLB.EXI_XSEEDBUFFER.append(GLBEXI_XSEEDREG);
                GLBEXI.write(GLB.EXI_XSEEDBUFFER.toString());
                GLB.EXI_XSEEDCOUNT = 0;
                GLB.EXI_XSEEDBUFFER = new StringBuffer();
            }
        }
        else
        {   GLBEXI.write(GLBEXI_XSEEDREG);
        }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_WriteGLBEXI");
    }
}
double P_EXCDCLAFIS=0.0;
double P_EXCDCONCRE=0.0;
double P_EXCDDEBICM=0.0;
double P_EXCDNATOPE=0.0;
String P_EXCDUFMUNI="";
double P_EXVLBASICM=0.0;
double P_EXVLCONTAB=0.0;
double P_EXVLIMPICM=0.0;
String GLBEXP_XSEEDREG;
private void P_WriteGLBEXP ()
   throws Exception
{
    try
    {
        char [] GLBEX_XSEEDREG = new char[64];
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(P_EXCDDEBICM,GLBEX_XSEEDREG,0, 6,6,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(P_EXCDCONCRE,GLBEX_XSEEDREG,6, 12,6,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(P_EXCDNATOPE,GLBEX_XSEEDREG,12, 16,4,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(P_EXCDCLAFIS,GLBEX_XSEEDREG,16, 26,10,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(P_EXCDUFMUNI,GLBEX_XSEEDREG,26,28,2);
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(P_EXVLCONTAB,GLBEX_XSEEDREG,28, 40,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(P_EXVLBASICM,GLBEX_XSEEDREG,40, 52,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(P_EXVLIMPICM,GLBEX_XSEEDREG,52, 64,12,0, "UNSIGNED");
        GLBEXP_XSEEDREG = String.valueOf(GLBEX_XSEEDREG);
        if (ExtractVariableLine.equalsIgnoreCase("TRUE")) {
            GLBEXP_XSEEDREG = rTrim(GLBEXP_XSEEDREG);
        }
        GLB.EXP_XSEEDWRITES = GLB.EXP_XSEEDWRITES + 1;
        GLB.EXP = GLBEXP;
        GLB.EXP_FILENAME = GLBEXP_XSEEDTITLE;
        if (GLB.BUFFERSIZE > 1.0)
        {   if (GLB.EXP_XSEEDCOUNT < GLB.BUFFERSIZE)
            {   if (GLB.EXP_XSEEDCOUNT != 0 )
                {   GLB.EXP_XSEEDBUFFER.append("\n");
                }
                else
                {   GLB.EXP_XSEEDBUFFER = new StringBuffer();
                }
                GLB.EXP_XSEEDBUFFER.append(GLBEXP_XSEEDREG);
                GLB.EXP_XSEEDCOUNT++;
            }
            else
            {   GLB.EXP_XSEEDBUFFER.append("\n");
                GLB.EXP_XSEEDBUFFER.append(GLBEXP_XSEEDREG);
                GLBEXP.write(GLB.EXP_XSEEDBUFFER.toString());
                GLB.EXP_XSEEDCOUNT = 0;
                GLB.EXP_XSEEDBUFFER = new StringBuffer();
            }
        }
        else
        {   GLBEXP.write(GLBEXP_XSEEDREG);
        }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_WriteGLBEXP");
    }
}
private void P_ReadGLBEXP ()
   throws Exception
{
    try
    {
        GLBEXP_XSEEDREG = format(GLBEXP_XSEEDREG,64);
        P_EXCDDEBICM = cDbl(GLBEXP_XSEEDREG.substring(0, 6));
        P_EXCDCONCRE = cDbl(GLBEXP_XSEEDREG.substring(6, 12));
        P_EXCDNATOPE = cDbl(GLBEXP_XSEEDREG.substring(12, 16));
        P_EXCDCLAFIS = cDbl(GLBEXP_XSEEDREG.substring(16, 26));
        P_EXCDUFMUNI = GLBEXP_XSEEDREG.substring(26, 28);
        P_EXVLCONTAB = cDbl(GLBEXP_XSEEDREG.substring(28, 40));
        P_EXVLCONTAB = divide(100.0,P_EXVLCONTAB, 12, 2,"UNSIGNED","TRUNCATE");
        P_EXVLBASICM = cDbl(GLBEXP_XSEEDREG.substring(40, 52));
        P_EXVLBASICM = divide(100.0,P_EXVLBASICM, 12, 2,"UNSIGNED","TRUNCATE");
        P_EXVLIMPICM = cDbl(GLBEXP_XSEEDREG.substring(52, 64));
        P_EXVLIMPICM = divide(100.0,P_EXVLIMPICM, 12, 2,"UNSIGNED","TRUNCATE");
        GLBEXP_XSEEDREG = GLBEXP.read();
        GLB.EXP_XSEEDREADS = GLB.EXP_XSEEDREADS + 1;
        GLB.EXP = GLBEXP;
        GLB.EXP_FILENAME = GLBEXP_XSEEDTITLE;
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_ReadGLBEXP");
    }
}
double S_EXCDNATDIA=0.0;
String S_EXCDUFMUNI="";
double S_EXINCLIENT=0.0;
double S_EXPCICMDIA=0.0;
double S_EXVLBASDIA=0.0;
double S_EXVLCONDIA=0.0;
double S_EXVLICMDIA=0.0;
double S_EXVLIMPDIA=0.0;
String GLBEXS_XSEEDREG;
private void P_WriteGLBEXS ()
   throws Exception
{
    try
    {
        char [] GLBEX_XSEEDREG = new char[60];
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(S_EXCDNATDIA,GLBEX_XSEEDREG,0, 4,4,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(S_EXINCLIENT,GLBEX_XSEEDREG,4, 5,1,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(S_EXVLCONDIA,GLBEX_XSEEDREG,5, 17,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(S_EXVLBASDIA,GLBEX_XSEEDREG,17, 29,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(S_EXVLIMPDIA,GLBEX_XSEEDREG,29, 41,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(S_EXVLICMDIA,GLBEX_XSEEDREG,41, 53,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(S_EXPCICMDIA,GLBEX_XSEEDREG,53, 58,5,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(S_EXCDUFMUNI,GLBEX_XSEEDREG,58,60,2);
        GLBEXS_XSEEDREG = String.valueOf(GLBEX_XSEEDREG);
        if (ExtractVariableLine.equalsIgnoreCase("TRUE")) {
            GLBEXS_XSEEDREG = rTrim(GLBEXS_XSEEDREG);
        }
        GLB.EXS_XSEEDWRITES = GLB.EXS_XSEEDWRITES + 1;
        GLB.EXS = GLBEXS;
        GLB.EXS_FILENAME = GLBEXS_XSEEDTITLE;
        if (GLB.BUFFERSIZE > 1.0)
        {   if (GLB.EXS_XSEEDCOUNT < GLB.BUFFERSIZE)
            {   if (GLB.EXS_XSEEDCOUNT != 0 )
                {   GLB.EXS_XSEEDBUFFER.append("\n");
                }
                else
                {   GLB.EXS_XSEEDBUFFER = new StringBuffer();
                }
                GLB.EXS_XSEEDBUFFER.append(GLBEXS_XSEEDREG);
                GLB.EXS_XSEEDCOUNT++;
            }
            else
            {   GLB.EXS_XSEEDBUFFER.append("\n");
                GLB.EXS_XSEEDBUFFER.append(GLBEXS_XSEEDREG);
                GLBEXS.write(GLB.EXS_XSEEDBUFFER.toString());
                GLB.EXS_XSEEDCOUNT = 0;
                GLB.EXS_XSEEDBUFFER = new StringBuffer();
            }
        }
        else
        {   GLBEXS.write(GLBEXS_XSEEDREG);
        }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_WriteGLBEXS");
    }
}
private void P_ReadGLBEXS ()
   throws Exception
{
    try
    {
        GLBEXS_XSEEDREG = format(GLBEXS_XSEEDREG,60);
        S_EXCDNATDIA = cDbl(GLBEXS_XSEEDREG.substring(0, 4));
        S_EXINCLIENT = cDbl(GLBEXS_XSEEDREG.substring(4, 5));
        S_EXVLCONDIA = cDbl(GLBEXS_XSEEDREG.substring(5, 17));
        S_EXVLCONDIA = divide(100.0,S_EXVLCONDIA, 12, 2,"UNSIGNED","TRUNCATE");
        S_EXVLBASDIA = cDbl(GLBEXS_XSEEDREG.substring(17, 29));
        S_EXVLBASDIA = divide(100.0,S_EXVLBASDIA, 12, 2,"UNSIGNED","TRUNCATE");
        S_EXVLIMPDIA = cDbl(GLBEXS_XSEEDREG.substring(29, 41));
        S_EXVLIMPDIA = divide(100.0,S_EXVLIMPDIA, 12, 2,"UNSIGNED","TRUNCATE");
        S_EXVLICMDIA = cDbl(GLBEXS_XSEEDREG.substring(41, 53));
        S_EXVLICMDIA = divide(100.0,S_EXVLICMDIA, 12, 2,"UNSIGNED","TRUNCATE");
        S_EXPCICMDIA = cDbl(GLBEXS_XSEEDREG.substring(53, 58));
        S_EXPCICMDIA = divide(100.0,S_EXPCICMDIA, 5, 2,"UNSIGNED","TRUNCATE");
        S_EXCDUFMUNI = GLBEXS_XSEEDREG.substring(58, 60);
        GLBEXS_XSEEDREG = GLBEXS.read();
        GLB.EXS_XSEEDREADS = GLB.EXS_XSEEDREADS + 1;
        GLB.EXS = GLBEXS;
        GLB.EXS_FILENAME = GLBEXS_XSEEDTITLE;
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_ReadGLBEXS");
    }
}
double U_EXCDNATDIA=0.0;
String U_EXCDUFMUNI="";
double U_EXINCLIENT=0.0;
double U_EXPCICMDIA=0.0;
double U_EXVLBASDIA=0.0;
double U_EXVLCONDIA=0.0;
double U_EXVLICMDIA=0.0;
double U_EXVLIMPDIA=0.0;
String GLBEXU_XSEEDREG;
private void P_WriteGLBEXU ()
   throws Exception
{
    try
    {
        char [] GLBEX_XSEEDREG = new char[60];
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(U_EXCDNATDIA,GLBEX_XSEEDREG,0, 4,4,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(U_EXINCLIENT,GLBEX_XSEEDREG,4, 5,1,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(U_EXVLCONDIA,GLBEX_XSEEDREG,5, 17,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(U_EXVLBASDIA,GLBEX_XSEEDREG,17, 29,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(U_EXVLIMPDIA,GLBEX_XSEEDREG,29, 41,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(U_EXVLICMDIA,GLBEX_XSEEDREG,41, 53,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(U_EXPCICMDIA,GLBEX_XSEEDREG,53, 58,5,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(U_EXCDUFMUNI,GLBEX_XSEEDREG,58,60,2);
        GLBEXU_XSEEDREG = String.valueOf(GLBEX_XSEEDREG);
        if (ExtractVariableLine.equalsIgnoreCase("TRUE")) {
            GLBEXU_XSEEDREG = rTrim(GLBEXU_XSEEDREG);
        }
        GLB.EXU_XSEEDWRITES = GLB.EXU_XSEEDWRITES + 1;
        GLB.EXU = GLBEXU;
        GLB.EXU_FILENAME = GLBEXU_XSEEDTITLE;
        if (GLB.BUFFERSIZE > 1.0)
        {   if (GLB.EXU_XSEEDCOUNT < GLB.BUFFERSIZE)
            {   if (GLB.EXU_XSEEDCOUNT != 0 )
                {   GLB.EXU_XSEEDBUFFER.append("\n");
                }
                else
                {   GLB.EXU_XSEEDBUFFER = new StringBuffer();
                }
                GLB.EXU_XSEEDBUFFER.append(GLBEXU_XSEEDREG);
                GLB.EXU_XSEEDCOUNT++;
            }
            else
            {   GLB.EXU_XSEEDBUFFER.append("\n");
                GLB.EXU_XSEEDBUFFER.append(GLBEXU_XSEEDREG);
                GLBEXU.write(GLB.EXU_XSEEDBUFFER.toString());
                GLB.EXU_XSEEDCOUNT = 0;
                GLB.EXU_XSEEDBUFFER = new StringBuffer();
            }
        }
        else
        {   GLBEXU.write(GLBEXU_XSEEDREG);
        }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_WriteGLBEXU");
    }
}
private void P_ReadGLBEXU ()
   throws Exception
{
    try
    {
        GLBEXU_XSEEDREG = format(GLBEXU_XSEEDREG,60);
        U_EXCDNATDIA = cDbl(GLBEXU_XSEEDREG.substring(0, 4));
        U_EXINCLIENT = cDbl(GLBEXU_XSEEDREG.substring(4, 5));
        U_EXVLCONDIA = cDbl(GLBEXU_XSEEDREG.substring(5, 17));
        U_EXVLCONDIA = divide(100.0,U_EXVLCONDIA, 12, 2,"UNSIGNED","TRUNCATE");
        U_EXVLBASDIA = cDbl(GLBEXU_XSEEDREG.substring(17, 29));
        U_EXVLBASDIA = divide(100.0,U_EXVLBASDIA, 12, 2,"UNSIGNED","TRUNCATE");
        U_EXVLIMPDIA = cDbl(GLBEXU_XSEEDREG.substring(29, 41));
        U_EXVLIMPDIA = divide(100.0,U_EXVLIMPDIA, 12, 2,"UNSIGNED","TRUNCATE");
        U_EXVLICMDIA = cDbl(GLBEXU_XSEEDREG.substring(41, 53));
        U_EXVLICMDIA = divide(100.0,U_EXVLICMDIA, 12, 2,"UNSIGNED","TRUNCATE");
        U_EXPCICMDIA = cDbl(GLBEXU_XSEEDREG.substring(53, 58));
        U_EXPCICMDIA = divide(100.0,U_EXPCICMDIA, 5, 2,"UNSIGNED","TRUNCATE");
        U_EXCDUFMUNI = GLBEXU_XSEEDREG.substring(58, 60);
        GLBEXU_XSEEDREG = GLBEXU.read();
        GLB.EXU_XSEEDREADS = GLB.EXU_XSEEDREADS + 1;
        GLB.EXU = GLBEXU;
        GLB.EXU_FILENAME = GLBEXU_XSEEDTITLE;
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_ReadGLBEXU");
    }
}
double W_EXNRNOTCRE=0.0;
double W_EXVLBASCRE=0.0;
double W_EXVLFCPDES=0.0;
double W_EXVLICMDID=0.0;
double W_EXVLICMDIO=0.0;
String GLBEXW_XSEEDREG;
private void P_WriteGLBEXW ()
   throws Exception
{
    try
    {
        char [] GLBEX_XSEEDREG = new char[57];
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(W_EXNRNOTCRE,GLBEX_XSEEDREG,0, 9,9,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(W_EXVLBASCRE,GLBEX_XSEEDREG,9, 21,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(W_EXVLICMDID,GLBEX_XSEEDREG,21, 33,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(W_EXVLICMDIO,GLBEX_XSEEDREG,33, 45,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(W_EXVLFCPDES,GLBEX_XSEEDREG,45, 57,12,0, "UNSIGNED");
        GLBEXW_XSEEDREG = String.valueOf(GLBEX_XSEEDREG);
        if (ExtractVariableLine.equalsIgnoreCase("TRUE")) {
            GLBEXW_XSEEDREG = rTrim(GLBEXW_XSEEDREG);
        }
        GLB.EXW_XSEEDWRITES = GLB.EXW_XSEEDWRITES + 1;
        GLB.EXW = GLBEXW;
        GLB.EXW_FILENAME = GLBEXW_XSEEDTITLE;
        if (GLB.BUFFERSIZE > 1.0)
        {   if (GLB.EXW_XSEEDCOUNT < GLB.BUFFERSIZE)
            {   if (GLB.EXW_XSEEDCOUNT != 0 )
                {   GLB.EXW_XSEEDBUFFER.append("\n");
                }
                else
                {   GLB.EXW_XSEEDBUFFER = new StringBuffer();
                }
                GLB.EXW_XSEEDBUFFER.append(GLBEXW_XSEEDREG);
                GLB.EXW_XSEEDCOUNT++;
            }
            else
            {   GLB.EXW_XSEEDBUFFER.append("\n");
                GLB.EXW_XSEEDBUFFER.append(GLBEXW_XSEEDREG);
                GLBEXW.write(GLB.EXW_XSEEDBUFFER.toString());
                GLB.EXW_XSEEDCOUNT = 0;
                GLB.EXW_XSEEDBUFFER = new StringBuffer();
            }
        }
        else
        {   GLBEXW.write(GLBEXW_XSEEDREG);
        }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_WriteGLBEXW");
    }
}
private void P_ReadGLBEXW ()
   throws Exception
{
    try
    {
        GLBEXW_XSEEDREG = format(GLBEXW_XSEEDREG,57);
        W_EXNRNOTCRE = cDbl(GLBEXW_XSEEDREG.substring(0, 9));
        W_EXVLBASCRE = cDbl(GLBEXW_XSEEDREG.substring(9, 21));
        W_EXVLBASCRE = divide(100.0,W_EXVLBASCRE, 12, 2,"UNSIGNED","TRUNCATE");
        W_EXVLICMDID = cDbl(GLBEXW_XSEEDREG.substring(21, 33));
        W_EXVLICMDID = divide(100.0,W_EXVLICMDID, 12, 2,"UNSIGNED","TRUNCATE");
        W_EXVLICMDIO = cDbl(GLBEXW_XSEEDREG.substring(33, 45));
        W_EXVLICMDIO = divide(100.0,W_EXVLICMDIO, 12, 2,"UNSIGNED","TRUNCATE");
        W_EXVLFCPDES = cDbl(GLBEXW_XSEEDREG.substring(45, 57));
        W_EXVLFCPDES = divide(100.0,W_EXVLFCPDES, 12, 2,"UNSIGNED","TRUNCATE");
        GLBEXW_XSEEDREG = GLBEXW.read();
        GLB.EXW_XSEEDREADS = GLB.EXW_XSEEDREADS + 1;
        GLB.EXW = GLBEXW;
        GLB.EXW_FILENAME = GLBEXW_XSEEDTITLE;
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_ReadGLBEXW");
    }
}
double Y_EXCDLINCRE=0.0;
double Y_EXCDNATCRE=0.0;
String Y_EXINTEXCRE="";
double Y_EXNRNOTCRE=0.0;
double Y_EXPCICMCRE=0.0;
double Y_EXVLBASCRE=0.0;
double Y_EXVLCONCRE=0.0;
double Y_EXVLIMPCRE=0.0;
String GLBEXY_XSEEDREG;
private void P_WriteGLBEXY ()
   throws Exception
{
    try
    {
        char [] GLBEX_XSEEDREG = new char[58];
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(Y_EXNRNOTCRE,GLBEX_XSEEDREG,0, 9,9,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(Y_EXCDNATCRE,GLBEX_XSEEDREG,9, 13,4,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(Y_EXVLCONCRE,GLBEX_XSEEDREG,13, 25,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(Y_EXVLBASCRE,GLBEX_XSEEDREG,25, 37,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(Y_EXVLIMPCRE,GLBEX_XSEEDREG,37, 49,12,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(Y_EXPCICMCRE,GLBEX_XSEEDREG,49, 54,5,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(Y_EXCDLINCRE,GLBEX_XSEEDREG,54, 57,3,0, "UNSIGNED");
        GLBEX_XSEEDREG = XseedFunctions.formatExtract(Y_EXINTEXCRE,GLBEX_XSEEDREG,57,58,1);
        GLBEXY_XSEEDREG = String.valueOf(GLBEX_XSEEDREG);
        if (ExtractVariableLine.equalsIgnoreCase("TRUE")) {
            GLBEXY_XSEEDREG = rTrim(GLBEXY_XSEEDREG);
        }
        GLB.EXY_XSEEDWRITES = GLB.EXY_XSEEDWRITES + 1;
        GLB.EXY = GLBEXY;
        GLB.EXY_FILENAME = GLBEXY_XSEEDTITLE;
        if (GLB.BUFFERSIZE > 1.0)
        {   if (GLB.EXY_XSEEDCOUNT < GLB.BUFFERSIZE)
            {   if (GLB.EXY_XSEEDCOUNT != 0 )
                {   GLB.EXY_XSEEDBUFFER.append("\n");
                }
                else
                {   GLB.EXY_XSEEDBUFFER = new StringBuffer();
                }
                GLB.EXY_XSEEDBUFFER.append(GLBEXY_XSEEDREG);
                GLB.EXY_XSEEDCOUNT++;
            }
            else
            {   GLB.EXY_XSEEDBUFFER.append("\n");
                GLB.EXY_XSEEDBUFFER.append(GLBEXY_XSEEDREG);
                GLBEXY.write(GLB.EXY_XSEEDBUFFER.toString());
                GLB.EXY_XSEEDCOUNT = 0;
                GLB.EXY_XSEEDBUFFER = new StringBuffer();
            }
        }
        else
        {   GLBEXY.write(GLBEXY_XSEEDREG);
        }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_WriteGLBEXY");
    }
}
private void P_ReadGLBEXY ()
   throws Exception
{
    try
    {
        GLBEXY_XSEEDREG = format(GLBEXY_XSEEDREG,58);
        Y_EXNRNOTCRE = cDbl(GLBEXY_XSEEDREG.substring(0, 9));
        Y_EXCDNATCRE = cDbl(GLBEXY_XSEEDREG.substring(9, 13));
        Y_EXVLCONCRE = cDbl(GLBEXY_XSEEDREG.substring(13, 25));
        Y_EXVLCONCRE = divide(100.0,Y_EXVLCONCRE, 12, 2,"UNSIGNED","TRUNCATE");
        Y_EXVLBASCRE = cDbl(GLBEXY_XSEEDREG.substring(25, 37));
        Y_EXVLBASCRE = divide(100.0,Y_EXVLBASCRE, 12, 2,"UNSIGNED","TRUNCATE");
        Y_EXVLIMPCRE = cDbl(GLBEXY_XSEEDREG.substring(37, 49));
        Y_EXVLIMPCRE = divide(100.0,Y_EXVLIMPCRE, 12, 2,"UNSIGNED","TRUNCATE");
        Y_EXPCICMCRE = cDbl(GLBEXY_XSEEDREG.substring(49, 54));
        Y_EXPCICMCRE = divide(100.0,Y_EXPCICMCRE, 5, 2,"UNSIGNED","TRUNCATE");
        Y_EXCDLINCRE = cDbl(GLBEXY_XSEEDREG.substring(54, 57));
        Y_EXINTEXCRE = GLBEXY_XSEEDREG.substring(57, 58);
        GLBEXY_XSEEDREG = GLBEXY.read();
        GLB.EXY_XSEEDREADS = GLB.EXY_XSEEDREADS + 1;
        GLB.EXY = GLBEXY;
        GLB.EXY_FILENAME = GLBEXY_XSEEDTITLE;
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_ReadGLBEXY");
    }
}
String GLBSOD_EXNRNOTDIA;
String GLBSOD_EXCDPRODUT;
String GLBSOD_EXINBRINDE;
String GLBSOD_EXCDNATDIA;
String GLBSOD_EXVLCONDIA;
String GLBSOD_EXVLBASDIA;
String GLBSOD_EXVLIMPDIA;
String GLBSOD_EXVLICMDIA;
String GLBSOD_EXPCICMDIA;
String GLBSOD_EXCDUFMUNI;
String GLBSOD_EXINCLIENT;
String GLBSOD_XSEEDREG;
String GLBSOE_EXCDDEPNFI;
String GLBSOE_EXNRNOTDEP;
String GLBSOE_EXCDCLIDEP;
String GLBSOE_EXINCLIDEP;
String GLBSOE_EXDIEMIDEP;
String GLBSOE_EXCDTIPDEP;
String GLBSOE_EXVLTOICMN;
String GLBSOE_EXNRUSUNFI;
String GLBSOE_XSEEDREG;
String GLBSOH_EXINCLIFOR;
String GLBSOH_EXCDCLIFOR;
String GLBSOH_EXVLMOVIME;
String GLBSOH_XSEEDREG;
String GLBSOP_EXCDDEBICM;
String GLBSOP_EXCDCONCRE;
String GLBSOP_EXCDNATOPE;
String GLBSOP_EXCDCLAFIS;
String GLBSOP_EXCDUFMUNI;
String GLBSOP_EXVLCONTAB;
String GLBSOP_EXVLBASICM;
String GLBSOP_EXVLIMPICM;
String GLBSOP_XSEEDREG;
String GLBSOS_EXCDNATDIA;
String GLBSOS_EXINCLIENT;
String GLBSOS_EXVLCONDIA;
String GLBSOS_EXVLBASDIA;
String GLBSOS_EXVLIMPDIA;
String GLBSOS_EXVLICMDIA;
String GLBSOS_EXPCICMDIA;
String GLBSOS_EXCDUFMUNI;
String GLBSOS_XSEEDREG;
String GLBSOU_EXCDNATDIA;
String GLBSOU_EXINCLIENT;
String GLBSOU_EXVLCONDIA;
String GLBSOU_EXVLBASDIA;
String GLBSOU_EXVLIMPDIA;
String GLBSOU_EXVLICMDIA;
String GLBSOU_EXPCICMDIA;
String GLBSOU_EXCDUFMUNI;
String GLBSOU_XSEEDREG;
String GLBSOW_EXNRNOTCRE;
String GLBSOW_EXVLBASCRE;
String GLBSOW_EXVLICMDID;
String GLBSOW_EXVLICMDIO;
String GLBSOW_EXVLFCPDES;
String GLBSOW_XSEEDREG;
String GLBSOY_EXNRNOTCRE;
String GLBSOY_EXCDNATCRE;
String GLBSOY_EXVLCONCRE;
String GLBSOY_EXVLBASCRE;
String GLBSOY_EXVLIMPCRE;
String GLBSOY_EXPCICMCRE;
String GLBSOY_EXCDLINCRE;
String GLBSOY_EXINTEXCRE;
String GLBSOY_XSEEDREG;
String GLBEXD_XSEEDTITLE = "";
String GLBEXD_XSEEDSTATUS = "";
boolean GLBEXD_XSEEDEOF = false;
String GLBEXD_EXTEND = "";
String GLBEXD_EXTRACTAS = "";
String GLBEXE_XSEEDTITLE = "";
String GLBEXE_XSEEDSTATUS = "";
boolean GLBEXE_XSEEDEOF = false;
String GLBEXE_EXTEND = "";
String GLBEXE_EXTRACTAS = "";
String GLBEXH_XSEEDTITLE = "";
String GLBEXH_XSEEDSTATUS = "";
boolean GLBEXH_XSEEDEOF = false;
String GLBEXH_EXTEND = "";
String GLBEXH_EXTRACTAS = "";
String GLBEXI_XSEEDTITLE = "";
String GLBEXI_XSEEDSTATUS = "";
boolean GLBEXI_XSEEDEOF = false;
String GLBEXI_EXTEND = "";
String GLBEXI_EXTRACTAS = "";
String GLBEXP_XSEEDTITLE = "";
String GLBEXP_XSEEDSTATUS = "";
boolean GLBEXP_XSEEDEOF = false;
String GLBEXP_EXTEND = "";
String GLBEXP_EXTRACTAS = "";
String GLBEXS_XSEEDTITLE = "";
String GLBEXS_XSEEDSTATUS = "";
boolean GLBEXS_XSEEDEOF = false;
String GLBEXS_EXTEND = "";
String GLBEXS_EXTRACTAS = "";
String GLBEXU_XSEEDTITLE = "";
String GLBEXU_XSEEDSTATUS = "";
boolean GLBEXU_XSEEDEOF = false;
String GLBEXU_EXTEND = "";
String GLBEXU_EXTRACTAS = "";
String GLBEXW_XSEEDTITLE = "";
String GLBEXW_XSEEDSTATUS = "";
boolean GLBEXW_XSEEDEOF = false;
String GLBEXW_EXTEND = "";
String GLBEXW_EXTRACTAS = "";
String GLBEXY_XSEEDTITLE = "";
String GLBEXY_XSEEDSTATUS = "";
boolean GLBEXY_XSEEDEOF = false;
String GLBEXY_EXTEND = "";
String GLBEXY_EXTRACTAS = "";
String GLBSOD_XSEEDTITLE;
String GLBSOD_XSEEDSTATUS;
String GLBSOD_STATUS;
int GLBSOD_XSEEDEOF;
String GLBSOE_XSEEDTITLE;
String GLBSOE_XSEEDSTATUS;
String GLBSOE_STATUS;
int GLBSOE_XSEEDEOF;
String GLBSOH_XSEEDTITLE;
String GLBSOH_XSEEDSTATUS;
String GLBSOH_STATUS;
int GLBSOH_XSEEDEOF;
String GLBSOP_XSEEDTITLE;
String GLBSOP_XSEEDSTATUS;
String GLBSOP_STATUS;
int GLBSOP_XSEEDEOF;
String GLBSOS_XSEEDTITLE;
String GLBSOS_XSEEDSTATUS;
String GLBSOS_STATUS;
int GLBSOS_XSEEDEOF;
String GLBSOU_XSEEDTITLE;
String GLBSOU_XSEEDSTATUS;
String GLBSOU_STATUS;
int GLBSOU_XSEEDEOF;
String GLBSOW_XSEEDTITLE;
String GLBSOW_XSEEDSTATUS;
String GLBSOW_STATUS;
int GLBSOW_XSEEDEOF;
String GLBSOY_XSEEDTITLE;
String GLBSOY_XSEEDSTATUS;
String GLBSOY_STATUS;
int GLBSOY_XSEEDEOF;
private void GLB_LPZ_Initialize ()
{
    GLB.LPB_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPB";
    GLB.LPB_XSEEDSTATUS = "";
    GLB.LPB_XSEEDEOF = 0;
    GLB.PAGECOUNTB = 0;
    GLB.LINECOUNTB = 9998;
    GLB.FORMDEPTHB = 60;
    GLB.TITLEB = "";
    GLB.INITREPORTB = false;
    GLB.ADVANCEB = false;
    GLB.STATIONB = "";
    GLB.STNB = "";
    GLB.LPC_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPC";
    GLB.LPC_XSEEDSTATUS = "";
    GLB.LPC_XSEEDEOF = 0;
    GLB.PAGECOUNTC = 0;
    GLB.LINECOUNTC = 9998;
    GLB.FORMDEPTHC = 60;
    GLB.TITLEC = "";
    GLB.INITREPORTC = false;
    GLB.ADVANCEC = false;
    GLB.STATIONC = "";
    GLB.STNC = "";
    GLB.LPD_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPD";
    GLB.LPD_XSEEDSTATUS = "";
    GLB.LPD_XSEEDEOF = 0;
    GLB.PAGECOUNTD = 0;
    GLB.LINECOUNTD = 9998;
    GLB.FORMDEPTHD = 60;
    GLB.TITLED = "";
    GLB.INITREPORTD = false;
    GLB.ADVANCED = false;
    GLB.STATIOND = "";
    GLB.STND = "";
    GLB.LPE_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPE";
    GLB.LPE_XSEEDSTATUS = "";
    GLB.LPE_XSEEDEOF = 0;
    GLB.PAGECOUNTE = 0;
    GLB.LINECOUNTE = 9998;
    GLB.FORMDEPTHE = 60;
    GLB.TITLEE = "";
    GLB.INITREPORTE = false;
    GLB.ADVANCEE = false;
    GLB.STATIONE = "";
    GLB.STNE = "";
    GLB.LPF_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPF";
    GLB.LPF_XSEEDSTATUS = "";
    GLB.LPF_XSEEDEOF = 0;
    GLB.PAGECOUNTF = 0;
    GLB.LINECOUNTF = 9998;
    GLB.FORMDEPTHF = 60;
    GLB.TITLEF = "";
    GLB.INITREPORTF = false;
    GLB.ADVANCEF = false;
    GLB.STATIONF = "";
    GLB.STNF = "";
    GLB.LPG_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPG";
    GLB.LPG_XSEEDSTATUS = "";
    GLB.LPG_XSEEDEOF = 0;
    GLB.PAGECOUNTG = 0;
    GLB.LINECOUNTG = 9998;
    GLB.FORMDEPTHG = 60;
    GLB.TITLEG = "";
    GLB.INITREPORTG = false;
    GLB.ADVANCEG = false;
    GLB.STATIONG = "";
    GLB.STNG = "";
    GLB.LPH_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPH";
    GLB.LPH_XSEEDSTATUS = "";
    GLB.LPH_XSEEDEOF = 0;
    GLB.PAGECOUNTH = 0;
    GLB.LINECOUNTH = 9998;
    GLB.FORMDEPTHH = 60;
    GLB.TITLEH = "";
    GLB.INITREPORTH = false;
    GLB.ADVANCEH = false;
    GLB.STATIONH = "";
    GLB.STNH = "";
    GLB.LPI_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPI";
    GLB.LPI_XSEEDSTATUS = "";
    GLB.LPI_XSEEDEOF = 0;
    GLB.PAGECOUNTI = 0;
    GLB.LINECOUNTI = 9998;
    GLB.FORMDEPTHI = 60;
    GLB.TITLEI = "";
    GLB.INITREPORTI = false;
    GLB.ADVANCEI = false;
    GLB.STATIONI = "";
    GLB.STNI = "";
    GLB.LPJ_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPJ";
    GLB.LPJ_XSEEDSTATUS = "";
    GLB.LPJ_XSEEDEOF = 0;
    GLB.PAGECOUNTJ = 0;
    GLB.LINECOUNTJ = 9998;
    GLB.FORMDEPTHJ = 60;
    GLB.TITLEJ = "";
    GLB.INITREPORTJ = false;
    GLB.ADVANCEJ = false;
    GLB.STATIONJ = "";
    GLB.STNJ = "";
    GLB.LPL_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPL";
    GLB.LPL_XSEEDSTATUS = "";
    GLB.LPL_XSEEDEOF = 0;
    GLB.PAGECOUNTL = 0;
    GLB.LINECOUNTL = 9998;
    GLB.FORMDEPTHL = 60;
    GLB.TITLEL = "";
    GLB.INITREPORTL = false;
    GLB.ADVANCEL = false;
    GLB.STATIONL = "";
    GLB.STNL = "";
    GLB.LPM_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPM";
    GLB.LPM_XSEEDSTATUS = "";
    GLB.LPM_XSEEDEOF = 0;
    GLB.PAGECOUNTM = 0;
    GLB.LINECOUNTM = 9998;
    GLB.FORMDEPTHM = 60;
    GLB.TITLEM = "";
    GLB.INITREPORTM = false;
    GLB.ADVANCEM = false;
    GLB.STATIONM = "";
    GLB.STNM = "";
    GLB.LPN_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPN";
    GLB.LPN_XSEEDSTATUS = "";
    GLB.LPN_XSEEDEOF = 0;
    GLB.PAGECOUNTN = 0;
    GLB.LINECOUNTN = 9998;
    GLB.FORMDEPTHN = 60;
    GLB.TITLEN = "";
    GLB.INITREPORTN = false;
    GLB.ADVANCEN = false;
    GLB.STATIONN = "";
    GLB.STNN = "";
    GLB.LPO_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPO";
    GLB.LPO_XSEEDSTATUS = "";
    GLB.LPO_XSEEDEOF = 0;
    GLB.PAGECOUNTO = 0;
    GLB.LINECOUNTO = 9998;
    GLB.FORMDEPTHO = 60;
    GLB.TITLEO = "";
    GLB.INITREPORTO = false;
    GLB.ADVANCEO = false;
    GLB.STATIONO = "";
    GLB.STNO = "";
    GLB.LPP_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPP";
    GLB.LPP_XSEEDSTATUS = "";
    GLB.LPP_XSEEDEOF = 0;
    GLB.PAGECOUNTP = 0;
    GLB.LINECOUNTP = 9998;
    GLB.FORMDEPTHP = 60;
    GLB.TITLEP = "";
    GLB.INITREPORTP = false;
    GLB.ADVANCEP = false;
    GLB.STATIONP = "";
    GLB.STNP = "";
    GLB.LPQ_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPQ";
    GLB.LPQ_XSEEDSTATUS = "";
    GLB.LPQ_XSEEDEOF = 0;
    GLB.PAGECOUNTQ = 0;
    GLB.LINECOUNTQ = 9998;
    GLB.FORMDEPTHQ = 60;
    GLB.TITLEQ = "";
    GLB.INITREPORTQ = false;
    GLB.ADVANCEQ = false;
    GLB.STATIONQ = "";
    GLB.STNQ = "";
    GLB.LPR_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPR";
    GLB.LPR_XSEEDSTATUS = "";
    GLB.LPR_XSEEDEOF = 0;
    GLB.PAGECOUNTR = 0;
    GLB.LINECOUNTR = 9998;
    GLB.FORMDEPTHR = 60;
    GLB.TITLER = "";
    GLB.INITREPORTR = false;
    GLB.ADVANCER = false;
    GLB.STATIONR = "";
    GLB.STNR = "";
    GLB.LPS_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPS";
    GLB.LPS_XSEEDSTATUS = "";
    GLB.LPS_XSEEDEOF = 0;
    GLB.PAGECOUNTS = 0;
    GLB.LINECOUNTS = 9998;
    GLB.FORMDEPTHS = 60;
    GLB.TITLES = "";
    GLB.INITREPORTS = false;
    GLB.ADVANCES = false;
    GLB.STATIONS = "";
    GLB.STNS = "";
    GLB.LPZ_XSEEDTITLE = GLB.BACKUPDIR.trim() + File.separatorChar + "LPZ";
    GLB.LPZ_XSEEDSTATUS = "";
    GLB.LPZ_XSEEDEOF = 0;
    GLB.PAGECOUNTZ = 0;
    GLB.LINECOUNTZ = 9998;
    GLB.FORMDEPTHZ = 60;
    GLB.TITLEZ = "";
    GLB.INITREPORTZ = false;
    GLB.ADVANCEZ = false;
    GLB.STATIONZ = "";
    GLB.STNZ = "";
}
// Defining Table Itens
String GS114_CDATVREP;
double GS114_CDEMPRES;
double GS114_CDFILVEN;
double GS114_DIATUALX;
double GS114_DIFIEXEC;
double GS114_DIINEXEC;
double GS114_DIPARAEX;
double GS114_DISOLICI;
String GS114_INIMPRES;
String GS114_INSITREG;
double GS114_INSOLICI;
String GS114_NMSTATIO;
double GS114_NRDAFILA;
double GS114_NRDEVIAS;
double GS114_NRMIXREP;
double GS114_NRREADSS;
double GS114_NRSOLICI;
double GS114_NRUSUARI;
double GS114_NRWRITES;
double GS114_QTLINHAS;
double GS114_QTPAGINA;
double GS114_THCONSUM;
double GS114_THFIEXEC;
double GS114_THINEXEC;
double GS114_THPARAEX;
double GS114_THPROCES;
double GS114_THSOLICI;
double GS114_ROWID;
// Defining Table Work Itens
String GS114_XSEEDTITLE;
String GS114_XSEEDSTATUS;
boolean GS114_XSEEDEOF;
boolean GS114_XSEEDSEEK;
// Defining Table Itens
String GS125_CDDOITEM;
String GS125_CDELEMTO;
double GS125_CDEMPRES;
String GS125_DSELEMEN;
String GS125_INCHAVDS;
String GS125_INSITREG;
BigDecimal GS125_VLELEMEN;
// Defining Auto.Entry Buffer
String AU_GS125_CDELEMTO;
String AU_GS125_DSELEMEN;
BigDecimal AU_GS125_VLELEMEN;
String AU_GS125_CDDOITEM;
double AU_GS125_CDEMPRES;
String AU_GS125_INCHAVDS;
String AU_GS125_INSITREG;
double AU_GS125_ROWID;
double GS125_ROWID;
// Defining Table Work Itens
String GS125_XSEEDTITLE;
String GS125_XSEEDSTATUS;
boolean GS125_XSEEDEOF;
boolean GS125_XSEEDSEEK;
// Defining Table Itens
double GS101_CDACTRAB;
double GS101_CDATVECO;
double GS101_CDATVEMP;
double GS101_CDDOPAIS;
String GS101_CDEMPEAN;
double GS101_CDEMPRES;
double GS101_CDFILIAL;
double GS101_CDFPASXX;
double GS101_CDGRUEMP;
double GS101_CDLOCEAN;
double GS101_CDNATEST;
double GS101_CDSEGNEG;
String GS101_CDUFLOCA;
double GS101_DIREGJUN;
String GS101_DSABREMP;
String GS101_DSBAIRRO;
String GS101_DSENDERE;
String GS101_INADISEN;
double GS101_INATIVOX;
double GS101_INDETALH;
String GS101_INEMPPRI;
String GS101_INLINSHO;
double GS101_INREVOPE;
String GS101_NMEMPCON;
String GS101_NMEMPEXT;
String GS101_NMEMPRES;
String GS101_NMFILIAL;
String GS101_NMLOCALI;
String GS101_NMSITEAC;
double GS101_NRAGEFGT;
double GS101_NRBANFGT;
double GS101_NRCEPCOM;
double GS101_NRCEPLOC;
double GS101_NRCGCDIG;
double GS101_NRCGCFIL;
double GS101_NRCGCNUM;
String GS101_NRCONFGT;
String GS101_NRCXPOST;
double GS101_NREMPFGT;
double GS101_NRENDLOC;
String GS101_NRFACSIM;
double GS101_NRFAMITR;
double GS101_NRFAXDDD;
double GS101_NRFAXNUM;
String GS101_NRINSCRE;
String GS101_NRINSMUN;
String GS101_NRPREFIP;
double GS101_NRPROPTR;
double GS101_NRREGJUN;
double GS101_NRSEQCON;
double GS101_NRSEQSIF;
double GS101_NRTELDDD;
String GS101_NRTELEFO;
String GS101_NRTELEXX;
double GS101_NRTELNUM;
double GS101_TPEMPSIF;
double GS101_VLPROATE;
double GS101_VLPROEXC;
double GS101_ROWID;
// Defining Table Work Itens
String GS101_XSEEDTITLE;
String GS101_XSEEDSTATUS;
boolean GS101_XSEEDEOF;
boolean GS101_XSEEDSEEK;
// Defining Table Itens
double GS109_CDEMPRES;
double GS109_CDINDFIN;
double GS109_CDINDMAT;
double GS109_CDINDPRO;
double GS109_CDINDVEN;
double GS109_DIDIASUT;
String GS109_INSITREG;
double GS109_NRDUTMFI;
double GS109_NRDUTMMA;
double GS109_NRDUTMPR;
double GS109_NRDUTMVE;
double GS109_QTPESOME;
double GS109_QTVOLUME;
double GS109_VLFRERED;
double GS109_VLFRETEX;
double GS109_VLVENDAS;
double GS109_ROWID;
// Defining Table Work Itens
String GS109_XSEEDTITLE;
String GS109_XSEEDSTATUS;
boolean GS109_XSEEDEOF;
boolean GS109_XSEEDSEEK;
// Defining Table Itens
double AV119_CDAGENCI;
String AV119_CDATVENF;
String AV119_CDATVSNF;
double AV119_CDBANCOX;
double AV119_CDCANVDA;
double AV119_CDCLACUS;
double AV119_CDCLIENT;
double AV119_CDCLIFIN;
double AV119_CDCONDEB;
double AV119_CDCONIPI;
double AV119_CDCREICM;
double AV119_CDCREIPI;
double AV119_CDDEBICM;
double AV119_CDDEPNFI;
double AV119_CDDESMER;
double AV119_CDEMPRES;
double AV119_CDESPEC1;
double AV119_CDESPEC2;
double AV119_CDESTADO;
String AV119_CDETQCOR;
double AV119_CDFILIAL;
double AV119_CDFILVEN;
double AV119_CDFORDIF;
double AV119_CDFORFCP;
double AV119_CDFORNST;
double AV119_CDFRETEX;
double AV119_CDGERENT;
double AV119_CDLOCCLI;
double AV119_CDLOCEMB;
double AV119_CDMERCAD;
double AV119_CDMODENF;
double AV119_CDMOTFTE;
double AV119_CDOCORTR;
double AV119_CDORIFRE;
double AV119_CDPAISEN;
String AV119_CDRASTRE;
double AV119_CDREDESP;
double AV119_CDREPRES;
double AV119_CDSERVCO;
double AV119_CDSITNFE;
double AV119_CDSUPERV;
double AV119_CDTEXTNF;
double AV119_CDTIPFAT;
double AV119_CDTRANSP;
double AV119_CDVDCONS;
double AV119_CDVENCTO;
double AV119_CDVIATRA;
double AV119_DDENTRED;
double AV119_DDENTREG;
double AV119_DDPRORRO;
double AV119_DDVENCCD;
double AV119_DIDENTNF;
double AV119_DIDEVOLU;
double AV119_DIDSAINF;
double AV119_DIEMINOT;
double AV119_DIENTRRE;
double AV119_DIENTRTR;
double AV119_DIIMPNOT;
double AV119_DISAINOT;
double AV119_DISEQUNI;
String AV119_DSCHANFE;
double AV119_INCLIFOR;
double AV119_INDESPCO;
double AV119_INDESPIS;
double AV119_INENCEOS;
double AV119_INFREINF;
double AV119_INLINLSO;
double AV119_INNFCVAL;
double AV119_INNOTUNI;
double AV119_INOBSFAT;
double AV119_INOCORTR;
double AV119_INPEDESP;
double AV119_INPEDTRP;
double AV119_INRECDEP;
double AV119_INSITNOT;
String AV119_INSITREG;
String AV119_NMRECALF;
double AV119_NRACACLI;
double AV119_NRCEPCEN;
double AV119_NRCEPENT;
double AV119_NRDACOTA;
double AV119_NRDOLOTE;
double AV119_NRDUPLIC;
double AV119_NRFATEXP;
double AV119_NRGRUPOC;
double AV119_NRNFEPAC;
double AV119_NRNOTAFI;
double AV119_NRORDEMB;
double AV119_NRORDFAT;
double AV119_NRORDPRO;
double AV119_NRORDSEP;
double AV119_NRORDSER;
double AV119_NRPEDIDO;
double AV119_NRPRAMED;
double AV119_NRSEQUNI;
double AV119_NRSOLAUT;
double AV119_NRSOLICI;
double AV119_NRSOLORD;
double AV119_NRSOLPDF;
double AV119_NRSOLVER;
double AV119_NRSQFTEX;
double AV119_NRUSUENF;
double AV119_NRUSUSNF;
double AV119_NRVOLUM1;
double AV119_NRVOLUM2;
double AV119_PCICMNOT;
double AV119_PCICMTXF;
double AV119_PCVENCCD;
double AV119_PQBRUTOX;
double AV119_PQLIQUID;
double AV119_QTMCEMBA;
double AV119_QTVOLU01;
double AV119_QTVOLU02;
double AV119_THDENTNF;
double AV119_THDSAINF;
double AV119_THIMPNOT;
double AV119_THSAIDAX;
double AV119_THSEQUNI;
double AV119_TPREGIST;
String AV119_TPSERIEN;
double AV119_TPVENDAX;
double AV119_VLADIDEV;
double AV119_VLALTURA;
double AV119_VLBASNOR;
double AV119_VLBASSTR;
double AV119_VLBRDESN;
double AV119_VLBRIDNF;
double AV119_VLBRUTOP;
double AV119_VLCOFFRE;
double AV119_VLCOFNOT;
double AV119_VLCOFTXF;
double AV119_VLCOMMKP;
double AV119_VLCOMPRI;
double AV119_VLCUSSIM;
double AV119_VLDESPSE;
double AV119_VLDOLENT;
double AV119_VLDVVSIM;
double AV119_VLFATMOE;
double AV119_VLFCPDET;
double AV119_VLFCPSTT;
double AV119_VLFREDNF;
double AV119_VLFREFNF;
double AV119_VLFRERED;
double AV119_VLFRETEX;
double AV119_VLICMDDT;
double AV119_VLICMDIT;
double AV119_VLICMDOT;
double AV119_VLICMNOR;
double AV119_VLICMSFR;
double AV119_VLICMSTR;
double AV119_VLICMTXF;
double AV119_VLICMZFN;
double AV119_VLINDDEF;
double AV119_VLIPINOT;
double AV119_VLIPITXF;
double AV119_VLLARGUR;
double AV119_VLLIQUID;
BigDecimal AV119_VLMOEDAX;
double AV119_VLPISCZF;
double AV119_VLPISFRE;
double AV119_VLPISNOT;
double AV119_VLPISTXF;
double AV119_VLRECSIM;
double AV119_VLRICMST;
double AV119_VLSEGEXP;
double AV119_VLTAXFRE;
double AV119_VLTOICMN;
double AV119_VLURVFAT;
double AV119_ROWID;
// Defining Table Work Itens
String AV119_XSEEDTITLE;
String AV119_XSEEDSTATUS;
boolean AV119_XSEEDEOF;
boolean AV119_XSEEDSEEK;
// Defining Table Itens
String AV120_CDALMCLI;
double AV120_CDCCUDEB;
double AV120_CDCLACUS;
double AV120_CDCLAFIS;
double AV120_CDCONCRE;
double AV120_CDCONDEB;
double AV120_CDCRECOF;
double AV120_CDCREICM;
double AV120_CDCREIPI;
double AV120_CDCREPIS;
double AV120_CDCRESTR;
double AV120_CDDEBCOF;
double AV120_CDDEBICM;
double AV120_CDDEBIPI;
double AV120_CDDEBPIS;
double AV120_CDDEBSTR;
double AV120_CDDOCEST;
double AV120_CDEMPRES;
double AV120_CDENQIPI;
double AV120_CDFILIAL;
double AV120_CDITEMXX;
double AV120_CDMODENF;
double AV120_CDNATCOM;
double AV120_CDNATOEN;
double AV120_CDNATOPE;
double AV120_CDOCONAT;
double AV120_CDOCONEN;
double AV120_CDPRODUT;
String AV120_CDPROPDF;
double AV120_CDSITCOF;
double AV120_CDSITIPI;
double AV120_CDSITPIS;
double AV120_CDSITTRI;
double AV120_CDTRIDIF;
String AV120_CDUNIVOL;
double AV120_DIEMINFI;
double AV120_INBRIDNF;
double AV120_INBRINDE;
double AV120_INIPIDBC;
double AV120_INORIPRO;
String AV120_INSITREG;
double AV120_NRNOTAFI;
double AV120_NRSQORDE;
double AV120_PCAPRTRI;
double AV120_PCDESCNT;
double AV120_PCDESCON;
double AV120_PCFCPDES;
double AV120_PCFCPSTR;
double AV120_PCICMDID;
double AV120_PCICMPRO;
double AV120_PCICMSIS;
double AV120_PCIPIPRO;
double AV120_PCMVASTS;
double AV120_PCPARICD;
double AV120_QTDEVOLU;
double AV120_QTDEVVOL;
double AV120_QTFATURA;
double AV120_QTFATVOL;
double AV120_TPREGIST;
double AV120_VLADIBIC;
double AV120_VLADIDEV;
double AV120_VLAPRTRI;
double AV120_VLBASDID;
double AV120_VLBASFCS;
double AV120_VLBASRIC;
double AV120_VLBASSTR;
double AV120_VLBASSTS;
double AV120_VLBICMTF;
double AV120_VLBIPITF;
double AV120_VLBRUTOP;
double AV120_VLBUNSTR;
double AV120_VLCOFPRO;
double AV120_VLDESACE;
double AV120_VLDESCNT;
double AV120_VLDESCON;
double AV120_VLDESFNF;
double AV120_VLDEVOLU;
double AV120_VLFATMOE;
double AV120_VLFCPDES;
double AV120_VLFCPSTR;
double AV120_VLFRECIF;
double AV120_VLFREFNF;
double AV120_VLICMDID;
double AV120_VLICMDIN;
double AV120_VLICMDIO;
double AV120_VLICMPRO;
double AV120_VLICMSIS;
double AV120_VLICMSTR;
double AV120_VLICMSTS;
double AV120_VLICMTXF;
double AV120_VLICMZFP;
double AV120_VLIPIDEV;
double AV120_VLIPIPRO;
double AV120_VLIPITXF;
double AV120_VLISTDEV;
double AV120_VLIUNSTR;
double AV120_VLLIQFNF;
double AV120_VLLIQUID;
double AV120_VLPISCZF;
double AV120_VLPISPRO;
double AV120_VLPMPROF;
double AV120_VLPREFAT;
double AV120_VLPREVOL;
double AV120_VLUNIFNF;
double AV120_ROWID;
// Defining Table Work Itens
String AV120_XSEEDTITLE;
String AV120_XSEEDSTATUS;
boolean AV120_XSEEDEOF;
boolean AV120_XSEEDSEEK;
// Defining Table Itens
double CG133_CDCONTAX;
double CG133_CDEMPRES;
double CG133_CDMODENF;
double CG133_CDNATCOM;
double CG133_CDNATOPE;
String CG133_CDUFMUNI;
double CG133_DIEMINOT;
double CG133_DISAINOT;
double CG133_INCONFIN;
double CG133_INDECEND;
double CG133_INORIGEM;
double CG133_INSITNOT;
String CG133_INSITREG;
double CG133_INZONAFR;
double CG133_NRCFICMP;
double CG133_NRNOTAFI;
double CG133_NRNOTFIN;
double CG133_PCICMNAT;
double CG133_PCICMPRO;
double CG133_TPREGIST;
String CG133_TPSERIEN;
double CG133_VLBASDID;
double CG133_VLBASICM;
double CG133_VLBASIPI;
double CG133_VLBASSTR;
double CG133_VLCONTAX;
double CG133_VLFCPDES;
double CG133_VLICMDID;
double CG133_VLICMDIO;
double CG133_VLICMPRO;
double CG133_VLICMSTR;
double CG133_VLIMPICM;
double CG133_VLIMPIPI;
double CG133_VLISEICM;
double CG133_VLISEIPI;
double CG133_VLLIQUID;
double CG133_VLOUTICM;
double CG133_VLOUTIPI;
double CG133_VLPERICM;
double CG133_VLPERIPI;
// Defining Auto.Entry Buffer
double AU_CG133_CDCONTAX;
double AU_CG133_CDEMPRES;
double AU_CG133_CDMODENF;
double AU_CG133_CDNATCOM;
double AU_CG133_CDNATOPE;
String AU_CG133_CDUFMUNI;
double AU_CG133_DIEMINOT;
double AU_CG133_DISAINOT;
double AU_CG133_INCONFIN;
double AU_CG133_INDECEND;
double AU_CG133_INORIGEM;
double AU_CG133_INSITNOT;
String AU_CG133_INSITREG;
double AU_CG133_INZONAFR;
double AU_CG133_NRCFICMP;
double AU_CG133_NRNOTAFI;
double AU_CG133_NRNOTFIN;
double AU_CG133_PCICMNAT;
double AU_CG133_PCICMPRO;
double AU_CG133_TPREGIST;
String AU_CG133_TPSERIEN;
double AU_CG133_VLBASICM;
double AU_CG133_VLBASIPI;
double AU_CG133_VLBASSTR;
double AU_CG133_VLCONTAX;
double AU_CG133_VLBASDID;
double AU_CG133_VLICMDID;
double AU_CG133_VLICMDIO;
double AU_CG133_VLFCPDES;
double AU_CG133_VLICMPRO;
double AU_CG133_VLICMSTR;
double AU_CG133_VLIMPICM;
double AU_CG133_VLIMPIPI;
double AU_CG133_VLISEICM;
double AU_CG133_VLISEIPI;
double AU_CG133_VLLIQUID;
double AU_CG133_VLOUTICM;
double AU_CG133_VLOUTIPI;
double AU_CG133_VLPERICM;
double AU_CG133_VLPERIPI;
double AU_CG133_ROWID;
double CG133_ROWID;
// Defining Table Work Itens
String CG133_XSEEDTITLE;
String CG133_XSEEDSTATUS;
boolean CG133_XSEEDEOF;
boolean CG133_XSEEDSEEK;
// Defining Table Itens
double CG122_AMMOVTOX;
double CG122_CDCLIFOR;
double CG122_CDEMPRES;
double CG122_CDFILIAL;
double CG122_INCLIFOR;
double CG122_INENTSAI;
String CG122_INSITREG;
double CG122_VLMOVIME;
// Defining Auto.Entry Buffer
double AU_CG122_CDEMPRES;
double AU_CG122_AMMOVTOX;
double AU_CG122_CDCLIFOR;
double AU_CG122_CDFILIAL;
double AU_CG122_INCLIFOR;
double AU_CG122_INENTSAI;
String AU_CG122_INSITREG;
double AU_CG122_VLMOVIME;
double AU_CG122_ROWID;
double CG122_ROWID;
// Defining Table Work Itens
String CG122_XSEEDTITLE;
String CG122_XSEEDSTATUS;
boolean CG122_XSEEDEOF;
boolean CG122_XSEEDSEEK;
// Defining Table Itens
double CG168_CDCLAFIS;
double CG168_CDEMPRES;
String CG168_INSITREG;
double CG168_VLMOVIME;
// Defining Auto.Entry Buffer
double AU_CG168_CDEMPRES;
double AU_CG168_CDCLAFIS;
double AU_CG168_VLMOVIME;
String AU_CG168_INSITREG;
double AU_CG168_ROWID;
double CG168_ROWID;
// Defining Table Work Itens
String CG168_XSEEDTITLE;
String CG168_XSEEDSTATUS;
boolean CG168_XSEEDEOF;
boolean CG168_XSEEDSEEK;
// Defining Table Itens
double CG123_AMMOVTOX;
double CG123_CDCLAFIS;
double CG123_CDEMPRES;
double CG123_CDFILIAL;
double CG123_INENTSAI;
String CG123_INSITREG;
double CG123_VLMOVIME;
// Defining Auto.Entry Buffer
double AU_CG123_AMMOVTOX;
double AU_CG123_CDCLAFIS;
double AU_CG123_CDEMPRES;
double AU_CG123_CDFILIAL;
double AU_CG123_INENTSAI;
String AU_CG123_INSITREG;
double AU_CG123_VLMOVIME;
double AU_CG123_ROWID;
double CG123_ROWID;
// Defining Table Work Itens
String CG123_XSEEDTITLE;
String CG123_XSEEDSTATUS;
boolean CG123_XSEEDEOF;
boolean CG123_XSEEDSEEK;
// Defining Table Itens
double CG124_AMMOVTOX;
String CG124_CDAJAPUR;
double CG124_CDEMPRES;
double CG124_CDFILIAL;
double CG124_CDFISCAL;
double CG124_CDNATCOM;
double CG124_DIIMPORT;
String CG124_DSIMPOST;
double CG124_INICMIPI;
double CG124_INORIGEM;
double CG124_INPROTRI;
double CG124_NRDECEND;
String CG124_NRPROTRI;
double CG124_NRSEQUEN;
double CG124_NRSISTRI;
double CG124_TPIMPOST;
double CG124_VLBASICM;
double CG124_VLBASIPI;
double CG124_VLCONTAB;
double CG124_VLIMPICM;
double CG124_VLIMPIPI;
double CG124_VLINTICM;
double CG124_VLINTIPI;
double CG124_VLOUTICM;
double CG124_VLOUTIPI;
// Defining Auto.Entry Buffer
double AU_CG124_AMMOVTOX;
double AU_CG124_CDEMPRES;
double AU_CG124_CDFILIAL;
double AU_CG124_CDFISCAL;
double AU_CG124_CDNATCOM;
String AU_CG124_DSIMPOST;
double AU_CG124_INICMIPI;
double AU_CG124_INORIGEM;
double AU_CG124_TPIMPOST;
double AU_CG124_NRSEQUEN;
double AU_CG124_VLIMPICM;
double AU_CG124_VLBASICM;
double AU_CG124_VLCONTAB;
double AU_CG124_VLINTICM;
double AU_CG124_VLOUTICM;
double AU_CG124_NRDECEND;
double AU_CG124_VLBASIPI;
double AU_CG124_VLIMPIPI;
double AU_CG124_VLINTIPI;
double AU_CG124_VLOUTIPI;
double AU_CG124_ROWID;
double CG124_ROWID;
// Defining Table Work Itens
String CG124_XSEEDTITLE;
String CG124_XSEEDSTATUS;
boolean CG124_XSEEDEOF;
boolean CG124_XSEEDSEEK;
// Defining Table Itens
double AV101_AMCADAST;
double AV101_AMREACLI;
double AV101_CDAGEAUX;
double AV101_CDAGEFOR;
double AV101_CDAGENCI;
double AV101_CDBANAUX;
double AV101_CDBANCOX;
double AV101_CDBANFOR;
double AV101_CDBLOQUE;
double AV101_CDCATCLI;
double AV101_CDCLICCI;
double AV101_CDCLIENT;
double AV101_CDCLIORD;
String AV101_CDCLIVIP;
double AV101_CDCONSVD;
String AV101_CDDCTFOR;
double AV101_CDDESMER;
String AV101_CDDIGAGE;
String AV101_CDDIGCON;
String AV101_CDDIGFOR;
double AV101_CDDOPAIS;
String AV101_CDEANCLI;
String AV101_CDEANENT;
String AV101_CDEANFAT;
double AV101_CDEMPRES;
double AV101_CDFILFAT;
double AV101_CDFISJUR;
double AV101_CDFRETEX;
double AV101_CDGERENT;
double AV101_CDMERCAD;
double AV101_CDMERNEG;
double AV101_CDMOTEXC;
double AV101_CDPAIDES;
double AV101_CDPAISEN;
double AV101_CDPAISFA;
double AV101_CDPAISPG;
double AV101_CDREEMBO;
double AV101_CDREGIAO;
double AV101_CDREGINT;
double AV101_CDREPRES;
String AV101_CDSENEXT;
String AV101_CDSUFRAM;
double AV101_CDTEXORD;
double AV101_CDTEXPDF;
double AV101_CDTEXTNF;
double AV101_CDTRADER;
double AV101_CDVDCONS;
double AV101_CDVENDED;
double AV101_CDVENPRE;
double AV101_DDVENCCD;
double AV101_DIACEEXT;
double AV101_DIALTCAD;
double AV101_DIALTOBF;
double AV101_DIBLOQUE;
double AV101_DIFUNDAC;
double AV101_DIMOTEXC;
double AV101_DIREATIV;
double AV101_DIULTNOT;
double AV101_DIULTPED;
double AV101_DIVALSUF;
String AV101_DSBAIENT;
String AV101_DSBAIPAG;
String AV101_DSBAIRRO;
String AV101_DSCOMPEN;
String AV101_DSCOMPLO;
String AV101_DSCOMPPG;
String AV101_DSENDENT;
String AV101_DSENDERE;
String AV101_DSLATITU;
String AV101_DSLONGIT;
String AV101_DSPRAPAG;
String AV101_DSSITEXX;
double AV101_INACOPED;
double AV101_INCGCDUP;
double AV101_INCLIDDA;
double AV101_INCLIMEI;
double AV101_INCLSMEI;
double AV101_INCOMELE;
double AV101_INDESPIS;
double AV101_INEMINFI;
double AV101_INENVEMA;
double AV101_INENVPDF;
double AV101_INFATVOL;
double AV101_INIMPBOL;
double AV101_INIMPNFC;
double AV101_INJUNCAO;
double AV101_INNFCORX;
double AV101_INPREFER;
double AV101_INPROSAV;
double AV101_INRELREP;
double AV101_INSALPED;
double AV101_INSEPBON;
double AV101_INSIMNAC;
String AV101_INSITREG;
double AV101_INSITUAC;
double AV101_INSUTRIB;
double AV101_INTELPED;
String AV101_NMCARCON;
String AV101_NMCLIENT;
String AV101_NMEMACPG;
String AV101_NMEMADEV;
String AV101_NMEMAIL1;
String AV101_NMEMAILX;
String AV101_NMEMANF2;
String AV101_NMEMANFE;
String AV101_NMEMAXML;
String AV101_NMFANTAS;
String AV101_NMPESCON;
String AV101_NMPESXML;
double AV101_NRBLOQUE;
double AV101_NRCELDDD;
double AV101_NRCELNUM;
double AV101_NRCEPCEN;
double AV101_NRCEPCFA;
double AV101_NRCEPCOM;
double AV101_NRCEPCPG;
double AV101_NRCEPENT;
double AV101_NRCEPFAT;
double AV101_NRCEPLOC;
double AV101_NRCEPPAG;
String AV101_NRCFDFXX;
double AV101_NRCGCDIG;
double AV101_NRCGCFIL;
double AV101_NRCGCNUM;
double AV101_NRCGCPRI;
String AV101_NRCTACOR;
double AV101_NRCTAFOR;
double AV101_NRDDDXML;
double AV101_NRENDENT;
double AV101_NRENDLOC;
double AV101_NRENDPAG;
double AV101_NRFAXDDD;
double AV101_NRFAXNUM;
String AV101_NRINSCRE;
String AV101_NRINSMUN;
double AV101_NRTELDDD;
double AV101_NRTELNUM;
double AV101_NRTELXML;
double AV101_NRUSUALT;
double AV101_NRUSUARI;
double AV101_NRUSUOBF;
double AV101_NRUSUREA;
double AV101_NRVOLUMI;
double AV101_NRZAPDDD;
double AV101_NRZAPNUM;
double AV101_PCDESPCO;
double AV101_PCPARFRE;
double AV101_PCVENCCD;
double AV101_THALTOBF;
double AV101_TPCADCLI;
double AV101_TPCLIENT;
double AV101_TPESTABE;
double AV101_TPPORAUX;
double AV101_TPPORTAD;
double AV101_TPVENDAX;
double AV101_VLULTPED;
double AV101_ROWID;
// Defining Table Work Itens
String AV101_XSEEDTITLE;
String AV101_XSEEDSTATUS;
boolean AV101_XSEEDEOF;
boolean AV101_XSEEDSEEK;
// Defining Table Itens
double SU101_CDAGENCI;
double SU101_CDALMOXA;
double SU101_CDBANCOX;
double SU101_CDBLOFOR;
String SU101_CDCLAFOR;
double SU101_CDCREICM;
double SU101_CDCREIPI;
double SU101_CDCTACON;
double SU101_CDCTAMPT;
double SU101_CDCTDIND;
double SU101_CDDEBIPI;
String SU101_CDDIGAGE;
double SU101_CDDIVNEG;
double SU101_CDDOPAIS;
double SU101_CDEMPRES;
double SU101_CDFISJUR;
double SU101_CDFORNEC;
double SU101_CDLOCFOR;
double SU101_CDNAOFUN;
double SU101_CDREMICR;
double SU101_CDREMIDB;
String SU101_CDSENEXT;
double SU101_CDTEXTNF;
double SU101_CDTRARES;
double SU101_DICADAST;
double SU101_DIVALCER;
double SU101_DIVALLAO;
String SU101_DSBAIRRO;
String SU101_DSCOMEND;
String SU101_DSENDERE;
String SU101_DSENDMAN;
String SU101_DSSITAGE;
double SU101_INCOCPRB;
double SU101_INCTASAL;
double SU101_INDCTFRE;
double SU101_INFORIMP;
double SU101_INICMSFR;
double SU101_INMAIPES;
double SU101_INPISCOF;
double SU101_INPRESER;
double SU101_INPRORUR;
String SU101_INSITREG;
double SU101_INTARQUI;
double SU101_INTRTFRE;
String SU101_NMCOMERL;
String SU101_NMEMAAC1;
String SU101_NMEMAACO;
String SU101_NMEMAAGE;
String SU101_NMEMACO1;
String SU101_NMEMACO2;
String SU101_NMEMACO3;
String SU101_NMEMACO4;
String SU101_NMEMACOL;
String SU101_NMEMAIL1;
String SU101_NMEMAILX;
String SU101_NMEMANF2;
String SU101_NMEMANFE;
String SU101_NMEMAXML;
String SU101_NMFORNEC;
String SU101_NMPESTIT;
String SU101_NMPESXML;
double SU101_NRCEPCOM;
double SU101_NRCEPLOC;
double SU101_NRCGCDIG;
double SU101_NRCGCFIL;
double SU101_NRCGCNUM;
double SU101_NRCGCPRI;
String SU101_NRCTACOR;
String SU101_NRCXPOST;
double SU101_NRCXPSTM;
double SU101_NRDDDXML;
double SU101_NRDIACRE;
double SU101_NRENDCOM;
double SU101_NRENDLOC;
String SU101_NRFACSIM;
String SU101_NRINSCRE;
String SU101_NRINSMUN;
double SU101_NRPTOQUA;
String SU101_NRRAMALX;
double SU101_NRREMRET;
double SU101_NRTABTAR;
String SU101_NRTELEFO;
String SU101_NRTELEXX;
double SU101_NRTELXML;
double SU101_NRULTVOL;
double SU101_PCJURFOR;
double SU101_QTMESRES;
double SU101_QTMINFRC;
double SU101_THCOLETA;
double SU101_TPARQFRE;
double SU101_TPFORNEC;
double SU101_TPFRECUB;
double SU101_VLCONVM3;
double SU101_ROWID;
// Defining Table Work Itens
String SU101_XSEEDTITLE;
String SU101_XSEEDSTATUS;
boolean SU101_XSEEDEOF;
boolean SU101_XSEEDSEEK;
// Defining Table Itens
double MK102_AMULTPAG;
double MK102_CDAGENCI;
double MK102_CDBANCOX;
String MK102_CDDIGAGE;
double MK102_CDDOPAIS;
double MK102_CDEMPRES;
String MK102_CDIDEEMI;
double MK102_CDLOCCLI;
double MK102_CDPAICOM;
double MK102_CDPROFES;
String MK102_CDSEXOXX;
double MK102_DIALTCAD;
double MK102_DIEXCLUS;
double MK102_DIIMPLAN;
double MK102_DINASCIM;
String MK102_DSBAICOM;
String MK102_DSBAIRRO;
String MK102_DSCOMCOM;
String MK102_DSCOMEND;
String MK102_DSENDCOM;
String MK102_DSENDERE;
String MK102_DSPRIPAR;
String MK102_DSZONCOM;
String MK102_DSZONURB;
double MK102_INATIVOX;
double MK102_INLISTAS;
double MK102_INRESCOM;
String MK102_INSITREG;
String MK102_NMEMAILX;
String MK102_NMEMARES;
String MK102_NMPROFES;
String MK102_NMPROPCC;
double MK102_NRCELDDD;
double MK102_NRCELNUM;
double MK102_NRCEPCOC;
double MK102_NRCEPCOM;
double MK102_NRCEPLCO;
double MK102_NRCEPLOC;
String MK102_NRCONLIQ;
double MK102_NRENDCOM;
double MK102_NRENDLOC;
String MK102_NRIDENTI;
String MK102_NRININPS;
double MK102_NRNUMCPF;
double MK102_NRSALCON;
String MK102_NRTELCOM;
String MK102_NRTELEFO;
double MK102_VLSALHOR;
double MK102_ROWID;
// Defining Table Work Itens
String MK102_XSEEDTITLE;
String MK102_XSEEDSTATUS;
boolean MK102_XSEEDEOF;
boolean MK102_XSEEDSEEK;
// Defining Table Itens
double MK101_CDCONSAC;
double MK101_CDCONTAT;
double MK101_CDDOPAIS;
double MK101_CDEMPRES;
double MK101_CDESTCIV;
double MK101_CDFISJUR;
double MK101_CDINSTRU;
double MK101_CDLOCINS;
double MK101_CDMATRIC;
double MK101_CDPROCAD;
String MK101_CDSEXOXX;
double MK101_DIEMIETI;
double MK101_DIINCCAD;
double MK101_DINASCIM;
String MK101_DSATVCON;
String MK101_DSBAIRRO;
String MK101_DSCARGOX;
String MK101_DSENDCOM;
String MK101_DSENDERE;
String MK101_DSININOM;
String MK101_DSPRIPAR;
String MK101_DSPROADQ;
String MK101_DSSEGPAR;
String MK101_DSTERPAR;
String MK101_DSZONURB;
double MK101_INATIVOX;
double MK101_INEMIETI;
double MK101_INFILMEN;
String MK101_INNOVCEL;
String MK101_INNOVCOR;
String MK101_INNOVEMA;
double MK101_INPOSCAR;
double MK101_INRECESP;
String MK101_INSITREG;
double MK101_INVENTRA;
String MK101_NMCLIENT;
String MK101_NMEMAILX;
double MK101_NRCELDDD;
double MK101_NRCELNUM;
double MK101_NRCEPCOM;
double MK101_NRCEPLOC;
double MK101_NRCGCDIG;
double MK101_NRCGCFIL;
double MK101_NRCGCNUM;
String MK101_NRCXPOST;
double MK101_NRDACASA;
double MK101_NRENDLOC;
double MK101_NRRESDDD;
double MK101_NRRESNUM;
String MK101_NRTELCOM;
double MK101_NRTELDDD;
String MK101_NRTELEFO;
double MK101_NRTELNUM;
double MK101_ROWID;
// Defining Table Work Itens
String MK101_XSEEDTITLE;
String MK101_XSEEDSTATUS;
boolean MK101_XSEEDEOF;
boolean MK101_XSEEDSEEK;
// Defining Table Itens
double CG111_AMMOVTOX;
double CG111_CDEMPRES;
double CG111_CDFILIAL;
double CG111_CDNATCOM;
String CG111_CDREFIMP;
String CG111_CDUFMUNI;
String CG111_INSITREG;
double CG111_TPREGIMP;
double CG111_VLBASICM;
double CG111_VLBASIPI;
double CG111_VLBASSTR;
double CG111_VLBICMNC;
double CG111_VLCONTNC;
double CG111_VLICMSTR;
double CG111_VLIMPICM;
double CG111_VLIMPIPI;
double CG111_VLINTEGR;
double CG111_VLINTICM;
double CG111_VLINTIPI;
double CG111_VLOUTICM;
double CG111_VLOUTIPI;
// Defining Auto.Entry Buffer
double AU_CG111_TPREGIMP;
double AU_CG111_VLINTEGR;
double AU_CG111_VLBASICM;
double AU_CG111_VLBASIPI;
double AU_CG111_VLIMPICM;
double AU_CG111_VLIMPIPI;
double AU_CG111_VLINTICM;
double AU_CG111_VLINTIPI;
double AU_CG111_VLOUTICM;
double AU_CG111_VLOUTIPI;
double AU_CG111_VLCONTNC;
double AU_CG111_VLBICMNC;
double AU_CG111_VLBASSTR;
double AU_CG111_VLICMSTR;
double AU_CG111_AMMOVTOX;
double AU_CG111_CDEMPRES;
double AU_CG111_CDFILIAL;
String AU_CG111_CDREFIMP;
double AU_CG111_CDNATCOM;
String AU_CG111_INSITREG;
String AU_CG111_CDUFMUNI;
double AU_CG111_ROWID;
double CG111_ROWID;
// Defining Table Work Itens
String CG111_XSEEDTITLE;
String CG111_XSEEDSTATUS;
boolean CG111_XSEEDEOF;
boolean CG111_XSEEDSEEK;
// Defining Table Itens
double CG140_AMMOVTOX;
String CG140_CDAJAPUR;
double CG140_CDEMPRES;
double CG140_CDFILIAL;
double CG140_CDFISCAL;
String CG140_CDUFMUNI;
double CG140_DIIMPORT;
String CG140_DSIMPOST;
String CG140_INSITREG;
double CG140_NRSEQUEN;
double CG140_TPIMPOST;
double CG140_TPREGIST;
double CG140_VLBASSTR;
double CG140_VLCONTAB;
double CG140_VLICMSTR;
// Defining Auto.Entry Buffer
double AU_CG140_TPREGIST;
double AU_CG140_CDEMPRES;
double AU_CG140_CDFILIAL;
double AU_CG140_AMMOVTOX;
String AU_CG140_CDUFMUNI;
double AU_CG140_CDFISCAL;
double AU_CG140_NRSEQUEN;
String AU_CG140_CDAJAPUR;
double AU_CG140_DIIMPORT;
String AU_CG140_DSIMPOST;
double AU_CG140_TPIMPOST;
double AU_CG140_VLICMSTR;
double AU_CG140_VLCONTAB;
double AU_CG140_VLBASSTR;
double AU_CG140_ROWID;
double CG140_ROWID;
// Defining Table Work Itens
String CG140_XSEEDTITLE;
String CG140_XSEEDSTATUS;
boolean CG140_XSEEDEOF;
boolean CG140_XSEEDSEEK;
// Defining Table Itens
double CG105_AMSALCON;
double CG105_CDCTACON;
double CG105_CDEMPRES;
String CG105_INSITREG;
double CG105_NRCGCNUM;
double CG105_TPLANCTO;
BigDecimal CG105_VLSALCON;
BigDecimal CG105_VLSALORC;
// Defining Auto.Entry Buffer
double AU_CG105_CDCTACON;
double AU_CG105_NRCGCNUM;
BigDecimal AU_CG105_VLSALCON;
double AU_CG105_CDEMPRES;
double AU_CG105_TPLANCTO;
double AU_CG105_AMSALCON;
String AU_CG105_INSITREG;
double AU_CG105_ROWID;
double CG105_ROWID;
// Defining Table Work Itens
String CG105_XSEEDTITLE;
String CG105_XSEEDSTATUS;
boolean CG105_XSEEDEOF;
boolean CG105_XSEEDSEEK;
// Defining Table Itens
String CG102_CDCLACON;
String CG102_CDCLADRE;
double CG102_CDCTACON;
double CG102_CDCTAFIL;
String CG102_CDCTARSP;
double CG102_CDCTPGCI;
double CG102_CDCTPGMC;
double CG102_CDCUSPRO;
double CG102_CDECUSTO;
double CG102_CDEMPRES;
double CG102_CDGRUDES;
double CG102_CDNATCSP;
double CG102_CDNATSUB;
double CG102_CDRAZAUX;
String CG102_DSCTACON;
double CG102_INATIVOX;
String CG102_INCONCIL;
double CG102_INCONMOV;
String CG102_INSITREG;
double CG102_TPCONVCI;
double CG102_TPCONVMC;
double CG102_TPCTACON;
double CG102_ROWID;
// Defining Table Work Itens
String CG102_XSEEDTITLE;
String CG102_XSEEDSTATUS;
boolean CG102_XSEEDEOF;
boolean CG102_XSEEDSEEK;
// Defining Table Itens
double CG106_AMSALCON;
double CG106_CDCLACUS;
double CG106_CDCONCLA;
double CG106_CDECUSTO;
double CG106_CDEMPRES;
double CG106_CDNVCCUS;
String CG106_INSITREG;
double CG106_VLPROGMO;
double CG106_VLPROUMG;
double CG106_VLREALCR;
double CG106_VLREALMG;
double CG106_VLREALMO;
// Defining Auto.Entry Buffer
double AU_CG106_VLPROGMO;
double AU_CG106_VLPROUMG;
double AU_CG106_VLREALCR;
double AU_CG106_VLREALMO;
double AU_CG106_VLREALMG;
double AU_CG106_CDECUSTO;
double AU_CG106_AMSALCON;
double AU_CG106_CDCLACUS;
double AU_CG106_CDCONCLA;
double AU_CG106_CDEMPRES;
double AU_CG106_CDNVCCUS;
double AU_CG106_ROWID;
double CG106_ROWID;
// Defining Table Work Itens
String CG106_XSEEDTITLE;
String CG106_XSEEDSTATUS;
boolean CG106_XSEEDEOF;
boolean CG106_XSEEDSEEK;
// Defining Table Itens
String CG107_CDATIVID;
double CG107_CDEMPRES;
double CG107_CDORILAN;
double CG107_DILANCTO;
double CG107_INLOTLIS;
String CG107_INSITREG;
double CG107_NRFORMCG;
double CG107_NRLOTECG;
double CG107_NRUSUALT;
double CG107_NRUSUCRI;
double CG107_TPLANCTO;
BigDecimal CG107_VLDIFLAN;
BigDecimal CG107_VLLANCRE;
BigDecimal CG107_VLLANDEB;
// Defining Auto.Entry Buffer
BigDecimal AU_CG107_VLLANCRE;
BigDecimal AU_CG107_VLLANDEB;
BigDecimal AU_CG107_VLDIFLAN;
double AU_CG107_INLOTLIS;
double AU_CG107_NRUSUALT;
String AU_CG107_CDATIVID;
double AU_CG107_CDEMPRES;
double AU_CG107_CDORILAN;
double AU_CG107_DILANCTO;
String AU_CG107_INSITREG;
double AU_CG107_NRFORMCG;
double AU_CG107_NRLOTECG;
double AU_CG107_NRUSUCRI;
double AU_CG107_TPLANCTO;
double AU_CG107_ROWID;
double CG107_ROWID;
// Defining Table Work Itens
String CG107_XSEEDTITLE;
String CG107_XSEEDSTATUS;
boolean CG107_XSEEDEOF;
boolean CG107_XSEEDSEEK;
// Defining Table Itens
double CG104_CDCLACUS;
double CG104_CDCTACON;
double CG104_CDEMPRES;
double CG104_CDHISTOR;
double CG104_CDORILAN;
double CG104_DILANCTO;
String CG104_DSCOMPHI;
String CG104_INMVTOCX;
double CG104_INSINLAN;
String CG104_INSITREG;
double CG104_NRCGCNUM;
double CG104_NRFORMCG;
double CG104_NRLOTECG;
double CG104_NRSEQLAN;
double CG104_TPLANCTO;
BigDecimal CG104_VLLANCAM;
// Defining Auto.Entry Buffer
double AU_CG104_TPLANCTO;
double AU_CG104_DILANCTO;
double AU_CG104_NRLOTECG;
double AU_CG104_NRFORMCG;
double AU_CG104_NRSEQLAN;
double AU_CG104_CDCLACUS;
double AU_CG104_CDCTACON;
double AU_CG104_CDORILAN;
double AU_CG104_CDEMPRES;
double AU_CG104_CDHISTOR;
String AU_CG104_DSCOMPHI;
double AU_CG104_INSINLAN;
String AU_CG104_INSITREG;
BigDecimal AU_CG104_VLLANCAM;
double AU_CG104_ROWID;
double CG104_ROWID;
// Defining Table Work Itens
String CG104_XSEEDTITLE;
String CG104_XSEEDSTATUS;
boolean CG104_XSEEDEOF;
boolean CG104_XSEEDSEEK;
// Defining Table Itens
double CG118_CDCTACON;
double CG118_CDEMPRES;
double CG118_DICONCIL;
double CG118_DILANCTO;
String CG118_INSITREG;
double CG118_NRFORMCG;
double CG118_NRLOTECG;
double CG118_NRSEQLAN;
// Defining Auto.Entry Buffer
double AU_CG118_CDCTACON;
double AU_CG118_CDEMPRES;
double AU_CG118_DICONCIL;
double AU_CG118_DILANCTO;
String AU_CG118_INSITREG;
double AU_CG118_NRFORMCG;
double AU_CG118_NRLOTECG;
double AU_CG118_NRSEQLAN;
double AU_CG118_ROWID;
double CG118_ROWID;
// Defining Table Work Itens
String CG118_XSEEDTITLE;
String CG118_XSEEDSTATUS;
boolean CG118_XSEEDEOF;
boolean CG118_XSEEDSEEK;
// Defining Table Itens
String GS107_CDATIVID;
double GS107_CDCARGOX;
double GS107_CDCLACUS;
double GS107_CDCORPAD;
double GS107_CDDEPEND;
double GS107_CDEMPANI;
double GS107_CDEMPINI;
double GS107_CDEMPRES;
double GS107_CDEMPRVF;
double GS107_CDFILVEN;
double GS107_CDGRUEMP;
double GS107_CDNIVSEG;
double GS107_CDREFCAD;
String GS107_CDSITSLV;
String GS107_CDSITUSU;
double GS107_CDSUBDOM;
String GS107_CDUSUARI;
double GS107_DIACESSO;
double GS107_DIALTSEN;
double GS107_DIDESATI;
double GS107_DIINCLUS;
double GS107_DINASCIM;
String GS107_DSBAIRRO;
String GS107_DSCARGOX;
String GS107_DSCENCUS;
String GS107_DSCONASA;
String GS107_DSCONASB;
String GS107_DSCONASC;
String GS107_DSDEPASS;
String GS107_DSENDERE;
String GS107_DSSAUASS;
String GS107_DSSENHAX;
double GS107_INACECHA;
double GS107_INACESBI;
double GS107_INADMLIN;
String GS107_INALTSEN;
double GS107_INEMANUV;
double GS107_INHORCON;
double GS107_INSAUDAC;
double GS107_INSITBLO;
String GS107_INSITREG;
String GS107_NMEMAILP;
String GS107_NMEMAILX;
String GS107_NMFUNASS;
String GS107_NMUSUARI;
String GS107_NRCELUSU;
double GS107_NRCEPRES;
double GS107_NRCOMRES;
double GS107_NRENDLOC;
String GS107_NRFAXCOM;
String GS107_NRIPLIBE;
double GS107_NRMSGPEN;
double GS107_NRNUMCPF;
String GS107_NRTELCOM;
String GS107_NRTELRES;
double GS107_NRUSUALT;
double GS107_NRUSUARI;
String GS107_TPUSUARI;
double GS107_ROWID;
// Defining Table Work Itens
String GS107_XSEEDTITLE;
String GS107_XSEEDSTATUS;
boolean GS107_XSEEDEOF;
boolean GS107_XSEEDSEEK;
// Defining Table Itens
double DS103_CDGRUCHA;
String DS103_INRESPON;
double DS103_NRUSUARI;
double DS103_ROWID;
// Defining Table Work Itens
String DS103_XSEEDTITLE;
String DS103_XSEEDSTATUS;
boolean DS103_XSEEDEOF;
boolean DS103_XSEEDSEEK;
// Defining Table Itens
String GS130_CDDOITEM;
String GS130_CDELEM16;
double GS130_CDEMPRES;
String GS130_DSELEMEN;
String GS130_INSITREG;
BigDecimal GS130_VLELEM16;
// Defining Auto.Entry Buffer
String AU_GS130_DSELEMEN;
BigDecimal AU_GS130_VLELEM16;
String AU_GS130_CDDOITEM;
String AU_GS130_CDELEM16;
double AU_GS130_CDEMPRES;
String AU_GS130_INSITREG;
double AU_GS130_ROWID;
double GS130_ROWID;
// Defining Table Work Itens
String GS130_XSEEDTITLE;
String GS130_XSEEDSTATUS;
boolean GS130_XSEEDEOF;
boolean GS130_XSEEDSEEK;
// Defining Table Itens
String GS106_CDDOITEM;
String GS106_CDEDICAO;
String GS106_CDELEINV;
String GS106_CDITEORI;
String GS106_CDMODPRI;
double GS106_DIALTCAD;
double GS106_DIALTDOC;
String GS106_INBRADES;
String GS106_INCHAVDS;
String GS106_INIMPRIM;
String GS106_INPOREMP;
String GS106_INPROESP;
String GS106_INSITREG;
String GS106_INZEROVL;
String GS106_NMDOITEM;
double GS106_NRCARDEC;
double GS106_NRCARDES;
double GS106_NRCARELE;
String GS106_TPCODIFI;
double GS106_ROWID;
// Defining Table Work Itens
String GS106_XSEEDTITLE;
String GS106_XSEEDSTATUS;
boolean GS106_XSEEDEOF;
boolean GS106_XSEEDSEEK;
// Defining Table Itens
double GS103_CDDOPAIS;
double GS103_CDMUNIBG;
String GS103_CDUFMUNI;
String GS103_INSITREG;
String GS103_NMLOCALI;
String GS103_NMMUNICI;
double GS103_NRCEPBAS;
double GS103_NRCEPCOM;
double GS103_NRCEPLOC;
double GS103_NRCEPMUN;
String GS103_TPLOCALI;
double GS103_ROWID;
// Defining Table Work Itens
String GS103_XSEEDTITLE;
String GS103_XSEEDSTATUS;
boolean GS103_XSEEDEOF;
boolean GS103_XSEEDSEEK;
// Defining Table Itens
double CG110_CDBCCCOF;
double CG110_CDBCCPIS;
double CG110_CDCRECOF;
double CG110_CDCREDIM;
double CG110_CDCREICM;
double CG110_CDCREIPI;
double CG110_CDCREPIS;
double CG110_CDCRESTR;
double CG110_CDDEBCOF;
double CG110_CDDEBICM;
double CG110_CDDEBIPI;
double CG110_CDDEBPIS;
double CG110_CDDEBSTR;
double CG110_CDEMPRES;
double CG110_CDENQIPI;
double CG110_CDNATCOM;
double CG110_CDNATNFE;
double CG110_CDNATOPE;
double CG110_CDOCONAT;
double CG110_CDOPEFIS;
double CG110_CDSITCOF;
double CG110_CDSITIPI;
double CG110_CDSITPIS;
double CG110_CDTRICMS;
double CG110_CDTRIDIM;
double CG110_CDTRIICM;
double CG110_CDTRIIPI;
double CG110_INATIVOX;
double CG110_INATUDIP;
double CG110_INCALCST;
double CG110_INCALDIM;
double CG110_INCALICM;
double CG110_INCALIPI;
double CG110_INCALPIS;
double CG110_INCOFINS;
double CG110_INCREIMO;
double CG110_INCREPRE;
double CG110_INCRESII;
double CG110_INFATCON;
String CG110_INSITREG;
double CG110_PCALICOF;
double CG110_PCALIPIS;
double CG110_PCCOFFRE;
double CG110_PCDFICMF;
double CG110_PCICMFIS;
double CG110_PCICMINT;
double CG110_PCPISFRE;
double CG110_TPNATOPE;
double CG110_ROWID;
// Defining Table Work Itens
String CG110_XSEEDTITLE;
String CG110_XSEEDSTATUS;
boolean CG110_XSEEDEOF;
boolean CG110_XSEEDSEEK;
// Defining Table Itens
double PR101_CDALTSUG;
String PR101_CDCARLIN;
double PR101_CDCATPRO;
double PR101_CDCLACUS;
double PR101_CDCLAFIS;
double PR101_CDCLIENT;
double PR101_CDCORPRO;
double PR101_CDCORTIN;
double PR101_CDDIVNEG;
double PR101_CDDOCEST;
double PR101_CDDUNCON;
double PR101_CDDUNCOR;
double PR101_CDEANCON;
double PR101_CDEANCOR;
double PR101_CDEANPRO;
double PR101_CDEMPORI;
double PR101_CDEMPRES;
String PR101_CDEXCNCM;
double PR101_CDFORACO;
double PR101_CDFRANQU;
double PR101_CDGENITE;
double PR101_CDGRUMAQ;
double PR101_CDLIGEST;
double PR101_CDLINPRO;
double PR101_CDMARCAX;
double PR101_CDMERCAD;
String PR101_CDMOLPRO;
double PR101_CDNIVPRO;
double PR101_CDPAIORI;
double PR101_CDPRIMOL;
String PR101_CDPROALF;
double PR101_CDPROANP;
double PR101_CDPROANT;
double PR101_CDPRODMI;
double PR101_CDPRODUT;
double PR101_CDPROFIC;
double PR101_CDPROJUN;
double PR101_CDPROORI;
double PR101_CDPROVDA;
double PR101_CDQUAFIO;
double PR101_CDSEGMER;
double PR101_CDSEGMOL;
double PR101_CDSITORI;
double PR101_CDSUBCAR;
double PR101_CDSUBNCM;
double PR101_CDSUBPRO;
double PR101_CDTERMOL;
double PR101_CDTEXTNF;
double PR101_CDTIPIPR;
double PR101_CDTRIBUT;
double PR101_CDTRIDIF;
String PR101_CDUMMIXP;
String PR101_CDUNIMED;
String PR101_CDVIAJAN;
double PR101_DIALTFIC;
double PR101_DIBLOINV;
double PR101_DICADPRO;
double PR101_DIDESCOR;
double PR101_DIDESVDA;
double PR101_DIFINSUS;
double PR101_DIINISUS;
double PR101_DILANCOR;
double PR101_DIREVCMR;
double PR101_DIREVCTB;
double PR101_DIULTINV;
double PR101_DIULTLAN;
String PR101_DSDESCOM;
String PR101_DSEMBPRI;
String PR101_DSENDPRO;
String PR101_DSFILPVC;
String PR101_DSPROCOR;
String PR101_DSPRODUT;
String PR101_DSREFETI;
String PR101_DSREFPRO;
String PR101_DSTIPACE;
String PR101_DSTIPEMB;
double PR101_INATIVOX;
double PR101_INBLOCAD;
double PR101_INBLOINV;
double PR101_INDECORA;
double PR101_INESTJOG;
double PR101_INFINMKT;
double PR101_INFTPCOR;
double PR101_INGAZEAD;
double PR101_INIMPICM;
double PR101_INMERCER;
double PR101_INMONSUG;
double PR101_INMOVEST;
double PR101_INMPPCOR;
double PR101_INNAOCAR;
double PR101_INPARAFI;
double PR101_INPENCMR;
double PR101_INPENCTB;
double PR101_INPENTEA;
double PR101_INPOTCON;
double PR101_INPROBLF;
double PR101_INPROCES;
double PR101_INPROLIC;
double PR101_INPRORES;
double PR101_INPROUNI;
double PR101_INPROVDA;
double PR101_INPRSMEA;
double PR101_INRETORC;
double PR101_INREVOPE;
double PR101_INSENTOR;
double PR101_INSISTIT;
String PR101_INSITREG;
double PR101_INTEMCOR;
double PR101_INTINTUR;
double PR101_INTRABMA;
double PR101_INVDVARE;
double PR101_INVENDAX;
String PR101_NMCORCOR;
double PR101_NRCONSTA;
double PR101_NRCONSTB;
double PR101_NRDIAMEA;
double PR101_NRDIANEL;
double PR101_NRENDLSO;
double PR101_NRENDPIC;
double PR101_NRESTACA;
double PR101_NRESTSIM;
double PR101_NRFUSOSX;
double PR101_NRMAQPRO;
double PR101_NRMPMMAQ;
double PR101_NRMULFUN;
double PR101_NRMULVEN;
double PR101_NRPINHAO;
double PR101_NRPPMMAQ;
double PR101_NRRPMMAQ;
double PR101_NRSEQDES;
double PR101_NRSQORDE;
double PR101_NRTITFIO;
double PR101_NRTORPOL;
double PR101_NRUSUCMR;
double PR101_NRUSUCTB;
double PR101_PCALIINT;
double PR101_PCIMPIMP;
double PR101_PCIPIPRO;
double PR101_PCPARCUS;
double PR101_PCPARPRO;
double PR101_PCPARTIC;
double PR101_PCVARPES;
double PR101_PGCAIXAS;
double PR101_PGGRAMAT;
double PR101_PGMEADAP;
double PR101_PGPADESP;
double PR101_PGPADSAI;
double PR101_PQBRUPRO;
double PR101_PQLIQFRE;
double PR101_PQLIQPRO;
double PR101_QTALTEMB;
double PR101_QTALTEUN;
double PR101_QTALTPRO;
double PR101_QTBLOINV;
double PR101_QTCABOS1;
double PR101_QTCABOS2;
double PR101_QTCABOS3;
double PR101_QTCABOS4;
double PR101_QTCAPAPR;
double PR101_QTCOMEMB;
double PR101_QTCOMEUN;
double PR101_QTCOMMET;
double PR101_QTCOMPPR;
double PR101_QTCONENT;
double PR101_QTCXMAXI;
double PR101_QTCXMINI;
double PR101_QTDIAEMB;
double PR101_QTDIAPRO;
double PR101_QTEMIETI;
double PR101_QTLAREMB;
double PR101_QTLAREUN;
double PR101_QTLARMET;
double PR101_QTLARPRO;
double PR101_QTLOTCOM;
double PR101_QTMAQOPE;
double PR101_QTMCEMBA;
double PR101_QTMINSOR;
double PR101_QTOPEMAQ;
double PR101_QTPACOCX;
double PR101_QTPCCFAC;
double PR101_QTPECCON;
double PR101_QTPECUNI;
double PR101_QTUNITAR;
double PR101_THDESCAN;
double PR101_TPCODEXP;
double PR101_TPCORCOR;
double PR101_TPCORTIN;
double PR101_TPCXTRAN;
double PR101_TPEMBALA;
double PR101_TPEMBEXT;
double PR101_TPFORBAR;
double PR101_TPFORPRO;
double PR101_TPMARCAP;
double PR101_TPSUBSTR;
double PR101_TPSUBTIN;
double PR101_TSPADRAO;
double PR101_VLIPIPRO;
double PR101_ROWID;
// Defining Table Work Itens
String PR101_XSEEDTITLE;
String PR101_XSEEDSTATUS;
boolean PR101_XSEEDEOF;
boolean PR101_XSEEDSEEK;
// Defining Table Itens
double SU103_CDALMOXA;
double SU103_CDATVMAT;
String SU103_CDCLABCD;
double SU103_CDCLAFIS;
double SU103_CDDIVMAT;
double SU103_CDDOCEST;
double SU103_CDEMPRES;
String SU103_CDEXCNCM;
double SU103_CDFAMILI;
double SU103_CDGENITE;
double SU103_CDMATERI;
double SU103_CDPROANP;
double SU103_CDSITORI;
double SU103_CDTIPIPR;
double SU103_CDTRIBUT;
double SU103_CDTRIDIF;
String SU103_CDUMALTE;
String SU103_CDUNIMED;
double SU103_DDESTSEG;
double SU103_DICADAST;
double SU103_DIULTENT;
double SU103_DIULTSAI;
String SU103_DSCORMAT;
String SU103_DSMATERI;
String SU103_DSMATPRI;
double SU103_INCOMCFC;
double SU103_INCONSIG;
double SU103_INCREICM;
double SU103_INCREIPI;
double SU103_INEMALAB;
double SU103_INENTABC;
double SU103_INIMPICM;
double SU103_INQUICOR;
String SU103_INSITREG;
double SU103_INUMCUST;
double SU103_INVENDAX;
double SU103_NRDDRESS;
double SU103_NRFATCON;
double SU103_NRFATTIN;
String SU103_NRPRATEL;
double SU103_NRSEMMAX;
double SU103_NRSEMMIN;
double SU103_NRSEMSEG;
double SU103_PCALIINT;
double SU103_QTALTPRO;
double SU103_QTCOMPPR;
double SU103_QTDENSID;
double SU103_QTDIAPRO;
double SU103_QTEMIETI;
double SU103_QTESPCXA;
double SU103_QTESTMAX;
double SU103_QTESTMIN;
double SU103_QTESTSEG;
double SU103_QTLARPRO;
double SU103_QTLOTCOM;
double SU103_QTLOTMAX;
double SU103_QTLOTMIN;
double SU103_QTLOTMUL;
double SU103_QTPBRMAT;
double SU103_QTPESMAT;
double SU103_TPITEEFD;
double SU103_TPLOTCOM;
double SU103_ROWID;
// Defining Table Work Itens
String SU103_XSEEDTITLE;
String SU103_XSEEDSTATUS;
boolean SU103_XSEEDEOF;
boolean SU103_XSEEDSEEK;
// Defining Table Itens
double AV112_CDCLAFIS;
double AV112_CDDIVNEG;
double AV112_CDDOCEST;
double AV112_CDEMPRES;
String AV112_CDEXCNCM;
double AV112_CDGENITE;
double AV112_CDPROANP;
double AV112_CDPRODUT;
double AV112_CDSITORI;
double AV112_CDTABDES;
double AV112_CDTIPIPR;
double AV112_CDTRBUTA;
double AV112_CDTRIDIF;
String AV112_DSABRINT;
String AV112_DSPRODUT;
double AV112_INIMPICM;
String AV112_INSITREG;
double AV112_INVENDAX;
double AV112_PCALIINT;
double AV112_PCIPIPRO;
double AV112_PQBRUPRO;
double AV112_TPITEEFD;
double AV112_VLPMPROF;
double AV112_VLPREFAT;
double AV112_ROWID;
// Defining Table Work Itens
String AV112_XSEEDTITLE;
String AV112_XSEEDSTATUS;
boolean AV112_XSEEDEOF;
boolean AV112_XSEEDSEEK;
// Defining Table Itens
double TP101_CDARQGRA;
double TP101_CDCLAFIS;
double TP101_CDCORGR1;
double TP101_CDCORGR2;
double TP101_CDCORGR3;
double TP101_CDCORGR4;
double TP101_CDCORGR5;
double TP101_CDCORGR6;
double TP101_CDCORGR7;
double TP101_CDCPAPEL;
double TP101_CDDIVGRA;
double TP101_CDEMPRES;
double TP101_CDMATERI;
double TP101_CDPRODUT;
String TP101_CDUNIMED;
String TP101_DSFORMA2;
String TP101_DSPRODUT;
String TP101_DSUSUARI;
String TP101_INCAPAXX;
double TP101_INDIFCOR;
String TP101_INFATURA;
String TP101_INFVERSO;
double TP101_INLOCALG;
double TP101_INLOCIM1;
double TP101_INLOCIM2;
double TP101_INLOCIM3;
double TP101_INLOCIM4;
double TP101_INLOCIM5;
double TP101_INLOCIM6;
double TP101_INLOCIM7;
String TP101_INREQUIS;
String TP101_INSITREG;
double TP101_NRFATCON;
double TP101_QTIMPFOL;
double TP101_QTIMPFOR;
double TP101_QTIMPPRO;
double TP101_QTJOGBLO;
double TP101_QTSOBRAP;
double TP101_TPATIGRA;
double TP101_VLPMPROF;
double TP101_ROWID;
// Defining Table Work Itens
String TP101_XSEEDTITLE;
String TP101_XSEEDSTATUS;
boolean TP101_XSEEDEOF;
boolean TP101_XSEEDSEEK;
// Defining Table Itens
double CE121_CDCLIENT;
double CE121_CDDISTRI;
double CE121_CDDOPAIS;
double CE121_CDEMPRES;
String CE121_DSBAIRRO;
String CE121_DSENDERE;
String CE121_INSITREG;
String CE121_NMCLIENT;
String CE121_NMEMAILX;
String CE121_NMPESCON;
double CE121_NRCELDDD;
double CE121_NRCELNUM;
double CE121_NRCEPCOM;
double CE121_NRCEPLOC;
double CE121_NRCGCDIG;
double CE121_NRCGCFIL;
double CE121_NRCGCNUM;
double CE121_NRENDLOC;
String CE121_NRINSCRE;
double CE121_NRTELDDD;
double CE121_NRTELNUM;
String CE121_NRTELOUT;
double CE121_QTLOJGRU;
double CE121_TPESTABE;
double CE121_ROWID;
// Defining Table Work Itens
String CE121_XSEEDTITLE;
String CE121_XSEEDSTATUS;
boolean CE121_XSEEDEOF;
boolean CE121_XSEEDSEEK;
// Defining Table Itens
double CE118_CDAGENTE;
double CE118_CDDOPAIS;
double CE118_CDEMPRES;
double CE118_CDFISJUR;
double CE118_DIINCLUS;
String CE118_DSBAIRRO;
String CE118_DSENDER2;
String CE118_DSENDERE;
String CE118_INPAGDIR;
String CE118_INSITREG;
String CE118_NMAGENTE;
String CE118_NMCONTAT;
String CE118_NMEMAILX;
double CE118_NRCEPCOM;
double CE118_NRCEPLOC;
double CE118_NRCGCDIG;
double CE118_NRCGCFIL;
double CE118_NRCGCNUM;
double CE118_NRENDLOC;
String CE118_NRFAXOUT;
String CE118_NRINSCRE;
String CE118_NRTELALT;
String CE118_NRTELOUT;
double CE118_PCAGENTE;
double CE118_ROWID;
// Defining Table Work Itens
String CE118_XSEEDTITLE;
String CE118_XSEEDSTATUS;
boolean CE118_XSEEDEOF;
boolean CE118_XSEEDSEEK;
// Defining Table Itens
double AV281_CDAGEAUX;
double AV281_CDAGEFOR;
double AV281_CDAGENCI;
double AV281_CDBANAUX;
double AV281_CDBANCOX;
double AV281_CDBANFOR;
double AV281_CDBLOQUE;
double AV281_CDCLIENT;
String AV281_CDCLIVIP;
String AV281_CDDCTFOR;
double AV281_CDDESMER;
String AV281_CDDIGAGE;
String AV281_CDDIGCON;
String AV281_CDDIGFOR;
double AV281_CDDOPAIS;
double AV281_CDEMPRES;
double AV281_CDFILFAT;
double AV281_CDFISJUR;
double AV281_CDGERENT;
double AV281_CDMERNEG;
double AV281_CDMOTEXC;
double AV281_CDREEMBO;
double AV281_CDREGIAO;
double AV281_CDREGINT;
double AV281_CDREPRES;
String AV281_CDSUFRAM;
double AV281_CDTEXTNF;
double AV281_CDVDCONS;
double AV281_CDVENDED;
double AV281_DDINTFAT;
double AV281_DIALTERA;
double AV281_DIFUNDAC;
double AV281_DIVALSUF;
String AV281_DSBAIRRO;
String AV281_DSCOMPLO;
String AV281_DSENDERE;
String AV281_DSREFBA1;
String AV281_DSREFBA2;
String AV281_DSREFBAN;
String AV281_DSREFCO1;
String AV281_DSREFCO2;
String AV281_DSREFCOM;
double AV281_INACOPED;
double AV281_INCLIDDA;
double AV281_INCLIFOR;
double AV281_INCLIMEI;
double AV281_INCLSMEI;
double AV281_INCOMELE;
double AV281_INDESPIS;
double AV281_INENVCOB;
double AV281_INENVEMA;
double AV281_INENVSER;
double AV281_INFATVOL;
double AV281_INIMPBOL;
double AV281_INJUNCAO;
double AV281_INSALPED;
double AV281_INSEPBON;
double AV281_INSIMNAC;
String AV281_INSITREG;
double AV281_INSITUAC;
double AV281_INSUTRIB;
double AV281_INTELPED;
String AV281_NMCLIENT;
String AV281_NMEMACPG;
String AV281_NMEMADEV;
String AV281_NMEMAIL1;
String AV281_NMEMAILX;
String AV281_NMEMANF2;
String AV281_NMEMANFE;
String AV281_NMEMAXML;
String AV281_NMFANTAS;
String AV281_NMPESCON;
String AV281_NMPESXML;
double AV281_NRCELDDD;
double AV281_NRCELNUM;
double AV281_NRCEPCOM;
double AV281_NRCEPLOC;
String AV281_NRCFDFXX;
double AV281_NRCGCDIG;
double AV281_NRCGCFAV;
double AV281_NRCGCFIL;
double AV281_NRCGCNUM;
String AV281_NRCTACOR;
double AV281_NRCTAFOR;
double AV281_NRDDDXML;
double AV281_NRDIGFAV;
double AV281_NRENDLOC;
double AV281_NRFAXDDD;
double AV281_NRFAXNUM;
double AV281_NRFILFAV;
String AV281_NRINSCRE;
double AV281_NRTE1DDD;
double AV281_NRTE2DDD;
double AV281_NRTECDDD;
double AV281_NRTELDDD;
double AV281_NRTELEC1;
double AV281_NRTELEC2;
double AV281_NRTELECO;
double AV281_NRTELNUM;
double AV281_NRTELXML;
double AV281_NRUSUARI;
double AV281_NRZAPDDD;
double AV281_NRZAPNUM;
double AV281_THALTERA;
double AV281_TPBONIFI;
double AV281_TPCLIENT;
double AV281_TPESTABE;
double AV281_TPPORAUX;
double AV281_TPPORTAD;
double AV281_TPVENDAX;
double AV281_ROWID;
// Defining Table Work Itens
String AV281_XSEEDTITLE;
String AV281_XSEEDSTATUS;
boolean AV281_XSEEDEOF;
boolean AV281_XSEEDSEEK;
int SQL_GS11401_ASC;
int SQL_GS11401_DSC;
int SQL_GS12502_ASC;
int SQL_GS12502_DSC;
int SQL_GS10101_ASC;
int SQL_GS10101_DSC;
int SQL_GS10901_ASC;
int SQL_GS10901_DSC;
int SQL_AV11903_ASC;
int SQL_AV11903_DSC;
int SQL_AV12001_ASC;
int SQL_AV12001_DSC;
int SQL_CG16801_ASC;
int SQL_CG16801_DSC;
int SQL_CG12401_ASC;
int SQL_CG12401_DSC;
int SQL_CG13302_ASC;
int SQL_CG13302_DSC;
int SQL_CG13303_ASC;
int SQL_CG13303_DSC;
int SQL_CG13304_ASC;
int SQL_CG13304_DSC;
int SQL_CG13305_ASC;
int SQL_CG13305_DSC;
int SQL_CG13306_ASC;
int SQL_CG13306_DSC;
int SQL_CG12403_ASC;
int SQL_CG12403_DSC;
int SQL_AV10101_ASC;
int SQL_AV10101_DSC;
int SQL_SU10101_ASC;
int SQL_SU10101_DSC;
int SQL_MK10201_ASC;
int SQL_MK10201_DSC;
int SQL_MK10101_ASC;
int SQL_MK10101_DSC;
int SQL_CG11102_ASC;
int SQL_CG11102_DSC;
int SQL_CG11101_ASC;
int SQL_CG11101_DSC;
int SQL_CG12201_ASC;
int SQL_CG12201_DSC;
int SQL_CG12301_ASC;
int SQL_CG12301_DSC;
int SQL_CG13307_ASC;
int SQL_CG13307_DSC;
int SQL_CG12402_ASC;
int SQL_CG12402_DSC;
int SQL_CG14001_ASC;
int SQL_CG14001_DSC;
int SQL_CG10501_ASC;
int SQL_CG10501_DSC;
int SQL_CG10201_ASC;
int SQL_CG10201_DSC;
int SQL_CG10601_ASC;
int SQL_CG10601_DSC;
int SQL_CG10703_ASC;
int SQL_CG10703_DSC;
int SQL_CG10704_ASC;
int SQL_CG10704_DSC;
int SQL_CG10401_ASC;
int SQL_CG10401_DSC;
int SQL_GS10703_ASC;
int SQL_GS10703_DSC;
int SQL_DS10301_ASC;
int SQL_DS10301_DSC;
int SQL_CG14002_ASC;
int SQL_CG14002_DSC;
int SQL_GS13001_ASC;
int SQL_GS13001_DSC;
int SQL_GS10601_ASC;
int SQL_GS10601_DSC;
int SQL_GS10701_ASC;
int SQL_GS10701_DSC;
int SQL_CG11001_ASC;
int SQL_CG11001_DSC;
int SQL_PR10101_ASC;
int SQL_PR10101_DSC;
int SQL_SU10301_ASC;
int SQL_SU10301_DSC;
int SQL_AV11201_ASC;
int SQL_AV11201_DSC;
int SQL_TP10101_ASC;
int SQL_TP10101_DSC;
int SQL_CE12101_ASC;
int SQL_CE12101_DSC;
int SQL_CE11801_ASC;
int SQL_CE11801_DSC;
int SQL_AV28101_ASC;
int SQL_AV28101_DSC;
ResultSet GS114_TAB;
Connection  GS114_CON;
Statement GS114_CMD;
ResultSet GS125_TAB;
Connection  GS125_CON;
Statement GS125_CMD;
ResultSet GS101_TAB;
Connection  GS101_CON;
Statement GS101_CMD;
ResultSet GS109_TAB;
Connection  GS109_CON;
Statement GS109_CMD;
ResultSet AV119_TAB;
Connection  AV119_CON;
Statement AV119_CMD;
ResultSet AV120_TAB;
Connection  AV120_CON;
Statement AV120_CMD;
ResultSet CG133_TAB;
Connection  CG133_CON;
Statement CG133_CMD;
ResultSet CG122_TAB;
Connection  CG122_CON;
Statement CG122_CMD;
ResultSet CG168_TAB;
Connection  CG168_CON;
Statement CG168_CMD;
ResultSet CG123_TAB;
Connection  CG123_CON;
Statement CG123_CMD;
ResultSet CG124_TAB;
Connection  CG124_CON;
Statement CG124_CMD;
ResultSet AV101_TAB;
Connection  AV101_CON;
Statement AV101_CMD;
ResultSet SU101_TAB;
Connection  SU101_CON;
Statement SU101_CMD;
ResultSet MK102_TAB;
Connection  MK102_CON;
Statement MK102_CMD;
ResultSet MK101_TAB;
Connection  MK101_CON;
Statement MK101_CMD;
ResultSet CG111_TAB;
Connection  CG111_CON;
Statement CG111_CMD;
ResultSet CG140_TAB;
Connection  CG140_CON;
Statement CG140_CMD;
ResultSet CG105_TAB;
Connection  CG105_CON;
Statement CG105_CMD;
ResultSet CG102_TAB;
Connection  CG102_CON;
Statement CG102_CMD;
ResultSet CG106_TAB;
Connection  CG106_CON;
Statement CG106_CMD;
ResultSet CG107_TAB;
Connection  CG107_CON;
Statement CG107_CMD;
ResultSet CG104_TAB;
Connection  CG104_CON;
Statement CG104_CMD;
ResultSet CG118_TAB;
Connection  CG118_CON;
Statement CG118_CMD;
ResultSet GS107_TAB;
Connection  GS107_CON;
Statement GS107_CMD;
ResultSet DS103_TAB;
Connection  DS103_CON;
Statement DS103_CMD;
ResultSet GS130_TAB;
Connection  GS130_CON;
Statement GS130_CMD;
ResultSet GS106_TAB;
Connection  GS106_CON;
Statement GS106_CMD;
ResultSet GS103_TAB;
Connection  GS103_CON;
Statement GS103_CMD;
ResultSet CG110_TAB;
Connection  CG110_CON;
Statement CG110_CMD;
ResultSet PR101_TAB;
Connection  PR101_CON;
Statement PR101_CMD;
ResultSet SU103_TAB;
Connection  SU103_CON;
Statement SU103_CMD;
ResultSet AV112_TAB;
Connection  AV112_CON;
Statement AV112_CMD;
ResultSet TP101_TAB;
Connection  TP101_CON;
Statement TP101_CMD;
ResultSet CE121_TAB;
Connection  CE121_CON;
Statement CE121_CMD;
ResultSet CE118_TAB;
Connection  CE118_CON;
Statement CE118_CMD;
ResultSet AV281_TAB;
Connection  AV281_CON;
Statement AV281_CMD;
ResultSet QCG13301_TAB;
Statement QCG13301_CMD;
Connection  QCG13301_CON;
boolean QCG13301_XSEEDEOF;
boolean QCG13301_XSEEDSEEK;
ResultSet QAV12006_TAB;
Statement QAV12006_CMD;
Connection  QAV12006_CON;
boolean QAV12006_XSEEDEOF;
boolean QAV12006_XSEEDSEEK;
XseedJDBC GS114_Lk = new XseedJDBC();
XseedJDBC CG124_Lk = new XseedJDBC();
XseedJDBC CG111_Lk = new XseedJDBC();
XseedJDBC CG122_Lk = new XseedJDBC();
XseedJDBC CG123_Lk = new XseedJDBC();
XseedJDBC GS125_Lk = new XseedJDBC();
XseedJDBC CG105_Lk = new XseedJDBC();
XseedJDBC CG106_Lk = new XseedJDBC();
XseedJDBC CG107_Lk = new XseedJDBC();
XseedJDBC CG140_Lk = new XseedJDBC();
XseedJDBC GS130_Lk = new XseedJDBC();
// F1_ITENS();
String F1_RLDSLITOBS;
String F1_RLDSTIPREL;
String F1_RLDTFINALX;
String F1_RLDTINICIA;
String F1_RLNMEMPRES;
double F1_RLNRCGCDIG;
double F1_RLNRCGCFIL;
double F1_RLNRCGCNUM;
double F1_RLNRFOLHAS;
String F1_RLNRIESEMP;
double F1_RLNRSOLICI;
// F2_ITENS();
double F2_RLCDCONTAX;
String F2_RLCDESPECI;
String F2_RLCDNATOGR;
String F2_RLCDUFMUNI;
String F2_RLDSLETRAA;
String F2_RLDSOBSERV;
double F2_RLDTDIADOC;
String F2_RLDTSAIDAX;
double F2_RLNRBASCAL;
double F2_RLNRNOTAFI;
double F2_RLNRNOTFIN;
String F2_RLNRSERIEX;
double F2_RLVLCONTAB;
double F2_RLVLIMPOST;
double F2_RLVLISENTA;
double F2_RLVLOUTRAS;
double F2_RLVLPERCEN;
// F3_ITENS();
double F3_RLVLBASICM;
double F3_RLVLBASIPI;
double F3_RLVLIMPICM;
double F3_RLVLIMPIPI;
double F3_RLVLISEICM;
double F3_RLVLISEIPI;
double F3_RLVLOUTICM;
double F3_RLVLOUTIPI;
// F4_ITENS();
String F4_RLCDESPECI;
String F4_RLDSCANCEL;
String F4_RLDSLETRAA;
double F4_RLDTDIADOC;
double F4_RLNRNOTAFI;
double F4_RLNRNOTFIN;
String F4_RLNRSERIEX;
// F6_ITENS();
String F6_RLAATERMOX;
String F6_RLCDUFLEMP;
String F6_RLDSABRENC;
String F6_RLDSCARSRF;
String F6_RLDSCIDADE;
String F6_RLDSENDEMP;
String F6_RLDSMESEXT;
String F6_RLDSPAGINA;
double F6_RLDTDIAATU;
String F6_RLDTFINALX;
String F6_RLDTINICIO;
String F6_RLDTREGIST;
String F6_RLNMCONTAD;
String F6_RLNMEMPRES;
String F6_RLNMRESSRF;
double F6_RLNRCGCDIG;
double F6_RLNRCGCFIL;
double F6_RLNRCGCNUM;
String F6_RLNRCPFSRF;
String F6_RLNRCRCCON;
double F6_RLNRFOLHAS;
String F6_RLNRIESEMP;
double F6_RLNRLIVROX;
double F6_RLNRPAGFIM;
double F6_RLNRPAGINA;
double F6_RLNRREGJUN;
// F9_ITENS();
double F9_RLVLBASTIN;
double F9_RLVLBASTSC;
double F9_RLVLICSTIN;
double F9_RLVLICSTSC;
// F10_ITENS();
double F10_EXCDMODENF;
double F10_EXCDNATCOM;
double F10_EXCDNATOPE;
String F10_EXCDUFMUNI;
double F10_EXDIEMINOT;
double F10_EXDISAINOT;
double F10_EXINCONFIN;
double F10_EXINDECEND;
double F10_EXINORIGEM;
double F10_EXNRCANCEL;
double F10_EXNRCFICMP;
double F10_EXNRCONTAX;
double F10_EXNRNOTAFI;
double F10_EXNRNOTFIN;
String F10_EXNRSERIEX;
double F10_EXPCICMNAT;
double F10_EXPCICMPRO;
double F10_EXTPREGIST;
double F10_EXVLBASDID;
double F10_EXVLBASICM;
double F10_EXVLBASIPI;
double F10_EXVLBASSTR;
double F10_EXVLCONTAX;
double F10_EXVLFCPDES;
double F10_EXVLICMDID;
double F10_EXVLICMDIO;
double F10_EXVLICMPRO;
double F10_EXVLICMSTR;
double F10_EXVLIMPICM;
double F10_EXVLIMPIPI;
double F10_EXVLISEICM;
double F10_EXVLISEIPI;
double F10_EXVLLIQUID;
double F10_EXVLOUTICM;
double F10_EXVLOUTIPI;
double F10_EXVLPERICM;
double F10_EXVLPERIPI;
// F13_ITENS();
double F13_EXCDCLIDEP;
double F13_EXCDDEPNFI;
double F13_EXCDTIPDEP;
double F13_EXDIEMIDEP;
double F13_EXINCLIDEP;
double F13_EXNRNOTDEP;
double F13_EXNRUSUNFI;
double F13_EXVLTOICMN;
// F21_ITENS();
String F21_RLDTFINALX;
String F21_RLDTINICIO;
double F21_RLDTSISTEM;
String F21_RLNMABREMP;
double F21_RLNRPAGINA;
double F21_RLNRSOLICI;
String F21_RLTHHHMMED;
// F22_ITENS();
double F22_RLCDCONCRE;
double F22_RLCDDEBICM;
double F22_RLCDNATOPE;
double F22_RLVLBASICM;
double F22_RLVLCONTAB;
double F22_RLVLIMPICM;
// F23_ITENS();
String F23_LABEL2;
double F23_RLVLBASICM;
double F23_RLVLCONTAB;
double F23_RLVLIMPICM;
// F24_ITENS();
String F24_RLDTFINALX;
String F24_RLDTINICIO;
double F24_RLDTSISTEM;
String F24_RLNMABREMP;
double F24_RLNRPAGINA;
double F24_RLNRSOLICI;
String F24_RLTHHHMMED;
// F25_ITENS();
String F25_RLCDCLAFIS;
double F25_RLVLBASICM;
double F25_RLVLCONTAB;
double F25_RLVLIMPICM;
// F26_ITENS();
double F26_RLVLBASICM;
double F26_RLVLCONTAB;
double F26_RLVLIMPICM;
// F27_ITENS();
String F27_RLDTFINALX;
String F27_RLDTINICIO;
double F27_RLDTSISTEM;
String F27_RLNMABREMP;
double F27_RLNRPAGINA;
double F27_RLNRSOLICI;
String F27_RLTHHHMMED;
// F28_ITENS();
double F28_RLCDCLAFIS;
double F28_RLCDCORPRO;
double F28_RLCDPRODUT;
String F28_RLDSPRODUT;
double F28_RLNRNOTAFI;
double F28_RLVLBASICM;
double F28_RLVLICMPRO;
// F29_ITENS();
double F29_RLVLBASICM;
double F29_RLVLICMPRO;
// F36_ITENS();
String F36_LABEL1;
double F36_RLDTCABECA;
String F36_RLDTFINALX;
String F36_RLDTINICIO;
String F36_RLHMCABECA;
String F36_RLNMABREMP;
double F36_RLNRPAGINA;
double F36_RLNRSOLICI;
// F37_ITENS();
String F37_RLCDNATOGR;
String F37_RLCDUFMUNI;
double F37_RLVLBASSTR;
double F37_RLVLICMSTR;
// F38_ITENS();
String F38_LABEL1;
String F38_RLCDUFMUNI;
double F38_RLVLBASSTR;
double F38_RLVLICMSTR;
// F41_ITENS();
String F41_LABEL1;
String F41_RLDSCONDEF;
double F41_RLDTCABECA;
String F41_RLDTFINALX;
String F41_RLDTINICIO;
String F41_RLHMCABECA;
String F41_RLNMABREMP;
double F41_RLNRPAGINA;
double F41_RLNRSOLICI;
// F42_ITENS();
double F42_RLCDAPBICM;
double F42_RLCDAPCONT;
double F42_RLCDAPNICM;
double F42_RLCDAPVICM;
String F42_RLCDNATOGR;
String F42_RLINORIGEM;
double F42_RLVLAPOICM;
// F43_ITENS();
String F43_LABEL1;
double F43_RLVLSABICM;
double F43_RLVLSACONT;
double F43_RLVLSANICM;
double F43_RLVLSAOICM;
double F43_RLVLSAVICM;
// F44_ITENS();
double F44_RLVLTOTCON;
double F44_RLVLTTBICM;
double F44_RLVLTTNICM;
double F44_RLVLTTOICM;
double F44_RLVLTTVICM;
// F46_ITENS();
String F46_LABEL1;
String F46_RLDSCONDEF;
double F46_RLDTCABECA;
String F46_RLDTFINALX;
String F46_RLDTINICIO;
String F46_RLHMCABECA;
String F46_RLNMABREMP;
double F46_RLNRPAGINA;
double F46_RLNRSOLICI;
// F47_ITENS();
String F47_RLCDNATOGR;
String F47_RLCDUFMUNI;
double F47_RLVLBASICM;
double F47_RLVLCONTAB;
double F47_RLVLIMPICM;
double F47_RLVLINTICM;
double F47_RLVLOUTICM;
// F48_ITENS();
String F48_LABEL1;
String F48_RLCDUFMUNI;
double F48_RLVLBASICM;
double F48_RLVLCONTAB;
double F48_RLVLIMPICM;
double F48_RLVLINTICM;
double F48_RLVLOUTICM;
// F51_ITENS();
String F51_LABEL1;
String F51_RLDSCONDEF;
double F51_RLDTCABECA;
String F51_RLDTFINALX;
String F51_RLDTINICIO;
String F51_RLHMCABECA;
String F51_RLNMABREMP;
double F51_RLNRPAGINA;
double F51_RLNRSOLICI;
// F52_ITENS();
String F52_RLCDNATOGR;
double F52_RLVLAPBIPI;
double F52_RLVLAPCIPI;
double F52_RLVLAPMIPI;
double F52_RLVLAPOIPI;
double F52_RLVLAPVIPI;
// F53_ITENS();
String F53_LABEL1;
double F53_RLVLSABIPI;
double F53_RLVLSACIPI;
double F53_RLVLSANIPI;
double F53_RLVLSAOIPI;
double F53_RLVLSAVIPI;
// F54_ITENS();
double F54_RLTOTABIPI;
double F54_RLTOTACIPI;
double F54_RLTOTANIPI;
double F54_RLTOTAOIPI;
double F54_RLTOTAVIPI;
// F55_ITENS();
String F55_LABEL1;
double F55_RLCDDEPNFI;
String F55_RLDSDEPNFI;
String F55_RLDTFINALX;
String F55_RLDTINICIO;
double F55_RLDTSOLICI;
String F55_RLHMCABECA;
String F55_RLNMABREMP;
double F55_RLNRPAGINA;
double F55_RLNRSOLICI;
// F56_ITENS();
String F56_LABEL2;
double F56_RLCDCLIDEP;
double F56_RLCDTIPDEP;
String F56_RLCDUSUARI;
String F56_RLDIEMIDEP;
String F56_RLNMCLIENT;
double F56_RLNRNOTDEP;
double F56_RLVLTOICMN;
// F64_ITENS();
String F64_LABEL25;
String F64_RLDSCONDEF;
double F64_RLDTCABECA;
String F64_RLDTFINALX;
String F64_RLDTINICIO;
String F64_RLHMCABECA;
String F64_RLNMABREMP;
double F64_RLNRPAGINA;
double F64_RLNRSOLICI;
// F65_ITENS();
double F65_RLCDAPBICM;
double F65_RLCDAPCONT;
double F65_RLCDAPNICM;
double F65_RLCDAPVICM;
String F65_RLCDNATOGR;
double F65_RLVLAPOICM;
// F66_ITENS();
String F66_LABEL1;
double F66_RLVLSABICM;
double F66_RLVLSACONT;
double F66_RLVLSANICM;
double F66_RLVLSAOICM;
double F66_RLVLSAVICM;
// F67_ITENS();
double F67_RLVLTOTCON;
double F67_RLVLTTBICM;
double F67_RLVLTTNICM;
double F67_RLVLTTOICM;
double F67_RLVLTTVICM;
// F71_ITENS();
String F71_LABEL1;
double F71_RLDTCABECA;
String F71_RLHMCABECA;
String F71_RLNMABREMP;
double F71_RLNRPAGINA;
double F71_RLNRSOLICI;
// F72_ITENS();
double F72_RLDTEMIRES;
double F72_RLVLICMRES;
double F72_RLVLIPIRES;
// F73_ITENS();
double F73_RLVLICMRES;
double F73_RLVLIPIRES;
// F74_ITENS();
String F74_RLDSCONDEF;
double F74_RLDTCABECA;
String F74_RLDTFINALX;
String F74_RLDTINICIO;
String F74_RLHMCABECA;
String F74_RLNMABREMP;
double F74_RLNRPAGINA;
double F74_RLNRSOLICI;
// F75_ITENS();
double F75_RLCDAPBICM;
double F75_RLCDAPNICM;
double F75_RLCDAPVICM;
String F75_RLCDNATOGR;
double F75_RLPCICMNOT;
double F75_RLVLAPOICM;
// F76_ITENS();
String F76_LABEL2;
double F76_RLCDAPBICM;
double F76_RLCDAPNICM;
double F76_RLCDAPVICM;
double F76_RLVLAPOICM;
// F77_ITENS();
String F77_RLDSCONDEF;
double F77_RLDTCABECA;
String F77_RLDTFINALX;
String F77_RLDTINICIO;
String F77_RLHMCABECA;
String F77_RLNMABREMP;
double F77_RLNRPAGINA;
double F77_RLNRSOLICI;
// F78_ITENS();
double F78_RLCDAPBICM;
double F78_RLCDAPNICM;
double F78_RLCDAPVDIO;
double F78_RLCDAPVICM;
String F78_RLCDNATOGR;
String F78_RLINPESSOA;
double F78_RLPCICMNOT;
double F78_RLVLAPOICM;
// F79_ITENS();
String F79_LABEL2;
double F79_RLCDAPBICM;
double F79_RLCDAPNICM;
double F79_RLCDAPVDIO;
double F79_RLCDAPVICM;
double F79_RLVLAPOICM;
// F80_ITENS();
double F80_RLCDAPBICM;
double F80_RLCDAPNICM;
double F80_RLCDAPVDIO;
double F80_RLCDAPVICM;
double F80_RLVLAPOICM;
// F81_ITENS();
String F81_RLDSCONDEF;
String F81_RLDSICMSXX;
String F81_RLDSNOTFOP;
String F81_RLDSTEX20A;
double F81_RLDTCABECA;
String F81_RLDTFINALX;
String F81_RLDTINICIO;
String F81_RLHMCABECA;
String F81_RLNMABREMP;
double F81_RLNRPAGINA;
double F81_RLNRSOLICI;
// F82_ITENS();
double F82_RLNRNOTCRE;
double F82_RLPCICMCRE;
double F82_RLVLBASCRE;
double F82_RLVLCONCRE;
double F82_RLVLIMPCRE;
// F83_ITENS();
double F83_RLVLBASCRE;
double F83_RLVLCONCRE;
double F83_RLVLIMPCRE;
// F84_ITENS();
double F84_RLVLBASCRE;
double F84_RLVLCONCRE;
double F84_RLVLIMPCRE;
// F90_ITENS();
double F90_EXCDCLIFOR;
double F90_EXINCLIFOR;
double F90_EXVLMOVIME;
// F91_ITENS();
double F91_EXCDCLAFIS;
double F91_EXVLMOVIME;
// F92_ITENS();
double F92_EXCDCLAFIS;
double F92_EXCDCONCRE;
double F92_EXCDDEBICM;
double F92_EXCDNATOPE;
String F92_EXCDUFMUNI;
double F92_EXVLBASICM;
double F92_EXVLCONTAB;
double F92_EXVLIMPICM;
// F93_ITENS();
double F93_EXCDNATDIA;
double F93_EXCDPRODUT;
String F93_EXCDUFMUNI;
double F93_EXINBRINDE;
double F93_EXINCLIENT;
double F93_EXNRNOTDIA;
double F93_EXPCICMDIA;
double F93_EXVLBASDIA;
double F93_EXVLCONDIA;
double F93_EXVLICMDIA;
double F93_EXVLIMPDIA;
// F94_ITENS();
double F94_EXCDLINCRE;
double F94_EXCDNATCRE;
String F94_EXINTEXCRE;
double F94_EXNRNOTCRE;
double F94_EXPCICMCRE;
double F94_EXVLBASCRE;
double F94_EXVLCONCRE;
double F94_EXVLIMPCRE;
// F95_ITENS();
String F95_LABEL1;
double F95_RLDTCABECA;
String F95_RLHMCABECA;
String F95_RLNMABREMP;
double F95_RLNRPAGINA;
double F95_RLNRSOLICI;
// F96_ITENS();
String F96_RLCDOCORRE;
String F96_RLDSOCORRE;
String F96_RLINOCORRE;
// F101_ITENS();
String F101_LABEL1;
double F101_RLDTCABECA;
String F101_RLDTFINALX;
String F101_RLDTINICIO;
String F101_RLHMCABECA;
String F101_RLNMABREMP;
double F101_RLNRPAGINA;
double F101_RLNRSOLICI;
// F102_ITENS();
String F102_RLCDNATOGR;
String F102_RLCDUFMUNI;
double F102_RLVLBASDID;
double F102_RLVLFCPDES;
double F102_RLVLICMDID;
double F102_RLVLICMDIO;
// F103_ITENS();
String F103_LABEL1;
String F103_RLCDUFMUNI;
double F103_RLVLBASDID;
double F103_RLVLFCPDES;
double F103_RLVLICMDID;
double F103_RLVLICMDIO;
// F104_ITENS();
double F104_EXNRNOTCRE;
double F104_EXVLBASCRE;
double F104_EXVLFCPDES;
double F104_EXVLICMDID;
double F104_EXVLICMDIO;
// F111_ITENS();
String F111_LABEL1;
String F111_RLDSTEX20A;
double F111_RLDTCABECA;
String F111_RLDTFINALX;
String F111_RLDTINICIO;
String F111_RLHMCABECA;
String F111_RLNMABREMP;
double F111_RLNRPAGINA;
double F111_RLNRSOLICI;
// F112_ITENS();
double F112_RLNRNOTCRE;
double F112_RLVLBASCRE;
double F112_RLVLFCPDES;
double F112_RLVLICMDID;
double F112_RLVLICMDIO;
// F113_ITENS();
double F113_RLVLBASCRE;
double F113_RLVLFCPDES;
double F113_RLVLICMDID;
double F113_RLVLICMDIO;
// F121_ITENS();
double F121_RLCDCLAFI1;
double F121_RLCDCLAFIS;
String F121_RLDSCONDEF;
String F121_RLDSTEXAUX;
double F121_RLDTCABECA;
String F121_RLDTFINALX;
String F121_RLDTINICIO;
String F121_RLHMCABECA;
String F121_RLNMABREMP;
double F121_RLNRPAGINA;
double F121_RLNRSOLICI;
// F122_ITENS();
double F122_RLCDAPBICM;
double F122_RLCDAPNICM;
double F122_RLCDAPVDIO;
double F122_RLCDAPVICM;
String F122_RLCDNATOGR;
String F122_RLINPESSOA;
double F122_RLPCICMNOT;
double F122_RLVLAPOICM;
// F123_ITENS();
String F123_LABEL2;
double F123_RLCDAPBICM;
double F123_RLCDAPNICM;
double F123_RLCDAPVDIO;
double F123_RLCDAPVICM;
double F123_RLVLAPOICM;
// F124_ITENS();
String F124_LABEL2;
double F124_RLCDAPBICM;
double F124_RLCDAPNICM;
double F124_RLCDAPVDIO;
double F124_RLCDAPVICM;
double F124_RLVLAPOICM;
// F125_ITENS();
double F125_EXCDNATDIA;
String F125_EXCDUFMUNI;
double F125_EXINCLIENT;
double F125_EXPCICMDIA;
double F125_EXVLBASDIA;
double F125_EXVLCONDIA;
double F125_EXVLICMDIA;
double F125_EXVLIMPDIA;
String GSDINCONCIL = "";
double GSDQTMESESX = 0;
double GSDQTMESDIF = 0;
double GSDTPCALDAT = 0;
double GSDAMREFSEC = 0;
double GSDAMREFFIN = 0;
double GSDAMSALCON = 0;
double GSDCDCLACCU = 0;
String GSDCDCLACON = "";
String GSDDSCOMCCU = "";
double GSDNRNIVCCU = 0;
double GSDNRPOSCC1 = 0;
double GSDNRPOSCC2 = 0;
double GSDNRPOSCC3 = 0;
double GSDNRPOSCC4 = 0;
double GSDNRPOSCC5 = 0;
double GSDNRPOSCC6 = 0;
double GSDNRPOSCC7 = 0;
double GSDNRPOSCC8 = 0;
String GSDNRPOSCCU = "";
String GSDCDCOMCCU = "";
String GSDDSCOMCTA = "";
double GSDNRNIVCTA = 0;
double GSDNRPOSCT1 = 0;
double GSDNRPOSCT2 = 0;
double GSDNRPOSCT3 = 0;
double GSDNRPOSCT4 = 0;
double GSDNRPOSCT5 = 0;
double GSDNRPOSCT6 = 0;
double GSDNRPOSCT7 = 0;
double GSDNRPOSCT8 = 0;
String GSDNRPOSCTA = "";
String GSDCDCOMCTA = "";
double GSDCDCTANUM = 0;
String GSDCDCTAALF = "";
double GSDCDCTACON = 0;
double GSDCDCUSNUM = 0;
String GSDCDCUSALF = "";
String GSDCDDEPANT = "";
String GSDCDDOITEM = "";
double GSDCDECUSTO = 0;
BigDecimal GSDCDELEN16 = bigZeros;
String GSDCDELEA16 = "";
double GSDCDELENUM = 0;
String GSDCDELEALF = "";
double GSDCDHISTOR = 0;
double GSDCDINDANT = 0;
String GSDCDITEAN4 = "";
String GSDCDITEAN8 = "";
double GSDCDORILAN = 0;
double GSDCDRAZAUX = 0;
double GSDDISSSAMD = 0;
double GSDDIAASAMD = 0;
String GSDDISASAMD = "";
double GSDDIMMSAMD = 0;
String GSDDIAMSAMD = "";
double GSDDIDDSAMD = 0;
String GSDDIDISAMD = "";
double GSDDILANCTO = 0;
double GSDDIREFSEC = 0;
String GSDDSALFA01 = "";
String GSDDSCOMPHI = "";
String GSDDSELEMEN = "";
String GSDDSPARAME = "";
String GSDCDCOMAND = "";
double GSDCDSENHAN = 0;
String GSDCDSENHAX = "";
String GSDDSMENSAG = "";
double GSDNRSOLICI = 0;
String GSDCDRELATO = "";
String GSICDUSUARI = "";
double GSICDEMPRES = 0;
double GSICDFILVEN = 0;
String GSINMEMPRES = "";
String GSDNMESTINI = "";
String GSDNMESTSOL = "";
double GSIDISISTEM = 0;
double GSIDTSISTEM = 0;
String GSDTHHHMMED = "";
double GSDNRREGLID = 0;
double GSDNRREGGRA = 0;
double GSDNRMIXREL = 0;
double GSIINPROREF = 0;
double GSIINESTPRO = 0;
double GSIINFILFAT = 0;
double GSIINESTGER = 0;
String GSDDSPARREP = "";
String GSDCDUSUARI = "";
double GSDCDEMPRES = 0;
double GSDCDNIVSEG = 0;
double GSDCDFILVEN = 0;
String GSDNMABREMP = "";
String GSDCDATIVID = "";
double GSDDTSISTEM = 0;
double GSDNRUSUARI = 0;
double GSDINPROREF = 0;
double GSDDISISSEC = 0;
double GSDDTSISSEC = 0;
double GSDINESTPRO = 0;
double GSDINFILFAT = 0;
double GSDINESTGER = 0;
String GSDGLB_WORK = "";
String GSDINADDSUB = "";
String GSDINASTERI = "";
String GSDINCHAANT = "";
String GSDINELESIN = "";
String GSDINEMPANT = "";
double GSDINITEMOK = 0;
double GSDINLEIANT = 0;
double GSDINLEIDIR = 0;
String GSDINREAISX = "";
double GSDINSINLAN = 0;
String GSDINSITREG = "";
double GSDNRCONSLP = 0;
double GSDNRDECIMA = 0;
double GSDNRFORMCG = 0;
double GSDNRLOTECG = 0;
double GSDNRSOLREL = 0;
double GSDNRPARREL = 0;
double GSDNRSEQPAR = 0;
String GSDNRPARAME = "";
double GSDNRULTSOL = 0;
double GSDNRULTSEQ = 0;
String GSDNRULTPAR = "";
double GSDNRSEQLAN = 0;
double GSDNRSLEEPS = 0;
String GSDTPCODANT = "";
double GSDTPCTACON = 0;
double GSDTPEDIIND = 0;
double GSDTPLANCTO = 0;
BigDecimal GSDVLELEMEN = bigZeros;
BigDecimal GSDVLELESIN = bigZeros;
String GSDVLINDEDI = "";
BigDecimal GSDVLINDICE = bigZeros;
BigDecimal GSDVLLANCAM = bigZeros;
BigDecimal GSDVLLANCRE = bigZeros;
BigDecimal GSDVLLANDEB = bigZeros;
double GSDVLPARAME = 0;
double GSDVLPROGMO = 0;
double GSDVLPROUMG = 0;
double GSDVLREALCR = 0;
double GSDVLREALMG = 0;
double GSDVLREALMO = 0;
BigDecimal GSDVLRZEROS = bigZeros;
String GSDDSCOMAND = "";
double GSDNRECORDS = 0;
String GSDDSFECPAR = "";
double GSDINSLDCON = 0;
String GSDDSASSINA = "";
String GSDCDATVEMA = "";
double GSDCDPAISGL = 0;
double GSDNRCLOCGL = 0;
double GSDNRCCOMGL = 0;
double GSDINTEMCEP = 0;
double GSDNRCGCCON = 0;
double SDTHINEXEC = 0;
double AXAMREFERE = 0;
double AXCDFILIAL = 0;
double AXDIFINALX = 0;
double AXDIINICIO = 0;
double AXINATUALI = 0;
String AXINIMPPCL = "";
String AXINBACDET = "";
double AXINMESPER = 0;
String AXINSEPDEP = "";
double AXTPRELATO = 0;
double GEDSFILLER = 0;
double GENRDECEND = 0;
double GEAMREFERE = 0;
String GRAMREFERE = "";
double GECDNATNUM = 0;
String GRCDNATALF = "";
String GECDPO1GR1 = "";
String GECDPO2GR1 = "";
String GECDPO3GR1 = "";
String GECDPO4GR1 = "";
String GECDPO5GR1 = "";
String GRCDNATGR1 = "";
String GECDPO1GR2 = "";
String GECDPO2GR2 = "";
String GECDPO3GR2 = "";
String GRCDNATGR2 = "";
double GECDPRIPOS = 0;
double GECDSEGPOS = 0;
double GECDULTPOS = 0;
String GRCDNATTRA = "";
String GRCDNATONU = "";
double GENRCPFED1 = 0;
String GEDSLIMI01 = "";
double GENRCPFED2 = 0;
String GEDSLIMI02 = "";
double GENRCPFED3 = 0;
String GEDSHIFENX = "";
double GENRCPFDIG = 0;
String GRNRCPFEDI = "";
double GENRCPF001 = 0;
double GENRCPF002 = 0;
double GENRCPF003 = 0;
double GENRCPF004 = 0;
String GRNRCPFSRF = "";
double GENRINFORM = 0;
String GRNRINFORM = "";
double GECDZEROSX = 0;
double GECDMODICM = 0;
double GECDFILICM = 0;
double GENRNFICMP = 0;
String GRNRNFICMP = "";
double GEINDEBIPI = 0;
String GEDSESTADO = "";
double GECDNATCOM = 0;
double GEQTPESOKG = 0;
double GEVLAUXIL1 = 0;
double GEVLAUXIL2 = 0;
double GEVLBASICM = 0;
double GEVLBASIPI = 0;
double GEVLCONTAB = 0;
double GEVLIMPICM = 0;
double GEVLIMPIPI = 0;
double GEVLINTEGR = 0;
double GEVLINTICM = 0;
double GEVLINTIPI = 0;
double GEVLOUTICM = 0;
double GEVLOUTIPI = 0;
double GEVLCONTNC = 0;
double GEVLBICMNC = 0;
double GEVLBASSTR = 0;
double GEVLICMSTR = 0;
double GEVLTRAB01 = 0;
double GEVLTRAB02 = 0;
double GEVLTRAB03 = 0;
double GEVLTRAB04 = 0;
double GEVLTRAB05 = 0;
double GEVLTRAB06 = 0;
double GEVLTRAB07 = 0;
double GEVLTRAB08 = 0;
double GEVLTRAB09 = 0;
double GEVLTRAB10 = 0;
double GEVLTRAB11 = 0;
double GEVLTRAB12 = 0;
double GEVLTRAB13 = 0;
String GRVLATUALI = "";
double GEVLFILRED = 0;
double GECDTEXRED = 0;
double GEPCREDICM = 0;
String GRVLREDICM = "";
String GEDSNOTAFI = "";
String GEDSESPA01 = "";
String GEDSEMISSA = "";
String GEDSESPA04 = "";
String GEDSCLIENT = "";
String GEDSESPA02 = "";
String GEDSCLIEN1 = "";
String GRDSCABECA = "";
String GENRNOTDEP = "";
String GEDSESPA06 = "";
String GEDIEMIDEP = "";
String GEDSESPA09 = "";
String GECDCLIDEP = "";
String GEDSESPA07 = "";
String GENMCLIENT = "";
String GRDSLINHAX = "";
double SDAMAPUICM = 0;
double SDAMAPUIPI = 0;
double SDAMAUXILI = 0;
double SDAMEMIANT = 0;
double SDAMEMIATU = 0;
double SDAMREFERE = 0;
double SDAMREGSAI = 0;
String SDCDAJAPUR = "";
double SDCDCANCEL = 0;
double SDCDCLFIAU = 0;
double SDCDCLAFIS = 0;
double SDCDCLIFOR = 0;
double SDCDCONANT = 0;
double SDCDCONCRE = 0;
double SDCDCRFREX = 0;
double SDCDCRTXFR = 0;
double SDCDDEBICM = 0;
double SDCDDEPNFI = 0;
double SDCDFISAUX = 0;
double SDCDFISCAL = 0;
double SDCDGRUCHA = 0;
double SDCDMODANT = 0;
double SDCDNATANT = 0;
double SDCDNATAUX = 0;
double SDCDNATCO1 = 0;
double SDCDNATCOM = 0;
double SDCDNATCRE = 0;
double SDCDNATCZF = 0;
double SDCDNATOPE = 0;
double SDCDOCONAT = 0;
double SDCDTIPFBO = 0;
double SDCDCTCRTE = 0;
double SDCDCTDBTE = 0;
double SDCDHISTOR = 0;
String SDCDUFLEMP = "";
String SDCDUFMUNI = "";
String SDCDUSUARI = "";
double SDDIDATIPI = 0;
double SDDIINITTD = 0;
double SDDIEMIANT = 0;
double SDDIEMINOT = 0;
double SDDIFIMDEC = 0;
double SDDIFINALX = 0;
double SDDIINICIO = 0;
double SDDIINIDEC = 0;
double SDDINOVRGS = 0;
double SDDINRSIPI = 0;
double SDDIREGJUN = 0;
double SDDIREGSAI = 0;
double SDDISAINOT = 0;
String SDDSENDAUX = "";
String SDDSIMPOST = "";
String SDDSTEXAUX = "";
double SDINACHOUX = 0;
double SDINCLIANT = 0;
double SDINCLIENT = 0;
double SDINCONTAB = 0;
double SDINAPURAC = 0;
double SDINBANTES = 0;
double SDINCALIPI = 0;
double SDININCENT = 0;
double SDINCLIFOR = 0;
double SDINCONFIN = 0;
double SDINCONTRO = 0;
double SDINDECEN1 = 0;
double SDINDECEN2 = 0;
double SDINDECEN3 = 0;
double SDINDECEND = 0;
double SDINEMILIV = 0;
double SDINENCERR = 0;
double SDINENCIPI = 0;
double SDINEXTDIA = 0;
double SDINEXTRAI = 0;
double SDINFILORI = 0;
double SDINICMPRO = 0;
double SDINLIVANU = 0;
double SDINNAOUTI = 0;
double SDINOPTSIM = 0;
double SDINORIGEM = 0;
double SDINPRIICM = 0;
double SDINPRIVEZ = 0;
double SDINSTATUS = 0;
double SDINSVLCON = 0;
double SDINTEM119 = 0;
double SDINTEM130 = 0;
String SDINTEXCRE = "";
double SDINTXFRET = 0;
double SDINUMAANT = 0;
double SDINUMANAT = 0;
double SDINZONANT = 0;
double SDINZONAFR = 0;
String SDNMCONTAD = "";
String SDNMEMPRES = "";
double SDNRCGCNUM = 0;
double SDNRCFICMP = 0;
double SDNRCONPAG = 0;
String SDNRCRCCON = "";
double SDNRCONTAD = 0;
double SDNRDECEND = 0;
double SDNRLIMPRS = 0;
double SDNRLINHAS = 0;
double SDNRLIVRRS = 0;
double SDNRLOTECG = 0;
double SDNRNOTAFI = 0;
double SDNRNOTANT = 0;
double SDNRNOTCRE = 0;
double SDNRNOTFIN = 0;
double SDNRREGJUN = 0;
double SDNRSEQIMP = 0;
double SDNRSEQUEN = 0;
double SDNRSLEEPX = 0;
double SDNRULTPRS = 0;
double SDNRUSUNFI = 0;
double SDPCICMPRO = 0;
double SDPCICMNOT = 0;
double SDPCIPIANT = 0;
double SDPCIPINOT = 0;
double SDTPFATREP = 0;
double SDTPIMPOST = 0;
double SDTPNFMANI = 0;
double SDTPREGIST = 0;
double SDTPREGANT = 0;
String SDTPSERANT = "";
String SDTPSERIEX = "";
double SDVLCONTAB = 0;
double SDVLINTICM = 0;
double SDVLAPBIPI = 0;
double SDVLAPVIPI = 0;
double SDVLAPMIPI = 0;
double SDVLAPOIPI = 0;
double SDVLOUTICM = 0;
double SDVLAUXILI = 0;
double SDVLBASICM = 0;
double SDVLBASDID = 0;
double SDVLBASIPI = 0;
double SDVLBASSTR = 0;
double SDVLBCIINT = 0;
double SDVLBICMAP = 0;
double SDVLBRUNEG = 0;
double SDVLCONTAP = 0;
double SDVLDIFERE = 0;
double SDVLICMCAL = 0;
double SDVLICMNAT = 0;
double SDVLICMNOT = 0;
double SDVLICMDIO = 0;
double SDVLICMDID = 0;
double SDVLFCPDES = 0;
double SDVLICMSTR = 0;
double SDVLICMZFP = 0;
double SDVLIMPIAP = 0;
double SDVLIMPICM = 0;
double SDVLINTIAP = 0;
double SDVLIPIISE = 0;
double SDVLIPINOT = 0;
double SDVLIPIOUT = 0;
double SDVLISENTA = 0;
double SDVLLIQNEG = 0;
double SDVLLIQUID = 0;
double SDVLICMPRO = 0;
double SDVLMOVAUX = 0;
double SDVLMOVIME = 0;
double SDVLNEGATI = 0;
double SDVLOUTIAP = 0;
double SDVLOUTRAS = 0;
double SDVLVLRCON = 0;
double[] TBCDNATOPE = new double[20];
double ITCDNATOPE;
double[] TBCDNATCOM = new double[20];
double[] TBCDOCONAT = new double[20];
double[] TBNRCONTAX = new double[20];
double[] TBPCICMNAT = new double[20];
double[] TBVLBASICM = new double[20];
double[] TBVLBASSTR = new double[20];
double[] TBVLICMNAT = new double[20];
double[] TBVLICMSTR = new double[20];
double[] TBINTEXTIL = new double[999];
double ITCDLINTEX;
String SDDSAUXEMA = "";
String SDDSFONTEX = "";
String SDDSSUBJEC = "";
String SDDSIPSERV = "";
String SDDSEMASER = "";
String SDDSEMAUSU = "";
String SDDSEMAILX = "";
String SDDSCONTAT = "";
String SDDSIMAGEM = "";
String SDSMTPUSER = "";
String SDSMTPPASS = "";
String SDDSEMACOP = "";
String SDNMEMAAUX = "";
double CGP001GEVLGRUPO1 = 0;
double CGP001GEVLGRUPO2 = 0;
double CGP001GEVLGRUPO3 = 0;
double CGP001GEVLGRUPO4 = 0;
double CGP001GEVLGRUPO5 = 0;
double CGP001GEVLGRUPO6 = 0;
double CGP001GEVLGRUPO7 = 0;
String CGP001GRDSMASCAR = "";
String CGP001GEDSVLREDI = "";
String CGP001GEDSSINEDI = "";
String CGP001GRVLEDITAD = "";
BigDecimal CGP001GEVLINDICE = bigZeros;
String CGP001GRVLINDICE = "";
String CGP001SDDSVLINDI = "";
double CGP001SDINPRIMEI = 0;
double CGP001SDNRGRUPOX = 0;
double CGP001SDNRPOSDES = 0;
double CGP001SDNRPOSORI = 0;
double CGP001SDVLGRUPOX = 0;
String CGP003SDCDATVREP = "";
double CGP003SDAMENCEXE = 0;
double CGP003SDAMLCTREC = 0;
double CGP003SDAMSALCON = 0;
String CGP003SDCDCLACON = "";
double CGP003SDCDCTACON = 0;
String CGP003SDDSPOSCTA = "";
double CGP003SDINMESENC = 0;
double CGP003SDNRCGCCON = 0;
double CGP003SDNRCGCORI = 0;
double CGP003SDNRNIVCTA = 0;
double CGP003SDQTPOSICA = 0;
BigDecimal CGP003SDVLSALCON = bigZeros;
BigDecimal CGP003SDVLSALCOR = bigZeros;
double CGP004SDCDCLACUS = 0;
double CGP004SDCDNIVSAV = 0;
double CGP004SDCDNVCCUS = 0;
double CGP004SDNRNIVCCU = 0;
double CGP004SDNRPOSICA = 0;
double CGP004SDVLPOSICA = 0;
double CGP004SDVLPROGMO = 0;
double CGP004SDVLPROUMG = 0;
double CGP004SDVLREALCR = 0;
double CGP004SDVLREALMG = 0;
double CGP004SDVLREALMO = 0;
String CGP010SDCDATIVID = "";
double CGP010SDINTEM107 = 0;
double CGP010SDNRUSUARI = 0;
BigDecimal CGP010SDVLDIFLAN = bigZeros;
BigDecimal CGP010SDVLLANCRE = bigZeros;
BigDecimal CGP010SDVLLANDEB = bigZeros;
double CGP016SDAMLCTRAZ = 0;
String CGP016SDCDATVREP = "";
double CGP016SDCDCTARAZ = 0;
double CGP016SDNRCGCRAZ = 0;
double CGP016SDTPLANRAZ = 0;
BigDecimal CGP016SDVLSALRAZ = bigZeros;
double EXTENSOSDVLINTEIR = 0;
String GSP004SDCDITEDEP = "";
double GSP004SDIN125130 = 0;
double GSP004SDINITEDEP = 0;
double GSP004SDINITEMOK = 0;
String GSP008SDCDDOITEM = "";
double GSP008SDCDEMPRES = 0;
String GSP008SDCDITEORI = "";
BigDecimal GSP008SDVLELEMEN = bigZeros;
double GSP017SDQTMESESX = 0;
double GSP017SDAAFINALX = 0;
double GSP017SDAAINICIO = 0;
String GSP035SDCDATIVID = "";
String GSP035SDDSCARGOX = "";
double GSP035SDINSEMARQ = 0;
String GSP035SDNMEMAILX = "";
String GSP035SDNMUSUARI = "";
String GSP035SDDSSAUASS = "";
String GSP035SDNMFUNASS = "";
String GSP035SDDSDEPASS = "";
String GSP035SDDSCONASA = "";
String GSP035SDDSCONASB = "";
String GSP035SDDSCONASC = "";
String GSP035SDNRFAXCOM = "";
XseedCriticalPoint xseedCP;

File extractFile; // Declaração do arquivo de EXTRACT
String runQueueNumber = "";



XseedCombobox COMBOX = new XseedCombobox();
XseedSleep esperaTempo = new XseedSleep();
ResultSet rs_av120;

String sddscomsql = "";


// variaveis globais automatica
private String F1_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "+-------------------------------------------------------------------------------";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(81 - pos - wCaption.length() ," ");
        pos = 81;
        wCaption = "---------------------------------------------------+";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_1");
       return("");
    }
}
private String F1_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(49 - pos - wCaption.length() ," ");
        pos = 49;
        wCaption = "R E G I S T R O";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "D E";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(73 - pos - wCaption.length() ," ");
        pos = 73;
        wCaption = "S A I D A S";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_2");
       return("");
    }
}
private String F1_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(2 - pos - wCaption.length() ," ");
        pos = 2;
        wCaption = "FIRMA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        Buffer = Buffer + format(F1_RLNMEMPRES, 30);
        Buffer = Buffer + string (132 - pos - 30," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_3");
       return("");
    }
}
private String F1_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(2 - pos - wCaption.length() ," ");
        pos = 2;
        wCaption = "INSCR.EST.:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(14 - pos - wCaption.length() ," ");
        pos = 14;
        Buffer = Buffer + format(F1_RLNRIESEMP, 15);
        Buffer = Buffer + string (39 - pos - 15," ");
        pos = 39;
        wCaption = "CGC(MF):";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(49 - pos - wCaption.length() ," ");
        pos = 49;
        Buffer = Buffer + format(F1_RLNRCGCNUM,"99,999,999");
        Buffer = Buffer + string (59 - pos - 10," ");
        pos = 59;
        wCaption = "/";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(60 - pos - wCaption.length() ," ");
        pos = 60;
        Buffer = Buffer + format(F1_RLNRCGCFIL,"9999");
        Buffer = Buffer + string (64 - pos - 4," ");
        pos = 64;
        wCaption = "-";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(65 - pos - wCaption.length() ," ");
        pos = 65;
        Buffer = Buffer + format(F1_RLNRCGCDIG,"99");
        Buffer = Buffer + string (86 - pos - 2," ");
        pos = 86;
        Buffer = Buffer + format(F1_RLDSTIPREL, 46);
        Buffer = Buffer + string (132 - pos - 46," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_4");
       return("");
    }
}
private String F1_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(2 - pos - wCaption.length() ," ");
        pos = 2;
        wCaption = "FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        Buffer = Buffer + format(F1_RLNRFOLHAS,"ZZZZZ");
        Buffer = Buffer + string (18 - pos - 5," ");
        pos = 18;
        wCaption = "SOLICITACAO:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        Buffer = Buffer + format(F1_RLNRSOLICI,"ZZZZZZ");
        Buffer = Buffer + string (39 - pos - 6," ");
        pos = 39;
        wCaption = "PERIODO:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(49 - pos - wCaption.length() ," ");
        pos = 49;
        Buffer = Buffer + format(F1_RLDTINICIA, 10);
        Buffer = Buffer + string (60 - pos - 10," ");
        pos = 60;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(62 - pos - wCaption.length() ," ");
        pos = 62;
        Buffer = Buffer + format(F1_RLDTFINALX, 10);
        Buffer = Buffer + string (132 - pos - 10," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_5");
       return("");
    }
}
private String F1_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "+-----------------------------+-------------+-------------+----+---------------";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(81 - pos - wCaption.length() ," ");
        pos = 81;
        wCaption = "--------------------------------------------+------+";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_6");
       return("");
    }
}
private String F1_7 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|     DOCUMENTOS FISCAIS      |";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(45 - pos - wCaption.length() ," ");
        pos = 45;
        wCaption = "|CODIFICAO    |";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(87 - pos - wCaption.length() ," ");
        pos = 87;
        wCaption = "VALORES FISCAIS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(125 - pos - wCaption.length() ," ");
        pos = 125;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(126 - pos - wCaption.length() ," ");
        pos = 126;
        Buffer = Buffer + format(F1_RLDSLITOBS, 6);
        Buffer = Buffer + string (132 - pos - 6," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_7");
       return("");
    }
}
private String F1_8 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "+---+---+---------------+--+--+";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(45 - pos - wCaption.length() ," ");
        pos = 45;
        wCaption = "+------+------+----+--------------------------------+-----------------------";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(121 - pos - wCaption.length() ," ");
        pos = 121;
        wCaption = "----+";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_8");
       return("");
    }
}
private String F1_9 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(25 - pos - wCaption.length() ," ");
        pos = 25;
        wCaption = "|D";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(37 - pos - wCaption.length() ," ");
        pos = 37;
        wCaption = "VALOR";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(45 - pos - wCaption.length() ," ");
        pos = 45;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(59 - pos - wCaption.length() ," ");
        pos = 59;
        wCaption = "|ICMS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "|OPERACOES COM DEBITO DO IMPOSTO |OPER.SEM DEBITO DO IMPOSTO |";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_9");
       return("");
    }
}
private String F1_10 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(25 - pos - wCaption.length() ," ");
        pos = 25;
        wCaption = "|I";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(45 - pos - wCaption.length() ," ");
        pos = 45;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(59 - pos - wCaption.length() ," ");
        pos = 59;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "+-------------+-----+------------+-------------+-------------+";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_10");
       return("");
    }
}
private String F1_11 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|ESP";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "|SER";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(14 - pos - wCaption.length() ," ");
        pos = 14;
        wCaption = "NUMERO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(25 - pos - wCaption.length() ," ");
        pos = 25;
        wCaption = "|A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(29 - pos - wCaption.length() ," ");
        pos = 29;
        wCaption = "UF";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(35 - pos - wCaption.length() ," ");
        pos = 35;
        wCaption = "CONTABIL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(45 - pos - wCaption.length() ," ");
        pos = 45;
        wCaption = "|CONTAB|FIS   |IPI";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "|BASE CALCULO |ALIQ.|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(85 - pos - wCaption.length() ," ");
        pos = 85;
        wCaption = "IMPOSTO DEB.|ISENTAS/N.TR.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(111 - pos - wCaption.length() ," ");
        pos = 111;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(118 - pos - wCaption.length() ," ");
        pos = 118;
        wCaption = "OUTRAS |";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_11");
       return("");
    }
}
private String F1_12 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "+---+---+---------------+--+--+-------------+------+------+----+-------------+--";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(81 - pos - wCaption.length() ," ");
        pos = 81;
        wCaption = "---+------------+-------------+-------------+------+";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F1_12");
       return("");
    }
}
private String F2_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(2 - pos - wCaption.length() ," ");
        pos = 2;
        Buffer = Buffer + format(F2_RLCDESPECI, 3);
        Buffer = Buffer + string (5 - pos - 3," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(6 - pos - wCaption.length() ," ");
        pos = 6;
        Buffer = Buffer + format(F2_RLNRSERIEX, 3);
        Buffer = Buffer + string (9 - pos - 3," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(10 - pos - wCaption.length() ," ");
        pos = 10;
        if (F2_RLNRNOTAFI != 0)
        {
        Buffer = Buffer + format(F2_RLNRNOTAFI,"ZZZZZZZZZ");
        }
        else
        {   Buffer = Buffer + "         ";
        }
        Buffer = Buffer + string (20 - pos - 9," ");
        pos = 20;
        Buffer = Buffer + format(F2_RLDSLETRAA, 1);
        Buffer = Buffer + string (21 - pos - 1," ");
        pos = 21;
        if (F2_RLNRNOTFIN != 0)
        {
        Buffer = Buffer + format(F2_RLNRNOTFIN,"ZZZZ");
        }
        else
        {   Buffer = Buffer + "    ";
        }
        Buffer = Buffer + string (25 - pos - 4," ");
        pos = 25;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(26 - pos - wCaption.length() ," ");
        pos = 26;
        if (F2_RLDTDIADOC != 0)
        {
        Buffer = Buffer + format(F2_RLDTDIADOC,"ZZ");
        }
        else
        {   Buffer = Buffer + "  ";
        }
        Buffer = Buffer + string (28 - pos - 2," ");
        pos = 28;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(29 - pos - wCaption.length() ," ");
        pos = 29;
        Buffer = Buffer + format(F2_RLCDUFMUNI, 2);
        Buffer = Buffer + string (31 - pos - 2," ");
        pos = 31;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(32 - pos - wCaption.length() ," ");
        pos = 32;
        if (F2_RLVLCONTAB != 0)
        {
        Buffer = Buffer + format(F2_RLVLCONTAB,"ZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "             ";
        }
        Buffer = Buffer + string (45 - pos - 13," ");
        pos = 45;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(46 - pos - wCaption.length() ," ");
        pos = 46;
        if (F2_RLCDCONTAX != 0)
        {
        Buffer = Buffer + format(F2_RLCDCONTAX,"ZZZZZZ");
        }
        else
        {   Buffer = Buffer + "      ";
        }
        Buffer = Buffer + string (52 - pos - 6," ");
        pos = 52;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(53 - pos - wCaption.length() ," ");
        pos = 53;
        Buffer = Buffer + format(F2_RLCDNATOGR, 6);
        Buffer = Buffer + string (59 - pos - 6," ");
        pos = 59;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(60 - pos - wCaption.length() ," ");
        pos = 60;
        Buffer = Buffer + format(F2_RLDSOBSERV, 4);
        Buffer = Buffer + string (64 - pos - 4," ");
        pos = 64;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(65 - pos - wCaption.length() ," ");
        pos = 65;
        if (F2_RLNRBASCAL != 0)
        {
        Buffer = Buffer + format(F2_RLNRBASCAL,"ZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "             ";
        }
        Buffer = Buffer + string (78 - pos - 13," ");
        pos = 78;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(79 - pos - wCaption.length() ," ");
        pos = 79;
        if (F2_RLVLPERCEN != 0)
        {
        Buffer = Buffer + format(F2_RLVLPERCEN,"ZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "     ";
        }
        Buffer = Buffer + string (84 - pos - 5," ");
        pos = 84;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(85 - pos - wCaption.length() ," ");
        pos = 85;
        if (F2_RLVLIMPOST != 0)
        {
        Buffer = Buffer + format(F2_RLVLIMPOST,"Z,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "            ";
        }
        Buffer = Buffer + string (97 - pos - 12," ");
        pos = 97;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(98 - pos - wCaption.length() ," ");
        pos = 98;
        if (F2_RLVLISENTA != 0)
        {
        Buffer = Buffer + format(F2_RLVLISENTA,"ZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "             ";
        }
        Buffer = Buffer + string (111 - pos - 13," ");
        pos = 111;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(112 - pos - wCaption.length() ," ");
        pos = 112;
        if (F2_RLVLOUTRAS != 0)
        {
        Buffer = Buffer + format(F2_RLVLOUTRAS,"ZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "             ";
        }
        Buffer = Buffer + string (125 - pos - 13," ");
        pos = 125;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(126 - pos - wCaption.length() ," ");
        pos = 126;
        Buffer = Buffer + format(F2_RLDTSAIDAX, 10);
        Buffer = Buffer + string (136 - pos - 10," ");
        pos = 136;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F2_1");
       return("");
    }
}
private String F3_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(25 - pos - wCaption.length() ," ");
        pos = 25;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(45 - pos - wCaption.length() ," ");
        pos = 45;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(59 - pos - wCaption.length() ," ");
        pos = 59;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(78 - pos - wCaption.length() ," ");
        pos = 78;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(84 - pos - wCaption.length() ," ");
        pos = 84;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(97 - pos - wCaption.length() ," ");
        pos = 97;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(111 - pos - wCaption.length() ," ");
        pos = 111;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(125 - pos - wCaption.length() ," ");
        pos = 125;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F3_1");
       return("");
    }
}
private String F3_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(25 - pos - wCaption.length() ," ");
        pos = 25;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(45 - pos - wCaption.length() ," ");
        pos = 45;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "|TOT";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(59 - pos - wCaption.length() ," ");
        pos = 59;
        wCaption = "|ICMS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(65 - pos - wCaption.length() ," ");
        pos = 65;
        Buffer = Buffer + format(F3_RLVLBASICM,"ZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (78 - pos - 13," ");
        pos = 78;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(84 - pos - wCaption.length() ," ");
        pos = 84;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(85 - pos - wCaption.length() ," ");
        pos = 85;
        Buffer = Buffer + format(F3_RLVLIMPICM,"Z,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (97 - pos - 12," ");
        pos = 97;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(98 - pos - wCaption.length() ," ");
        pos = 98;
        Buffer = Buffer + format(F3_RLVLISEICM,"ZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (111 - pos - 13," ");
        pos = 111;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(112 - pos - wCaption.length() ," ");
        pos = 112;
        Buffer = Buffer + format(F3_RLVLOUTICM,"ZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (125 - pos - 13," ");
        pos = 125;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F3_2");
       return("");
    }
}
private String F3_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(25 - pos - wCaption.length() ," ");
        pos = 25;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(45 - pos - wCaption.length() ," ");
        pos = 45;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(59 - pos - wCaption.length() ," ");
        pos = 59;
        wCaption = "|IPI";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(65 - pos - wCaption.length() ," ");
        pos = 65;
        Buffer = Buffer + format(F3_RLVLBASIPI,"ZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (78 - pos - 13," ");
        pos = 78;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(84 - pos - wCaption.length() ," ");
        pos = 84;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(85 - pos - wCaption.length() ," ");
        pos = 85;
        Buffer = Buffer + format(F3_RLVLIMPIPI,"Z,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (97 - pos - 12," ");
        pos = 97;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(98 - pos - wCaption.length() ," ");
        pos = 98;
        Buffer = Buffer + format(F3_RLVLISEIPI,"ZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (111 - pos - 13," ");
        pos = 111;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(112 - pos - wCaption.length() ," ");
        pos = 112;
        Buffer = Buffer + format(F3_RLVLOUTIPI,"ZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (125 - pos - 13," ");
        pos = 125;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F3_3");
       return("");
    }
}
private String F3_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(25 - pos - wCaption.length() ," ");
        pos = 25;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(45 - pos - wCaption.length() ," ");
        pos = 45;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(59 - pos - wCaption.length() ," ");
        pos = 59;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(78 - pos - wCaption.length() ," ");
        pos = 78;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(84 - pos - wCaption.length() ," ");
        pos = 84;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(97 - pos - wCaption.length() ," ");
        pos = 97;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(111 - pos - wCaption.length() ," ");
        pos = 111;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(125 - pos - wCaption.length() ," ");
        pos = 125;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F3_4");
       return("");
    }
}
private String F3_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "+---+---+---------------+--+--+-------------+------+------+----+-------------+--";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(81 - pos - wCaption.length() ," ");
        pos = 81;
        wCaption = "---+------------+-------------+-------------+------+";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F3_5");
       return("");
    }
}
private String F4_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(2 - pos - wCaption.length() ," ");
        pos = 2;
        Buffer = Buffer + format(F4_RLCDESPECI, 3);
        Buffer = Buffer + string (5 - pos - 3," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(6 - pos - wCaption.length() ," ");
        pos = 6;
        Buffer = Buffer + format(F4_RLNRSERIEX, 3);
        Buffer = Buffer + string (9 - pos - 3," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(10 - pos - wCaption.length() ," ");
        pos = 10;
        Buffer = Buffer + format(F4_RLNRNOTAFI,"ZZZZZZZZZ");
        Buffer = Buffer + string (20 - pos - 9," ");
        pos = 20;
        Buffer = Buffer + format(F4_RLDSLETRAA, 1);
        Buffer = Buffer + string (21 - pos - 1," ");
        pos = 21;
        if (F4_RLNRNOTFIN != 0)
        {
        Buffer = Buffer + format(F4_RLNRNOTFIN,"ZZZZ");
        }
        else
        {   Buffer = Buffer + "    ";
        }
        Buffer = Buffer + string (25 - pos - 4," ");
        pos = 25;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(26 - pos - wCaption.length() ," ");
        pos = 26;
        Buffer = Buffer + format(F4_RLDTDIADOC,"ZZ");
        Buffer = Buffer + string (28 - pos - 2," ");
        pos = 28;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(29 - pos - wCaption.length() ," ");
        pos = 29;
        Buffer = Buffer + format(F4_RLDSCANCEL, 30);
        Buffer = Buffer + string (64 - pos - 30," ");
        pos = 64;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(78 - pos - wCaption.length() ," ");
        pos = 78;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(84 - pos - wCaption.length() ," ");
        pos = 84;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(97 - pos - wCaption.length() ," ");
        pos = 97;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(111 - pos - wCaption.length() ," ");
        pos = 111;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(125 - pos - wCaption.length() ," ");
        pos = 125;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F4_1");
       return("");
    }
}
private String F6_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (49 - pos - 0," ");
        pos = 49;
        wCaption = "R E G I S T R O   D E   S A I D A S";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_1");
       return("");
    }
}
private String F6_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (51 - pos - 0," ");
        pos = 51;
        wCaption = "PERIODO:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(61 - pos - wCaption.length() ," ");
        pos = 61;
        Buffer = Buffer + format(F6_RLDTINICIO, 10);
        Buffer = Buffer + string (72 - pos - 10," ");
        pos = 72;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(75 - pos - wCaption.length() ," ");
        pos = 75;
        Buffer = Buffer + format(F6_RLDTFINALX, 10);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_2");
       return("");
    }
}
private String F6_3 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        Buffer = Buffer + format(F6_RLNRFOLHAS,"ZZZZZ");
        Buffer = Buffer + string (46 - pos - 5," ");
        pos = 46;
        wCaption = "T E R M O";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(58 - pos - wCaption.length() ," ");
        pos = 58;
        wCaption = "D E";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        Buffer = Buffer + format(F6_RLDSABRENC, 23);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_4");
       return("");
    }
}
private String F6_5 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (56 - pos - 0," ");
        pos = 56;
        wCaption = "LIVRO NR.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        Buffer = Buffer + format(F6_RLNRLIVROX,"999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_6");
       return("");
    }
}
private String F6_7 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_8 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_9 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (36 - pos - 0," ");
        pos = 36;
        wCaption = "CONTEM ESTE LIVRO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(55 - pos - wCaption.length() ," ");
        pos = 55;
        Buffer = Buffer + format(F6_RLNRPAGINA,"999");
        Buffer = Buffer + string (60 - pos - 3," ");
        pos = 60;
        wCaption = "(";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(61 - pos - wCaption.length() ," ");
        pos = 61;
        Buffer = Buffer + format(F6_RLDSPAGINA, 36);
        Buffer = Buffer + string (97 - pos - 36," ");
        pos = 97;
        wCaption = ")";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_9");
       return("");
    }
}
private String F6_10 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_11 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (36 - pos - 0," ");
        pos = 36;
        wCaption = "FOLHAS NUMERADAS TIPOGRAFICAMENTE DE NR";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(77 - pos - wCaption.length() ," ");
        pos = 77;
        wCaption = "001";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(81 - pos - wCaption.length() ," ");
        pos = 81;
        wCaption = "AO NR";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(87 - pos - wCaption.length() ," ");
        pos = 87;
        Buffer = Buffer + format(F6_RLNRPAGFIM,"999");
        Buffer = Buffer + string (92 - pos - 3," ");
        pos = 92;
        wCaption = "E SER-";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_11");
       return("");
    }
}
private String F6_12 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_13 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (36 - pos - 0," ");
        pos = 36;
        wCaption = "VIRA PARA LANCAMENTO DAS OPERACOES PROPRIAS DO ESTABELECIMENTO";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_13");
       return("");
    }
}
private String F6_14 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_15 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (36 - pos - 0," ");
        pos = 36;
        wCaption = "DO CONTRIBUINTE ABAIXO IDENTIFICADO :";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_15");
       return("");
    }
}
private String F6_16 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_17 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (36 - pos - 0," ");
        pos = 36;
        wCaption = "NOME";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(41 - pos - wCaption.length() ," ");
        pos = 41;
        Buffer = Buffer + format(F6_RLNMEMPRES, 80);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_17");
       return("");
    }
}
private String F6_18 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_19 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (36 - pos - 0," ");
        pos = 36;
        wCaption = "ENDERECO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(46 - pos - wCaption.length() ," ");
        pos = 46;
        Buffer = Buffer + format(F6_RLDSENDEMP, 67);
        Buffer = Buffer + string (114 - pos - 67," ");
        pos = 114;
        wCaption = "ESTADO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(122 - pos - wCaption.length() ," ");
        pos = 122;
        Buffer = Buffer + format(F6_RLCDUFLEMP, 2);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_19");
       return("");
    }
}
private String F6_20 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_21 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (36 - pos - 0," ");
        pos = 36;
        wCaption = "INSCRICAO ESTADUAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(56 - pos - wCaption.length() ," ");
        pos = 56;
        Buffer = Buffer + format(F6_RLNRIESEMP, 15);
        Buffer = Buffer + string (75 - pos - 15," ");
        pos = 75;
        wCaption = "CGCMF";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(83 - pos - wCaption.length() ," ");
        pos = 83;
        Buffer = Buffer + format(F6_RLNRCGCNUM,"99,999,999");
        Buffer = Buffer + string (93 - pos - 10," ");
        pos = 93;
        wCaption = "/";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(94 - pos - wCaption.length() ," ");
        pos = 94;
        Buffer = Buffer + format(F6_RLNRCGCFIL,"9999");
        Buffer = Buffer + string (98 - pos - 4," ");
        pos = 98;
        wCaption = "-";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(99 - pos - wCaption.length() ," ");
        pos = 99;
        Buffer = Buffer + format(F6_RLNRCGCDIG,"99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_21");
       return("");
    }
}
private String F6_22 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_23 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (36 - pos - 0," ");
        pos = 36;
        wCaption = "REG.NA JUNTA COMERCIAL DO ESTADO SOB NR";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(77 - pos - wCaption.length() ," ");
        pos = 77;
        Buffer = Buffer + format(F6_RLNRREGJUN,"99999999999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_23");
       return("");
    }
}
private String F6_24 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_25 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (36 - pos - 0," ");
        pos = 36;
        wCaption = "EM";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(41 - pos - wCaption.length() ," ");
        pos = 41;
        Buffer = Buffer + format(F6_RLDTREGIST, 10);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_25");
       return("");
    }
}
private String F6_26 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_27 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (46 - pos - 0," ");
        pos = 46;
        Buffer = Buffer + format(F6_RLDSCIDADE, 20);
        Buffer = Buffer + string (66 - pos - 20," ");
        pos = 66;
        wCaption = ",";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(68 - pos - wCaption.length() ," ");
        pos = 68;
        Buffer = Buffer + format(F6_RLDTDIAATU,"ZZ");
        Buffer = Buffer + string (71 - pos - 2," ");
        pos = 71;
        wCaption = "DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(75 - pos - wCaption.length() ," ");
        pos = 75;
        Buffer = Buffer + format(F6_RLDSMESEXT, 9);
        Buffer = Buffer + string (86 - pos - 9," ");
        pos = 86;
        wCaption = "DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(90 - pos - wCaption.length() ," ");
        pos = 90;
        Buffer = Buffer + format(F6_RLAATERMOX, 4);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_27");
       return("");
    }
}
private String F6_28 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_29 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_30 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (49 - pos - 0," ");
        pos = 49;
        wCaption = "....................................";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_30");
       return("");
    }
}
private String F6_31 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (50 - pos - 0," ");
        pos = 50;
        Buffer = Buffer + format(F6_RLNMRESSRF, 30);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_31");
       return("");
    }
}
private String F6_32 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (50 - pos - 0," ");
        pos = 50;
        Buffer = Buffer + format(F6_RLNRCPFSRF, 14);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_32");
       return("");
    }
}
private String F6_33 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (50 - pos - 0," ");
        pos = 50;
        Buffer = Buffer + format(F6_RLDSCARSRF, 30);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_33");
       return("");
    }
}
private String F6_34 ()
{   String Buffer = "";
    return(Buffer);
}
private String F6_35 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (49 - pos - 0," ");
        pos = 49;
        wCaption = "....................................";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_35");
       return("");
    }
}
private String F6_36 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (51 - pos - 0," ");
        pos = 51;
        wCaption = "CONTADOR CRC NR";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(68 - pos - wCaption.length() ," ");
        pos = 68;
        Buffer = Buffer + format(F6_RLNRCRCCON, 14);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_36");
       return("");
    }
}
private String F6_37 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (52 - pos - 0," ");
        pos = 52;
        Buffer = Buffer + format(F6_RLNMCONTAD, 30);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F6_37");
       return("");
    }
}
private String F9_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(25 - pos - wCaption.length() ," ");
        pos = 25;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(45 - pos - wCaption.length() ," ");
        pos = 45;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(59 - pos - wCaption.length() ," ");
        pos = 59;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(79 - pos - wCaption.length() ," ");
        pos = 79;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(83 - pos - wCaption.length() ," ");
        pos = 83;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(97 - pos - wCaption.length() ," ");
        pos = 97;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(111 - pos - wCaption.length() ," ");
        pos = 111;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(125 - pos - wCaption.length() ," ");
        pos = 125;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F9_1");
       return("");
    }
}
private String F9_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(25 - pos - wCaption.length() ," ");
        pos = 25;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "|TOTAL ST. INTERNA";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(66 - pos - wCaption.length() ," ");
        pos = 66;
        Buffer = Buffer + format(F9_RLVLBASTSC,"ZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (79 - pos - 13," ");
        pos = 79;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(83 - pos - wCaption.length() ," ");
        pos = 83;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(84 - pos - wCaption.length() ," ");
        pos = 84;
        Buffer = Buffer + format(F9_RLVLICSTSC,"ZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (97 - pos - 13," ");
        pos = 97;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(111 - pos - wCaption.length() ," ");
        pos = 111;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(125 - pos - wCaption.length() ," ");
        pos = 125;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F9_2");
       return("");
    }
}
private String F9_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(25 - pos - wCaption.length() ," ");
        pos = 25;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "|TOTAL ST. INTERESTADUAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(66 - pos - wCaption.length() ," ");
        pos = 66;
        Buffer = Buffer + format(F9_RLVLBASTIN,"ZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (79 - pos - 13," ");
        pos = 79;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(83 - pos - wCaption.length() ," ");
        pos = 83;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(84 - pos - wCaption.length() ," ");
        pos = 84;
        Buffer = Buffer + format(F9_RLVLICSTIN,"ZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (97 - pos - 13," ");
        pos = 97;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(111 - pos - wCaption.length() ," ");
        pos = 111;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(125 - pos - wCaption.length() ," ");
        pos = 125;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F9_3");
       return("");
    }
}
private String F9_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(9 - pos - wCaption.length() ," ");
        pos = 9;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(25 - pos - wCaption.length() ," ");
        pos = 25;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(45 - pos - wCaption.length() ," ");
        pos = 45;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(59 - pos - wCaption.length() ," ");
        pos = 59;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(79 - pos - wCaption.length() ," ");
        pos = 79;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(83 - pos - wCaption.length() ," ");
        pos = 83;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(97 - pos - wCaption.length() ," ");
        pos = 97;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(111 - pos - wCaption.length() ," ");
        pos = 111;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(125 - pos - wCaption.length() ," ");
        pos = 125;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(132 - pos - wCaption.length() ," ");
        pos = 132;
        wCaption = "|";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F9_4");
       return("");
    }
}
private String F9_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "+---+---+---------------+--+--+-------------+------+------+----+--------------+-";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(81 - pos - wCaption.length() ," ");
        pos = 81;
        wCaption = "--+-------------+-------------+-------------+------+";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F9_5");
       return("");
    }
}
private String F10_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F10_EXNRSERIEX, 3);
        Buffer = Buffer + string (5 - pos - 3," ");
        pos = 5;
        Buffer = Buffer + format(F10_EXNRNOTAFI,"999999999");
        Buffer = Buffer + string (15 - pos - 9," ");
        pos = 15;
        Buffer = Buffer + format(F10_EXDIEMINOT,"99999999");
        Buffer = Buffer + string (24 - pos - 8," ");
        pos = 24;
        Buffer = Buffer + format(F10_EXVLCONTAX,"99999999999.99");
        Buffer = Buffer + string (40 - pos - 14," ");
        pos = 40;
        Buffer = Buffer + format(F10_EXNRCONTAX,"999999");
        Buffer = Buffer + string (49 - pos - 6," ");
        pos = 49;
        Buffer = Buffer + format(F10_EXCDNATOPE,"9999");
        Buffer = Buffer + string (54 - pos - 4," ");
        pos = 54;
        Buffer = Buffer + format(F10_EXCDNATCOM,"99");
        Buffer = Buffer + string (58 - pos - 2," ");
        pos = 58;
        Buffer = Buffer + format(F10_EXVLBASICM,"99999999999.99");
        Buffer = Buffer + string (74 - pos - 14," ");
        pos = 74;
        Buffer = Buffer + format(F10_EXVLPERICM,"999.99");
        Buffer = Buffer + string (81 - pos - 6," ");
        pos = 81;
        Buffer = Buffer + format(F10_EXVLIMPICM,"99999999999.99");
        Buffer = Buffer + string (97 - pos - 14," ");
        pos = 97;
        Buffer = Buffer + format(F10_EXVLISEICM,"99999999999.99");
        Buffer = Buffer + string (112 - pos - 14," ");
        pos = 112;
        Buffer = Buffer + format(F10_EXVLOUTICM,"99999999999.99");
        Buffer = Buffer + string (127 - pos - 14," ");
        pos = 127;
        Buffer = Buffer + format(F10_EXDISAINOT,"99999999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F10_1");
       return("");
    }
}
private String F10_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F10_EXCDUFMUNI, 2);
        Buffer = Buffer + string (6 - pos - 2," ");
        pos = 6;
        Buffer = Buffer + format(F10_EXNRNOTFIN,"9999999");
        Buffer = Buffer + string (14 - pos - 7," ");
        pos = 14;
        Buffer = Buffer + format(F10_EXVLBASSTR,"999999999999.99");
        Buffer = Buffer + string (30 - pos - 15," ");
        pos = 30;
        Buffer = Buffer + format(F10_EXVLICMSTR,"999999999999.99");
        Buffer = Buffer + string (56 - pos - 15," ");
        pos = 56;
        Buffer = Buffer + format(F10_EXVLBASIPI,"99999999999.99");
        Buffer = Buffer + string (72 - pos - 14," ");
        pos = 72;
        Buffer = Buffer + format(F10_EXVLPERIPI,"999.99");
        Buffer = Buffer + string (79 - pos - 6," ");
        pos = 79;
        Buffer = Buffer + format(F10_EXVLIMPIPI,"99999999999.99");
        Buffer = Buffer + string (95 - pos - 14," ");
        pos = 95;
        Buffer = Buffer + format(F10_EXVLISEIPI,"99999999999.99");
        Buffer = Buffer + string (110 - pos - 14," ");
        pos = 110;
        Buffer = Buffer + format(F10_EXVLOUTIPI,"99999999999.99");
        Buffer = Buffer + string (127 - pos - 14," ");
        pos = 127;
        Buffer = Buffer + format(F10_EXNRCANCEL,"9");
        Buffer = Buffer + string (130 - pos - 1," ");
        pos = 130;
        Buffer = Buffer + format(F10_EXINDECEND,"9");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F10_2");
       return("");
    }
}
private String F10_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F10_EXNRCFICMP,"999999");
        Buffer = Buffer + string (8 - pos - 6," ");
        pos = 8;
        Buffer = Buffer + format(F10_EXINCONFIN,"9");
        Buffer = Buffer + string (11 - pos - 1," ");
        pos = 11;
        Buffer = Buffer + format(F10_EXPCICMNAT,"999.99");
        Buffer = Buffer + string (18 - pos - 6," ");
        pos = 18;
        Buffer = Buffer + format(F10_EXINORIGEM,"9");
        Buffer = Buffer + string (20 - pos - 1," ");
        pos = 20;
        Buffer = Buffer + format(F10_EXVLLIQUID,"999999999999.99");
        Buffer = Buffer + string (36 - pos - 15," ");
        pos = 36;
        Buffer = Buffer + format(F10_EXVLICMPRO,"999999999999.99");
        Buffer = Buffer + string (52 - pos - 15," ");
        pos = 52;
        Buffer = Buffer + format(F10_EXPCICMPRO,"99.99");
        Buffer = Buffer + string (60 - pos - 5," ");
        pos = 60;
        Buffer = Buffer + format(F10_EXVLBASDID,"999999999999.99");
        Buffer = Buffer + string (77 - pos - 15," ");
        pos = 77;
        Buffer = Buffer + format(F10_EXVLICMDID,"9999999999.99");
        Buffer = Buffer + string (92 - pos - 13," ");
        pos = 92;
        Buffer = Buffer + format(F10_EXVLICMDIO,"9999999999.99");
        Buffer = Buffer + string (107 - pos - 13," ");
        pos = 107;
        Buffer = Buffer + format(F10_EXVLFCPDES,"9999999999.99");
        Buffer = Buffer + string (121 - pos - 13," ");
        pos = 121;
        Buffer = Buffer + format(F10_EXCDMODENF,"9");
        Buffer = Buffer + string (123 - pos - 1," ");
        pos = 123;
        Buffer = Buffer + format(F10_EXTPREGIST,"9");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F10_3");
       return("");
    }
}
private String F13_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F13_EXCDDEPNFI,"99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F13_1");
       return("");
    }
}
private String F13_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F13_EXNRNOTDEP,"999999999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F13_2");
       return("");
    }
}
private String F13_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F13_EXCDCLIDEP,"999999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F13_3");
       return("");
    }
}
private String F13_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F13_EXINCLIDEP,"9");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F13_4");
       return("");
    }
}
private String F13_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F13_EXDIEMIDEP,"99999999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F13_5");
       return("");
    }
}
private String F13_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F13_EXCDTIPDEP,"99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F13_6");
       return("");
    }
}
private String F13_7 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F13_EXVLTOICMN,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F13_7");
       return("");
    }
}
private String F13_8 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F13_EXNRUSUNFI,"9999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F13_8");
       return("");
    }
}
private String F21_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F21_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(26 - pos - wCaption.length() ," ");
        pos = 26;
        wCaption = "RESUMO P/APURACAO INCENTIVO PRODEPE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(69 - pos - wCaption.length() ," ");
        pos = 69;
      Buffer = Buffer + format(F21_RLDTSISTEM, "DD/MM/CCYY");
        Buffer = Buffer + string (80 - pos - 10," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F21_1");
       return("");
    }
}
private String F21_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "CONTABILIDADE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(20 - pos - wCaption.length() ," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(26 - pos - wCaption.length() ," ");
        pos = 26;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(37 - pos - wCaption.length() ," ");
        pos = 37;
        Buffer = Buffer + format(F21_RLDTINICIO, 10);
        Buffer = Buffer + string (48 - pos - 10," ");
        pos = 48;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(50 - pos - wCaption.length() ," ");
        pos = 50;
        Buffer = Buffer + format(F21_RLDTFINALX, 10);
        Buffer = Buffer + string (67 - pos - 10," ");
        pos = 67;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(72 - pos - wCaption.length() ," ");
        pos = 72;
        Buffer = Buffer + format(F21_RLTHHHMMED, 5);
        Buffer = Buffer + string (80 - pos - 5," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F21_2");
       return("");
    }
}
private String F21_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "* CGR032L -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F21_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "* PAG:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(74 - pos - wCaption.length() ," ");
        pos = 74;
        Buffer = Buffer + format(F21_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (80 - pos - 4," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F21_3");
       return("");
    }
}
private String F21_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F21_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "DEB.ICMS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        wCaption = "RECEITA";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(21 - pos - wCaption.length() ," ");
        pos = 21;
        wCaption = "NAT.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(30 - pos - wCaption.length() ," ");
        pos = 30;
        wCaption = "VALOR CONTABIL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(53 - pos - wCaption.length() ," ");
        pos = 53;
        wCaption = "BASE ICMS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(70 - pos - wCaption.length() ," ");
        pos = 70;
        wCaption = "VALOR ICMS";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F21_5");
       return("");
    }
}
private String F22_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (3 - pos - 0," ");
        pos = 3;
        if (F22_RLCDDEBICM != 0)
        {
        Buffer = Buffer + format(F22_RLCDDEBICM,"ZZZZZZ");
        }
        else
        {   Buffer = Buffer + "      ";
        }
        Buffer = Buffer + string (12 - pos - 6," ");
        pos = 12;
        Buffer = Buffer + format(F22_RLCDCONCRE,"ZZZZZZ");
        Buffer = Buffer + string (21 - pos - 6," ");
        pos = 21;
        Buffer = Buffer + format(F22_RLCDNATOPE,"9999");
        Buffer = Buffer + string (30 - pos - 4," ");
        pos = 30;
        Buffer = Buffer + format(F22_RLVLCONTAB,"ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 14," ");
        pos = 48;
        Buffer = Buffer + format(F22_RLVLBASICM,"ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 14," ");
        pos = 66;
        Buffer = Buffer + format(F22_RLVLIMPICM,"ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F22_1");
       return("");
    }
}
private String F23_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (6 - pos - 0," ");
        pos = 6;
        wCaption = "TOTAL CONTA DEBITO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(30 - pos - wCaption.length() ," ");
        pos = 30;
        Buffer = Buffer + format(F23_RLVLCONTAB,"ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 14," ");
        pos = 48;
        Buffer = Buffer + format(F23_RLVLBASICM,"ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 14," ");
        pos = 66;
        Buffer = Buffer + format(F23_RLVLIMPICM,"ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F23_1");
       return("");
    }
}
private String F23_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F23_LABEL2, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F23_2");
       return("");
    }
}
private String F24_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F24_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "CLASSIFICACOES INCENTIVO PRODEPE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(69 - pos - wCaption.length() ," ");
        pos = 69;
      Buffer = Buffer + format(F24_RLDTSISTEM, "DD/MM/CCYY");
        Buffer = Buffer + string (80 - pos - 10," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F24_1");
       return("");
    }
}
private String F24_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "CONTABILIDADE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(20 - pos - wCaption.length() ," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(27 - pos - wCaption.length() ," ");
        pos = 27;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(38 - pos - wCaption.length() ," ");
        pos = 38;
        Buffer = Buffer + format(F24_RLDTINICIO, 10);
        Buffer = Buffer + string (49 - pos - 10," ");
        pos = 49;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(51 - pos - wCaption.length() ," ");
        pos = 51;
        Buffer = Buffer + format(F24_RLDTFINALX, 10);
        Buffer = Buffer + string (67 - pos - 10," ");
        pos = 67;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(72 - pos - wCaption.length() ," ");
        pos = 72;
        Buffer = Buffer + format(F24_RLTHHHMMED, 5);
        Buffer = Buffer + string (80 - pos - 5," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F24_2");
       return("");
    }
}
private String F24_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "* CGR032M -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F24_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "* PAG:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(74 - pos - wCaption.length() ," ");
        pos = 74;
        Buffer = Buffer + format(F24_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (80 - pos - 4," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F24_3");
       return("");
    }
}
private String F24_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F24_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "CLASS.FISCAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(30 - pos - wCaption.length() ," ");
        pos = 30;
        wCaption = "VALOR CONTABIL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "BASE ICMS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(70 - pos - wCaption.length() ," ");
        pos = 70;
        wCaption = "VALOR ICMS";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F24_5");
       return("");
    }
}
private String F25_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F25_RLCDCLAFIS, 14);
        Buffer = Buffer + string (30 - pos - 14," ");
        pos = 30;
        Buffer = Buffer + format(F25_RLVLCONTAB,"ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 14," ");
        pos = 48;
        Buffer = Buffer + format(F25_RLVLBASICM,"ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 14," ");
        pos = 66;
        Buffer = Buffer + format(F25_RLVLIMPICM,"ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F25_1");
       return("");
    }
}
private String F26_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F26_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (6 - pos - 0," ");
        pos = 6;
        wCaption = "TOTAL GERAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(30 - pos - wCaption.length() ," ");
        pos = 30;
        Buffer = Buffer + format(F26_RLVLCONTAB,"ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (47 - pos - 14," ");
        pos = 47;
        Buffer = Buffer + format(F26_RLVLBASICM,"ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 14," ");
        pos = 66;
        Buffer = Buffer + format(F26_RLVLIMPICM,"ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F26_2");
       return("");
    }
}
private String F27_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F27_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "PRODUTOS NAO INCENTIVADOS PRODEPE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(75 - pos - wCaption.length() ," ");
        pos = 75;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(77 - pos - wCaption.length() ," ");
        pos = 77;
      Buffer = Buffer + format(F27_RLDTSISTEM, "DD/MM/CCYY");
        Buffer = Buffer + string (88 - pos - 10," ");
        pos = 88;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F27_1");
       return("");
    }
}
private String F27_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "CONTABILIDADE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(20 - pos - wCaption.length() ," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(42 - pos - wCaption.length() ," ");
        pos = 42;
        Buffer = Buffer + format(F27_RLDTINICIO, 10);
        Buffer = Buffer + string (53 - pos - 10," ");
        pos = 53;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(55 - pos - wCaption.length() ," ");
        pos = 55;
        Buffer = Buffer + format(F27_RLDTFINALX, 10);
        Buffer = Buffer + string (75 - pos - 10," ");
        pos = 75;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(80 - pos - wCaption.length() ," ");
        pos = 80;
        Buffer = Buffer + format(F27_RLTHHHMMED, 5);
        Buffer = Buffer + string (88 - pos - 5," ");
        pos = 88;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F27_2");
       return("");
    }
}
private String F27_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "* CGR032N -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F27_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(75 - pos - wCaption.length() ," ");
        pos = 75;
        wCaption = "* PAG:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(82 - pos - wCaption.length() ," ");
        pos = 82;
        Buffer = Buffer + format(F27_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (88 - pos - 4," ");
        pos = 88;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F27_3");
       return("");
    }
}
private String F27_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F27_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (6 - pos - 0," ");
        pos = 6;
        wCaption = "NOTA";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        wCaption = "PRODUTO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(50 - pos - wCaption.length() ," ");
        pos = 50;
        wCaption = "COR";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(55 - pos - wCaption.length() ," ");
        pos = 55;
        wCaption = "CLASSIF.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(66 - pos - wCaption.length() ," ");
        pos = 66;
        wCaption = "VALOR BASE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(79 - pos - wCaption.length() ," ");
        pos = 79;
        wCaption = "VALOR ICMS";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F27_5");
       return("");
    }
}
private String F28_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F28_RLNRNOTAFI,"ZZZZZZZZZ");
        Buffer = Buffer + string (11 - pos - 9," ");
        pos = 11;
        Buffer = Buffer + format(F28_RLCDPRODUT,"ZZZZZZZ");
        Buffer = Buffer + string (19 - pos - 7," ");
        pos = 19;
        Buffer = Buffer + format(F28_RLDSPRODUT, 30);
        Buffer = Buffer + string (50 - pos - 30," ");
        pos = 50;
        if (F28_RLCDCORPRO != 0)
        {
        Buffer = Buffer + format(F28_RLCDCORPRO,"ZZZZ");
        }
        else
        {   Buffer = Buffer + "    ";
        }
        Buffer = Buffer + string (55 - pos - 4," ");
        pos = 55;
        Buffer = Buffer + format(F28_RLCDCLAFIS,"ZZZZZZZZZZ");
        Buffer = Buffer + string (66 - pos - 10," ");
        pos = 66;
        Buffer = Buffer + format(F28_RLVLBASICM,"ZZZZZZZZZ.ZZ");
        Buffer = Buffer + string (79 - pos - 12," ");
        pos = 79;
        Buffer = Buffer + format(F28_RLVLICMPRO,"ZZZZZZZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F28_1");
       return("");
    }
}
private String F29_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F29_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (11 - pos - 0," ");
        pos = 11;
        wCaption = "TOTAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(64 - pos - wCaption.length() ," ");
        pos = 64;
        Buffer = Buffer + format(F29_RLVLBASICM,"ZZZZZZZZZ.ZZ");
        Buffer = Buffer + string (77 - pos - 12," ");
        pos = 77;
        Buffer = Buffer + format(F29_RLVLICMPRO,"ZZZZZZZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F29_2");
       return("");
    }
}
private String F36_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F36_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(22 - pos - wCaption.length() ," ");
        pos = 22;
        wCaption = "APURACAO ICMS SUBST.TRIBUTARIA PELAS SAIDAS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(69 - pos - wCaption.length() ," ");
        pos = 69;
      Buffer = Buffer + format(F36_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (80 - pos - 10," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F36_1");
       return("");
    }
}
private String F36_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(32 - pos - wCaption.length() ," ");
        pos = 32;
        wCaption = "POR UNIDADE DA FEDERACAO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(71 - pos - wCaption.length() ," ");
        pos = 71;
        Buffer = Buffer + format(F36_RLHMCABECA, 5);
        Buffer = Buffer + string (80 - pos - 5," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F36_2");
       return("");
    }
}
private String F36_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032G-";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F36_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(29 - pos - wCaption.length() ," ");
        pos = 29;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(40 - pos - wCaption.length() ," ");
        pos = 40;
        Buffer = Buffer + format(F36_RLDTINICIO, 10);
        Buffer = Buffer + string (51 - pos - 10," ");
        pos = 51;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(53 - pos - wCaption.length() ," ");
        pos = 53;
        Buffer = Buffer + format(F36_RLDTFINALX, 10);
        Buffer = Buffer + string (67 - pos - 10," ");
        pos = 67;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(74 - pos - wCaption.length() ," ");
        pos = 74;
        Buffer = Buffer + format(F36_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (80 - pos - 4," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F36_3");
       return("");
    }
}
private String F36_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F36_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "UF";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(7 - pos - wCaption.length() ," ");
        pos = 7;
        wCaption = "COD.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(32 - pos - wCaption.length() ," ");
        pos = 32;
        wCaption = "BASE DE CALCULO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "IMPOSTO RETIDO";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F36_5");
       return("");
    }
}
private String F36_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F36_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F36_6");
       return("");
    }
}
private String F37_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F37_RLCDUFMUNI, 2);
        Buffer = Buffer + string (7 - pos - 2," ");
        pos = 7;
        Buffer = Buffer + format(F37_RLCDNATOGR, 7);
        Buffer = Buffer + string (31 - pos - 7," ");
        pos = 31;
        Buffer = Buffer + format(F37_RLVLBASSTR,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (65 - pos - 16," ");
        pos = 65;
        Buffer = Buffer + format(F37_RLVLICMSTR,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F37_1");
       return("");
    }
}
private String F38_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F38_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "TOTAL (";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(8 - pos - wCaption.length() ," ");
        pos = 8;
        Buffer = Buffer + format(F38_RLCDUFMUNI, 2);
        Buffer = Buffer + string (10 - pos - 2," ");
        pos = 10;
        wCaption = ")";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        Buffer = Buffer + format(F38_RLVLBASSTR,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (65 - pos - 16," ");
        pos = 65;
        Buffer = Buffer + format(F38_RLVLICMSTR,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F38_2");
       return("");
    }
}
private String F38_3 ()
{   String Buffer = "";
    return(Buffer);
}
private String F38_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F38_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F38_4");
       return("");
    }
}
private String F41_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F41_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(33 - pos - wCaption.length() ," ");
        pos = 33;
        wCaption = "REGISTRO DE APURACAO DO ICMS PELAS SAIDAS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(89 - pos - wCaption.length() ," ");
        pos = 89;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(91 - pos - wCaption.length() ," ");
        pos = 91;
      Buffer = Buffer + format(F41_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (102 - pos - 10," ");
        pos = 102;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F41_1");
       return("");
    }
}
private String F41_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(89 - pos - wCaption.length() ," ");
        pos = 89;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(93 - pos - wCaption.length() ," ");
        pos = 93;
        Buffer = Buffer + format(F41_RLHMCABECA, 5);
        Buffer = Buffer + string (102 - pos - 5," ");
        pos = 102;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F41_2");
       return("");
    }
}
private String F41_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032 -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F41_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(28 - pos - wCaption.length() ," ");
        pos = 28;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(39 - pos - wCaption.length() ," ");
        pos = 39;
        Buffer = Buffer + format(F41_RLDTINICIO, 10);
        Buffer = Buffer + string (50 - pos - 10," ");
        pos = 50;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        Buffer = Buffer + format(F41_RLDTFINALX, 10);
        Buffer = Buffer + string (63 - pos - 10," ");
        pos = 63;
        Buffer = Buffer + format(F41_RLDSCONDEF, 17);
        Buffer = Buffer + string (89 - pos - 17," ");
        pos = 89;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(96 - pos - wCaption.length() ," ");
        pos = 96;
        Buffer = Buffer + format(F41_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (102 - pos - 4," ");
        pos = 102;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F41_3");
       return("");
    }
}
private String F41_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F41_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (33 - pos - 0," ");
        pos = 33;
        wCaption = "OPERACOES COM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(70 - pos - wCaption.length() ," ");
        pos = 70;
        wCaption = "OPERACOES SEM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F41_5");
       return("");
    }
}
private String F41_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "COD.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(8 - pos - wCaption.length() ," ");
        pos = 8;
        wCaption = "OR";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(15 - pos - wCaption.length() ," ");
        pos = 15;
        wCaption = "VALOR CONTABIL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(32 - pos - wCaption.length() ," ");
        pos = 32;
        wCaption = "BASE DE CALCULO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "IMP. DEBITADO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(69 - pos - wCaption.length() ," ");
        pos = 69;
        wCaption = "ISENTA N/TRIB.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(95 - pos - wCaption.length() ," ");
        pos = 95;
        wCaption = "OUTRAS";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F41_6");
       return("");
    }
}
private String F41_7 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F41_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F41_7");
       return("");
    }
}
private String F42_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F42_RLCDNATOGR, 7);
        Buffer = Buffer + string (9 - pos - 7," ");
        pos = 9;
        Buffer = Buffer + format(F42_RLINORIGEM, 1);
        Buffer = Buffer + string (11 - pos - 1," ");
        pos = 11;
        Buffer = Buffer + format(F42_RLCDAPCONT,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (30 - pos - 18," ");
        pos = 30;
        Buffer = Buffer + format(F42_RLCDAPBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 17," ");
        pos = 48;
        Buffer = Buffer + format(F42_RLCDAPVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 17," ");
        pos = 66;
        Buffer = Buffer + format(F42_RLCDAPNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (84 - pos - 17," ");
        pos = 84;
        Buffer = Buffer + format(F42_RLVLAPOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F42_1");
       return("");
    }
}
private String F43_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F43_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "S.TOT.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        Buffer = Buffer + format(F43_RLVLSACONT,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (30 - pos - 18," ");
        pos = 30;
        Buffer = Buffer + format(F43_RLVLSABICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 17," ");
        pos = 48;
        Buffer = Buffer + format(F43_RLVLSAVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 17," ");
        pos = 66;
        Buffer = Buffer + format(F43_RLVLSANICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (84 - pos - 17," ");
        pos = 84;
        Buffer = Buffer + format(F43_RLVLSAOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F43_2");
       return("");
    }
}
private String F43_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F43_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F43_3");
       return("");
    }
}
private String F44_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F44_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "TOTAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        Buffer = Buffer + format(F44_RLVLTOTCON,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (30 - pos - 18," ");
        pos = 30;
        Buffer = Buffer + format(F44_RLVLTTBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 17," ");
        pos = 48;
        Buffer = Buffer + format(F44_RLVLTTVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 17," ");
        pos = 66;
        Buffer = Buffer + format(F44_RLVLTTNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (84 - pos - 17," ");
        pos = 84;
        Buffer = Buffer + format(F44_RLVLTTOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F44_2");
       return("");
    }
}
private String F46_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F46_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(26 - pos - wCaption.length() ," ");
        pos = 26;
        wCaption = "REGISTRO DE APURACAO DO ICMS PELAS SAIDAS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(84 - pos - wCaption.length() ," ");
        pos = 84;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(86 - pos - wCaption.length() ," ");
        pos = 86;
      Buffer = Buffer + format(F46_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (97 - pos - 10," ");
        pos = 97;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F46_1");
       return("");
    }
}
private String F46_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(34 - pos - wCaption.length() ," ");
        pos = 34;
        wCaption = "POR UNIDADE DA FEDERACAO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(84 - pos - wCaption.length() ," ");
        pos = 84;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(88 - pos - wCaption.length() ," ");
        pos = 88;
        Buffer = Buffer + format(F46_RLHMCABECA, 5);
        Buffer = Buffer + string (97 - pos - 5," ");
        pos = 97;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F46_2");
       return("");
    }
}
private String F46_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032F-";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F46_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(26 - pos - wCaption.length() ," ");
        pos = 26;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(37 - pos - wCaption.length() ," ");
        pos = 37;
        Buffer = Buffer + format(F46_RLDTINICIO, 10);
        Buffer = Buffer + string (48 - pos - 10," ");
        pos = 48;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(50 - pos - wCaption.length() ," ");
        pos = 50;
        Buffer = Buffer + format(F46_RLDTFINALX, 10);
        Buffer = Buffer + string (61 - pos - 10," ");
        pos = 61;
        Buffer = Buffer + format(F46_RLDSCONDEF, 17);
        Buffer = Buffer + string (84 - pos - 17," ");
        pos = 84;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(91 - pos - wCaption.length() ," ");
        pos = 91;
        Buffer = Buffer + format(F46_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (97 - pos - 4," ");
        pos = 97;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F46_3");
       return("");
    }
}
private String F46_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F46_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (32 - pos - 0," ");
        pos = 32;
        wCaption = "OPERACOES COM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "OPERACOES SEM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F46_5");
       return("");
    }
}
private String F46_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "UF";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(5 - pos - wCaption.length() ," ");
        pos = 5;
        wCaption = "COD.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(16 - pos - wCaption.length() ," ");
        pos = 16;
        wCaption = "VALOR CONTABIL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(32 - pos - wCaption.length() ," ");
        pos = 32;
        wCaption = "BASE DE CALCULO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(51 - pos - wCaption.length() ," ");
        pos = 51;
        wCaption = "IMP. DEBITADO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "ISENTA N/TRIB.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(92 - pos - wCaption.length() ," ");
        pos = 92;
        wCaption = "OUTRAS";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F46_6");
       return("");
    }
}
private String F46_7 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F46_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F46_7");
       return("");
    }
}
private String F47_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F47_RLCDUFMUNI, 2);
        Buffer = Buffer + string (5 - pos - 2," ");
        pos = 5;
        Buffer = Buffer + format(F47_RLCDNATOGR, 7);
        Buffer = Buffer + string (14 - pos - 7," ");
        pos = 14;
        Buffer = Buffer + format(F47_RLVLCONTAB,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (31 - pos - 16," ");
        pos = 31;
        Buffer = Buffer + format(F47_RLVLBASICM,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 16," ");
        pos = 48;
        Buffer = Buffer + format(F47_RLVLIMPICM,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (65 - pos - 16," ");
        pos = 65;
        Buffer = Buffer + format(F47_RLVLINTICM,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (82 - pos - 16," ");
        pos = 82;
        Buffer = Buffer + format(F47_RLVLOUTICM,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F47_1");
       return("");
    }
}
private String F48_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F48_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "TOTAL (";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(8 - pos - wCaption.length() ," ");
        pos = 8;
        Buffer = Buffer + format(F48_RLCDUFMUNI, 2);
        Buffer = Buffer + string (10 - pos - 2," ");
        pos = 10;
        wCaption = ")";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(14 - pos - wCaption.length() ," ");
        pos = 14;
        Buffer = Buffer + format(F48_RLVLCONTAB,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (31 - pos - 16," ");
        pos = 31;
        Buffer = Buffer + format(F48_RLVLBASICM,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 16," ");
        pos = 48;
        Buffer = Buffer + format(F48_RLVLIMPICM,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (65 - pos - 16," ");
        pos = 65;
        Buffer = Buffer + format(F48_RLVLINTICM,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (82 - pos - 16," ");
        pos = 82;
        Buffer = Buffer + format(F48_RLVLOUTICM,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F48_2");
       return("");
    }
}
private String F48_3 ()
{   String Buffer = "";
    return(Buffer);
}
private String F48_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F48_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F48_4");
       return("");
    }
}
private String F51_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F51_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(33 - pos - wCaption.length() ," ");
        pos = 33;
        wCaption = "REGISTRO DE APURACAO DO IPI PELAS SAIDAS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(87 - pos - wCaption.length() ," ");
        pos = 87;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(89 - pos - wCaption.length() ," ");
        pos = 89;
      Buffer = Buffer + format(F51_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (100 - pos - 10," ");
        pos = 100;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F51_1");
       return("");
    }
}
private String F51_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*  CONTABILIDADE   *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(87 - pos - wCaption.length() ," ");
        pos = 87;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(91 - pos - wCaption.length() ," ");
        pos = 91;
        Buffer = Buffer + format(F51_RLHMCABECA, 5);
        Buffer = Buffer + string (100 - pos - 5," ");
        pos = 100;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F51_2");
       return("");
    }
}
private String F51_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032  -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F51_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(27 - pos - wCaption.length() ," ");
        pos = 27;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(38 - pos - wCaption.length() ," ");
        pos = 38;
        Buffer = Buffer + format(F51_RLDTINICIO, 10);
        Buffer = Buffer + string (49 - pos - 10," ");
        pos = 49;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(51 - pos - wCaption.length() ," ");
        pos = 51;
        Buffer = Buffer + format(F51_RLDTFINALX, 10);
        Buffer = Buffer + string (62 - pos - 10," ");
        pos = 62;
        Buffer = Buffer + format(F51_RLDSCONDEF, 17);
        Buffer = Buffer + string (87 - pos - 17," ");
        pos = 87;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(94 - pos - wCaption.length() ," ");
        pos = 94;
        Buffer = Buffer + format(F51_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (100 - pos - 4," ");
        pos = 100;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F51_3");
       return("");
    }
}
private String F51_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F51_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (33 - pos - 0," ");
        pos = 33;
        wCaption = "OPERACOES COM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(70 - pos - wCaption.length() ," ");
        pos = 70;
        wCaption = "OPERACOES SEM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F51_5");
       return("");
    }
}
private String F51_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "COD.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(15 - pos - wCaption.length() ," ");
        pos = 15;
        wCaption = "VALOR CONTABIL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(32 - pos - wCaption.length() ," ");
        pos = 32;
        wCaption = "BASE DE CALCULO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "IMP. DEBITADO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(69 - pos - wCaption.length() ," ");
        pos = 69;
        wCaption = "ISENTA N/TRIB.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(95 - pos - wCaption.length() ," ");
        pos = 95;
        wCaption = "OUTRAS";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F51_6");
       return("");
    }
}
private String F51_7 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F51_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F51_7");
       return("");
    }
}
private String F52_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F52_RLCDNATOGR, 7);
        Buffer = Buffer + string (11 - pos - 7," ");
        pos = 11;
        Buffer = Buffer + format(F52_RLVLAPCIPI,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (30 - pos - 18," ");
        pos = 30;
        Buffer = Buffer + format(F52_RLVLAPBIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 17," ");
        pos = 48;
        Buffer = Buffer + format(F52_RLVLAPVIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 17," ");
        pos = 66;
        Buffer = Buffer + format(F52_RLVLAPMIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (84 - pos - 17," ");
        pos = 84;
        Buffer = Buffer + format(F52_RLVLAPOIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F52_1");
       return("");
    }
}
private String F53_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F53_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "S.TOT.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        Buffer = Buffer + format(F53_RLVLSACIPI,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (30 - pos - 18," ");
        pos = 30;
        Buffer = Buffer + format(F53_RLVLSABIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 17," ");
        pos = 48;
        Buffer = Buffer + format(F53_RLVLSAVIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 17," ");
        pos = 66;
        Buffer = Buffer + format(F53_RLVLSANIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (84 - pos - 17," ");
        pos = 84;
        Buffer = Buffer + format(F53_RLVLSAOIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F53_2");
       return("");
    }
}
private String F53_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F53_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F53_3");
       return("");
    }
}
private String F54_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F54_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "TOTAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        Buffer = Buffer + format(F54_RLTOTACIPI,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (30 - pos - 18," ");
        pos = 30;
        Buffer = Buffer + format(F54_RLTOTABIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 17," ");
        pos = 48;
        Buffer = Buffer + format(F54_RLTOTAVIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 17," ");
        pos = 66;
        Buffer = Buffer + format(F54_RLTOTANIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (84 - pos - 17," ");
        pos = 84;
        Buffer = Buffer + format(F54_RLTOTAOIPI,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F54_2");
       return("");
    }
}
private String F55_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F55_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(54 - pos - wCaption.length() ," ");
        pos = 54;
        wCaption = "NOTAS FISCAIS SEM DATA DE SAIDA";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(118 - pos - wCaption.length() ," ");
        pos = 118;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(120 - pos - wCaption.length() ," ");
        pos = 120;
      Buffer = Buffer + format(F55_RLDTSOLICI, "DD/MM/CCYY");
        Buffer = Buffer + string (131 - pos - 10," ");
        pos = 131;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F55_1");
       return("");
    }
}
private String F55_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(54 - pos - wCaption.length() ," ");
        pos = 54;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(65 - pos - wCaption.length() ," ");
        pos = 65;
        Buffer = Buffer + format(F55_RLDTINICIO, 10);
        Buffer = Buffer + string (76 - pos - 10," ");
        pos = 76;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(78 - pos - wCaption.length() ," ");
        pos = 78;
        Buffer = Buffer + format(F55_RLDTFINALX, 10);
        Buffer = Buffer + string (118 - pos - 10," ");
        pos = 118;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(122 - pos - wCaption.length() ," ");
        pos = 122;
        Buffer = Buffer + format(F55_RLHMCABECA, 5);
        Buffer = Buffer + string (131 - pos - 5," ");
        pos = 131;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F55_2");
       return("");
    }
}
private String F55_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032E -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F55_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(54 - pos - wCaption.length() ," ");
        pos = 54;
        wCaption = "DEPARTAMENTO:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(68 - pos - wCaption.length() ," ");
        pos = 68;
        Buffer = Buffer + format(F55_RLCDDEPNFI,"ZZ");
        Buffer = Buffer + string (71 - pos - 2," ");
        pos = 71;
        Buffer = Buffer + format(F55_RLDSDEPNFI, 20);
        Buffer = Buffer + string (118 - pos - 20," ");
        pos = 118;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(125 - pos - wCaption.length() ," ");
        pos = 125;
        Buffer = Buffer + format(F55_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (131 - pos - 4," ");
        pos = 131;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F55_3");
       return("");
    }
}
private String F55_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F55_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (6 - pos - 0," ");
        pos = 6;
        wCaption = "N.F.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        wCaption = "CLIENTE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(84 - pos - wCaption.length() ," ");
        pos = 84;
        wCaption = "EMISSAO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(95 - pos - wCaption.length() ," ");
        pos = 95;
        wCaption = "TIPO FAT.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(112 - pos - wCaption.length() ," ");
        pos = 112;
        wCaption = "ICMS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(118 - pos - wCaption.length() ," ");
        pos = 118;
        wCaption = "Solicitante";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F55_5");
       return("");
    }
}
private String F55_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F55_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F55_6");
       return("");
    }
}
private String F56_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F56_LABEL2, 3);
        Buffer = Buffer + string (1 - pos - 3," ");
        pos = 1;
        Buffer = Buffer + format(F56_RLNRNOTDEP,"ZZZZZZZZZ");
        Buffer = Buffer + string (11 - pos - 9," ");
        pos = 11;
        Buffer = Buffer + format(F56_RLCDCLIDEP,"ZZZZZZ");
        Buffer = Buffer + string (18 - pos - 6," ");
        pos = 18;
        Buffer = Buffer + format(F56_RLNMCLIENT, 60);
        Buffer = Buffer + string (80 - pos - 60," ");
        pos = 80;
        Buffer = Buffer + format(F56_RLDIEMIDEP, 10);
        Buffer = Buffer + string (94 - pos - 10," ");
        pos = 94;
        Buffer = Buffer + format(F56_RLCDTIPDEP,"ZZ");
        Buffer = Buffer + string (99 - pos - 2," ");
        pos = 99;
        if (F56_RLVLTOICMN != 0)
        {
        Buffer = Buffer + format(F56_RLVLTOICMN,"ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "              ";
        }
        Buffer = Buffer + string (115 - pos - 14," ");
        pos = 115;
        Buffer = Buffer + format(F56_RLCDUSUARI, 25);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F56_1");
       return("");
    }
}
private String F64_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F64_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(29 - pos - wCaption.length() ," ");
        pos = 29;
        wCaption = "REGISTRO DE APURACAO DO ICMS PELAS SAIDAS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(89 - pos - wCaption.length() ," ");
        pos = 89;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(91 - pos - wCaption.length() ," ");
        pos = 91;
      Buffer = Buffer + format(F64_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (102 - pos - 10," ");
        pos = 102;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F64_1");
       return("");
    }
}
private String F64_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(39 - pos - wCaption.length() ," ");
        pos = 39;
        wCaption = "PARA CONSUMIDOR FINAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(89 - pos - wCaption.length() ," ");
        pos = 89;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(93 - pos - wCaption.length() ," ");
        pos = 93;
        Buffer = Buffer + format(F64_RLHMCABECA, 5);
        Buffer = Buffer + string (102 - pos - 5," ");
        pos = 102;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F64_2");
       return("");
    }
}
private String F64_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032 -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F64_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(29 - pos - wCaption.length() ," ");
        pos = 29;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(40 - pos - wCaption.length() ," ");
        pos = 40;
        Buffer = Buffer + format(F64_RLDTINICIO, 10);
        Buffer = Buffer + string (51 - pos - 10," ");
        pos = 51;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(53 - pos - wCaption.length() ," ");
        pos = 53;
        Buffer = Buffer + format(F64_RLDTFINALX, 10);
        Buffer = Buffer + string (64 - pos - 10," ");
        pos = 64;
        Buffer = Buffer + format(F64_RLDSCONDEF, 17);
        Buffer = Buffer + string (89 - pos - 17," ");
        pos = 89;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(96 - pos - wCaption.length() ," ");
        pos = 96;
        Buffer = Buffer + format(F64_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (102 - pos - 4," ");
        pos = 102;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F64_3");
       return("");
    }
}
private String F64_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F64_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (33 - pos - 0," ");
        pos = 33;
        wCaption = "OPERACOES COM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(70 - pos - wCaption.length() ," ");
        pos = 70;
        wCaption = "OPERACOES SEM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F64_5");
       return("");
    }
}
private String F64_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "COD.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(15 - pos - wCaption.length() ," ");
        pos = 15;
        wCaption = "VALOR CONTABIL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(32 - pos - wCaption.length() ," ");
        pos = 32;
        wCaption = "BASE DE CALCULO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(52 - pos - wCaption.length() ," ");
        pos = 52;
        wCaption = "IMP. DEBITADO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(69 - pos - wCaption.length() ," ");
        pos = 69;
        wCaption = "ISENTA N/TRIB.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(95 - pos - wCaption.length() ," ");
        pos = 95;
        wCaption = "OUTRAS";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F64_6");
       return("");
    }
}
private String F64_7 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F64_LABEL25, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F64_7");
       return("");
    }
}
private String F65_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F65_RLCDNATOGR, 7);
        Buffer = Buffer + string (11 - pos - 7," ");
        pos = 11;
        Buffer = Buffer + format(F65_RLCDAPCONT,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (30 - pos - 18," ");
        pos = 30;
        Buffer = Buffer + format(F65_RLCDAPBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 17," ");
        pos = 48;
        Buffer = Buffer + format(F65_RLCDAPVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 17," ");
        pos = 66;
        Buffer = Buffer + format(F65_RLCDAPNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (84 - pos - 17," ");
        pos = 84;
        Buffer = Buffer + format(F65_RLVLAPOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F65_1");
       return("");
    }
}
private String F66_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F66_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "S.TOT.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        Buffer = Buffer + format(F66_RLVLSACONT,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (30 - pos - 18," ");
        pos = 30;
        Buffer = Buffer + format(F66_RLVLSABICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 17," ");
        pos = 48;
        Buffer = Buffer + format(F66_RLVLSAVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 17," ");
        pos = 66;
        Buffer = Buffer + format(F66_RLVLSANICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (84 - pos - 17," ");
        pos = 84;
        Buffer = Buffer + format(F66_RLVLSAOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F66_2");
       return("");
    }
}
private String F66_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F66_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F66_3");
       return("");
    }
}
private String F67_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F67_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "TOTAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        Buffer = Buffer + format(F67_RLVLTOTCON,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (30 - pos - 18," ");
        pos = 30;
        Buffer = Buffer + format(F67_RLVLTTBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (48 - pos - 17," ");
        pos = 48;
        Buffer = Buffer + format(F67_RLVLTTVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (66 - pos - 17," ");
        pos = 66;
        Buffer = Buffer + format(F67_RLVLTTNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (84 - pos - 17," ");
        pos = 84;
        Buffer = Buffer + format(F67_RLVLTTOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F67_2");
       return("");
    }
}
private String F71_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F71_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(69 - pos - wCaption.length() ," ");
        pos = 69;
      Buffer = Buffer + format(F71_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (80 - pos - 10," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F71_1");
       return("");
    }
}
private String F71_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(26 - pos - wCaption.length() ," ");
        pos = 26;
        wCaption = "RESUMO DE APURACAO ICMS/IPI - SAIDAS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(71 - pos - wCaption.length() ," ");
        pos = 71;
        Buffer = Buffer + format(F71_RLHMCABECA, 5);
        Buffer = Buffer + string (80 - pos - 5," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F71_2");
       return("");
    }
}
private String F71_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032 -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F71_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(67 - pos - wCaption.length() ," ");
        pos = 67;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(74 - pos - wCaption.length() ," ");
        pos = 74;
        Buffer = Buffer + format(F71_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (80 - pos - 4," ");
        pos = 80;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F71_3");
       return("");
    }
}
private String F71_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F71_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "DATA EMISSAO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(40 - pos - wCaption.length() ," ");
        pos = 40;
        wCaption = "VALOR ICMS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(72 - pos - wCaption.length() ," ");
        pos = 72;
        wCaption = "VALOR IPI";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F71_5");
       return("");
    }
}
private String F71_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F71_LABEL1, 2);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F71_6");
       return("");
    }
}
private String F72_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (5 - pos - 0," ");
        pos = 5;
        Buffer = Buffer + format(F72_RLDTEMIRES,"DD/MM/YY");
        Buffer = Buffer + string (32 - pos - 8," ");
        pos = 32;
        if (F72_RLVLICMRES != 0)
        {
        Buffer = Buffer + format(F72_RLVLICMRES,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        Buffer = Buffer + string (63 - pos - 18," ");
        pos = 63;
        if (F72_RLVLIPIRES != 0)
        {
        Buffer = Buffer + format(F72_RLVLIPIRES,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F72_1");
       return("");
    }
}
private String F73_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F73_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (5 - pos - 0," ");
        pos = 5;
        wCaption = "TOTAL GERAL:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(32 - pos - wCaption.length() ," ");
        pos = 32;
        if (F73_RLVLICMRES != 0)
        {
        Buffer = Buffer + format(F73_RLVLICMRES,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        Buffer = Buffer + string (63 - pos - 18," ");
        pos = 63;
        if (F73_RLVLIPIRES != 0)
        {
        Buffer = Buffer + format(F73_RLVLIPIRES,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F73_2");
       return("");
    }
}
private String F74_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F74_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(33 - pos - wCaption.length() ," ");
        pos = 33;
        wCaption = "REGISTRO DE APURACAO DO ICMS PELAS SAIDAS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(93 - pos - wCaption.length() ," ");
        pos = 93;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(95 - pos - wCaption.length() ," ");
        pos = 95;
      Buffer = Buffer + format(F74_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (106 - pos - 10," ");
        pos = 106;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F74_1");
       return("");
    }
}
private String F74_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(51 - pos - wCaption.length() ," ");
        pos = 51;
        wCaption = "POR ALIQUOTA";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(93 - pos - wCaption.length() ," ");
        pos = 93;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(97 - pos - wCaption.length() ," ");
        pos = 97;
        Buffer = Buffer + format(F74_RLHMCABECA, 5);
        Buffer = Buffer + string (106 - pos - 5," ");
        pos = 106;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F74_2");
       return("");
    }
}
private String F74_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032 -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F74_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(33 - pos - wCaption.length() ," ");
        pos = 33;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(44 - pos - wCaption.length() ," ");
        pos = 44;
        Buffer = Buffer + format(F74_RLDTINICIO, 10);
        Buffer = Buffer + string (55 - pos - 10," ");
        pos = 55;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(57 - pos - wCaption.length() ," ");
        pos = 57;
        Buffer = Buffer + format(F74_RLDTFINALX, 10);
        Buffer = Buffer + string (68 - pos - 10," ");
        pos = 68;
        Buffer = Buffer + format(F74_RLDSCONDEF, 17);
        Buffer = Buffer + string (93 - pos - 17," ");
        pos = 93;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(100 - pos - wCaption.length() ," ");
        pos = 100;
        Buffer = Buffer + format(F74_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (106 - pos - 4," ");
        pos = 106;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F74_3");
       return("");
    }
}
private String F74_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F74_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (39 - pos - 0," ");
        pos = 39;
        wCaption = "OPERACOES COM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(76 - pos - wCaption.length() ," ");
        pos = 76;
        wCaption = "OPERACOES SEM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F74_5");
       return("");
    }
}
private String F74_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "COD.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        wCaption = "%ALIQ";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(38 - pos - wCaption.length() ," ");
        pos = 38;
        wCaption = "BASE DE CALCULO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(58 - pos - wCaption.length() ," ");
        pos = 58;
        wCaption = "IMP. DEBITADO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(75 - pos - wCaption.length() ," ");
        pos = 75;
        wCaption = "ISENTA N/TRIB.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(101 - pos - wCaption.length() ," ");
        pos = 101;
        wCaption = "OUTRAS";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F74_6");
       return("");
    }
}
private String F75_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F75_RLCDNATOGR, 7);
        Buffer = Buffer + string (10 - pos - 7," ");
        pos = 10;
        Buffer = Buffer + format(F75_RLPCICMNOT,"ZZ.ZZ");
        Buffer = Buffer + string (36 - pos - 5," ");
        pos = 36;
        Buffer = Buffer + format(F75_RLCDAPBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (54 - pos - 17," ");
        pos = 54;
        Buffer = Buffer + format(F75_RLCDAPVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (72 - pos - 17," ");
        pos = 72;
        Buffer = Buffer + format(F75_RLCDAPNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (90 - pos - 17," ");
        pos = 90;
        Buffer = Buffer + format(F75_RLVLAPOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F75_1");
       return("");
    }
}
private String F76_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F76_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "TOT";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(36 - pos - wCaption.length() ," ");
        pos = 36;
        Buffer = Buffer + format(F76_RLCDAPBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (54 - pos - 17," ");
        pos = 54;
        Buffer = Buffer + format(F76_RLCDAPVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (72 - pos - 17," ");
        pos = 72;
        Buffer = Buffer + format(F76_RLCDAPNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (90 - pos - 17," ");
        pos = 90;
        Buffer = Buffer + format(F76_RLVLAPOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F76_2");
       return("");
    }
}
private String F76_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F76_LABEL2, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F76_3");
       return("");
    }
}
private String F77_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F77_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(50 - pos - wCaption.length() ," ");
        pos = 50;
        wCaption = "FATURAMENTO DA DIAT";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(111 - pos - wCaption.length() ," ");
        pos = 111;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(113 - pos - wCaption.length() ," ");
        pos = 113;
      Buffer = Buffer + format(F77_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (124 - pos - 10," ");
        pos = 124;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F77_1");
       return("");
    }
}
private String F77_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(111 - pos - wCaption.length() ," ");
        pos = 111;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(115 - pos - wCaption.length() ," ");
        pos = 115;
        Buffer = Buffer + format(F77_RLHMCABECA, 5);
        Buffer = Buffer + string (124 - pos - 5," ");
        pos = 124;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F77_2");
       return("");
    }
}
private String F77_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032 -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F77_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(33 - pos - wCaption.length() ," ");
        pos = 33;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(44 - pos - wCaption.length() ," ");
        pos = 44;
        Buffer = Buffer + format(F77_RLDTINICIO, 10);
        Buffer = Buffer + string (55 - pos - 10," ");
        pos = 55;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(57 - pos - wCaption.length() ," ");
        pos = 57;
        Buffer = Buffer + format(F77_RLDTFINALX, 10);
        Buffer = Buffer + string (68 - pos - 10," ");
        pos = 68;
        Buffer = Buffer + format(F77_RLDSCONDEF, 17);
        Buffer = Buffer + string (111 - pos - 17," ");
        pos = 111;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(118 - pos - wCaption.length() ," ");
        pos = 118;
        Buffer = Buffer + format(F77_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (124 - pos - 4," ");
        pos = 124;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F77_3");
       return("");
    }
}
private String F77_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F77_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (48 - pos - 0," ");
        pos = 48;
        wCaption = "OPERACOES COM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(94 - pos - wCaption.length() ," ");
        pos = 94;
        wCaption = "OPERACOES SEM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F77_5");
       return("");
    }
}
private String F77_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "COD.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        wCaption = "%ALIQ";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(38 - pos - wCaption.length() ," ");
        pos = 38;
        wCaption = "BASE DE CALCULO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(58 - pos - wCaption.length() ," ");
        pos = 58;
        wCaption = "IMP. DEBITADO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(78 - pos - wCaption.length() ," ");
        pos = 78;
        wCaption = "DIFAL ORIG.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(93 - pos - wCaption.length() ," ");
        pos = 93;
        wCaption = "ISENTA N/TRIB.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(119 - pos - wCaption.length() ," ");
        pos = 119;
        wCaption = "OUTRAS";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F77_6");
       return("");
    }
}
private String F78_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F78_RLCDNATOGR, 7);
        Buffer = Buffer + string (10 - pos - 7," ");
        pos = 10;
        Buffer = Buffer + format(F78_RLPCICMNOT,"ZZ.ZZ");
        Buffer = Buffer + string (18 - pos - 5," ");
        pos = 18;
        Buffer = Buffer + format(F78_RLINPESSOA, 3);
        Buffer = Buffer + string (36 - pos - 3," ");
        pos = 36;
        Buffer = Buffer + format(F78_RLCDAPBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (54 - pos - 17," ");
        pos = 54;
        Buffer = Buffer + format(F78_RLCDAPVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (72 - pos - 17," ");
        pos = 72;
        Buffer = Buffer + format(F78_RLCDAPVDIO,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (90 - pos - 17," ");
        pos = 90;
        Buffer = Buffer + format(F78_RLCDAPNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (108 - pos - 17," ");
        pos = 108;
        Buffer = Buffer + format(F78_RLVLAPOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F78_1");
       return("");
    }
}
private String F79_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F79_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "TOT";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(36 - pos - wCaption.length() ," ");
        pos = 36;
        Buffer = Buffer + format(F79_RLCDAPBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (54 - pos - 17," ");
        pos = 54;
        Buffer = Buffer + format(F79_RLCDAPVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (72 - pos - 17," ");
        pos = 72;
        Buffer = Buffer + format(F79_RLCDAPVDIO,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (90 - pos - 17," ");
        pos = 90;
        Buffer = Buffer + format(F79_RLCDAPNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (108 - pos - 17," ");
        pos = 108;
        Buffer = Buffer + format(F79_RLVLAPOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F79_2");
       return("");
    }
}
private String F79_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F79_LABEL2, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F79_3");
       return("");
    }
}
private String F80_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F80_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "TOT";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(6 - pos - wCaption.length() ," ");
        pos = 6;
        wCaption = "GERAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(36 - pos - wCaption.length() ," ");
        pos = 36;
        Buffer = Buffer + format(F80_RLCDAPBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (54 - pos - 17," ");
        pos = 54;
        Buffer = Buffer + format(F80_RLCDAPVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (72 - pos - 17," ");
        pos = 72;
        Buffer = Buffer + format(F80_RLCDAPVDIO,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (90 - pos - 17," ");
        pos = 90;
        Buffer = Buffer + format(F80_RLCDAPNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (108 - pos - 17," ");
        pos = 108;
        Buffer = Buffer + format(F80_RLVLAPOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F80_2");
       return("");
    }
}
private String F81_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F81_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(51 - pos - wCaption.length() ," ");
        pos = 51;
        wCaption = "CREDITOS DE ICMS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(93 - pos - wCaption.length() ," ");
        pos = 93;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(95 - pos - wCaption.length() ," ");
        pos = 95;
      Buffer = Buffer + format(F81_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (106 - pos - 10," ");
        pos = 106;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F81_1");
       return("");
    }
}
private String F81_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(49 - pos - wCaption.length() ," ");
        pos = 49;
        Buffer = Buffer + format(F81_RLDSTEX20A, 20);
        Buffer = Buffer + string (93 - pos - 20," ");
        pos = 93;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(97 - pos - wCaption.length() ," ");
        pos = 97;
        Buffer = Buffer + format(F81_RLHMCABECA, 5);
        Buffer = Buffer + string (106 - pos - 5," ");
        pos = 106;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F81_2");
       return("");
    }
}
private String F81_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032 -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F81_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(33 - pos - wCaption.length() ," ");
        pos = 33;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(44 - pos - wCaption.length() ," ");
        pos = 44;
        Buffer = Buffer + format(F81_RLDTINICIO, 10);
        Buffer = Buffer + string (55 - pos - 10," ");
        pos = 55;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(57 - pos - wCaption.length() ," ");
        pos = 57;
        Buffer = Buffer + format(F81_RLDTFINALX, 10);
        Buffer = Buffer + string (68 - pos - 10," ");
        pos = 68;
        Buffer = Buffer + format(F81_RLDSCONDEF, 17);
        Buffer = Buffer + string (93 - pos - 17," ");
        pos = 93;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(100 - pos - wCaption.length() ," ");
        pos = 100;
        Buffer = Buffer + format(F81_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (106 - pos - 4," ");
        pos = 106;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F81_3");
       return("");
    }
}
private String F81_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F81_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (19 - pos - 0," ");
        pos = 19;
        Buffer = Buffer + format(F81_RLDSNOTFOP, 4);
        Buffer = Buffer + string (25 - pos - 4," ");
        pos = 25;
        Buffer = Buffer + format(F81_RLDSICMSXX, 5);
        Buffer = Buffer + string (36 - pos - 5," ");
        pos = 36;
        wCaption = "VALOR CONTABIL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(55 - pos - wCaption.length() ," ");
        pos = 55;
        wCaption = "VALOR BASE ICMS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(80 - pos - wCaption.length() ," ");
        pos = 80;
        wCaption = "VALOR ICMS";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F81_5");
       return("");
    }
}
private String F82_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (14 - pos - 0," ");
        pos = 14;
        if (F82_RLNRNOTCRE != 0)
        {
        Buffer = Buffer + format(F82_RLNRNOTCRE,"ZZZZZZZZZ");
        }
        else
        {   Buffer = Buffer + "         ";
        }
        Buffer = Buffer + string (25 - pos - 9," ");
        pos = 25;
        if (F82_RLPCICMCRE != 0)
        {
        Buffer = Buffer + format(F82_RLPCICMCRE,"ZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "     ";
        }
        Buffer = Buffer + string (32 - pos - 5," ");
        pos = 32;
        if (F82_RLVLCONCRE != 0)
        {
        Buffer = Buffer + format(F82_RLVLCONCRE,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        Buffer = Buffer + string (52 - pos - 18," ");
        pos = 52;
        if (F82_RLVLBASCRE != 0)
        {
        Buffer = Buffer + format(F82_RLVLBASCRE,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        Buffer = Buffer + string (72 - pos - 18," ");
        pos = 72;
        if (F82_RLVLIMPCRE != 0)
        {
        Buffer = Buffer + format(F82_RLVLIMPCRE,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F82_1");
       return("");
    }
}
private String F83_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (25 - pos - 0," ");
        pos = 25;
        wCaption = "TOTAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(32 - pos - wCaption.length() ," ");
        pos = 32;
        if (F83_RLVLCONCRE != 0)
        {
        Buffer = Buffer + format(F83_RLVLCONCRE,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        Buffer = Buffer + string (52 - pos - 18," ");
        pos = 52;
        if (F83_RLVLBASCRE != 0)
        {
        Buffer = Buffer + format(F83_RLVLBASCRE,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        Buffer = Buffer + string (72 - pos - 18," ");
        pos = 72;
        if (F83_RLVLIMPCRE != 0)
        {
        Buffer = Buffer + format(F83_RLVLIMPCRE,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F83_1");
       return("");
    }
}
private String F84_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (19 - pos - 0," ");
        pos = 19;
        wCaption = "TOTAL GERAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(32 - pos - wCaption.length() ," ");
        pos = 32;
        if (F84_RLVLCONCRE != 0)
        {
        Buffer = Buffer + format(F84_RLVLCONCRE,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        Buffer = Buffer + string (52 - pos - 18," ");
        pos = 52;
        if (F84_RLVLBASCRE != 0)
        {
        Buffer = Buffer + format(F84_RLVLBASCRE,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        Buffer = Buffer + string (72 - pos - 18," ");
        pos = 72;
        if (F84_RLVLIMPCRE != 0)
        {
        Buffer = Buffer + format(F84_RLVLIMPCRE,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F84_1");
       return("");
    }
}
private String F90_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F90_EXINCLIFOR,"9");
        Buffer = Buffer + string (3 - pos - 1," ");
        pos = 3;
        Buffer = Buffer + format(F90_EXCDCLIFOR,"999999");
        Buffer = Buffer + string (10 - pos - 6," ");
        pos = 10;
        Buffer = Buffer + format(F90_EXVLMOVIME,"999999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F90_1");
       return("");
    }
}
private String F91_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (2 - pos - 0," ");
        pos = 2;
        Buffer = Buffer + format(F91_EXCDCLAFIS,"9999999999");
        Buffer = Buffer + string (13 - pos - 10," ");
        pos = 13;
        Buffer = Buffer + format(F91_EXVLMOVIME,"999999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F91_1");
       return("");
    }
}
private String F92_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F92_EXCDDEBICM,"999999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F92_1");
       return("");
    }
}
private String F92_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F92_EXCDCONCRE,"999999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F92_2");
       return("");
    }
}
private String F92_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F92_EXCDNATOPE,"9999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F92_3");
       return("");
    }
}
private String F92_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F92_EXCDCLAFIS,"9999999999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F92_4");
       return("");
    }
}
private String F92_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F92_EXCDUFMUNI, 2);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F92_5");
       return("");
    }
}
private String F92_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F92_EXVLCONTAB,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F92_6");
       return("");
    }
}
private String F92_7 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F92_EXVLBASICM,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F92_7");
       return("");
    }
}
private String F92_8 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F92_EXVLIMPICM,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F92_8");
       return("");
    }
}
private String F93_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F93_EXNRNOTDIA,"999999999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F93_1");
       return("");
    }
}
private String F93_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F93_EXCDPRODUT,"9999999");
        Buffer = Buffer + string (9 - pos - 7," ");
        pos = 9;
        Buffer = Buffer + format(F93_EXINBRINDE,"9");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F93_2");
       return("");
    }
}
private String F93_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F93_EXCDNATDIA,"9999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F93_3");
       return("");
    }
}
private String F93_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F93_EXVLCONDIA,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F93_4");
       return("");
    }
}
private String F93_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F93_EXVLBASDIA,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F93_5");
       return("");
    }
}
private String F93_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F93_EXVLIMPDIA,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F93_6");
       return("");
    }
}
private String F93_7 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F93_EXVLICMDIA,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F93_7");
       return("");
    }
}
private String F93_8 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F93_EXPCICMDIA,"999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F93_8");
       return("");
    }
}
private String F93_9 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F93_EXCDUFMUNI, 2);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F93_9");
       return("");
    }
}
private String F93_10 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F93_EXINCLIENT,"9");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F93_10");
       return("");
    }
}
private String F94_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F94_EXNRNOTCRE,"999999999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F94_1");
       return("");
    }
}
private String F94_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F94_EXCDNATCRE,"9999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F94_2");
       return("");
    }
}
private String F94_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F94_EXVLCONCRE,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F94_3");
       return("");
    }
}
private String F94_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F94_EXVLBASCRE,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F94_4");
       return("");
    }
}
private String F94_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F94_EXVLIMPCRE,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F94_5");
       return("");
    }
}
private String F94_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F94_EXPCICMCRE,"999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F94_6");
       return("");
    }
}
private String F94_7 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F94_EXCDLINCRE,"999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F94_7");
       return("");
    }
}
private String F94_8 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F94_EXINTEXCRE, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F94_8");
       return("");
    }
}
private String F95_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F95_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(66 - pos - wCaption.length() ," ");
        pos = 66;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(68 - pos - wCaption.length() ," ");
        pos = 68;
      Buffer = Buffer + format(F95_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (79 - pos - 10," ");
        pos = 79;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F95_1");
       return("");
    }
}
private String F95_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "* SIST. FINANCEIRO *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        wCaption = "INCONSISTENCIAS DO CGR032";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(66 - pos - wCaption.length() ," ");
        pos = 66;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(70 - pos - wCaption.length() ," ");
        pos = 70;
        Buffer = Buffer + format(F95_RLHMCABECA, 5);
        Buffer = Buffer + string (79 - pos - 5," ");
        pos = 79;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F95_2");
       return("");
    }
}
private String F95_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032 -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(12 - pos - wCaption.length() ," ");
        pos = 12;
        Buffer = Buffer + format(F95_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(66 - pos - wCaption.length() ," ");
        pos = 66;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(73 - pos - wCaption.length() ," ");
        pos = 73;
        Buffer = Buffer + format(F95_RLNRPAGINA,"ZZZ");
        Buffer = Buffer + string (79 - pos - 3," ");
        pos = 79;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F95_3");
       return("");
    }
}
private String F95_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F95_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "CODIGO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        wCaption = "IDENTIFICADOR";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(35 - pos - wCaption.length() ," ");
        pos = 35;
        wCaption = "OCORRENCIA";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F95_5");
       return("");
    }
}
private String F95_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F95_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F95_6");
       return("");
    }
}
private String F96_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F96_RLCDOCORRE, 10);
        Buffer = Buffer + string (13 - pos - 10," ");
        pos = 13;
        Buffer = Buffer + format(F96_RLINOCORRE, 20);
        Buffer = Buffer + string (35 - pos - 20," ");
        pos = 35;
        Buffer = Buffer + format(F96_RLDSOCORRE, 45);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F96_1");
       return("");
    }
}
private String F101_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F101_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(30 - pos - wCaption.length() ," ");
        pos = 30;
        wCaption = "APURACAO DIFAL PELAS SAIDAS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(69 - pos - wCaption.length() ," ");
        pos = 69;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(71 - pos - wCaption.length() ," ");
        pos = 71;
      Buffer = Buffer + format(F101_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (82 - pos - 10," ");
        pos = 82;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F101_1");
       return("");
    }
}
private String F101_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(33 - pos - wCaption.length() ," ");
        pos = 33;
        wCaption = "POR UNIDADE DA FEDERACAO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(69 - pos - wCaption.length() ," ");
        pos = 69;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(74 - pos - wCaption.length() ," ");
        pos = 74;
        Buffer = Buffer + format(F101_RLHMCABECA, 5);
        Buffer = Buffer + string (82 - pos - 5," ");
        pos = 82;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F101_2");
       return("");
    }
}
private String F101_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032Q-";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F101_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(30 - pos - wCaption.length() ," ");
        pos = 30;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(41 - pos - wCaption.length() ," ");
        pos = 41;
        Buffer = Buffer + format(F101_RLDTINICIO, 10);
        Buffer = Buffer + string (52 - pos - 10," ");
        pos = 52;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(54 - pos - wCaption.length() ," ");
        pos = 54;
        Buffer = Buffer + format(F101_RLDTFINALX, 10);
        Buffer = Buffer + string (69 - pos - 10," ");
        pos = 69;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(76 - pos - wCaption.length() ," ");
        pos = 76;
        Buffer = Buffer + format(F101_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (82 - pos - 4," ");
        pos = 82;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F101_3");
       return("");
    }
}
private String F101_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F101_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "UF";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(7 - pos - wCaption.length() ," ");
        pos = 7;
        wCaption = "COD.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(17 - pos - wCaption.length() ," ");
        pos = 17;
        wCaption = "BASE DE CALCULO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(37 - pos - wCaption.length() ," ");
        pos = 37;
        wCaption = "VALOR ORIGEM";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(53 - pos - wCaption.length() ," ");
        pos = 53;
        wCaption = "VALOR DESTINO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(74 - pos - wCaption.length() ," ");
        pos = 74;
        wCaption = "VALOR FCP";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F101_5");
       return("");
    }
}
private String F101_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F101_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F101_6");
       return("");
    }
}
private String F102_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F102_RLCDUFMUNI, 2);
        Buffer = Buffer + string (7 - pos - 2," ");
        pos = 7;
        Buffer = Buffer + format(F102_RLCDNATOGR, 7);
        Buffer = Buffer + string (16 - pos - 7," ");
        pos = 16;
        Buffer = Buffer + format(F102_RLVLBASDID,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (33 - pos - 16," ");
        pos = 33;
        Buffer = Buffer + format(F102_RLVLICMDIO,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (50 - pos - 16," ");
        pos = 50;
        Buffer = Buffer + format(F102_RLVLICMDID,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (67 - pos - 16," ");
        pos = 67;
        Buffer = Buffer + format(F102_RLVLFCPDES,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F102_1");
       return("");
    }
}
private String F103_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F103_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "TOTAL (";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(8 - pos - wCaption.length() ," ");
        pos = 8;
        Buffer = Buffer + format(F103_RLCDUFMUNI, 2);
        Buffer = Buffer + string (10 - pos - 2," ");
        pos = 10;
        wCaption = ")";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(16 - pos - wCaption.length() ," ");
        pos = 16;
        Buffer = Buffer + format(F103_RLVLBASDID,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (33 - pos - 16," ");
        pos = 33;
        Buffer = Buffer + format(F103_RLVLICMDIO,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (50 - pos - 16," ");
        pos = 50;
        Buffer = Buffer + format(F103_RLVLICMDID,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (67 - pos - 16," ");
        pos = 67;
        Buffer = Buffer + format(F103_RLVLFCPDES,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F103_2");
       return("");
    }
}
private String F103_3 ()
{   String Buffer = "";
    return(Buffer);
}
private String F103_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F103_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F103_4");
       return("");
    }
}
private String F104_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F104_EXNRNOTCRE,"999999999");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F104_1");
       return("");
    }
}
private String F104_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F104_EXVLBASCRE,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F104_2");
       return("");
    }
}
private String F104_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F104_EXVLICMDID,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F104_3");
       return("");
    }
}
private String F104_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F104_EXVLICMDIO,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F104_4");
       return("");
    }
}
private String F104_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F104_EXVLFCPDES,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F104_5");
       return("");
    }
}
private String F111_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F111_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(30 - pos - wCaption.length() ," ");
        pos = 30;
        wCaption = "APURACAO DIFAL PELAS SAIDAS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(69 - pos - wCaption.length() ," ");
        pos = 69;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(71 - pos - wCaption.length() ," ");
        pos = 71;
      Buffer = Buffer + format(F111_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (82 - pos - 10," ");
        pos = 82;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F111_1");
       return("");
    }
}
private String F111_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(30 - pos - wCaption.length() ," ");
        pos = 30;
        wCaption = "CREDITO ICMS";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(46 - pos - wCaption.length() ," ");
        pos = 46;
        Buffer = Buffer + format(F111_RLDSTEX20A, 20);
        Buffer = Buffer + string (69 - pos - 20," ");
        pos = 69;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(73 - pos - wCaption.length() ," ");
        pos = 73;
        Buffer = Buffer + format(F111_RLHMCABECA, 5);
        Buffer = Buffer + string (82 - pos - 5," ");
        pos = 82;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F111_2");
       return("");
    }
}
private String F111_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032R-";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F111_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(30 - pos - wCaption.length() ," ");
        pos = 30;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(41 - pos - wCaption.length() ," ");
        pos = 41;
        Buffer = Buffer + format(F111_RLDTINICIO, 10);
        Buffer = Buffer + string (52 - pos - 10," ");
        pos = 52;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(54 - pos - wCaption.length() ," ");
        pos = 54;
        Buffer = Buffer + format(F111_RLDTFINALX, 10);
        Buffer = Buffer + string (69 - pos - 10," ");
        pos = 69;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(76 - pos - wCaption.length() ," ");
        pos = 76;
        Buffer = Buffer + format(F111_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (82 - pos - 4," ");
        pos = 82;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F111_3");
       return("");
    }
}
private String F111_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F111_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (2 - pos - 0," ");
        pos = 2;
        wCaption = "NOTA FISCAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(17 - pos - wCaption.length() ," ");
        pos = 17;
        wCaption = "BASE DE CALCULO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(37 - pos - wCaption.length() ," ");
        pos = 37;
        wCaption = "VALOR ORIGEM";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(53 - pos - wCaption.length() ," ");
        pos = 53;
        wCaption = "VALOR DESTINO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(74 - pos - wCaption.length() ," ");
        pos = 74;
        wCaption = "VALOR FCP";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F111_5");
       return("");
    }
}
private String F111_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F111_LABEL1, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F111_6");
       return("");
    }
}
private String F112_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (3 - pos - 0," ");
        pos = 3;
        if (F112_RLNRNOTCRE != 0)
        {
        Buffer = Buffer + format(F112_RLNRNOTCRE,"ZZZZZZZZZ");
        }
        else
        {   Buffer = Buffer + "         ";
        }
        Buffer = Buffer + string (14 - pos - 9," ");
        pos = 14;
        if (F112_RLVLBASCRE != 0)
        {
        Buffer = Buffer + format(F112_RLVLBASCRE,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        Buffer = Buffer + string (33 - pos - 18," ");
        pos = 33;
        Buffer = Buffer + format(F112_RLVLICMDIO,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (50 - pos - 16," ");
        pos = 50;
        Buffer = Buffer + format(F112_RLVLICMDID,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (67 - pos - 16," ");
        pos = 67;
        Buffer = Buffer + format(F112_RLVLFCPDES,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F112_1");
       return("");
    }
}
private String F113_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (2 - pos - 0," ");
        pos = 2;
        wCaption = "TOTAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(14 - pos - wCaption.length() ," ");
        pos = 14;
        if (F113_RLVLBASCRE != 0)
        {
        Buffer = Buffer + format(F113_RLVLBASCRE,"ZZZ,ZZZ,ZZZ,ZZZ.ZZ");
        }
        else
        {   Buffer = Buffer + "                  ";
        }
        Buffer = Buffer + string (33 - pos - 18," ");
        pos = 33;
        Buffer = Buffer + format(F113_RLVLICMDIO,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (50 - pos - 16," ");
        pos = 50;
        Buffer = Buffer + format(F113_RLVLICMDID,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (67 - pos - 16," ");
        pos = 67;
        Buffer = Buffer + format(F113_RLVLFCPDES,"Z,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F113_1");
       return("");
    }
}
private String F121_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        Buffer = Buffer + format(F121_RLNMABREMP, 16);
        Buffer = Buffer + string (20 - pos - 16," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(50 - pos - wCaption.length() ," ");
        pos = 50;
        wCaption = "FATURAMENTO DA DIAT";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(93 - pos - wCaption.length() ," ");
        pos = 93;
        wCaption = "NCM:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(98 - pos - wCaption.length() ," ");
        pos = 98;
        if (F121_RLCDCLAFIS != 0)
        {
        Buffer = Buffer + format(F121_RLCDCLAFIS,"ZZZZZZZZZZ");
        }
        else
        {   Buffer = Buffer + "          ";
        }
        Buffer = Buffer + string (111 - pos - 10," ");
        pos = 111;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(113 - pos - wCaption.length() ," ");
        pos = 113;
      Buffer = Buffer + format(F121_RLDTCABECA, "DD/MM/CCYY");
        Buffer = Buffer + string (124 - pos - 10," ");
        pos = 124;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F121_1");
       return("");
    }
}
private String F121_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*   CONTABILIDADE  *";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(31 - pos - wCaption.length() ," ");
        pos = 31;
        Buffer = Buffer + format(F121_RLDSTEXAUX, 65);
        Buffer = Buffer + string (98 - pos - 65," ");
        pos = 98;
        if (F121_RLCDCLAFI1 != 0)
        {
        Buffer = Buffer + format(F121_RLCDCLAFI1,"ZZZZZZZZZZ");
        }
        else
        {   Buffer = Buffer + "          ";
        }
        Buffer = Buffer + string (111 - pos - 10," ");
        pos = 111;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(115 - pos - wCaption.length() ," ");
        pos = 115;
        Buffer = Buffer + format(F121_RLHMCABECA, 5);
        Buffer = Buffer + string (124 - pos - 5," ");
        pos = 124;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F121_2");
       return("");
    }
}
private String F121_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(3 - pos - wCaption.length() ," ");
        pos = 3;
        wCaption = "CGR032 -";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(13 - pos - wCaption.length() ," ");
        pos = 13;
        Buffer = Buffer + format(F121_RLNRSOLICI,"999999");
        Buffer = Buffer + string (20 - pos - 6," ");
        pos = 20;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(33 - pos - wCaption.length() ," ");
        pos = 33;
        wCaption = "PERIODO DE";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(44 - pos - wCaption.length() ," ");
        pos = 44;
        Buffer = Buffer + format(F121_RLDTINICIO, 10);
        Buffer = Buffer + string (55 - pos - 10," ");
        pos = 55;
        wCaption = "A";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(57 - pos - wCaption.length() ," ");
        pos = 57;
        Buffer = Buffer + format(F121_RLDTFINALX, 10);
        Buffer = Buffer + string (68 - pos - 10," ");
        pos = 68;
        Buffer = Buffer + format(F121_RLDSCONDEF, 17);
        Buffer = Buffer + string (111 - pos - 17," ");
        pos = 111;
        wCaption = "*FOLHA:";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(118 - pos - wCaption.length() ," ");
        pos = 118;
        Buffer = Buffer + format(F121_RLNRPAGINA,"ZZZZ");
        Buffer = Buffer + string (124 - pos - 4," ");
        pos = 124;
        wCaption = "*";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F121_3");
       return("");
    }
}
private String F121_4 ()
{   String Buffer = "";
    return(Buffer);
}
private String F121_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (48 - pos - 0," ");
        pos = 48;
        wCaption = "OPERACOES COM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(94 - pos - wCaption.length() ," ");
        pos = 94;
        wCaption = "OPERACOES SEM DEBITO DE IMPOSTO";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F121_5");
       return("");
    }
}
private String F121_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "COD.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(11 - pos - wCaption.length() ," ");
        pos = 11;
        wCaption = "%ALIQ";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(23 - pos - wCaption.length() ," ");
        pos = 23;
        wCaption = "TIPO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(38 - pos - wCaption.length() ," ");
        pos = 38;
        wCaption = "BASE DE CALCULO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(58 - pos - wCaption.length() ," ");
        pos = 58;
        wCaption = "IMP. DEBITADO";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(78 - pos - wCaption.length() ," ");
        pos = 78;
        wCaption = "DIFAL ORIG.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(93 - pos - wCaption.length() ," ");
        pos = 93;
        wCaption = "ISENTA N/TRIB.";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(119 - pos - wCaption.length() ," ");
        pos = 119;
        wCaption = "OUTRAS";
        Buffer = Buffer + wCaption;
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F121_6");
       return("");
    }
}
private String F122_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F122_RLCDNATOGR, 7);
        Buffer = Buffer + string (10 - pos - 7," ");
        pos = 10;
        Buffer = Buffer + format(F122_RLPCICMNOT,"ZZ.ZZ");
        Buffer = Buffer + string (23 - pos - 5," ");
        pos = 23;
        Buffer = Buffer + format(F122_RLINPESSOA, 3);
        Buffer = Buffer + string (36 - pos - 3," ");
        pos = 36;
        Buffer = Buffer + format(F122_RLCDAPBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (54 - pos - 17," ");
        pos = 54;
        Buffer = Buffer + format(F122_RLCDAPVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (72 - pos - 17," ");
        pos = 72;
        Buffer = Buffer + format(F122_RLCDAPVDIO,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (90 - pos - 17," ");
        pos = 90;
        Buffer = Buffer + format(F122_RLCDAPNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (108 - pos - 17," ");
        pos = 108;
        Buffer = Buffer + format(F122_RLVLAPOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F122_1");
       return("");
    }
}
private String F123_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F123_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "TOT";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(36 - pos - wCaption.length() ," ");
        pos = 36;
        Buffer = Buffer + format(F123_RLCDAPBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (54 - pos - 17," ");
        pos = 54;
        Buffer = Buffer + format(F123_RLCDAPVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (72 - pos - 17," ");
        pos = 72;
        Buffer = Buffer + format(F123_RLCDAPVDIO,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (90 - pos - 17," ");
        pos = 90;
        Buffer = Buffer + format(F123_RLCDAPNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (108 - pos - 17," ");
        pos = 108;
        Buffer = Buffer + format(F123_RLVLAPOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F123_2");
       return("");
    }
}
private String F123_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F123_LABEL2, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F123_3");
       return("");
    }
}
private String F124_1 ()
{   String Buffer = "";
    return(Buffer);
}
private String F124_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        wCaption = "TOT";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(6 - pos - wCaption.length() ," ");
        pos = 6;
        wCaption = "GERAL";
        Buffer = Buffer + wCaption;
        Buffer = Buffer + string(36 - pos - wCaption.length() ," ");
        pos = 36;
        Buffer = Buffer + format(F124_RLCDAPBICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (54 - pos - 17," ");
        pos = 54;
        Buffer = Buffer + format(F124_RLCDAPVICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (72 - pos - 17," ");
        pos = 72;
        Buffer = Buffer + format(F124_RLCDAPVDIO,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (90 - pos - 17," ");
        pos = 90;
        Buffer = Buffer + format(F124_RLCDAPNICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        Buffer = Buffer + string (108 - pos - 17," ");
        pos = 108;
        Buffer = Buffer + format(F124_RLVLAPOICM,"ZZ,ZZZ,ZZZ,ZZZ.ZZ");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F124_2");
       return("");
    }
}
private String F124_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F124_LABEL2, 1);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F124_3");
       return("");
    }
}
private String F125_1 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F125_EXCDNATDIA,"9999");
        Buffer = Buffer + string (7 - pos - 4," ");
        pos = 7;
        Buffer = Buffer + format(F125_EXINCLIENT,"9");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F125_1");
       return("");
    }
}
private String F125_2 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F125_EXVLCONDIA,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F125_2");
       return("");
    }
}
private String F125_3 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F125_EXVLBASDIA,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F125_3");
       return("");
    }
}
private String F125_4 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F125_EXVLIMPDIA,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F125_4");
       return("");
    }
}
private String F125_5 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F125_EXVLICMDIA,"9999999999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F125_5");
       return("");
    }
}
private String F125_6 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F125_EXPCICMDIA,"999.99");
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F125_6");
       return("");
    }
}
private String F125_7 ()
  throws Exception
{   try
    {   String lsFormat;
        String Buffer = "";
        int pos = 1;
        String wCaption = "";
        Buffer = Buffer + string (1 - pos - 0," ");
        pos = 1;
        Buffer = Buffer + format(F125_EXCDUFMUNI, 2);
        return(Buffer);
    }
    catch(Exception e)
    {  ShowErrorMsg (e, "F125_7");
       return("");
    }
}

public static void main (String args[])
    throws Exception
{
    int i = args[0].indexOf("=");
    if (i != -1)
    {   if (args[0].substring(0,i).trim().equals("WFL")==true)
        {   CGR032 newRep = new CGR032(args[0].substring(i+1));
            newRep.runReport();
            System.exit((int)newRep.GLB.TASK);
        }
        else
        {   CGR032 newRep = new CGR032(args[0], args[1], args[2]);
            newRep.GLB.DEVICE = args[3];
            newRep.runReport();
            System.exit((int)newRep.GLB.TASK);
        }
    }
    else
    {   CGR032 newRep = new CGR032(args[0], args[1], args[2]);
        newRep.GLB.DEVICE = args[3];
        newRep.runReport();
        System.exit((int)newRep.GLB.TASK);
    }
}

public CGR032 ()
{
}
public CGR032 (HttpSession session)
{
    getAttribute (session);
}
public void getAttribute (HttpSession session)
{

    GLB.DSN = (String)session.getAttribute("GLB_DSN");
    if (GLB.DSN == null)
    {
	   session.setAttribute("GLB_DSN", "");
	   GLB.DSN = "";
    }

    GLB.INITSTN = (String)session.getAttribute("GLB_STN");
    if (GLB.INITSTN == null)
    {
	   session.setAttribute("GLB_INITSTN", "");
		GLB.INITSTN = "";
    }

    GLB.USERNAME = (String)session.getAttribute("GLB_USERNAME");
    if (GLB.USERNAME == null)
    {
	    session.setAttribute("GLB_USERNAME", "");
		GLB.USERNAME = "";
    }

    GLB.PASSWORD = (String)session.getAttribute("GLB_PASSWORD");
    if (GLB.PASSWORD==null)
    {
        session.setAttribute("GLB_PASSWORD", "");
        GLB.PASSWORD= "";
    }

    GLB.FILESDIR = (String)session.getAttribute("GLB_FILESDIR");
    if (GLB.FILESDIR==null)
    {
        session.setAttribute("GLB_FILESDIR", "");
	  	GLB.FILESDIR = "";
    }

    GLB.AUDITDIR = (String)session.getAttribute("GLB_AUDITDIR");
    if (GLB.AUDITDIR==null)
    {
        session.setAttribute("GLB_AUDITDIR", "");
	  	GLB.AUDITDIR = "";
    }

    GLB.BACKUPDIR = (String)session.getAttribute("GLB_BACKUPDIR");
    if (GLB.BACKUPDIR==null)
    {
        session.setAttribute("GLB_BACKUPDIR", "");
	  	GLB.BACKUPDIR = "";
    }

    GLB.TEMPDIR = (String)session.getAttribute("GLB_TEMPDIR");
    if (GLB.TEMPDIR==null)
    {
        session.setAttribute("GLB_TEMPDIR", "");
	  	GLB.TEMPDIR = "";
    }

    GLB.SYSTEMDIR = (String)session.getAttribute("GLB_SYSTEMDIR");
    if (GLB.SYSTEMDIR==null)
    {
        session.setAttribute("GLB_SYSTEMDIR", "");
	  	GLB.SYSTEMDIR = "";
    }

    GLB.DOCDIR = (String)session.getAttribute("GLB_DOCDIR");
    if (GLB.DOCDIR==null)
    {
        session.setAttribute("GLB_DOCDIR", "");
	  	GLB.DOCDIR = "";
    }

    GLB.EXTRACTSDIR = (String)session.getAttribute("GLB_EXTRACTSDIR");
    if (GLB.EXTRACTSDIR==null)
    {
        session.setAttribute("GLB_EXTRACTSDIR", "");
	  	GLB.EXTRACTSDIR = "";
    }

    GLB.MSGSDIR = (String)session.getAttribute("GLB_MSGSDIR");
    if (GLB.MSGSDIR==null)
    {
        session.setAttribute("GLB_MSGSDIR", "");
	 	GLB.MSGSDIR = "";
    }

    GLB.ICONSDIR = (String)session.getAttribute("GLB_ICONSDIR");
    if (GLB.ICONSDIR==null)
    {   session.setAttribute("GLB_ICONSDIR", "");
        GLB.ICONSDIR = "";
    }

    GLB.BATCHDIR = (String)session.getAttribute("GLB_BATCHDIR");
    if (GLB.BATCHDIR==null)
    {
        session.setAttribute("GLB_BATCHDIR", "");
	  	GLB.BATCHDIR = "";
    }

    GLB.CLONEAPPDIR = (String)session.getAttribute("GLB_CLONEAPPDIR");
    if (GLB.CLONEAPPDIR==null)
    {
        session.setAttribute("GLB_CLONEAPPDIR", "");
	  	GLB.CLONEAPPDIR = "";
    }
	
    GLB.CLONERTSDIR = (String)session.getAttribute("GLB_CLONERTSDIR");
    if (GLB.CLONERTSDIR==null)
    {
        session.setAttribute("GLB_CLONERTSDIR", "");
	  	GLB.CLONERTSDIR = "";
    }

    GLB.PARAM = (String)session.getAttribute("GLB_PARAM");
    if (GLB.PARAM == null)
    {
        session.setAttribute("GLB_PARAM", "");
	  	GLB.PARAM = "";
    }

    GLB.DEVICE = (String)session.getAttribute("GLB_DEVICE");
    if (GLB.DEVICE==null)
    {
        session.setAttribute("GLB_DEVICE", "");
	 	GLB.DEVICE = "";
    }
	
	GLB.DBNAME = (String)session.getAttribute("GLB_DBNAME");
    if (GLB.DBNAME==null)
    {
        session.setAttribute("GLB_DBNAME", "");
	  	GLB.DBNAME = "";
    }

    GLB.SERVER = (String)session.getAttribute("GLB_SERVER");
    if (GLB.SERVER == null)
    {
	   session.setAttribute("GLB_SERVER", "");
	   GLB.SERVER = "";
    }

    GLB.FULLSTN = (String)session.getAttribute("GLB_FULLSTN");
    if (GLB.FULLSTN == null)
    {
	   session.setAttribute("GLB_FULLSTN", "");
	   GLB.FULLSTN = "";
    }
    GLB.DBTYPE = (String)session.getAttribute("GLB_DBTYPE");
    if (GLB.DBTYPE == null)
    {
	   session.setAttribute("GLB_DBTYPE", "");
	   GLB.DBTYPE = "";
    }
    GLB.LANGUAGE = (String)session.getAttribute("GLB_LANGUAGE");
    if (GLB.LANGUAGE==null)
    {
       session.setAttribute("GLB_LANGUAGE", "");
       GLB.LANGUAGE = "";
    }
    GLB.REPLANG = (String)session.getAttribute("GLB_REPLANG");
    if (GLB.REPLANG==null)
    {
       session.setAttribute("GLB_REPLANG", "");
       GLB.REPLANG = "";
    }
    GLB.STALANG = (String)session.getAttribute("GLB_STALANG");
    if (GLB.STALANG==null)
    {
       session.setAttribute("GLB_STALANG", "");
       GLB.STALANG = "";
    }
}

public CGR032 (

  String pDsn,        String pInitStn,    String pUsername,  String pPassword,
  boolean pAuditJob,  String pAuditAct,   String pFilesDir,  String pAuditDir,
  String pBackupDir,  String pTempDir,    String pSystemDir, String pDocDir,
  String pExtractDir, String pMsgDir,     String pIconsDir,  String pBatchDir,
  String pCloneAppDir,String pCloneRtsDir,String pMyStatus,  String pParam,
  String pDevice,     String pServer,     String pDbName,    String pFullStn )
{	
    getAttribute (pDsn, pInitStn, pUsername, pPassword, pAuditJob, pAuditAct,
        pFilesDir, pAuditDir, pBackupDir, pTempDir, pSystemDir, pDocDir, pExtractDir,
        pMsgDir, pIconsDir, pBatchDir, pCloneAppDir, pCloneRtsDir, pMyStatus,pParam,
        pDevice, pServer, pDbName, pFullStn);
}

public void getAttribute (

  String pDsn,        String pInitStn,    String pUsername,  String pPassword,
  boolean pAuditJob,  String pAuditAct,   String pFilesDir,  String pAuditDir,
  String pBackupDir,  String pTempDir,    String pSystemDir, String pDocDir,
  String pExtractDir, String pMsgDir,     String pIconsDir,  String pBatchDir,
  String pCloneAppDir,String pCloneRtsDir,String pMyStatus,  String pParam,
  String pDevice,     String pServer,     String pDbName,    String pFullStn )

{   GLB.DSN = pDsn;
    GLB.INITSTN = pInitStn;
    GLB.USERNAME = pUsername;
    GLB.PASSWORD = pPassword;
    GLB.AUDITJOB = pAuditJob;
    GLB.AUDITACT = pAuditAct;
    GLB.FILESDIR = pFilesDir;
    GLB.AUDITDIR = pAuditDir;
    GLB.BACKUPDIR = pBackupDir;
    GLB.TEMPDIR = pTempDir;
    GLB.SYSTEMDIR = pSystemDir;
    GLB.DOCDIR = pDocDir;
    GLB.EXTRACTSDIR = pExtractDir;
    GLB.MSGSDIR = pMsgDir;
    GLB.ICONSDIR = pIconsDir;
    GLB.BATCHDIR = pBatchDir;
    GLB.CLONEAPPDIR = pCloneAppDir;
    GLB.CLONERTSDIR = pCloneRtsDir;
    GLB.MYSTATUS = pMyStatus;
    GLB.PARAM = pParam;
    GLB.DEVICE = pDevice;
    GLB.SERVER = pServer;
    GLB.DBNAME = pDbName;
    GLB.FULLSTN = pFullStn;
}

private void readAppIni(String pAppIniPath)
       throws Exception
{
    try
    {
        String AppIniLine;
        File  appinifile = new File(pAppIniPath + File.separatorChar + "APP.INI");
        FileInputStream   appinistream = new FileInputStream(pAppIniPath + File.separatorChar + "APP.INI");
        BufferedReader    appini = new BufferedReader(new InputStreamReader(appinistream));
        AppIniLine = "";
        while (AppIniLine != null)
        {   AppIniLine = appini.readLine();
            if (AppIniLine != null)
            {
              getSetupOptions(AppIniLine);
            }
        }
        appinistream.close();
        appini = null;
        appinistream = null;
        appinifile = null;


   }
   catch (Exception e)
   {
      //ShowErrorMsg (e,"ReadAppAppIni");
   }
}

private void getSetupOptions(String pLine)
    throws Exception
{
    try
    {
        String BeforeWord;
        String AfterWord;
        int i;
        i = pLine.indexOf(";");
        if (i == -1)
        {
           i = pLine.indexOf("=");
        }
        if (i != -1)
        {
           BeforeWord = pLine.substring(0, i).toUpperCase();
           AfterWord = pLine.substring(i + 1);

           if (BeforeWord.trim().toUpperCase().equals("APPNAME") )
               GLB.APPNAME = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("DBNAME") )
               GLB.DBNAME = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("DSN") )
               GLB.DSN = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("TARGETOS") )
               GLB.TARGETOS = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("STN") )
               GLB.STN  = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("USER") )
               GLB.USERCODE = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("MSGTIMER") )
               GLB.MSGTIMER = (short)Integer.parseInt(AfterWord.trim(),10);
           else if (BeforeWord.trim().toUpperCase().equals("FILESPATH") )
               GLB.FILESDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("AUDITPATH") )
               GLB.AUDITDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("BACKUPPATH") )
               GLB.BACKUPDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("SYSTEMPATH") )
               GLB.SYSTEMDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("DOCPATH") )
               GLB.DOCDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("ICONSPATH") )
               GLB.ICONSDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("TEMPPATH") )
               GLB.TEMPDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("MSGSPATH") )
               GLB.MSGSDIR= AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("BATCHPATH") )
               GLB.BATCHDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("CLONEAPPDIR") )
               GLB.CLONEAPPDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("CLONERTSDIR") )
               GLB.CLONERTSDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("CLONEAPPPATH") )
               GLB.CLONEAPPDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("CLONERTSPATH") )
               GLB.CLONERTSDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("EXTRACTSPATH") )
               GLB.EXTRACTSDIR = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("FIREUPISPEC") )
               GLB.FIREUPISPEC = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("SERVER") )
               GLB.SERVER = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("DBUSERNAME") )
               GLB.USERNAME = AfterWord.trim();
           else if (BeforeWord.trim().toUpperCase().equals("DBPASSWORD") )
           {
               GLB.PASSWORD = AfterWord.trim();
               if (GLB.PASSWORD.trim().toUpperCase().equals("$(PWD)")==true)
               {
                  GLB.PASSWORD = "$(PWD)";
               }
           }
           else if (BeforeWord.trim().toUpperCase().equals("AUDITSESSION") )
		   {
        	    if (AfterWord.trim().toUpperCase().equals("TRUE") )
                {
            	    GLB.AUDITJOB = true;
        	    }
                else
                {
                    GLB.AUDITJOB = false;
                }
    	  }
          /*else if (BeforeWord.trim().toUpperCase().equals("AUDITONCLIENT") )
            {
               if (AfterWord.trim().toUpperCase().equals("TRUE") )
                  wAuditOnClient = true;
               else
                  wAuditOnClient = false;
            }
          */
          else if (BeforeWord.trim().toUpperCase().equals("CLONEAPP") )
            {
               if (AfterWord.trim().toUpperCase().equals("TRUE") )
                  GLB.CLONEAPP = true;
               else
                  GLB.CLONEAPP = false;
            }
          else if (BeforeWord.trim().toUpperCase().equals("CLONERTS") )
            {
               if (AfterWord.trim().toUpperCase().equals("TRUE") )
                  GLB.CLONERTS = true;
               else
                  GLB.CLONERTS = false;
            }
          else if (BeforeWord.trim().toUpperCase().equals("DBTYPE") )
          {
              GLB.DBTYPE = AfterWord.trim();
          }
    }  // fim if externo

  }
  catch (Exception e)
  {
      //ShowErrorMsg (e,"GetSetupOptions");
  }
}

public CGR032 (
      String pInitStn, String pParam, String pAppIniPath)
{
    try
	{   // Default Values
	    GLB.FILESDIR = "FILES";
        GLB.AUDITDIR = "AUDIT";
        GLB.BACKUPDIR = "BACKUP";
        GLB.DOCDIR = "DOC";
        GLB.ICONSDIR = "ICONS";
        GLB.TEMPDIR = "TEMP";
        GLB.MSGSDIR = "MSGS";
        GLB.BATCHDIR = "BATCH";
        GLB.EXTRACTSDIR = "EXTRACTS";
        GLB.CLONEAPPDIR = "PACKAGE";
        GLB.CLONERTSDIR = "RTSPACKAGE";
        GLB.STN  = "XSEED";
        GLB.USERCODE = "XSEED";
		
        GLB.INITSTN = pInitStn;
        GLB.PARAM = pParam;
        readXseedIni();

    }
    catch(Exception e)
    {
    }
}

public void remote (String pInitStn, String pParam, String pAppIniPath, String pDevice)
{
    try
	{   // Default Values
	    GLB.FILESDIR = "FILES";
        GLB.AUDITDIR = "AUDIT";
        GLB.BACKUPDIR = "BACKUP";
        GLB.DOCDIR = "DOC";
        GLB.ICONSDIR = "ICONS";
        GLB.TEMPDIR = "TEMP";
        GLB.MSGSDIR = "MSGS";
        GLB.BATCHDIR = "BATCH";
        GLB.EXTRACTSDIR = "EXTRACTS";
        GLB.CLONEAPPDIR = "PACKAGE";
        GLB.CLONERTSDIR = "RTSPACKAGE";
        GLB.STN  = "XSEED";
        GLB.USERCODE = "XSEED";
		
        GLB.INITSTN = pInitStn;
        GLB.PARAM = pParam;
        GLB.DEVICE = pDevice;
        readXseedIni();

    }
    catch(Exception e)
    {
    }
}

private void readWFL(String pWFLFile)
       throws Exception
{
    try
    {
        String WFLLine;
        File  WFLFile = new File(pWFLFile);
        FileInputStream   WFLstream = new FileInputStream(pWFLFile);
        BufferedReader    WFLreader = new BufferedReader(new InputStreamReader(WFLstream));
        WFLLine = "";
        while (WFLLine != null)
        {   WFLLine = WFLreader.readLine();
            if (WFLLine != null)
            {
              getWFLOptions(WFLLine);
            }
        }
        WFLreader = null;
        WFLstream = null;
        WFLFile = null;
        GLB.BDSUFFIX = GLB.PID + "_" + GLB.BDSUFFIX;
   }
   catch (Exception e)
   {
      ShowErrorMsg (e,"readWFL");
   }
}

private void getWFLOptions(String pLine)
    throws Exception
{
    try
    {
        String BeforeWord;
        String AfterWord;
        int i;
        i = pLine.indexOf(";");
        if (i == -1)
        {
           i = pLine.indexOf("=");
        }
        if (i != -1)
        {
            BeforeWord = pLine.substring(0, i).trim().toUpperCase();
            AfterWord = pLine.substring(i + 1).trim();   	          	           	

            if (BeforeWord.equals("ACCEPTFILE") )
                GLB.ACCEPTFILE = AfterWord;
           	               	
            else if (BeforeWord.equals("LOG") )
                GLB.AUDITACT = AfterWord;

            else if (BeforeWord.equals("BDNAME") )
                GLB.BDNAME = AfterWord;

            else if ( (BeforeWord.equals("PRINTDIR")) || (BeforeWord.equals("BACKUPDIR")) || (BeforeWord.equals("BACKUPPATH")))
                GLB.BACKUPDIR = AfterWord;

            else if (BeforeWord.equals("PID") )
                GLB.PID = AfterWord;

            else if (BeforeWord.equals("SUFFIX") )
                GLB.BDSUFFIX = AfterWord;

            else if (BeforeWord.equals("INITSTN") )
                GLB.INITSTN = AfterWord;

            else if (BeforeWord.equals("USERCODE") )
                GLB.USERCODE = AfterWord;

            else if (BeforeWord.equals("PRINT") )
                GLB.TITLE = AfterWord;
            else if (BeforeWord.equals("PRINTA") )
                GLB.TITLEA = AfterWord;
            else if (BeforeWord.equals("PRINTB") )
                GLB.TITLEB = AfterWord;
            else if (BeforeWord.equals("PRINTC") )
               	GLB.TITLEC = AfterWord;
            else if (BeforeWord.equals("PRINTD") )
                GLB.TITLED = AfterWord;
            else if (BeforeWord.equals("PRINTE") )
                GLB.TITLEE = AfterWord;
            else if (BeforeWord.equals("PRINTF") )
                GLB.TITLEF = AfterWord;
            else if (BeforeWord.equals("PRINTG") )
                GLB.TITLEG = AfterWord;
            else if (BeforeWord.equals("PRINTH") )
                GLB.TITLEH = AfterWord;
            else if (BeforeWord.equals("PRINTI") )
                GLB.TITLEI = AfterWord;
            else if (BeforeWord.equals("PRINTJ") )
                GLB.TITLEJ = AfterWord;
            else if (BeforeWord.equals("PRINTK") )
                GLB.TITLEK = AfterWord;
            else if (BeforeWord.equals("PRINTL") )
                GLB.TITLEL = AfterWord;
            else if (BeforeWord.equals("PRINTM") )
                GLB.TITLEM = AfterWord;
            else if (BeforeWord.equals("PRINTN") )
               	GLB.TITLEN = AfterWord;
            else if (BeforeWord.equals("PRINTO") )
               	GLB.TITLEO = AfterWord;
            else if (BeforeWord.equals("PRINTP") )
               	GLB.TITLEP = AfterWord;
            else if (BeforeWord.equals("PRINTQ") )
               	GLB.TITLEQ = AfterWord;
            else if (BeforeWord.equals("PRINTR") )
            	GLB.TITLER = AfterWord;
            else if (BeforeWord.equals("PRINTS") )
               	GLB.TITLES = AfterWord;
            else if (BeforeWord.equals("PRINTT") )
               	GLB.TITLET = AfterWord;
            else if (BeforeWord.equals("PRINTU") )
               	GLB.TITLEU = AfterWord;
            else if (BeforeWord.equals("PRINTV") )
               	GLB.TITLEV = AfterWord;
            else if (BeforeWord.equals("PRINTW") )
               	GLB.TITLEW = AfterWord;
            else if (BeforeWord.equals("PRINTX") )
               	GLB.TITLEX = AfterWord;
            else if (BeforeWord.equals("PRINTY") )
               	GLB.TITLEY = AfterWord;
            else if (BeforeWord.equals("PRINTZ") )
               	GLB.TITLEZ = AfterWord;

            else if (BeforeWord.equals("FILEA") )
               	GLB.EXA_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEB") )
               	GLB.EXB_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEC") )
               	GLB.EXC_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILED") )
               	GLB.EXD_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEE") )
               	GLB.EXE_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEF") )
            	GLB.EXF_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEG") )
               	GLB.EXG_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEH") )
               	GLB.EXH_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEI") )
               	GLB.EXI_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEJ") )
               	GLB.EXJ_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEK") )
               	GLB.EXK_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEL") )
            	GLB.EXL_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEM") )
               	GLB.EXM_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEN") )
               	GLB.EXN_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEO") )
               	GLB.EXO_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEP") )
               	GLB.EXP_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEQ") )
               	GLB.EXQ_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILER") )
            	GLB.EXR_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILES") )
               	GLB.EXS_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILET") )
               	GLB.EXT_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEU") )
               	GLB.EXU_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEV") )
               	GLB.EXV_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEW") )
               	GLB.EXW_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEX") )
               	GLB.EXX_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEY") )
               	GLB.EXY_XSEEDTITLE = AfterWord;
            else if (BeforeWord.equals("FILEZ") )
               	GLB.EXZ_XSEEDTITLE = AfterWord;

    }  // fim if externo

  }
  catch (Exception e)
  {
      ShowErrorMsg (e,"GetWFLOptions");
  }
}

private void readXseedIni()
       throws Exception
{
    try
    {   GLB.APPNAME = XseedINI.getAppName();
        GLB.AUDITDIR = XseedINI.getAuditPath();	
        GLB.BACKUPDIR = XseedINI.getBackupPath();
        GLB.BATCHDIR = XseedINI.getBatchPath();		
        if (XseedINI.getCloneApp().equals("TRUE") == true)
        {	GLB.CLONEAPP = true;		
        }
        else
        {	GLB.CLONEAPP = false;
        }
        GLB.CLONEAPPDIR = XseedINI.getCloneAppPath();
        if (XseedINI.getCloneRts().equals("TRUE") == true)
        {	GLB.CLONERTS = true;		
        }
        else
        {	GLB.CLONERTS = false;
        }		
        GLB.CLONERTSDIR = XseedINI.getCloneRtsPath();		
        GLB.DBNAME = XseedINI.getDBName();
        GLB.PASSWORD = XseedINI.getDBPassword();		
        GLB.USERNAME = XseedINI.getDBUsername();
        GLB.DOCDIR =  XseedINI.getDocPath();
        GLB.DSN =  XseedINI.getDSN();
        GLB.EXTRACTSDIR = XseedINI.getExtractsPath();
        GLB.FILESDIR =  XseedINI.getFilesPath();
        GLB.FIREUPISPEC = XseedINI.getFireupIspec();
        GLB.ICONSDIR = XseedINI.getIconsPath();
        GLB.MSGSDIR = XseedINI.getMsgsPath();
        GLB.MSGTIMER = (short)Integer.parseInt(XseedINI.getMsgTimer(),10);
        GLB.SERVER = XseedINI.getServer();		
        GLB.SYSTEMDIR = XseedINI.getSystemPath();
        GLB.STN  = XseedINI.getSTN();
        GLB.TARGETOS = XseedINI.getTargetOS();
        GLB.TEMPDIR = XseedINI.getTempPath();
        GLB.USERCODE = XseedINI.getUserCode();
        GLB.DBTYPE = XseedINI.getDBType();
   }
   catch (Exception e)
   {
      ShowErrorMsg (e,"readXseedIni");
   }
}


public CGR032 (
     String pWFLFile)
{
    try
    {   // Default Values
		
        GLB.FILESDIR = "FILES";
        GLB.AUDITDIR = "AUDIT";
        GLB.BACKUPDIR = "BACKUP";
        GLB.DOCDIR = "DOC";
        GLB.ICONSDIR = "ICONS";
        GLB.TEMPDIR = "TEMP";
        GLB.MSGSDIR = "MSGS";
        GLB.BATCHDIR = "BATCH";
        GLB.EXTRACTSDIR = "EXTRACTS";
        GLB.CLONEAPPDIR = "PACKAGE";
        GLB.CLONERTSDIR = "RTSPACKAGE";
        GLB.STN  = "XSEED";
        GLB.USERCODE = "XSEED";		
        GLB.INITSTN = "XSEED";
	GLB.WFL = true;

        readXseedIni();

        readWFL(pWFLFile);

    }
    catch(Exception e)
    {
    }
}

public String getReportFilename()
{
    return(GLB.ReportFilename);
}

public String getParameters()
{
    return(GLB.PARAM);
}

public void run()
{
    try
    {
        runReport();   		
    }
    catch (Exception e)
    {
    }
}


public int runReport()
{
    try
    {
    GLB.PARAM = format(GLB.PARAM, 2000);
    GLB.REPNAME = "CGR032";
    if ( (GLB.LSN.trim()).equals("") == true)
    {  GLB.LSN = "0";
    }
    InitialSettings();

         AuditBOP();

    trace("#Xseed - OpenPrintFiles  ---RUNREPORT","START");
    OpenPrintFiles();
    trace("#Xseed - OpenPrintFiles","end");
    trace("#Xseed - OpenFiles","START");
    OpenFiles();
    trace("#Xseed - OpenFiles","END");

    AuditBOT();
    trace("#Xseed - Logic","START");
    Logic();
    trace("#Xseed - Logic","end");
    AuditEOT();
    trace("#Xseed - ClosePrintFiles","START");
    ClosePrintFiles();
    trace("#Xseed - ClosePrintFiles","end");

    trace("#Xseed - CommitTransaction","Stat");

    CommitTransaction();
    trace("#Xseed - CommitTransaction","end");
    trace("#Xseed - CloseFiles","start");

    CloseFiles();
    trace("#Xseed - CloseFiles","end");


    if ((((GLB.DEVICE.trim()).toUpperCase()).equals("RP") == true) || (((GLB.DEVICE.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORT == true)
        {   GLB.SHADOW = " ";
            P_PRINTER ();
        }
     }
     else if (((GLB.DEVICE.trim()).toUpperCase()).equals("VD") == true)
     {  if (GLB.INITREPORT == true)
        {   GLB.SHADOW = " ";
            P_VIDEO();
        }
     }
     else
     {   if (GLB.INITREPORT == true)
         {   GLB.SHADOW = " ";
             P_LINEPRINTER();
          }
    }
    if ( (((GLB.DEVICEB.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEB.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEB.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEB.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEB = GLB.DEVICE;
    }
    if ((((GLB.DEVICEB.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEB.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTB == true)
        {  GLB.SHADOW = fix("B",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEB.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTB == true)
        {   GLB.SHADOW = fix("B",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTB == true)
        {   GLB.SHADOW = fix("B",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEC.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEC.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEC.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEC.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEC = GLB.DEVICE;
    }
    if ((((GLB.DEVICEC.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEC.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTC == true)
        {  GLB.SHADOW = fix("C",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEC.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTC == true)
        {   GLB.SHADOW = fix("C",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTC == true)
        {   GLB.SHADOW = fix("C",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICED.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICED.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICED.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICED.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICED = GLB.DEVICE;
    }
    if ((((GLB.DEVICED.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICED.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTD == true)
        {  GLB.SHADOW = fix("D",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICED.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTD == true)
        {   GLB.SHADOW = fix("D",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTD == true)
        {   GLB.SHADOW = fix("D",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEE.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEE.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEE.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEE.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEE = GLB.DEVICE;
    }
    if ((((GLB.DEVICEE.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEE.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTE == true)
        {  GLB.SHADOW = fix("E",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEE.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTE == true)
        {   GLB.SHADOW = fix("E",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTE == true)
        {   GLB.SHADOW = fix("E",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEF.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEF.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEF.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEF.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEF = GLB.DEVICE;
    }
    if ((((GLB.DEVICEF.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEF.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTF == true)
        {  GLB.SHADOW = fix("F",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEF.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTF == true)
        {   GLB.SHADOW = fix("F",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTF == true)
        {   GLB.SHADOW = fix("F",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEG.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEG.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEG.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEG.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEG = GLB.DEVICE;
    }
    if ((((GLB.DEVICEG.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEG.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTG == true)
        {  GLB.SHADOW = fix("G",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEG.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTG == true)
        {   GLB.SHADOW = fix("G",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTG == true)
        {   GLB.SHADOW = fix("G",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEH.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEH.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEH.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEH.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEH = GLB.DEVICE;
    }
    if ((((GLB.DEVICEH.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEH.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTH == true)
        {  GLB.SHADOW = fix("H",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEH.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTH == true)
        {   GLB.SHADOW = fix("H",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTH == true)
        {   GLB.SHADOW = fix("H",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEI.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEI.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEI.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEI.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEI = GLB.DEVICE;
    }
    if ((((GLB.DEVICEI.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEI.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTI == true)
        {  GLB.SHADOW = fix("I",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEI.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTI == true)
        {   GLB.SHADOW = fix("I",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTI == true)
        {   GLB.SHADOW = fix("I",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEJ.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEJ.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEJ.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEJ.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEJ = GLB.DEVICE;
    }
    if ((((GLB.DEVICEJ.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEJ.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTJ == true)
        {  GLB.SHADOW = fix("J",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEJ.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTJ == true)
        {   GLB.SHADOW = fix("J",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTJ == true)
        {   GLB.SHADOW = fix("J",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEL.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEL.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEL.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEL.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEL = GLB.DEVICE;
    }
    if ((((GLB.DEVICEL.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEL.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTL == true)
        {  GLB.SHADOW = fix("L",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEL.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTL == true)
        {   GLB.SHADOW = fix("L",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTL == true)
        {   GLB.SHADOW = fix("L",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEM.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEM.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEM.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEM.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEM = GLB.DEVICE;
    }
    if ((((GLB.DEVICEM.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEM.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTM == true)
        {  GLB.SHADOW = fix("M",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEM.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTM == true)
        {   GLB.SHADOW = fix("M",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTM == true)
        {   GLB.SHADOW = fix("M",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEN.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEN.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEN.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEN.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEN = GLB.DEVICE;
    }
    if ((((GLB.DEVICEN.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEN.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTN == true)
        {  GLB.SHADOW = fix("N",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEN.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTN == true)
        {   GLB.SHADOW = fix("N",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTN == true)
        {   GLB.SHADOW = fix("N",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEO.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEO.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEO.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEO.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEO = GLB.DEVICE;
    }
    if ((((GLB.DEVICEO.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEO.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTO == true)
        {  GLB.SHADOW = fix("O",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEO.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTO == true)
        {   GLB.SHADOW = fix("O",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTO == true)
        {   GLB.SHADOW = fix("O",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEP.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEP.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEP.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEP.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEP = GLB.DEVICE;
    }
    if ((((GLB.DEVICEP.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEP.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTP == true)
        {  GLB.SHADOW = fix("P",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEP.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTP == true)
        {   GLB.SHADOW = fix("P",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTP == true)
        {   GLB.SHADOW = fix("P",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEQ.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEQ.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEQ.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEQ.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEQ = GLB.DEVICE;
    }
    if ((((GLB.DEVICEQ.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEQ.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTQ == true)
        {  GLB.SHADOW = fix("Q",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEQ.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTQ == true)
        {   GLB.SHADOW = fix("Q",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTQ == true)
        {   GLB.SHADOW = fix("Q",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICER.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICER.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICER.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICER.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICER = GLB.DEVICE;
    }
    if ((((GLB.DEVICER.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICER.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTR == true)
        {  GLB.SHADOW = fix("R",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICER.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTR == true)
        {   GLB.SHADOW = fix("R",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTR == true)
        {   GLB.SHADOW = fix("R",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICES.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICES.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICES.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICES.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICES = GLB.DEVICE;
    }
    if ((((GLB.DEVICES.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICES.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTS == true)
        {  GLB.SHADOW = fix("S",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICES.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTS == true)
        {   GLB.SHADOW = fix("S",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTS == true)
        {   GLB.SHADOW = fix("S",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEZ.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEZ.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEZ.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEZ.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEZ = GLB.DEVICE;
    }
    if ((((GLB.DEVICEZ.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEZ.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTZ == true)
        {  GLB.SHADOW = fix("Z",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEZ.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTZ == true)
        {   GLB.SHADOW = fix("Z",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTZ == true)
        {   GLB.SHADOW = fix("Z",1);
            P_LINEPRINTER();
         }
    }

    AuditEOP();
    AuditEOJ();
    trace("#Xseed - END ", "END ");

    return(0);
    }
    catch (Exception e)
    {
        if (routineErrorMsg.equals("") == true)
	    { 	
	       routineErrorMsg = e.getMessage();	
	       routineErrorName = "runReport";
        }	
	
        abortTransaction(" Fatal Error on " + routineErrorName + ": " + routineErrorMsg);
	
        if (GLB.TASK==51) return (-2);
        else if (GLB.TASK==52) return (-3);
        else if (GLB.TASK==53) return (-4);
        else if (GLB.TASK==54) return (-5);
        else return(-1);
    }
}


public int runSync()
{
    try
    {

    GLB.REPNAME = "CGR032";
    if ( (GLB.LSN.trim()).equals("") == true)
    {  GLB.LSN = "0";
    }
    InitialSettings();

    AuditBOP();

    trace("#Xseed - RUNSYNC","START");
   
    OpenPrintFiles();
    trace("#Xseed - OpenPrintFiles","END");
    OpenFiles();
    trace("#Xseed - OpenFiles","END");

    AuditBOT();
    trace("#Xseed - Logic","START");
    Logic();
    trace("#Xseed - Logic","END");
    AuditEOT();
    trace("#Xseed - ClosePrintFiles","START");
    ClosePrintFiles();
    trace("#Xseed - ClosePrintFiles","END");

    trace("#Xseed - CommitTransaction","START");
    CommitTransaction();
    trace("#Xseed - CommitTransaction","END");
    CloseFiles();
    trace("#Xseed - CloseFiles","END");

    if ((((GLB.DEVICE.trim()).toUpperCase()).equals("RP") == true) || (((GLB.DEVICE.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORT == true)
        {   GLB.SHADOW = " ";
            P_PRINTER ();
        }
     }
     else if (((GLB.DEVICE.trim()).toUpperCase()).equals("VD") == true)
     {  if (GLB.INITREPORT == true)
        {   GLB.SHADOW = " ";
            P_VIDEO();
        }
     }
     else
     {   if (GLB.INITREPORT == true)
         {   GLB.SHADOW = " ";
             P_LINEPRINTER();
          }
    }
    if ( (((GLB.DEVICEB.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEB.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEB.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEB.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEB = GLB.DEVICE;
    }
    if ((((GLB.DEVICEB.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEB.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTB == true)
        {  GLB.SHADOW = fix("B",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEB.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTB == true)
        {   GLB.SHADOW = fix("B",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTB == true)
        {   GLB.SHADOW = fix("B",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEC.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEC.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEC.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEC.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEC = GLB.DEVICE;
    }
    if ((((GLB.DEVICEC.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEC.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTC == true)
        {  GLB.SHADOW = fix("C",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEC.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTC == true)
        {   GLB.SHADOW = fix("C",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTC == true)
        {   GLB.SHADOW = fix("C",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICED.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICED.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICED.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICED.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICED = GLB.DEVICE;
    }
    if ((((GLB.DEVICED.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICED.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTD == true)
        {  GLB.SHADOW = fix("D",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICED.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTD == true)
        {   GLB.SHADOW = fix("D",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTD == true)
        {   GLB.SHADOW = fix("D",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEE.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEE.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEE.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEE.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEE = GLB.DEVICE;
    }
    if ((((GLB.DEVICEE.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEE.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTE == true)
        {  GLB.SHADOW = fix("E",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEE.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTE == true)
        {   GLB.SHADOW = fix("E",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTE == true)
        {   GLB.SHADOW = fix("E",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEF.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEF.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEF.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEF.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEF = GLB.DEVICE;
    }
    if ((((GLB.DEVICEF.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEF.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTF == true)
        {  GLB.SHADOW = fix("F",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEF.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTF == true)
        {   GLB.SHADOW = fix("F",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTF == true)
        {   GLB.SHADOW = fix("F",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEG.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEG.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEG.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEG.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEG = GLB.DEVICE;
    }
    if ((((GLB.DEVICEG.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEG.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTG == true)
        {  GLB.SHADOW = fix("G",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEG.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTG == true)
        {   GLB.SHADOW = fix("G",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTG == true)
        {   GLB.SHADOW = fix("G",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEH.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEH.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEH.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEH.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEH = GLB.DEVICE;
    }
    if ((((GLB.DEVICEH.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEH.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTH == true)
        {  GLB.SHADOW = fix("H",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEH.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTH == true)
        {   GLB.SHADOW = fix("H",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTH == true)
        {   GLB.SHADOW = fix("H",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEI.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEI.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEI.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEI.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEI = GLB.DEVICE;
    }
    if ((((GLB.DEVICEI.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEI.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTI == true)
        {  GLB.SHADOW = fix("I",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEI.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTI == true)
        {   GLB.SHADOW = fix("I",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTI == true)
        {   GLB.SHADOW = fix("I",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEJ.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEJ.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEJ.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEJ.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEJ = GLB.DEVICE;
    }
    if ((((GLB.DEVICEJ.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEJ.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTJ == true)
        {  GLB.SHADOW = fix("J",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEJ.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTJ == true)
        {   GLB.SHADOW = fix("J",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTJ == true)
        {   GLB.SHADOW = fix("J",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEL.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEL.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEL.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEL.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEL = GLB.DEVICE;
    }
    if ((((GLB.DEVICEL.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEL.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTL == true)
        {  GLB.SHADOW = fix("L",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEL.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTL == true)
        {   GLB.SHADOW = fix("L",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTL == true)
        {   GLB.SHADOW = fix("L",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEM.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEM.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEM.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEM.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEM = GLB.DEVICE;
    }
    if ((((GLB.DEVICEM.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEM.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTM == true)
        {  GLB.SHADOW = fix("M",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEM.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTM == true)
        {   GLB.SHADOW = fix("M",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTM == true)
        {   GLB.SHADOW = fix("M",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEN.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEN.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEN.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEN.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEN = GLB.DEVICE;
    }
    if ((((GLB.DEVICEN.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEN.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTN == true)
        {  GLB.SHADOW = fix("N",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEN.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTN == true)
        {   GLB.SHADOW = fix("N",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTN == true)
        {   GLB.SHADOW = fix("N",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEO.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEO.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEO.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEO.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEO = GLB.DEVICE;
    }
    if ((((GLB.DEVICEO.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEO.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTO == true)
        {  GLB.SHADOW = fix("O",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEO.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTO == true)
        {   GLB.SHADOW = fix("O",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTO == true)
        {   GLB.SHADOW = fix("O",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEP.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEP.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEP.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEP.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEP = GLB.DEVICE;
    }
    if ((((GLB.DEVICEP.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEP.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTP == true)
        {  GLB.SHADOW = fix("P",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEP.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTP == true)
        {   GLB.SHADOW = fix("P",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTP == true)
        {   GLB.SHADOW = fix("P",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEQ.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEQ.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEQ.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEQ.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEQ = GLB.DEVICE;
    }
    if ((((GLB.DEVICEQ.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEQ.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTQ == true)
        {  GLB.SHADOW = fix("Q",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEQ.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTQ == true)
        {   GLB.SHADOW = fix("Q",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTQ == true)
        {   GLB.SHADOW = fix("Q",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICER.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICER.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICER.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICER.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICER = GLB.DEVICE;
    }
    if ((((GLB.DEVICER.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICER.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTR == true)
        {  GLB.SHADOW = fix("R",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICER.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTR == true)
        {   GLB.SHADOW = fix("R",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTR == true)
        {   GLB.SHADOW = fix("R",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICES.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICES.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICES.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICES.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICES = GLB.DEVICE;
    }
    if ((((GLB.DEVICES.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICES.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTS == true)
        {  GLB.SHADOW = fix("S",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICES.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTS == true)
        {   GLB.SHADOW = fix("S",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTS == true)
        {   GLB.SHADOW = fix("S",1);
            P_LINEPRINTER();
         }
    }
    if ( (((GLB.DEVICEZ.trim()).toUpperCase()).equals("RP") == false) &&
         (((GLB.DEVICEZ.trim()).toUpperCase()).equals("TP") == false) &&
         (((GLB.DEVICEZ.trim()).toUpperCase()).equals("VD") == false) &&
         (((GLB.DEVICEZ.trim()).toUpperCase()).equals("LP") == false))
    {   GLB.DEVICEZ = GLB.DEVICE;
    }
    if ((((GLB.DEVICEZ.trim()).toUpperCase()).equals("RP") == true) ||
        (((GLB.DEVICEZ.trim()).toUpperCase()).equals("TP") == true))
    {   if (GLB.INITREPORTZ == true)
        {  GLB.SHADOW = fix("Z",1);
           P_PRINTER();
        }
    }
    else if (((GLB.DEVICEZ.trim()).toUpperCase()).equals("VD") == true)
    {   if (GLB.INITREPORTZ == true)
        {   GLB.SHADOW = fix("Z",1);
            P_VIDEO();
        }
    }
    else
    {   if (GLB.INITREPORTZ == true)
        {   GLB.SHADOW = fix("Z",1);
            P_LINEPRINTER();
         }
    }

    AuditEOP();
    AuditEOJ();
    trace("#Xseed - RUNSYB","END END");
    return(0);
    }
    catch (Exception e)
    {
        if (routineErrorMsg.equals("") == true)
	    { 	
	       routineErrorMsg = e.getMessage();	
	       routineErrorName = "runSync";
        }	
	
        abortTransaction(" Fatal Error on " + routineErrorName + ": " + routineErrorMsg);
	
        if (GLB.TASK==51) return (-2);
        else if (GLB.TASK==52) return (-3);
        else if (GLB.TASK==53) return (-4);
        else if (GLB.TASK==54) return (-5);
        else return(-1);
    }
}



private void Logic ()
    throws Exception
{
    try
    {
    	
        trace("#Xseed - start logic","START");
        
//:: Begin Insertable GlbLogic GSI001
//:-----------------------------------------------------------------
//: LOGICA INSERIDA NO INICIO DOS REPORTS
//:-----------------------------------------------------------------
    SDTHINEXEC = 0;
    GSDDSFECPAR = move(GLB.SPACES, GSDDSFECPAR, 1);
    GLB.PARAM = GLB.PARAM.replaceAll("~"," ");
    GSDDSFECPAR = ")";
    GSDDSPARREP = move(GLB.PARAM, GSDDSPARREP, 192);
    GSDDSPARREP_GROUP();
    if( ((rTrim(GSDCDCOMAND)).equals(rTrim("AUTO"))==true))
    {
        message(GLB.SPACES, "<-- Relatório Automático iniciado...");
        GSDNMESTSOL = move(GLB.INITSTN, GSDNMESTSOL, 17);
        GSDNMESTSOL_ITEM();
    }
    GSDCDUSUARI = move(GSICDUSUARI, GSDCDUSUARI, 25);
    GSDCDUSUARI_ITEM();
    GSDCDEMPRES = move (GSICDEMPRES, GSDCDEMPRES, 2, 0,"UNSIGNED");
    GSDCDEMPRES_ITEM();
    GSDCDFILVEN = move (GSICDFILVEN, GSDCDFILVEN, 2, 0,"UNSIGNED");
    GSDCDFILVEN_ITEM();
    GSDNMABREMP = move(GSINMEMPRES, GSDNMABREMP, 16);
    GSDNMABREMP_ITEM();
    GLB.DC_AUX = formatDC(GLB.TODAYS_DATE_NUM, "999999");
    DCConvert (GLB.DC_AUX, "", 0, "MMDDYY");
    GSDDTSISTEM = move (GLB.DC_DDMMYY, GSDDTSISTEM, 6, 0,"UNSIGNED");
    GSDDTSISTEM_ITEM();
    GSDDISISSEC = move (GLB.DC_CCYYMMDD, GSDDISISSEC, 8, 0,"UNSIGNED");
    GSDDISISSEC_ITEM();
    GSDDTSISSEC = move (GLB.DC_DDMMCCYY, GSDDTSISSEC, 8, 0,"UNSIGNED");
    GSDDTSISSEC_ITEM();
    GSDINPROREF = move (GSIINPROREF, GSDINPROREF, 1, 0,"UNSIGNED");
    GSDINPROREF_ITEM();
    GSDINESTPRO = move (GSIINESTPRO, GSDINESTPRO, 1, 0,"UNSIGNED");
    GSDINESTPRO_ITEM();
    GSDINFILFAT = move (GSIINFILFAT, GSDINFILFAT, 1, 0,"UNSIGNED");
    GSDINFILFAT_ITEM();
    GSDINESTGER = move (GSIINESTGER, GSDINESTGER, 1, 0,"UNSIGNED");
    GSDINESTGER_ITEM();
    GSDNRPARAME = move (format(GSDNRSOLICI ,"999999"), GSDNRPARAME,10);
    GSDNRPARAME_GROUP();
    GLB.BDNAME = move(GSDNMESTSOL, GLB.BDNAME, 255);
    GLB.BDNAME = attach("_", GLB.BDNAME, 255);
    GLB.BDNAME = attach(GLB.REPNAME, GLB.BDNAME, 255);
    GLB.BDNAME = attach("_", GLB.BDNAME, 255);
    GLB.BDNAME = attach(format(GSDNRSOLICI,"999999"), GLB.BDNAME, 255);
    GSDNRREGLID = moveTime();
    GSDNRREGLID_ITEM();
    GSDCDSENHAX = move (format(GSDNRREGLID ,"99999999"), GSDCDSENHAX,45);
    GSDCDSENHAX_ITEM();
    GSDNRUSUARI = move (GLB.ZEROS, GSDNRUSUARI, 4, 0,"UNSIGNED");
    GSDNRUSUARI_ITEM();
    INSERT_GSI002:
    {
        GSDNRULTPAR = move ("9999999999", GSDNRULTPAR, 10);
        GSDNRULTPAR_GROUP();
        SDTHINEXEC = moveTime();
    GSDTHHHMMED = GSDCDSENHAX.substring(0,2) + ":" + GSDCDSENHAX.substring(2,4);
    GSDNRUSUARI = Double.parseDouble(GSDNMESTSOL.substring(0,4));
    String sdNmArqLog = "";
    sdNmArqLog = GLB.BATCHDIR + File.separatorChar + Funcoes.formataNumero(GSDNRSOLICI,"000000") + "_" + Funcoes.formataNumero(GSDCDEMPRES,"00") + "_" + Funcoes.formataNumero(GSDNRUSUARI,"0000") + "_" + GLB.REPNAME.trim() + ".ACT";
    File file1 = new File(GLB.AUDITACT);
    File file2 = new File(sdNmArqLog);
    if (file2.exists())
	  file1.delete();
    else
        file1.renameTo(file2);
    GLB.AUDITACT = sdNmArqLog;
        if( ((rTrim(GSDCDCOMAND)).equals(rTrim("AUTO"))==false))
        {   
        	trace("#Xseed - GS11401_DetermineEvery","Start");
        
            GLB.SECURE = true;
            GLB.STATUS = GS11401_DetermineEvery (GSDNRSOLICI);
            while (GS114_XSEEDEOF == false)
            {   GS11401_DetermineMoveNext();
                if (GS114_XSEEDEOF == true)
                {   break;
                }
                        GLB.STATUS = GS114_Lock ();
                GS114_INSOLICI = flag (5.0, GS114_INSOLICI, 2, 0,"UNSIGNED");
                GS114_Modify ();
                if( (GS114_DIINEXEC == GLB.ZEROS))
                {
                    GS114_DIINEXEC = flag (GLB.DC_CCYYMMDD, GS114_DIINEXEC, 8, 0,"UNSIGNED");
                    GS114_THINEXEC = flag (SDTHINEXEC, GS114_THINEXEC, 8, 0,"UNSIGNED");
                    GS114_Modify ();
                }
                GSDNRULTSOL = move (GS114_NRSOLICI, GSDNRULTSOL, 6, 0,"UNSIGNED");
                GSDNRULTSOL_ITEM();
                break;
            }
            trace("#Xseed - GS11401_DetermineEvery","End");
            
            if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
            {
                message(format(GSDNRSOLICI, "######"), "*** Solicitação não encontrada ***");
                break INSERT_GSI002;
            }
            trace("#Xseed - CommitTransaction","Start 1");
            
            CommitTransaction();
            trace("#Xseed - CommitTransaction","end  1");
            
            message(format(GSDNRSOLICI, "######"), "<-- Solicitação iniciada...");
            if( (((GS114_NRUSUARI != GSDNRUSUARI) || (GS114_CDEMPRES != GSDCDEMPRES)) || ((rTrim(GS114_CDATVREP)).equals(rTrim(GSDCDRELATO))==false)))
            {
                message(GLB.SPACES, GLB.SPACES);
                message(format(GSDNRSOLICI, "######"), "*** SOLICITACAO PERTENCE A OUTRO RELATORIO ***");
                message(GLB.SPACES, GLB.SPACES);
                message(GLB.SPACES, "-- Dados GS114 --");
                message(GS114_CDATVREP, "Relatorio");
                message(format(GS114_CDEMPRES, "##"), "Empresa");
                message(format(GS114_NRUSUARI, "####"), "Usuario");
                message(GLB.SPACES, GLB.SPACES);
                message(GLB.SPACES, "-- Dados execucao --");
                message(GSDCDRELATO, "Relatorio");
                message(format(GSDCDEMPRES, "##"), "Empresa");
                message(format(GSDNRUSUARI, "####"), "Usuario");
                message(GLB.SPACES, GLB.SPACES);
                break INSERT_GSI002;
            }
        }
//:: End Insertable GlbLogic GSI001
        INCGR032:
        {
            CONTINUA:
            {
                GRCDNATTRA_ITEM();
//: --- VARIAVEIS PARA ENVIAR E-MAIL -------
//:-----------------------------------------
                SDINEMILIV = move (GLB.ZEROS, SDINEMILIV, 1, 0,"UNSIGNED");
                GLB.SECURE = false;
                trace("#Xseed - GS12502_DetermineGroupFrom","Start  1");
                GLB.STATUS = GS12502_DetermineGroupFrom (2, false, GLB.SPACES, GLB.ZEROS, GSDNRPARAME, GLB.SPACES, GLB.ZEROS, GSDNRPARAME);
                while (GS125_XSEEDEOF == false)
                {
                    GS12502_DetermineMoveNext ();
                    if (GS125_XSEEDEOF == true)
                    {    break;
                    }
                    GSDNRPARAME = move(GS125_CDELEMTO, GSDNRPARAME, 10);
                    GSDNRPARAME_GROUP();
                    if( (GSDNRSOLREL != GSDNRSOLICI))
                    {
                        break;
                    }
                    GSDDSELEMEN = move(GS125_DSELEMEN, GSDDSELEMEN, 30);
                    GSDVLELEMEN = move (GS125_VLELEMEN, GSDVLELEMEN, 16, 0,"UNSIGNED");
                    if (GSDNRPARREL == 1.0)
                    {
                        AXINMESPER = move (GSDVLELEMEN, AXINMESPER, 1, 0,"UNSIGNED");
                    }
                    else
                    if (GSDNRPARREL == 2.0)
                    {
                        AXAMREFERE = move (GSDVLELEMEN, AXAMREFERE, 6, 0,"UNSIGNED");
                    }
                    else
                    if (GSDNRPARREL == 3.0)
                    {
                        AXDIINICIO = move (GSDVLELEMEN, AXDIINICIO, 8, 0,"UNSIGNED");
                    }
                    else
                    if (GSDNRPARREL == 4.0)
                    {
                        AXDIFINALX = move (GSDVLELEMEN, AXDIFINALX, 8, 0,"UNSIGNED");
                    }
                    else
                    if (GSDNRPARREL == 5.0)
                    {
                        AXTPRELATO = move (GSDVLELEMEN, AXTPRELATO, 1, 0,"UNSIGNED");
                    }
                    else
                    if (GSDNRPARREL == 6.0)
                    {
                        AXINATUALI = move (GSDVLELEMEN, AXINATUALI, 1, 0,"UNSIGNED");
                    }
                    else
                    if (GSDNRPARREL == 7.0)
                    {
                        AXINIMPPCL = move(GSDDSELEMEN, AXINIMPPCL, 1);
                    }
                    else
                    if (GSDNRPARREL == 8.0)
                    {
                        AXCDFILIAL = move (GSDVLELEMEN, AXCDFILIAL, 2, 0,"UNSIGNED");
                    }
                    else
                    if (GSDNRPARREL == 9.0)
                    {
                        AXINSEPDEP = move(GSDDSELEMEN, AXINSEPDEP, 1);
                    }
                    else
                    if (GSDNRPARREL == 10.0)
                    {
                        AXINBACDET = move(GSDDSELEMEN, AXINBACDET, 1);
                    }
                }
                
                trace("#Xseed - GS12502_DetermineGroupFrom","End  1");
                
                if( (AXAMREFERE != GLB.ZEROS))
                {
                    GSDDIAMSAMD = move (format(AXAMREFERE ,"999999"), GSDDIAMSAMD,6);
                    GSDDIAMSAMD_ITEM();
                    GSDDIAMSAMD_GROUP();
                    GSDDIDDSAMD = move ("01", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                    GSDDIDDSAMD_ITEM();
                    AXDIINICIO = move (GSDDIDISAMD, AXDIINICIO, 8, 0,"UNSIGNED");
                    GSDDIMMSAMD = add(cDec("1"), GSDDIMMSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                    GSDDIMMSAMD_ITEM();
                    if( (GSDDIMMSAMD == 13.0))
                    {
                        GSDDIMMSAMD = move ("1", GSDDIMMSAMD, 2, 0,"UNSIGNED");
                        GSDDIMMSAMD_ITEM();
                        GSDDIAASAMD = add(cDec("1"), GSDDIAASAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                        GSDDIAASAMD_ITEM();
                        if( (GSDDIAASAMD == GLB.ZEROS))
                        {
                            GSDDISSSAMD = add(cDec("1"), GSDDISSSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                            GSDDISSSAMD_ITEM();
                        }
                    }
                    GLB.DC_AUX = GSDDIDISAMD;
                    DCConvert (GLB.DC_AUX, "-", 1.0, "CCYYMMDD");
                    AXDIFINALX = move (GLB.DC_CCYYMMDD, AXDIFINALX, 8, 0,"UNSIGNED");
                }
                if( (AXINMESPER == GLB.ZEROS))
                {
                    break INSERT_GSI002;
                }
                GLB.TITLE = move("CGR032", GLB.TITLE, 60);
                GLB.TITLEB = move("CGR032B", GLB.TITLEB, 60);
                GLB.TITLEC = move("CGR032C", GLB.TITLEC, 60);
                GLB.TITLED = move("CGR032D", GLB.TITLED, 60);
                GLB.TITLEE = move("DEPTO", GLB.TITLEE, 60);
                GLB.TITLEF = move("UF", GLB.TITLEF, 60);
                GLB.TITLEG = move("ST", GLB.TITLEG, 60);
                GLB.TITLEH = move("TERMOS", GLB.TITLEH, 60);
                GLB.TITLEI = move("CONSUM", GLB.TITLEI, 60);
                GLB.TITLEJ = move("PERC", GLB.TITLEJ, 60);
                GLB.TITLEL = move("PRODEPE", GLB.TITLEL, 60);
                GLB.TITLEM = move("CLAS-CD", GLB.TITLEM, 60);
                GLB.TITLEN = move("NAOINCE", GLB.TITLEN, 60);
                GLB.TITLEO = move("DIAT", GLB.TITLEO, 60);
                GLB.TITLEP = move("CREICMS", GLB.TITLEP, 60);
                GLB.TITLEQ = move("DIFAL", GLB.TITLEQ, 60);
                if( (GSDCDEMPRES == 1.0))
                {
                    GLB.TITLER = move("CREICMS-DIFAL", GLB.TITLER, 60);
                    beginPage("R","111");
                    GLB.FORMDEPTHR = move ("63", GLB.FORMDEPTHR, 3, 0,"UNSIGNED");
                }
                if( (GSDCDEMPRES == 2.0))
                {
                    GLB.TITLES = move("NCM-INTERNO", GLB.TITLES, 60);
                    beginPage("S","121");
                    GLB.FORMDEPTHS = move ("63", GLB.FORMDEPTHS, 3, 0,"UNSIGNED");
                }
                GLB.TITLEZ = move("ERROS", GLB.TITLEZ, 60);
                beginPage(" ","1");
                beginPage("C","51");
                beginPage("D","71");
                beginPage("E","55");
                beginPage("Z","95");
                beginPage("F","46");
                beginPage("G","36");
                beginPage("I","64");
                beginPage("J","74");
                beginPage("L","21");
                beginPage("M","24");
                beginPage("N","27");
                beginPage("O","77");
                beginPage("P","81");
                beginPage("Q","101");
                GLB.FORMDEPTH = move ("63", GLB.FORMDEPTH, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHB = move ("63", GLB.FORMDEPTHB, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHC = move ("63", GLB.FORMDEPTHC, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHD = move ("63", GLB.FORMDEPTHD, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHE = move ("63", GLB.FORMDEPTHE, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHF = move ("63", GLB.FORMDEPTHF, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHG = move ("63", GLB.FORMDEPTHG, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHH = move ("63", GLB.FORMDEPTHH, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHI = move ("63", GLB.FORMDEPTHI, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHJ = move ("63", GLB.FORMDEPTHJ, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHL = move ("63", GLB.FORMDEPTHL, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHM = move ("63", GLB.FORMDEPTHM, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHN = move ("63", GLB.FORMDEPTHN, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHO = move ("63", GLB.FORMDEPTHO, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHQ = move ("63", GLB.FORMDEPTHQ, 3, 0,"UNSIGNED");
                GLB.FORMDEPTHZ = move ("63", GLB.FORMDEPTHZ, 3, 0,"UNSIGNED");
                SDCDCTDBTE = move ("21644", SDCDCTDBTE, 6, 0,"UNSIGNED");
                SDCDCTCRTE = move ("40878", SDCDCTCRTE, 6, 0,"UNSIGNED");
                SDCDHISTOR = move ("884", SDCDHISTOR, 4, 0,"UNSIGNED");
                SDNRLINHAS = move ("57", SDNRLINHAS, 3, 0,"UNSIGNED");
                if( ((rTrim(AXINIMPPCL)).equals(rTrim("S"))==true))
                {
                    GLB.FORMDEPTH = move ("126", GLB.FORMDEPTH, 3, 0,"UNSIGNED");
GLB.FORMDEPTH = move ("126", GLB.FORMDEPTH, 3, 0,"UNSIGNED");
                    SDNRLINHAS = move ("120", SDNRLINHAS, 3, 0,"UNSIGNED");
                    GLB.TITLE = move("PCL-1220", GLB.TITLE, 60);
                    GLB.TITLEB = move("PCL-0617", GLB.TITLEB, 60);
                    GLB.TITLEC = move("PCL-0617", GLB.TITLEC, 60);
                    GLB.TITLED = move("PCL-0617", GLB.TITLED, 60);
                    GLB.TITLEF = move("PCL-0617", GLB.TITLEF, 60);
                }
                GSDCDDOITEM = move("TBPARGER", GSDCDDOITEM, 8);
                GSDCDELEALF = move("INBANTES", GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
                GSP004 ();
                if (GLB.EXIT==true)
                {
                   GLB.EXIT=false;
                    return;
                }
                SDINBANTES = move (GSDVLELEMEN, SDINBANTES, 1, 0,"UNSIGNED");
                GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
                GSDCDELEALF = move("INCGR032", GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
                GSDINITEMOK = move ("2", GSDINITEMOK, 1, 0,"UNSIGNED");
                GSP004 ();
                if (GLB.EXIT==true)
                {
                   GLB.EXIT=false;
                    return;
                }
                if (GSDINITEMOK == 1.0)
                {
                	  trace("#Xseed - GS125_InitAuto","Start  1");
                    GS125_InitAuto();
                    AU_GS125_CDDOITEM = auto(GSDCDDOITEM, AU_GS125_CDDOITEM, 8);
                    AU_GS125_CDELEMTO = auto(GSDCDELEALF, AU_GS125_CDELEMTO, 10);
                    AU_GS125_CDEMPRES = auto (GSDCDEMPRES, AU_GS125_CDEMPRES, 2, 0,"UNSIGNED");
                    AU_GS125_DSELEMEN = auto(GSDCDRELATO, AU_GS125_DSELEMEN, 30);
                    AU_GS125_VLELEMEN = auto (GSDNRSOLICI, AU_GS125_VLELEMEN, 16, 0,"SIGNED");
                    if ((GLB.ERROR.trim()).equals("")==true)
                    {
                    	trace("#Xseed - GS125_AutoToFile","Start  1");
                        GS125_AutoToFile();
                        trace("#Xseed - GS125_Insert","Start  1");
                        GS125_Insert ();
                        trace("#Xseed - GS125_Insert","End  1");
                    }
                }
                else
                if (GSDINITEMOK == 0.0)
                {
                    if( (equals(GSDVLELEMEN,GSDNRSOLICI) == false))
                    {
                        F96_RLDSOCORRE = move("EXISTE OUTRO CGR032 EXECUTANDO", F96_RLDSOCORRE, 45);
                        GLB.SHADOW = "Z";
                        P_96("PRINT.FRAME");
                        F96_RLDSOCORRE = move("PROG. NAO PODE SER EXECUTADO", F96_RLDSOCORRE, 45);
                        GLB.SHADOW = "Z";
                        P_96("PRINT.FRAME");
                        if( (SDINBANTES == GLB.ZEROS))
                        {
                            ENVIA_EMAIL_ATENDIMENTO ();
                            if (GLB.EXIT==true)
                            {
                               GLB.EXIT=false;
                                return;
                            }
                        }
                        break INSERT_GSI002;
                    }
                }
                trace("#Xseed - CommitTransaction","Star 2");
                CommitTransaction();
                trace("#Xseed - CommitTransaction","End 2");
//:---------------------------------------------------------------
//:TABELA P/ ACUMULAR BASE CALCULO E ICM TRIBUTADO POR NATUREZA DE
//:OPERACAO PARA CALCULO DO ICM POR NATUREZA AO FINAL DA NOTA
//:---------------------------------------------------------------
                ITCDNATOPE = 0;
                for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBCDNATOPE.length ; GLB.ARRAYIDX1++)
                {                    TBCDNATOPE[GLB.ARRAYIDX1] = 0;
                }
                ITCDNATOPE = 0;
                for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBCDNATCOM.length ; GLB.ARRAYIDX1++)
                {                    TBCDNATCOM[GLB.ARRAYIDX1] = 0;
                }
                ITCDNATOPE = 0;
                for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBCDOCONAT.length ; GLB.ARRAYIDX1++)
                {                    TBCDOCONAT[GLB.ARRAYIDX1] = 0;
                }
                ITCDNATOPE = 0;
                for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBVLBASICM.length ; GLB.ARRAYIDX1++)
                {                    TBVLBASICM[GLB.ARRAYIDX1] = 0;
                }
                ITCDNATOPE = 0;
                for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBVLICMNAT.length ; GLB.ARRAYIDX1++)
                {                    TBVLICMNAT[GLB.ARRAYIDX1] = 0;
                }
                ITCDNATOPE = 0;
                for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBPCICMNAT.length ; GLB.ARRAYIDX1++)
                {                    TBPCICMNAT[GLB.ARRAYIDX1] = 0;
                }
                ITCDNATOPE = 0;
                for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBNRCONTAX.length ; GLB.ARRAYIDX1++)
                {                    TBNRCONTAX[GLB.ARRAYIDX1] = 0;
                }
                ITCDNATOPE = 0;
                for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBVLBASSTR.length ; GLB.ARRAYIDX1++)
                {                    TBVLBASSTR[GLB.ARRAYIDX1] = 0;
                }
                ITCDNATOPE = 0;
                for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBVLICMSTR.length ; GLB.ARRAYIDX1++)
                {                    TBVLICMSTR[GLB.ARRAYIDX1] = 0;
                }
//:---------------------- INICIALIZA ARQUIVO ------------------------
                message(GLB.SPACES, "LIMPANDO ARQUIVO AUXILIAR CG133");
                GSDDSCOMAND = move("DELETE /*CGR032*/ FROM CG133 WHERE CG133.CDEMPRES=", GSDDSCOMAND, 10000);
                GSDDSCOMAND = attach(format(GSDCDEMPRES,"99"), GSDDSCOMAND, 10000);
                trace("#Xseed -  sqlExec(GSDDSCOMAND)-->" + GSDDSCOMAND.toString() , "Star 1");
                sqlExec(GSDDSCOMAND);
                trace("#Xseed -  sqlExec(GSDDSCOMAND)-->" , "End ");
                message(GLB.SPACES, "LIMPANDO ARQUIVO AUXILIAR CG168");
                GSDDSCOMAND = move("DELETE /*CGR032*/ FROM CG168 WHERE CG168.CDEMPRES=", GSDDSCOMAND, 10000);
                GSDDSCOMAND = attach(format(GSDCDEMPRES,"99"), GSDDSCOMAND, 10000);
                trace("#Xseed -  sqlExec(GSDDSCOMAND)-->" + GSDDSCOMAND.toString() , "Star2 ");
                sqlExec(GSDDSCOMAND);
                trace("#Xseed -  sqlExec(GSDDSCOMAND)-->" , "End ");
              
//:---------------------------------------------------------------
//:CARREGA TABELA DOS PRODUTOS NAO TEXTIL, CFE PASSADO PELA CARME
//:---------------------------------------------------------------
                GSDCDDOITEM = move("CDLINTEX", GSDCDDOITEM, 8);
                GLB.SECURE = false;
                trace("#Xseed -  GS12502_DetermineGroupFrom" , "Start ");
                
                GLB.STATUS = GS12502_DetermineGroupFrom (2, false, GSDCDDOITEM, GSDCDEMPRES, format(GLB.ZEROS, "9"), GSDCDDOITEM, GSDCDEMPRES, format(GLB.ZEROS, "9"));
                while (GS125_XSEEDEOF == false)
                {
                    GS12502_DetermineMoveNext ();
                    if (GS125_XSEEDEOF == true)
                    {    break;
                    }
                    GSDCDELEALF = move(GS125_CDELEMTO, GSDCDELEALF, 10);
                    GSDCDELEALF_GROUP();
                    ITCDLINTEX = move (GSDCDELENUM, ITCDLINTEX, 6, 0,"UNSIGNED");
                    TBINTEXTIL[(int)ITCDLINTEX - 1] = move ("1", TBINTEXTIL[(int)ITCDLINTEX - 1], 1, 0,"UNSIGNED");
                }
                trace("#Xseed -  GS12502_DetermineGroupFrom" , "End ");
                
                GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
                GSDCDELEALF = move("NMCONTAD", GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
                GSP004 ();
                if (GLB.EXIT==true)
                {
                   GLB.EXIT=false;
                    return;
                }
                SDNMCONTAD = move(GSDDSELEMEN, SDNMCONTAD, 30);
                GSDCDELEALF = move("NRCRCCON", GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
                GSP004 ();
                if (GLB.EXIT==true)
                {
                   GLB.EXIT=false;
                    return;
                }
                SDNRCRCCON = move(GSDDSELEMEN, SDNRCRCCON, 14);
                GLB.SECURE = false;
                trace("#Xseed -  GS10101_DetermineEvery" , "Start ");
                
                GLB.STATUS = GS10101_DetermineEvery (GSDCDEMPRES, GLB.ZEROS);
                while (GS101_XSEEDEOF == false)
                {   GS10101_DetermineMoveNext();
                    if (GS101_XSEEDEOF == true)
                    {   break;
                    }
                    SDNMEMPRES = move(GS101_NMEMPRES, SDNMEMPRES, 30);
                    SDCDUFLEMP = move(GS101_CDUFLOCA, SDCDUFLEMP, 12);
                    SDNRREGJUN = move (GS101_NRREGJUN, SDNRREGJUN, 14, 0,"UNSIGNED");
                    SDDIREGJUN = move (GS101_DIREGJUN, SDDIREGJUN, 8, 0,"UNSIGNED");
                    break;
                }
                trace("#Xseed -  GS10101_DetermineEvery" , "End ");
                
//:---------------------------------------------------------------------
                if( (AXCDFILIAL <= 1.0))
                {
                    break CONTINUA;
                }
                GLB.SECURE = false;
                trace("#Xseed -  GS10101_DetermineEvery" , "Start AXCDFILIAL ");
                
                GLB.STATUS = GS10101_DetermineEvery (GSDCDEMPRES, AXCDFILIAL);
                while (GS101_XSEEDEOF == false)
                {   GS10101_DetermineMoveNext();
                    if (GS101_XSEEDEOF == true)
                    {   break;
                    }
                    SDNRREGJUN = move (GS101_NRREGJUN, SDNRREGJUN, 14, 0,"UNSIGNED");
                    SDDIREGJUN = move (GS101_DIREGJUN, SDDIREGJUN, 8, 0,"UNSIGNED");
                    break;
                }
                trace("#Xseed***** -  GS10101_DetermineEvery" , "End ");
                
                if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
                {
                    F96_RLCDOCORRE = move (format(AXCDFILIAL ,"99"), F96_RLCDOCORRE,10);
                    F96_RLDSOCORRE = move("FILIAL NAO CADASTRADA", F96_RLDSOCORRE, 45);
                    GLB.SHADOW = "Z";
                    trace("#Xseed***** -  P_96" , "Start ");                    
                    P_96("PRINT.FRAME");
                    trace("#Xseed***** -  P_96" , "End ");
                    break INSERT_GSI002;
                }
                if( ((GSDCDEMPRES == 1.0) && (AXCDFILIAL == 18.0)))
                {
                    SDINFILORI = move ("1", SDINFILORI, 1, 0,"UNSIGNED");
                }
            }
			trace("#Xseed***** -  PONTO1 " , "@@@@@");  
            GSDCDDOITEM = move("TBPARGER", GSDCDDOITEM, 8);
            GSDCDELEALF = move("DSIPSERV", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDDSIPSERV = move(GSDDSELEMEN, SDDSIPSERV, 30);
            GSDCDELEALF = move("SMTPUSER", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDSMTPUSER = move(GSDDSELEMEN, SDSMTPUSER, 30);
            GSDCDELEALF = move("SMTPPASS", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDSMTPPASS = move(GSDDSELEMEN, SDSMTPPASS, 30);
            GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
            GSDCDELEALF = move("DIINITTD", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDDIINITTD = move (GSDVLELEMEN, SDDIINITTD, 8, 0,"UNSIGNED");
            GSDCDELEALF = move("AMLIVRIC", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            if( (AXCDFILIAL > GLB.ZEROS))
            {
                GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
            }
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDINENCERR = move ("1", SDINENCERR, 1, 0,"UNSIGNED");
            if( (GSDINITEMOK == GLB.ZEROS))
            {
                SDINENCERR = move (GLB.ZEROS, SDINENCERR, 1, 0,"UNSIGNED");
                SDAMAPUICM = move (GSDVLELEMEN, SDAMAPUICM, 6, 0,"UNSIGNED");
                if( (SDAMAPUICM >= AXAMREFERE))
                {
                    SDINENCERR = move ("1", SDINENCERR, 1, 0,"UNSIGNED");
                }
            }
            GSDCDELEALF = move("AMREGSAI", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            if( (AXCDFILIAL > GLB.ZEROS))
            {
                GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
            }
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDAMREGSAI = move (GSDVLELEMEN, SDAMREGSAI, 6, 0,"UNSIGNED");
            if( (GSDINITEMOK == 1.0))
            {
                F96_RLCDOCORRE = move(GSDCDELEALF, F96_RLCDOCORRE, 10);
                F96_RLDSOCORRE = move("MES/ANO ULT.REG.SAIDAS NAO CADASTRADO", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                break INSERT_GSI002;
            }
            GSDCDELEALF = move("CDCRFREX", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            if( (AXCDFILIAL != GLB.ZEROS))
            {
                GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
            }
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDCDCRFREX = move (GSDVLELEMEN, SDCDCRFREX, 6, 0,"UNSIGNED");
            GSDCDELEALF = move("CDCRTXFR", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            if( (AXCDFILIAL != GLB.ZEROS))
            {
                GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
            }
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDCDCRTXFR = move (GSDVLELEMEN, SDCDCRTXFR, 6, 0,"UNSIGNED");
            GSDCDELEALF = move("CDTIPFAM", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDCDTIPFBO = move (GSDVLELEMEN, SDCDTIPFBO, 2, 0,"UNSIGNED");
            GSDCDELEALF = move("DINOVRGS", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDDINOVRGS = move (GSDVLELEMEN, SDDINOVRGS, 8, 0,"UNSIGNED");
            if( (GSDINITEMOK == 1.0))
            {
                F96_RLCDOCORRE = move(GSDCDELEALF, F96_RLCDOCORRE, 10);
                F96_RLDSOCORRE = move("DATA NOVO REG. SAIDAS NAO CADASTRADO", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                break INSERT_GSI002;
            }
            GSDCDELEALF = move("DINRSIPI", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDDINRSIPI = move (GSDVLELEMEN, SDDINRSIPI, 8, 0,"UNSIGNED");
            if( (GSDINITEMOK == 1.0))
            {
                F96_RLCDOCORRE = move(GSDCDELEALF, F96_RLCDOCORRE, 10);
                F96_RLDSOCORRE = move("DATA NOVO REG. SAIDAS P/IPI NAO CADASTRADO", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                break INSERT_GSI002;
            }
            GSDCDELEALF = move("DIREGSAI", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            if( (AXCDFILIAL > 1.0))
            {
                GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
            }
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDDIREGSAI = move (GSDVLELEMEN, SDDIREGSAI, 8, 0,"UNSIGNED");
            if( (GSDINITEMOK == 1.0))
            {
                F96_RLCDOCORRE = move(GSDCDELEALF, F96_RLCDOCORRE, 10);
                F96_RLDSOCORRE = move("DATA ULT.REG.SAIDAS IPI NAO CADASTRADO", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                break INSERT_GSI002;
            }
            GSDCDELEALF = move("INCALIPI", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDINCALIPI = move (GSDVLELEMEN, SDINCALIPI, 1, 0,"UNSIGNED");
            if( (GSDINITEMOK == 1.0))
            {
                F96_RLCDOCORRE = move(GSDCDELEALF, F96_RLCDOCORRE, 10);
                F96_RLDSOCORRE = move("IND. CALCULO DESCONTO IPI NAO CADASTRADO", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                break INSERT_GSI002;
            }
            GSDCDELEALF = move("INLIVANU", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            if( (AXCDFILIAL > GLB.ZEROS))
            {
                GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
            }
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDINLIVANU = move (GSDVLELEMEN, SDINLIVANU, 1, 0,"UNSIGNED");
            if( (GSDINITEMOK == 1.0))
            {
                F96_RLCDOCORRE = move(GSDCDELEALF, F96_RLCDOCORRE, 10);
                F96_RLDSOCORRE = move("IND. EMISSAO LIVRO ANUAL NAO CADASTRADO", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                break INSERT_GSI002;
            }
            if( (SDINLIVANU != GLB.ZEROS))
            {
                GSDDIAMSAMD = move (format(AXAMREFERE ,"999999"), GSDDIAMSAMD,6);
                GSDDIAMSAMD_ITEM();
                GSDDIAMSAMD_GROUP();
                if( (GSDDIMMSAMD == 12.0))
                {
                    SDINEMILIV = move ("1", SDINEMILIV, 1, 0,"UNSIGNED");
                }
            }
			trace("#Xseed***** -  PONTO2 " , "@@@@@"); 
//: INDICADOR DE EMPRESA OPTANTE PELO SIMPLES
            GSDCDELEALF = move("INOPTSIM", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDINOPTSIM = move (GSDVLELEMEN, SDINOPTSIM, 1, 0,"UNSIGNED");
//: SERVE PRA DETERMINAR SE A TAXA DE FRETE ENTRARA NA PRIMEIRA CFOP OU
//: NA MESMA CFPO UTILIZADA NO CG111.
            GSDCDELEALF = move("INTXFRET", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDINTXFRET = move (GSDVLELEMEN, SDINTXFRET, 1, 0,"UNSIGNED");
            GSDCDELEALF = move("NRLIVRRS", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            if( (AXCDFILIAL > GLB.ZEROS))
            {
                GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
            }
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDNRLIVRRS = add(cDec("1"), GSDVLELEMEN, SDNRLIVRRS, 3, 0, "UNSIGNED", "TRUNCATE");
            if( (SDINLIVANU != GLB.ZEROS))
            {
                SDNRLIVRRS = move (GSDVLELEMEN, SDNRLIVRRS, 3, 0,"UNSIGNED");
            }
            if( (GSDINITEMOK == 1.0))
            {
                F96_RLCDOCORRE = move(GSDCDELEALF, F96_RLCDOCORRE, 10);
                F96_RLDSOCORRE = move("NR. LIVRO REGISTRO DE SAIDAS NAO CADASTRADO", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                break INSERT_GSI002;
            }
            GSDCDELEALF = move("NRULTPRS", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            if( (AXCDFILIAL > 1.0))
            {
                GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
            }
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDNRULTPRS = move (GSDVLELEMEN, SDNRULTPRS, 3, 0,"UNSIGNED");
            if( (GSDINITEMOK == 1.0))
            {
                F96_RLCDOCORRE = move(GSDCDELEALF, F96_RLCDOCORRE, 10);
                F96_RLDSOCORRE = move("NUMERO ULTIMA PAGINA REG. SAIDAS NAO CADASTRADO", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                break INSERT_GSI002;
            }
            GSDCDELEALF = move("NRLIMPRS", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            if( (AXCDFILIAL > 1.0))
            {
                GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
            }
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDNRLIMPRS = move (GSDVLELEMEN, SDNRLIMPRS, 3, 0,"UNSIGNED");
            if( (GSDINITEMOK == 1.0))
            {
                F96_RLCDOCORRE = move(GSDCDELEALF, F96_RLCDOCORRE, 10);
                F96_RLDSOCORRE = move("NUMERO LIMITE PAGINAS REG.SAIDAS NAO CADASTRADO", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                break INSERT_GSI002;
            }
            GSDCDELEALF = move("TPFATREP", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDTPFATREP = move (GSDVLELEMEN, SDTPFATREP, 2, 0,"UNSIGNED");
            GSDCDELEALF = move("TPNFMANI", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDTPNFMANI = move (GSDVLELEMEN, SDTPNFMANI, 2, 0,"UNSIGNED");
            GSDDIDISAMD = move (format(AXDIINICIO ,"99999999"), GSDDIDISAMD,8);
            GSDDIDISAMD_GROUP();
            if( (AXINMESPER == 1.0))
            {
                GSDDIDISAMD = move (format(GLB.ZEROS ,"99999999"), GSDDIDISAMD,8);
                GSDDIDISAMD_GROUP();
                SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
            }
            SDAMREFERE = move (GSDDIAMSAMD, SDAMREFERE, 6, 0,"UNSIGNED");
//: A PARTIR DE 01/10/2004 O IPI PASSOU A SER MENSAL.
            if( (AXDIINICIO > 20041000.0))
            {
                if (GSDDIDDSAMD == 1.0)
                {
                    GSDDIDISAMD = move (format(AXDIFINALX ,"99999999"), GSDDIDISAMD,8);
                    GSDDIDISAMD_GROUP();
                    if( (GSDDIDDSAMD < 28.0))
                    {
                        SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
                    }
                    SDNRDECEND = move ("1", SDNRDECEND, 1, 0,"UNSIGNED");
                }
                else {
                    SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
                }
            }
            else
            {
//: A PARTIR DE 01/01/2004 O IPI PASSOU A SER QUINZENAL.
                if( (AXDIINICIO > 20040100.0))
                {
                    if (GSDDIDDSAMD == 1.0)
                    {
                        GSDDIDISAMD = move (format(AXDIFINALX ,"99999999"), GSDDIDISAMD,8);
                        GSDDIDISAMD_GROUP();
                        if( (GSDDIDDSAMD != 15.0))
                        {
                            SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
                        }
                        SDNRDECEND = move ("1", SDNRDECEND, 1, 0,"UNSIGNED");
                    }
                    else
                    if (GSDDIDDSAMD == 16.0)
                    {
                        GSDDIDISAMD = move (format(AXDIFINALX ,"99999999"), GSDDIDISAMD,8);
                        GSDDIDISAMD_GROUP();
                        if( (GSDDIDDSAMD < 28.0))
                        {
                            SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
                        }
                        SDNRDECEND = move ("2", SDNRDECEND, 1, 0,"UNSIGNED");
                    }
                    else {
                        SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
                    }
                }
                else
                {
                    if (GSDDIDDSAMD == 1.0)
                    {
                        GSDDIDISAMD = move (format(AXDIFINALX ,"99999999"), GSDDIDISAMD,8);
                        GSDDIDISAMD_GROUP();
                        if( (GSDDIDDSAMD != 10.0))
                        {
                            SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
                        }
                        SDNRDECEND = move ("1", SDNRDECEND, 1, 0,"UNSIGNED");
                    }
                    else
                    if (GSDDIDDSAMD == 11.0)
                    {
                        GSDDIDISAMD = move (format(AXDIFINALX ,"99999999"), GSDDIDISAMD,8);
                        GSDDIDISAMD_GROUP();
                        if( (GSDDIDDSAMD != 20.0))
                        {
                            SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
                        }
                        SDNRDECEND = move ("2", SDNRDECEND, 1, 0,"UNSIGNED");
                    }
                    else
                    if (GSDDIDDSAMD == 21.0)
                    {
                        GSDDIDISAMD = move (format(AXDIFINALX ,"99999999"), GSDDIDISAMD,8);
                        GSDDIDISAMD_GROUP();
                        if( (GSDDIDDSAMD < 28.0))
                        {
                            SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
                        }
                        SDNRDECEND = move ("3", SDNRDECEND, 1, 0,"UNSIGNED");
                    }
                    else {
                        SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
                    }
                }
            }
            GSDCDELEALF = move("AMLIVRIP", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            if( (AXCDFILIAL > 1.0))
            {
                GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
            }
            GSP004 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDINENCIPI = move (GLB.ZEROS, SDINENCIPI, 1, 0,"UNSIGNED");
            if( (GSDINITEMOK == GLB.ZEROS))
            {
                GRAMREFERE = move (format(GSDVLELEMEN ,"9999999999999999"), GRAMREFERE,16);
                GRAMREFERE_GROUP();
                SDAMAPUIPI = move (GEAMREFERE, SDAMAPUIPI, 6, 0,"UNSIGNED");
                if( (SDAMAPUIPI > SDAMREFERE))
                {
                    SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
                }
                if( ((SDAMAPUIPI == cDbl(GSDDIAMSAMD)) && (GENRDECEND >= SDNRDECEND)))
                {
                    SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
                }
            }
			trace("#Xseed***** -  PONTO3 " , "@@@@@"); 
//: so cria apuracao ipi p/ emissao normal
            if( (AXTPRELATO > 1.0))
            {
                SDINENCIPI = move ("1", SDINENCIPI, 1, 0,"UNSIGNED");
            }
            SDDIINICIO = move (AXDIINICIO, SDDIINICIO, 8, 0,"UNSIGNED");
            SDDIFINALX = move (AXDIFINALX, SDDIFINALX, 8, 0,"UNSIGNED");
            if( (AXINMESPER == 1.0))
            {
                if( ((AXAMREFERE < SDAMREGSAI) && (AXINATUALI == 2.0)))
                {
                    F96_RLCDOCORRE = move (format(AXAMREFERE ,"999999"), F96_RLCDOCORRE,10);
                    F96_RLDSOCORRE = move("MES/ANO JA FOI ENCERRADO", F96_RLDSOCORRE, 45);
                    GLB.SHADOW = "Z";
                    P_96("PRINT.FRAME");
                    break INSERT_GSI002;
                }
                if( (((AXTPRELATO == 1.0) && (AXAMREFERE == SDAMREGSAI)) && (AXINATUALI == 2.0)))
                {
                    F96_RLCDOCORRE = move (format(AXAMREFERE ,"999999"), F96_RLCDOCORRE,10);
                    F96_RLDSOCORRE = move("MES/ANO JA FOI ENCERRADO", F96_RLDSOCORRE, 45);
                    GLB.SHADOW = "Z";
                    P_96("PRINT.FRAME");
                    break INSERT_GSI002;
                }
                if( ((AXTPRELATO == 4.0) || (AXTPRELATO == 5.0)))
                {
                    F96_RLCDOCORRE = move (format(AXTPRELATO ,"9"), F96_RLCDOCORRE,10);
                    F96_RLDSOCORRE = move("TIPO EMISSAO INVALIDA P/ RELATORIO MENSAL", F96_RLDSOCORRE, 45);
                    GLB.SHADOW = "Z";
                    P_96("PRINT.FRAME");
                    break INSERT_GSI002;
                }
                if( (AXAMREFERE > SDAMREGSAI))
                {
                    SDVLDIFERE = subtract(SDAMREGSAI, AXAMREFERE, SDVLDIFERE, 2, 0,"UNSIGNED","TRUNCATE");
                    if( ((SDVLDIFERE != 1.0) && (SDVLDIFERE != 89.0)))
                    {
                        F96_RLCDOCORRE = move (format(AXAMREFERE ,"999999"), F96_RLCDOCORRE,10);
                        F96_RLDSOCORRE = move("MES/ANO MAIOR QUE O PERMITIDO", F96_RLDSOCORRE, 45);
                        GLB.SHADOW = "Z";
                        P_96("PRINT.FRAME");
                        break INSERT_GSI002;
                    }
                    if( (AXTPRELATO == 3.0))
                    {
                        SDDIINICIO = move (SDDINOVRGS, SDDIINICIO, 8, 0,"UNSIGNED");
                        SDDIFINALX = subtract(cDec("1"), AXDIINICIO, SDDIFINALX, 8, 0,"UNSIGNED","TRUNCATE");
                    }
                }
            }
			trace("#Xseed***** -  PONTO4 " , "@@@@@"); 
            if( (AXINMESPER == 2.0))
            {
                if( ((AXDIINICIO <= SDDIREGSAI) && (AXINATUALI == 2.0)))
                {
                    F96_RLCDOCORRE = move (format(AXDIINICIO ,"99999999"), F96_RLCDOCORRE,10);
                    F96_RLDSOCORRE = move("PERIODO JA ENCERRADO", F96_RLDSOCORRE, 45);
                    GLB.SHADOW = "Z";
                    P_96("PRINT.FRAME");
                    break INSERT_GSI002;
                }
                GLB.DC_AUX = formatDC(SDDIREGSAI, "99999999");
                DCConvert (GLB.DC_AUX, "+", 1.0, "CCYYMMDD");
                if( (GLB.DC_CCYYMMDD != SDDIINICIO))
                {
                    F96_RLDSOCORRE = move("DATA INICIAL NAO E' APOS AO ULTIMO ENCERRAMENTO", F96_RLDSOCORRE, 45);
                }
//:: ROBSON   - 02/09/2020
//:: CHAMADO:   133849
//::    DW; AXDIINICIO > (20041000)
//::        MV; SDDIINICIO                          GSDDIDISAMD
//::        DW; GSDDIDDSAMD NOT = (01)
//::            MV; GSDDIDDSAMD                     RLCDOCORRE
//::            MV; (DATA INICIAL INVALIDA)         RLDSOCORRE
//::            PF; 96 AS Z
//::            JTO;INSERT-GSI002
//::        END;
//::        DC; AXDIFINALX + (1)                    FORMAT CCYYMMDD
//::        MV; GLB.DC-CCYYMMDD                     GSDDIDISAMD
//::        DW; GSDDIDDSAMD NOT = (01)
//::            MV; GSDDIDDSAMD                     RLCDOCORRE
//::            MV; (DATA FINAL INVALIDA)           RLDSOCORRE
//::            PF; 96 AS Z
//::            JTO;INSERT-GSI002
//::        END;
//::    ELSE;
//::        DW; AXDIINICIO > (20040100)
//::            MV; SDDIINICIO                      GSDDIDISAMD
//::            DW; GSDDIDDSAMD NOT = (01) AND
//::            DW; GSDDIDDSAMD NOT = (16)
//::                MV; GSDDIDDSAMD                 RLCDOCORRE
//::                MV; (DATA INICIAL INVALIDA)     RLDSOCORRE
//::                PF; 96 AS Z
//::                JTO;INSERT-GSI002
//::            END;
//::            DC; AXDIFINALX + (1)                FORMAT CCYYMMDD
//::            MV; GLB.DC-CCYYMMDD                 GSDDIDISAMD
//::            DW; GSDDIDDSAMD NOT = (01) AND
//::            DW; GSDDIDDSAMD NOT = (16)
//::                MV; GSDDIDDSAMD                 RLCDOCORRE
//::                MV; (DATA FINAL INVALIDA)       RLDSOCORRE
//::                PF; 96 AS Z
//::                JTO;INSERT-GSI002
//::            END;
//::        ELSE;
//::            MV; SDDIINICIO                      GSDDIDISAMD
//::            DW; GSDDIDDSAMD NOT = (01) AND
//::            DW; GSDDIDDSAMD NOT = (11) AND
//::            DW; GSDDIDDSAMD NOT = (21)
//::                MV; GSDDIDDSAMD                 RLCDOCORRE
//::                MV; (DATA INICIAL INVALIDA)     RLDSOCORRE
//::                PF; 96 AS Z
//::                JTO;INSERT-GSI002
//::            END;
//::            DC; AXDIFINALX + (1)                FORMAT CCYYMMDD
//::            MV; GLB.DC-CCYYMMDD                 GSDDIDISAMD
//::            DW; GSDDIDDSAMD NOT = (01) AND
//::            DW; GSDDIDDSAMD NOT = (11) AND
//::            DW; GSDDIDDSAMD NOT = (21)
//::                MV; GSDDIDDSAMD                 RLCDOCORRE
//::                MV; (DATA FINAL INVALIDA)       RLDSOCORRE
//::                PF; 96 AS Z
//::                JTO;INSERT-GSI002
//::            END;
//::        END;
//::    END;
                if( (AXTPRELATO == 3.0))
                {
                    F96_RLCDOCORRE = move (format(AXTPRELATO ,"9"), F96_RLCDOCORRE,10);
                    F96_RLDSOCORRE = move("TIPO EMISSAO NAO E VALIDO PARA PERIODO", F96_RLDSOCORRE, 45);
                    GLB.SHADOW = "Z";
                    P_96("PRINT.FRAME");
                    break INSERT_GSI002;
                }
                if( (AXTPRELATO == 4.0))
                {
                    SDDIFINALX = move (AXDIFINALX, SDDIFINALX, 8, 0,"UNSIGNED");
//:MV; AXDIINICIO                        SDDIINICIO
                }
                if( (AXTPRELATO == 5.0))
                {
                    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
                    DCConvert (GLB.DC_AUX, "-", 1.0, "CCYYMMDD");
                    SDDIFINALX = move (GLB.DC_CCYYMMDD, SDDIFINALX, 8, 0,"UNSIGNED");
                }
//:em 27/08/99 foi alterado o tratamento da data inicial das opcoes
//:"4" e "5" por nao se encontrar motivos para tal tratamento.
                if( ((AXTPRELATO == 4.0) || (AXTPRELATO == 5.0)))
                {
                    SDDIINICIO = move (SDDIFINALX, SDDIINICIO, 8, 0,"UNSIGNED");
                    GLB.SECURE = false;
                    GLB.STATUS = GS10901_DetermineEvery (GSDCDEMPRES, SDDIINICIO);
                    while (GS109_XSEEDEOF == false)
                    {   GS10901_DetermineMoveNext();
                        if (GS109_XSEEDEOF == true)
                        {   break;
                        }
                        break;
                    }
                    if( (((rTrim(GLB.STATUS)).equals(rTrim(GLB.SPACES))==true) && (GS109_CDINDFIN != 1.0)))
                    {
                        SDINNAOUTI = move ("1", SDINNAOUTI, 1, 0,"UNSIGNED");
                        while (true)
                        {
                            SDDIINICIO = subtract(cDec("1"), SDDIINICIO, 8, 0,"UNSIGNED","TRUNCATE");
                            GLB.SECURE = false;
                            GLB.STATUS = GS10901_DetermineEvery (GSDCDEMPRES, SDDIINICIO);
                            while (GS109_XSEEDEOF == false)
                            {   GS10901_DetermineMoveNext();
                                if (GS109_XSEEDEOF == true)
                                {   break;
                                }
                                break;
                            }
                            if( (((rTrim(GLB.STATUS)).equals(rTrim(GLB.SPACES))==true) && (GS109_CDINDFIN == 1.0)))
                            {
                                break;
                            }
                        }
                    }
                    GLB.DC_AUX = formatDC(SDDIINICIO, "99999999");
                    DCConvert (GLB.DC_AUX, "-", 3.0, "CCYYMMDD");
                    SDDIINICIO = move (GLB.DC_CCYYMMDD, SDDIINICIO, 8, 0,"UNSIGNED");
                    if( (SDINNAOUTI == GLB.ZEROS))
                    {
                        GLB.SECURE = false;
                        GLB.STATUS = GS10901_DetermineEvery (GSDCDEMPRES, SDDIINICIO);
                        while (GS109_XSEEDEOF == false)
                        {   GS10901_DetermineMoveNext();
                            if (GS109_XSEEDEOF == true)
                            {   break;
                            }
                            break;
                        }
                        if( (((rTrim(GLB.STATUS)).equals(rTrim(GLB.SPACES))==true) && (GS109_CDINDFIN != 1.0)))
                        {
                            SDINNAOUTI = move ("1", SDINNAOUTI, 1, 0,"UNSIGNED");
                            while (true)
                            {
                                SDDIINICIO = subtract(cDec("1"), SDDIINICIO, 8, 0,"UNSIGNED","TRUNCATE");
                                GLB.SECURE = false;
                                GLB.STATUS = GS10901_DetermineEvery (GSDCDEMPRES, SDDIINICIO);
                                while (GS109_XSEEDEOF == false)
                                {   GS10901_DetermineMoveNext();
                                    if (GS109_XSEEDEOF == true)
                                    {   break;
                                    }
                                    break;
                                }
                                if( (((rTrim(GLB.STATUS)).equals(rTrim(GLB.SPACES))==true) && (GS109_CDINDFIN == 1.0)))
                                {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
			trace("#Xseed***** -  PONTO5 " , "@@@@@"); 
            CommitTransaction();
			trace("#Xseed***** -  PONTO6 " , "@@@@@"); 
            message("ATTENTION", "** LIMPA ESTRUTURAS CG111 - CG122 - CG123 **");
            if( ((AXTPRELATO == 1.0) && (AXINATUALI == 2.0)))
            {
                GLB.SHADOW = " ";
                P_60("PRINT.FRAME");
            }
            message("ATTENTION", "** EXTRACAO - INCLUSAO CG133 **");
			trace("#Xseed***** -  PONTO7 " , "@@@@@"); 
            GLB.SECURE = false;
            GLB.STATUS = AV11903_DetermineGroupFrom (2, true, GSDCDEMPRES, AXCDFILIAL, SDDIINICIO, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, AXCDFILIAL, SDDIFINALX, 9999.0, 999999.0, 9.0, 9.0, 999999999.0);
            while (AV119_XSEEDEOF == false)
            {
                AV11903_DetermineMoveNext ();
                if (AV119_XSEEDEOF == true)
                {    break;
                }
                LE_AV119:
                {
                    EXTRAI:
                    {
                        if( (GSDCDEMPRES == 3.0))
                        {
                            if( ((((((((((AV119_NRNOTAFI == 27056.0) || (AV119_NRNOTAFI == 27057.0)) || (AV119_NRNOTAFI == 27058.0)) || (AV119_NRNOTAFI == 27059.0)) || (AV119_NRNOTAFI == 27060.0)) || (AV119_NRNOTAFI == 27061.0)) || (AV119_NRNOTAFI == 27062.0)) || (AV119_NRNOTAFI == 27063.0)) || (AV119_NRNOTAFI == 27064.0)) || (AV119_NRNOTAFI == 27065.0)))
                            {
                                break LE_AV119;
                            }
                        }
//::AQUI
//::    AD; (1)                                     SDNRCONTAD
//::    DW; SDNRCONTAD = (1000)
//::        BREAK;
//::    END;
                        F10_EXNRCANCEL = move (AV119_INSITNOT, F10_EXNRCANCEL, 1, 0,"UNSIGNED");
                        SDINTEM119 = move (GLB.ZEROS, SDINTEM119, 1, 0,"UNSIGNED");
                        if( (AV119_INSITNOT == 1.0))
                        {
                            if( (AXTPRELATO == 3.0))
                            {
                                GSDDIDISAMD = move (format(AV119_DISAINOT ,"99999999"), GSDDIDISAMD,8);
                                GSDDIDISAMD_GROUP();
                                SDAMAUXILI = move (GSDDIAMSAMD, SDAMAUXILI, 6, 0,"UNSIGNED");
                                if( (SDAMAUXILI != AXAMREFERE))
                                {
                                    break LE_AV119;
                                }
                            }
                            break EXTRAI;
                        }
                        SDINZONAFR = move (GLB.ZEROS, SDINZONAFR, 1, 0,"UNSIGNED");
                        if( ((AV119_CDDESMER == 2.0) && (AV119_CDVDCONS == GLB.ZEROS)))
                        {
                            SDINZONAFR = move ("1", SDINZONAFR, 1, 0,"UNSIGNED");
                            if( ((AV119_INPEDESP == 2.0) && (AV119_DIEMINOT >= 20111111.0)))
                            {
//: nf de reposição a partir de 11/11/11 calcula e lista icms normal
                                SDINZONAFR = move (GLB.ZEROS, SDINZONAFR, 1, 0,"UNSIGNED");
                            }
                            if( (((AV119_CDTIPFAT == SDTPFATREP) && (SDTPFATREP != GLB.ZEROS)) && (AV119_DIEMINOT >= 20111111.0)))
                            {
//: notas de reposição (fat.especial) também não calcula ICMS normal
                                SDINZONAFR = move (GLB.ZEROS, SDINZONAFR, 1, 0,"UNSIGNED");
                            }
                        }
                        if( (((AXTPRELATO == 2.0) || (AXTPRELATO == 4.0)) || (AXTPRELATO == 6.0)))
                        {
                            if( ((AXINMESPER == 1.0) && (AV119_DIEMINOT < SDDINOVRGS)))
                            {
                                break LE_AV119;
                            }
                            if( ((AXINMESPER == 2.0) && (AV119_DIEMINOT < SDDINRSIPI)))
                            {
                                break LE_AV119;
                            }
                            if( ((AV119_DISAINOT != GLB.ZEROS) || (AV119_DIDEVOLU != GLB.ZEROS)))
                            {
                                if( (AXTPRELATO == 6.0))
                                {
                                    break LE_AV119;
                                }
                            }
                            if( ((AV119_DISAINOT != GLB.ZEROS) || (AV119_DIDEVOLU != GLB.ZEROS)))
                            {
                                SDDISAINOT = move (AV119_DISAINOT, SDDISAINOT, 8, 0,"UNSIGNED");
                                if( (AV119_DISAINOT == GLB.ZEROS))
                                {
//: se não tiver data de saída mas tem devolução, indica que houve cancelamento fora do prazo
                                    SDDISAINOT = move (AV119_DIDEVOLU, SDDISAINOT, 8, 0,"UNSIGNED");
                                }
                                if( (SDDISAINOT <= SDDIFINALX))
                                {
                                    if( ((AXTPRELATO == 2.0) || (AXTPRELATO == 4.0)))
                                    {
                                        break LE_AV119;
                                    }
                                }
                            }
                        }
                        if( (AXTPRELATO == 3.0))
                        {
                            if( (AV119_DIEMINOT < SDDINOVRGS))
                            {
                                break LE_AV119;
                            }
                            SDDISAINOT = move (AV119_DISAINOT, SDDISAINOT, 8, 0,"UNSIGNED");
                            if( ((AV119_DISAINOT == GLB.ZEROS) && (AV119_DIDEVOLU > GLB.ZEROS)))
                            {
//: se não tiver data de saída mas tem devolução, indica que houve cancelamento fora do prazo
                                SDDISAINOT = move (AV119_DIDEVOLU, SDDISAINOT, 8, 0,"UNSIGNED");
                            }
                            GSDDIDISAMD = move (format(SDDISAINOT ,"99999999"), GSDDIDISAMD,8);
                            GSDDIDISAMD_GROUP();
                            SDAMAUXILI = move (GSDDIAMSAMD, SDAMAUXILI, 6, 0,"UNSIGNED");
                            if( (SDAMAUXILI != AXAMREFERE))
                            {
                                break LE_AV119;
                            }
                        }
                        if( (AXTPRELATO == 5.0))
                        {
                            if( (AV119_DIEMINOT < SDDINRSIPI))
                            {
                                break LE_AV119;
                            }
                            SDDISAINOT = move (AV119_DISAINOT, SDDISAINOT, 8, 0,"UNSIGNED");
                            if( ((AV119_DISAINOT == GLB.ZEROS) && (AV119_DIDEVOLU > GLB.ZEROS)))
                            {
//: se não tiver data de saída mas tem devolução, indica que houve cancelamento fora do prazo
                                SDDISAINOT = move (AV119_DIDEVOLU, SDDISAINOT, 8, 0,"UNSIGNED");
                            }
                            if( ((SDDISAINOT > GLB.ZEROS) && (SDDISAINOT <= SDDIFINALX)))
                            {
                                break LE_AV119;
                            }
                        }
                        if( ((SDINZONAFR == 1.0) && (AV119_DIEMINOT < 20130812.0)))
                        {
                            if( ((AV119_CDTIPFAT != 13.0) && (AV119_CDTIPFAT != 14.0)))
                            {
                                if( ((SDCDTIPFBO != AV119_CDTIPFAT) || (SDCDTIPFBO == GLB.ZEROS)))
                                {
                                    AV119_PCICMNOT = move (GLB.ZEROS, AV119_PCICMNOT, 5, 2,"UNSIGNED");
                                    AV119_VLTOICMN = move (GLB.ZEROS, AV119_VLTOICMN, 14, 2,"UNSIGNED");
                                }
                            }
                        }
                        ITCDNATOPE = 0;
                        for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBCDNATOPE.length ; GLB.ARRAYIDX1++)
                        {                            TBCDNATOPE[GLB.ARRAYIDX1] = 0;
                        }
                        ITCDNATOPE = 0;
                        for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBCDNATCOM.length ; GLB.ARRAYIDX1++)
                        {                            TBCDNATCOM[GLB.ARRAYIDX1] = 0;
                        }
                        ITCDNATOPE = 0;
                        for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBCDOCONAT.length ; GLB.ARRAYIDX1++)
                        {                            TBCDOCONAT[GLB.ARRAYIDX1] = 0;
                        }
                        ITCDNATOPE = 0;
                        for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBVLBASICM.length ; GLB.ARRAYIDX1++)
                        {                            TBVLBASICM[GLB.ARRAYIDX1] = 0;
                        }
                        ITCDNATOPE = 0;
                        for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBVLICMNAT.length ; GLB.ARRAYIDX1++)
                        {                            TBVLICMNAT[GLB.ARRAYIDX1] = 0;
                        }
                        ITCDNATOPE = 0;
                        for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBPCICMNAT.length ; GLB.ARRAYIDX1++)
                        {                            TBPCICMNAT[GLB.ARRAYIDX1] = 0;
                        }
                        ITCDNATOPE = 0;
                        for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBVLBASSTR.length ; GLB.ARRAYIDX1++)
                        {                            TBVLBASSTR[GLB.ARRAYIDX1] = 0;
                        }
                        ITCDNATOPE = 0;
                        for (GLB.ARRAYIDX1 = 0; GLB.ARRAYIDX1 < TBVLICMSTR.length ; GLB.ARRAYIDX1++)
                        {                            TBVLICMSTR[GLB.ARRAYIDX1] = 0;
                        }
                        SDVLIMPICM = move (GLB.ZEROS, SDVLIMPICM, 14, 2,"UNSIGNED");
                        SDVLICMSTR = move (GLB.ZEROS, SDVLICMSTR, 14, 2,"UNSIGNED");
//::DIFAL
                        SDVLBASDID = move (GLB.ZEROS, SDVLBASDID, 14, 2,"UNSIGNED");
                        SDVLICMDIO = move (GLB.ZEROS, SDVLICMDIO, 14, 2,"UNSIGNED");
                        SDVLICMDID = move (GLB.ZEROS, SDVLICMDID, 14, 2,"UNSIGNED");
                        SDVLFCPDES = move (GLB.ZEROS, SDVLFCPDES, 14, 2,"UNSIGNED");
                        SDVLICMNAT = move (GLB.ZEROS, SDVLICMNAT, 14, 2,"UNSIGNED");
                        SDVLBASSTR = move (GLB.ZEROS, SDVLBASSTR, 14, 2,"UNSIGNED");
                        SDCDNATOPE = move (GLB.ZEROS, SDCDNATOPE, 4, 0,"UNSIGNED");
                        SDCDNATCOM = move (GLB.ZEROS, SDCDNATCOM, 2, 0,"UNSIGNED");
                        SDCDOCONAT = move (GLB.ZEROS, SDCDOCONAT, 2, 0,"UNSIGNED");
                        SDVLBASICM = move (GLB.ZEROS, SDVLBASICM, 14, 2,"UNSIGNED");
                        SDVLLIQUID = move (GLB.ZEROS, SDVLLIQUID, 14, 2,"UNSIGNED");
                        SDVLICMPRO = move (GLB.ZEROS, SDVLICMPRO, 14, 2,"UNSIGNED");
                        SDPCICMPRO = move (GLB.ZEROS, SDPCICMPRO, 5, 2,"UNSIGNED");
                        SDINPRIVEZ = move ("1", SDINPRIVEZ, 1, 0,"UNSIGNED");
                        SDINPRIICM = move (GLB.ZEROS, SDINPRIICM, 1, 0,"UNSIGNED");
                        SDINICMPRO = move (GLB.ZEROS, SDINICMPRO, 1, 0,"UNSIGNED");
                        if( ((AV119_CDTIPFAT == GLB.ZEROS) && (AV119_DIEMINOT > 19940700.0)))
                        {
                            SDINICMPRO = move ("1", SDINICMPRO, 1, 0,"UNSIGNED");
                        }
                        if( (((AV119_TPREGIST == 1.0) && (AV119_PCICMNOT == GLB.ZEROS)) && (AV119_VLTOICMN != GLB.ZEROS)))
                        {
                            SDINICMPRO = move ("1", SDINICMPRO, 1, 0,"UNSIGNED");
                        }
                        SDINORIGEM = move (GLB.ZEROS, SDINORIGEM, 1, 0,"UNSIGNED");
                        SDCDUFMUNI = move(GLB.SPACES, SDCDUFMUNI, 2);
                        VERIFICA_CLIENTE ();
                        if (GLB.EXIT==true)
                        {
                           GLB.EXIT=false;
                            return;
                        }
                        if( (SDINACHOUX == GLB.ZEROS))
                        {
                            AV101_CDDOPAIS = move (AV119_CDPAISEN, AV101_CDDOPAIS, 3, 0,"UNSIGNED");
                            AV101_NRCEPLOC = move (AV119_NRCEPENT, AV101_NRCEPLOC, 5, 0,"UNSIGNED");
                            F96_RLCDOCORRE = move (format(AV119_CDCLIENT ,"999999"), F96_RLCDOCORRE,10);
                            F96_RLINOCORRE = move (format(AV119_NRNOTAFI ,"999999999"), F96_RLINOCORRE,20);
                            F96_RLDSOCORRE = move("CLIENTE DESTA NOTA FISCAL NAO CADASTRADO", F96_RLDSOCORRE, 45);
                            GLB.SHADOW = "Z";
                            P_96("PRINT.FRAME");
                        }
                        GSDCDPAISGL = move (AV101_CDDOPAIS, GSDCDPAISGL, 3, 0,"UNSIGNED");
                        GSDNRCLOCGL = move (AV101_NRCEPLOC, GSDNRCLOCGL, 5, 0,"UNSIGNED");
                        GSDNRCCOMGL = move (AV101_NRCEPCOM, GSDNRCCOMGL, 3, 0,"UNSIGNED");
                        GSP103 ();
                        if (GLB.EXIT==true)
                        {
                           GLB.EXIT=false;
                            return;
                        }
                        if( (GSDINTEMCEP == GLB.ZEROS))
                        {
                            SDCDUFMUNI = move(GS103_CDUFMUNI, SDCDUFMUNI, 2);
                        }
                        if( (SDINFILORI == 1.0))
                        {
                            VERIF_ORIGEM ();
                            if (GLB.EXIT==true)
                            {
                               GLB.EXIT=false;
                                return;
                            }
                        }
                        SDNRCFICMP = move (GLB.ZEROS, SDNRCFICMP, 6, 0,"UNSIGNED");
                        SDCDNATCZF = move (GLB.ZEROS, SDCDNATCZF, 4, 0,"UNSIGNED");
                        SDVLBRUNEG = move (GLB.ZEROS, SDVLBRUNEG, 14, 2,"SIGNED");
                        SDVLLIQNEG = move (GLB.ZEROS, SDVLLIQNEG, 14, 2,"SIGNED");
                        if( (SDINZONAFR == 1.0))
                        {
//: verifica se tem brinde valor ficaria negativo por causa do pis
                            GLB.SECURE = false;
							trace("#Xseed***** -  PONTO7.1" , "@@@@@"); 
          
                            GLB.STATUS = AV12001_DetermineGroupFrom (5, false, GSDCDEMPRES, AV119_CDFILIAL, AV119_CDMODENF, AV119_TPREGIST, AV119_NRNOTAFI, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, AV119_CDFILIAL, AV119_CDMODENF, AV119_TPREGIST, AV119_NRNOTAFI, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS);
                            while (AV120_XSEEDEOF == false)
                            {
                                AV12001_DetermineMoveNext ();
                                if (AV120_XSEEDEOF == true)
                                {    break;
                                }
                                if( (AV120_VLPISCZF > AV120_VLLIQUID))
                                {
                                    SDCDNATCZF = move (AV120_CDNATOPE, SDCDNATCZF, 4, 0,"UNSIGNED");
                                    SDVLNEGATI = subtract(AV120_VLPISCZF, AV120_VLBRUTOP, SDVLNEGATI, 14, 2,"SIGNED","TRUNCATE");
                                    SDVLBRUNEG = add(SDVLNEGATI, SDVLBRUNEG, 14, 2, "SIGNED", "TRUNCATE");
                                    SDVLNEGATI = subtract(AV120_VLPISCZF, AV120_VLLIQUID, SDVLNEGATI, 14, 2,"SIGNED","TRUNCATE");
                                    SDVLLIQNEG = add(SDVLNEGATI, SDVLLIQNEG, 14, 2, "SIGNED", "TRUNCATE");
                                }
                            }
								trace("#Xseed***** -  PONTO7.2" , "@@@@@"); 
          
                        }
                        if( (SDVLBRUNEG != GLB.ZEROS))
                        {
                            GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
                            GLB.SECURE = false;
								trace("#Xseed***** -  PONTO7.3" , "@@@@@"); 
          
                            GLB.STATUS = AV12001_DetermineGroupFrom (5, false, GSDCDEMPRES, AV119_CDFILIAL, AV119_CDMODENF, AV119_TPREGIST, AV119_NRNOTAFI, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, AV119_CDFILIAL, AV119_CDMODENF, AV119_TPREGIST, AV119_NRNOTAFI, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS);
                            while (AV120_XSEEDEOF == false)
                            {
                                AV12001_DetermineMoveNext ();
                                if (AV120_XSEEDEOF == true)
                                {    break;
                                }
                                if( ((AV120_VLPISCZF <= AV120_VLLIQUID) && (AV120_CDNATOPE == SDCDNATCZF)))
                                {
                                    GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                                    break;
                                }
                            }
								trace("#Xseed***** -  PONTO7.4" , "@@@@@"); 
          
                            if( (GSDINITEMOK == 1.0))
                            {
                                SDCDNATCZF = move (GLB.ZEROS, SDCDNATCZF, 4, 0,"UNSIGNED");
                            }
                        }
                        LEITURA_AV120 ();
                        if (GLB.EXIT==true)
                        {
                           GLB.EXIT=false;
                            return;
                        }
                        F10_EXVLBASICM = move (SDVLICMNAT, F10_EXVLBASICM, 13, 2,"UNSIGNED");
                        F10_EXVLBASSTR = move (SDVLBASSTR, F10_EXVLBASSTR, 14, 2,"UNSIGNED");
//::DIFAL
                        F10_EXVLBASDID = move (SDVLBASDID, F10_EXVLBASDID, 14, 2,"UNSIGNED");
                        F10_EXVLICMDID = move (SDVLICMDID, F10_EXVLICMDID, 12, 2,"UNSIGNED");
                        F10_EXVLICMDIO = move (SDVLICMDIO, F10_EXVLICMDIO, 12, 2,"UNSIGNED");
                        F10_EXVLFCPDES = move (SDVLFCPDES, F10_EXVLFCPDES, 12, 2,"UNSIGNED");
                        if( (AV119_CDTIPFAT == GLB.ZEROS))
                        {
                            F10_EXVLIMPICM = move (SDVLIMPICM, F10_EXVLIMPICM, 13, 2,"UNSIGNED");
                            F10_EXVLICMSTR = move (SDVLICMSTR, F10_EXVLICMSTR, 14, 2,"UNSIGNED");
                            if( (AV119_DIEMINOT > 19940700.0))
                            {
                                F10_EXVLBASICM = move (GLB.ZEROS, F10_EXVLBASICM, 13, 2,"UNSIGNED");
                                F10_EXVLBASSTR = move (GLB.ZEROS, F10_EXVLBASSTR, 14, 2,"UNSIGNED");
                                F10_EXVLIMPICM = move (GLB.ZEROS, F10_EXVLIMPICM, 13, 2,"UNSIGNED");
                                F10_EXVLICMSTR = move (GLB.ZEROS, F10_EXVLICMSTR, 14, 2,"UNSIGNED");
                            }
                        }
                        if( (AV119_CDTIPFAT != GLB.ZEROS))
                        {
                            F10_EXVLIMPICM = move (SDVLIMPICM, F10_EXVLIMPICM, 13, 2,"UNSIGNED");
                            F10_EXVLICMSTR = move (SDVLICMSTR, F10_EXVLICMSTR, 14, 2,"UNSIGNED");
                            F10_EXPCICMNAT = move (CG110_PCICMFIS, F10_EXPCICMNAT, 5, 2,"UNSIGNED");
                        }
                        F10_EXVLPERICM = move (AV119_PCICMNOT, F10_EXVLPERICM, 5, 2,"UNSIGNED");
                        if( (SDINICMPRO == 1.0))
                        {
                            if( (((SDVLICMNAT != GLB.ZEROS) || (SDVLIMPICM != GLB.ZEROS)) || (SDVLICMSTR != GLB.ZEROS)))
                            {
                                ITCDNATOPE = move (GLB.ZEROS, ITCDNATOPE, 6, 0,"UNSIGNED");
                                while (true)
                                {
                                    ITCDNATOPE = add(cDec("1"), ITCDNATOPE, 6, 0, "UNSIGNED", "TRUNCATE");
                                    if( (ITCDNATOPE > 20.0))
                                    {
                                        break;
                                    }
                                    if( (TBCDNATOPE[(int)ITCDNATOPE - 1] == GLB.ZEROS))
                                    {
                                        TBCDNATOPE[(int)ITCDNATOPE - 1] = move (CG110_CDNATOPE, TBCDNATOPE[(int)ITCDNATOPE - 1], 4, 0,"UNSIGNED");
                                        TBCDNATCOM[(int)ITCDNATOPE - 1] = move (CG110_CDNATCOM, TBCDNATCOM[(int)ITCDNATOPE - 1], 2, 0,"UNSIGNED");
                                        TBCDOCONAT[(int)ITCDNATOPE - 1] = move (CG110_CDOCONAT, TBCDOCONAT[(int)ITCDNATOPE - 1], 2, 0,"UNSIGNED");
                                        TBPCICMNAT[(int)ITCDNATOPE - 1] = move (CG110_PCICMFIS, TBPCICMNAT[(int)ITCDNATOPE - 1], 14, 2,"UNSIGNED");
                                        TBVLBASICM[(int)ITCDNATOPE - 1] = move (SDVLICMNAT, TBVLBASICM[(int)ITCDNATOPE - 1], 14, 2,"UNSIGNED");
                                        TBVLICMNAT[(int)ITCDNATOPE - 1] = move (SDVLIMPICM, TBVLICMNAT[(int)ITCDNATOPE - 1], 14, 2,"UNSIGNED");
                                        TBNRCONTAX[(int)ITCDNATOPE - 1] = move (F10_EXNRCONTAX, TBNRCONTAX[(int)ITCDNATOPE - 1], 6, 0,"UNSIGNED");
                                        TBVLBASSTR[(int)ITCDNATOPE - 1] = move (SDVLBASSTR, TBVLBASSTR[(int)ITCDNATOPE - 1], 14, 2,"UNSIGNED");
                                        TBVLICMSTR[(int)ITCDNATOPE - 1] = move (SDVLICMSTR, TBVLICMSTR[(int)ITCDNATOPE - 1], 14, 2,"UNSIGNED");
                                        break;
                                    }
                                    if( (((TBCDNATOPE[(int)ITCDNATOPE - 1] == CG110_CDNATOPE) && (TBCDNATCOM[(int)ITCDNATOPE - 1] == CG110_CDNATCOM)) && (TBCDOCONAT[(int)ITCDNATOPE - 1] == CG110_CDOCONAT)))
                                    {
                                        TBVLBASICM[(int)ITCDNATOPE - 1] = add(SDVLICMNAT, TBVLBASICM[(int)ITCDNATOPE - 1], 14, 2, "UNSIGNED", "TRUNCATE");
                                        TBVLICMNAT[(int)ITCDNATOPE - 1] = add(SDVLIMPICM, TBVLICMNAT[(int)ITCDNATOPE - 1], 14, 2, "UNSIGNED", "TRUNCATE");
                                        TBVLBASSTR[(int)ITCDNATOPE - 1] = add(SDVLBASSTR, TBVLBASSTR[(int)ITCDNATOPE - 1], 14, 2, "UNSIGNED", "TRUNCATE");
                                        TBVLICMSTR[(int)ITCDNATOPE - 1] = add(SDVLICMSTR, TBVLICMSTR[(int)ITCDNATOPE - 1], 14, 2, "UNSIGNED", "TRUNCATE");
                                        break;
                                    }
                                }
                            }
                        }
                        F10_EXCDNATOPE = move (SDCDNATOPE, F10_EXCDNATOPE, 4, 0,"UNSIGNED");
                        F10_EXCDNATCOM = move (SDCDNATCOM, F10_EXCDNATCOM, 2, 0,"UNSIGNED");
                        GEVLIMPICM = move (SDVLIMPICM, GEVLIMPICM, 14, 2,"UNSIGNED");
                        GEVLIMPICM_ITEM();
                        GEVLICMSTR = move (SDVLICMSTR, GEVLICMSTR, 14, 2,"UNSIGNED");
                        GEVLICMSTR_ITEM();
                        GEVLBASICM = move (SDVLICMNAT, GEVLBASICM, 14, 2,"UNSIGNED");
                        GEVLBASICM_ITEM();
                        GEVLBASSTR = move (SDVLBASSTR, GEVLBASSTR, 14, 2,"UNSIGNED");
                        GEVLBASSTR_ITEM();
//:************ CLASSIFICA O DECENDIO *******************
                        GSDDIDISAMD = move (format(AV119_DIEMINOT ,"99999999"), GSDDIDISAMD,8);
                        GSDDIDISAMD_GROUP();
                        F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
                        if( (AXDIINICIO > 20041000.0))
                        {
                            F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                        }
                        else
                        {
                            if( (AXDIINICIO > 20040100.0))
                            {
                                if( (GSDDIDDSAMD < 16.0))
                                {
                                    F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                }
                                else
                                {
                                    F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                }
                            }
                            else
                            {
                                if( (GSDDIDDSAMD < 11.0))
                                {
                                    F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                }
                                else
                                {
                                    if( (GSDDIDDSAMD < 21.0))
                                    {
                                        F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                    else
                                    {
                                        F10_EXINDECEND = move ("3", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                }
                            }
                        }
//:******************************************************
//::    EX; 10 AS; C
	trace("#Xseed***** -  PONTO7.5" , "EXTRACT @@@@@"); 
          
                        CG133_InitAuto();
                        AU_CG133_CDCONTAX = auto (F10_EXNRCONTAX, AU_CG133_CDCONTAX, 6, 0,"UNSIGNED");
                        AU_CG133_CDEMPRES = auto (GSDCDEMPRES, AU_CG133_CDEMPRES, 2, 0,"UNSIGNED");
                        AU_CG133_CDMODENF = auto (F10_EXCDMODENF, AU_CG133_CDMODENF, 1, 0,"UNSIGNED");
                        AU_CG133_CDNATCOM = auto (F10_EXCDNATCOM, AU_CG133_CDNATCOM, 2, 0,"UNSIGNED");
                        AU_CG133_CDNATOPE = auto (F10_EXCDNATOPE, AU_CG133_CDNATOPE, 4, 0,"UNSIGNED");
                        AU_CG133_CDUFMUNI = auto(F10_EXCDUFMUNI, AU_CG133_CDUFMUNI, 2);
                        AU_CG133_DIEMINOT = auto (F10_EXDIEMINOT, AU_CG133_DIEMINOT, 8, 0,"UNSIGNED");
                        AU_CG133_DISAINOT = auto (F10_EXDISAINOT, AU_CG133_DISAINOT, 8, 0,"UNSIGNED");
                        AU_CG133_INCONFIN = auto (F10_EXINCONFIN, AU_CG133_INCONFIN, 1, 0,"UNSIGNED");
                        AU_CG133_INDECEND = auto (F10_EXINDECEND, AU_CG133_INDECEND, 1, 0,"UNSIGNED");
                        AU_CG133_INORIGEM = auto (F10_EXINORIGEM, AU_CG133_INORIGEM, 1, 0,"UNSIGNED");
                        AU_CG133_INSITNOT = auto (F10_EXNRCANCEL, AU_CG133_INSITNOT, 1, 0,"UNSIGNED");
                        AU_CG133_INSITREG = auto("A", AU_CG133_INSITREG, 1);
                        AU_CG133_INZONAFR = auto (SDINZONAFR, AU_CG133_INZONAFR, 1, 0,"UNSIGNED");
                        AU_CG133_NRCFICMP = auto (F10_EXNRCFICMP, AU_CG133_NRCFICMP, 6, 0,"UNSIGNED");
                        AU_CG133_NRNOTAFI = auto (F10_EXNRNOTAFI, AU_CG133_NRNOTAFI, 9, 0,"UNSIGNED");
                        AU_CG133_NRNOTFIN = auto (F10_EXNRNOTFIN, AU_CG133_NRNOTFIN, 7, 0,"UNSIGNED");
                        AU_CG133_PCICMNAT = auto (F10_EXPCICMNAT, AU_CG133_PCICMNAT, 5, 2,"UNSIGNED");
                        AU_CG133_PCICMPRO = auto (GLB.ZEROS, AU_CG133_PCICMPRO, 4, 2,"UNSIGNED");
                        AU_CG133_TPREGIST = auto (F10_EXTPREGIST, AU_CG133_TPREGIST, 1, 0,"UNSIGNED");
                        AU_CG133_TPSERIEN = auto(F10_EXNRSERIEX, AU_CG133_TPSERIEN, 3);
                        AU_CG133_VLBASICM = auto (F10_EXVLBASICM, AU_CG133_VLBASICM, 14, 2,"UNSIGNED");
                        AU_CG133_VLBASIPI = auto (F10_EXVLBASIPI, AU_CG133_VLBASIPI, 14, 2,"UNSIGNED");
                        AU_CG133_VLBASSTR = auto (F10_EXVLBASSTR, AU_CG133_VLBASSTR, 14, 2,"UNSIGNED");
                        AU_CG133_VLCONTAX = auto (F10_EXVLCONTAX, AU_CG133_VLCONTAX, 14, 2,"UNSIGNED");
                        AU_CG133_VLICMPRO = auto (GLB.ZEROS, AU_CG133_VLICMPRO, 14, 2,"UNSIGNED");
                        AU_CG133_VLBASDID = auto (F10_EXVLBASDID, AU_CG133_VLBASDID, 14, 2,"UNSIGNED");
                        AU_CG133_VLICMDID = auto (F10_EXVLICMDID, AU_CG133_VLICMDID, 12, 2,"UNSIGNED");
                        AU_CG133_VLICMDIO = auto (F10_EXVLICMDIO, AU_CG133_VLICMDIO, 12, 2,"UNSIGNED");
                        AU_CG133_VLFCPDES = auto (F10_EXVLFCPDES, AU_CG133_VLFCPDES, 12, 2,"UNSIGNED");
                        AU_CG133_VLICMSTR = auto (F10_EXVLICMSTR, AU_CG133_VLICMSTR, 14, 2,"UNSIGNED");
                        AU_CG133_VLIMPICM = auto (F10_EXVLIMPICM, AU_CG133_VLIMPICM, 14, 2,"UNSIGNED");
                        AU_CG133_VLIMPIPI = auto (F10_EXVLIMPIPI, AU_CG133_VLIMPIPI, 14, 2,"UNSIGNED");
                        AU_CG133_VLISEICM = auto (F10_EXVLISEICM, AU_CG133_VLISEICM, 14, 2,"UNSIGNED");
                        AU_CG133_VLISEIPI = auto (F10_EXVLISEIPI, AU_CG133_VLISEIPI, 14, 2,"UNSIGNED");
                        AU_CG133_VLLIQUID = auto (GLB.ZEROS, AU_CG133_VLLIQUID, 14, 2,"UNSIGNED");
                        AU_CG133_VLOUTICM = auto (F10_EXVLOUTICM, AU_CG133_VLOUTICM, 14, 2,"UNSIGNED");
                        AU_CG133_VLOUTIPI = auto (F10_EXVLOUTIPI, AU_CG133_VLOUTIPI, 14, 2,"UNSIGNED");
                        AU_CG133_VLPERICM = auto (F10_EXVLPERICM, AU_CG133_VLPERICM, 5, 2,"UNSIGNED");
                        AU_CG133_VLPERIPI = auto (F10_EXVLPERIPI, AU_CG133_VLPERIPI, 5, 2,"UNSIGNED");
                        if ((GLB.ERROR.trim()).equals("")==true)
                        {
                            CG133_AutoToFile();
                            CG133_Insert ();
                            CG133_InitAuto();
                        }
							trace("#Xseed***** -  PONTO7.6" , " @@@@@"); 
                        GLB.SHADOW = " ";
                        P_50("PRINT.FRAME");
						trace("#Xseed***** -  PONTO7.7" , " @@@@@"); 
//:------------
//: EXTRAI ICMS
//:------------
                        ITCDNATOPE = move (GLB.ZEROS, ITCDNATOPE, 6, 0,"UNSIGNED");
                        while (true)
                        {
                            ITCDNATOPE = add(cDec("1"), ITCDNATOPE, 6, 0, "UNSIGNED", "TRUNCATE");
                            if( (ITCDNATOPE > 20.0))
                            {
                                break;
                            }
                            if( (TBCDNATOPE[(int)ITCDNATOPE - 1] == GLB.ZEROS))
                            {
                                break;
                            }
                            GLB.SHADOW = " ";
                            P_63("PRINT.FRAME");
                        }
						trace("#Xseed***** -  PONTO7.8" , " @@@@@"); 
//:-----------------------------------------------------
//: TAXA FRETE COBRADA NA NOTA FISCAL
//: ICMS: TOTALMENTE TRIBUTADO INDEPENDENTE DOS PRODUTOS
//:       CONSTANTES NA NOTA FISCAL (% POR ESTADO)
//:       A NATUREZA DE OPERACAO SERA A DO PRIMEIRO
//:       PRODUTO. USUARIO DISSE NAO HAVER NATUREZA ESPE-
//:       CIFICA NESSE CASO.
//: IPI: ZERO QDO NENHUM PRODUTO DA NOTA FOR TRIBUTADO.
//:      CASO SEJA, VALOR TAXA FOI RATEADO POR PRODUTO
//:      PROPORCIONAL A SEU PESO E APLICADA A ALIQUOTA
//:      NORMAL DO PRODUTO SOBRE ESTE VALOR RATEADO.
//: SOLICITANTE: CONTABILIDADE CIRCULO.
//:
//: COMPLEMENTO EM 07/2003:
//:      PARA QUE O CG124 E O CG111 FECHEM, TORNOU-SE NE-
//:      CESSARIO QUE A NAT.OPERACAO DEIXE DE SER A DO
//:      PRIMEIRO PRODUTO E PASSE A SER A MESMA DO CG111
//:
//: EM DEZEMBRO/2004:
//:      OUTROS MERCADOS TERA NESTE CAMPO O FRETE INTERNACIONAL.
//:      A EMPRESA PAGA O FRETE P/TRANSPORTADORA E 0 CLIENTE
//:      PAGA POSTERIORMENTE À EMPRESA. NAO TEM ICMS NEM IPI.
//:-----------------------------------------------------
                        if( ((AV119_VLTAXFRE != GLB.ZEROS) && (AV119_CDMERCAD == 2.0)))
                        {
//:ALTERADO CONFORME SOLIC. CARME PARA 08/2009
                            F10_EXNRSERIEX = move(AV119_TPSERIEN, F10_EXNRSERIEX, 3);
                            F10_EXNRNOTAFI = move (AV119_NRNOTAFI, F10_EXNRNOTAFI, 9, 0,"UNSIGNED");
                            F10_EXCDMODENF = move (AV119_CDMODENF, F10_EXCDMODENF, 1, 0,"UNSIGNED");
                            F10_EXTPREGIST = move (AV119_TPREGIST, F10_EXTPREGIST, 1, 0,"UNSIGNED");
                            if( (AV119_TPREGIST == 1.0))
                            {
                                F10_EXNRNOTFIN = move (AV119_NRORDEMB, F10_EXNRNOTFIN, 7, 0,"UNSIGNED");
                            }
                            F10_EXNRCFICMP = move (SDNRCFICMP, F10_EXNRCFICMP, 6, 0,"UNSIGNED");
                            F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
                            F10_EXDISAINOT = move (AV119_DISAINOT, F10_EXDISAINOT, 8, 0,"UNSIGNED");
                            F10_EXCDNATOPE = move (SDCDNATOPE, F10_EXCDNATOPE, 4, 0,"UNSIGNED");
                            F10_EXCDNATCOM = move (SDCDNATCOM, F10_EXCDNATCOM, 2, 0,"UNSIGNED");
                            F10_EXNRCONTAX = move (SDCDCRFREX, F10_EXNRCONTAX, 6, 0,"UNSIGNED");
                            F10_EXPCICMNAT = move (AV119_PCICMTXF, F10_EXPCICMNAT, 5, 2,"UNSIGNED");
                            if (CG110_CDTRIICM == 2.0)
                            {
                                F10_EXVLISEICM = move (AV119_VLTAXFRE, F10_EXVLISEICM, 13, 2,"UNSIGNED");
                                F10_EXVLISEICM = add(AV119_VLSEGEXP, F10_EXVLISEICM, 13, 2, "UNSIGNED", "TRUNCATE");
                                GEVLINTICM = add(AV119_VLTAXFRE, GEVLINTICM, 14, 2, "UNSIGNED", "TRUNCATE");
                                GEVLINTICM_ITEM();
                                GEVLINTICM = add(AV119_VLSEGEXP, GEVLINTICM, 14, 2, "UNSIGNED", "TRUNCATE");
                                GEVLINTICM_ITEM();
                            }
                            else
                            if (CG110_CDTRIICM == 3.0)
                            {
                                F10_EXVLOUTICM = move (AV119_VLTAXFRE, F10_EXVLOUTICM, 13, 2,"UNSIGNED");
                                F10_EXVLOUTICM = add(AV119_VLSEGEXP, F10_EXVLOUTICM, 13, 2, "UNSIGNED", "TRUNCATE");
                                GEVLOUTICM = add(AV119_VLTAXFRE, GEVLOUTICM, 14, 2, "UNSIGNED", "TRUNCATE");
                                GEVLOUTICM_ITEM();
                                GEVLOUTICM = add(AV119_VLSEGEXP, GEVLOUTICM, 14, 2, "UNSIGNED", "TRUNCATE");
                                GEVLOUTICM_ITEM();
                            }
                            F10_EXVLCONTAX = move (AV119_VLTAXFRE, F10_EXVLCONTAX, 13, 2,"UNSIGNED");
                            F10_EXVLCONTAX = add(AV119_VLSEGEXP, F10_EXVLCONTAX, 13, 2, "UNSIGNED", "TRUNCATE");
                            GEVLINTEGR = add(AV119_VLTAXFRE, GEVLINTEGR, 14, 2, "UNSIGNED", "TRUNCATE");
                            GEVLINTEGR_ITEM();
                            GEVLINTEGR = add(AV119_VLSEGEXP, GEVLINTEGR, 14, 2, "UNSIGNED", "TRUNCATE");
                            GEVLINTEGR_ITEM();
//:************ CLASSIFICA O DECENDIO ***************
                            F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
                            GSDDIDISAMD = move (format(AV119_DIEMINOT ,"99999999"), GSDDIDISAMD,8);
                            GSDDIDISAMD_GROUP();
                            if( (AXDIINICIO > 20041000.0))
                            {
                                F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                            }
                            else
                            {
                                if( (AXDIINICIO > 20040100.0))
                                {
                                    if( (GSDDIDDSAMD < 16.0))
                                    {
                                        F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                    else
                                    {
                                        F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                }
                                else
                                {
                                    if( (GSDDIDDSAMD < 11.0))
                                    {
                                        F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                    else
                                    {
                                        if( (GSDDIDDSAMD < 21.0))
                                        {
                                            F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                        }
                                        else
                                        {
                                            F10_EXINDECEND = move ("3", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                        }
                                    }
                                }
                            }
//:*************************************************
//::        EX; 10 AS C
trace("#Xseed***** -  PONTO7.9" , " EX; 10 AS C@@@@@"); 
                            CG133_InitAuto();
                            AU_CG133_CDCONTAX = auto (F10_EXNRCONTAX, AU_CG133_CDCONTAX, 6, 0,"UNSIGNED");
                            AU_CG133_CDEMPRES = auto (GSDCDEMPRES, AU_CG133_CDEMPRES, 2, 0,"UNSIGNED");
                            AU_CG133_CDMODENF = auto (F10_EXCDMODENF, AU_CG133_CDMODENF, 1, 0,"UNSIGNED");
                            AU_CG133_CDNATCOM = auto (F10_EXCDNATCOM, AU_CG133_CDNATCOM, 2, 0,"UNSIGNED");
                            AU_CG133_CDNATOPE = auto (F10_EXCDNATOPE, AU_CG133_CDNATOPE, 4, 0,"UNSIGNED");
                            AU_CG133_CDUFMUNI = auto(F10_EXCDUFMUNI, AU_CG133_CDUFMUNI, 2);
                            AU_CG133_DIEMINOT = auto (F10_EXDIEMINOT, AU_CG133_DIEMINOT, 8, 0,"UNSIGNED");
                            AU_CG133_DISAINOT = auto (F10_EXDISAINOT, AU_CG133_DISAINOT, 8, 0,"UNSIGNED");
                            AU_CG133_INCONFIN = auto (F10_EXINCONFIN, AU_CG133_INCONFIN, 1, 0,"UNSIGNED");
                            AU_CG133_INDECEND = auto (F10_EXINDECEND, AU_CG133_INDECEND, 1, 0,"UNSIGNED");
                            AU_CG133_INORIGEM = auto (F10_EXINORIGEM, AU_CG133_INORIGEM, 1, 0,"UNSIGNED");
                            AU_CG133_INSITNOT = auto (F10_EXNRCANCEL, AU_CG133_INSITNOT, 1, 0,"UNSIGNED");
                            AU_CG133_INSITREG = auto("B", AU_CG133_INSITREG, 1);
                            AU_CG133_INZONAFR = auto (SDINZONAFR, AU_CG133_INZONAFR, 1, 0,"UNSIGNED");
                            AU_CG133_NRCFICMP = auto (F10_EXNRCFICMP, AU_CG133_NRCFICMP, 6, 0,"UNSIGNED");
                            AU_CG133_NRNOTAFI = auto (F10_EXNRNOTAFI, AU_CG133_NRNOTAFI, 9, 0,"UNSIGNED");
                            AU_CG133_NRNOTFIN = auto (F10_EXNRNOTFIN, AU_CG133_NRNOTFIN, 7, 0,"UNSIGNED");
                            AU_CG133_PCICMNAT = auto (F10_EXPCICMNAT, AU_CG133_PCICMNAT, 5, 2,"UNSIGNED");
                            AU_CG133_PCICMPRO = auto (GLB.ZEROS, AU_CG133_PCICMPRO, 4, 2,"UNSIGNED");
                            AU_CG133_TPREGIST = auto (F10_EXTPREGIST, AU_CG133_TPREGIST, 1, 0,"UNSIGNED");
                            AU_CG133_TPSERIEN = auto(F10_EXNRSERIEX, AU_CG133_TPSERIEN, 3);
                            AU_CG133_VLBASDID = auto (F10_EXVLBASDID, AU_CG133_VLBASDID, 14, 2,"UNSIGNED");
                            AU_CG133_VLICMDID = auto (F10_EXVLICMDID, AU_CG133_VLICMDID, 12, 2,"UNSIGNED");
                            AU_CG133_VLICMDIO = auto (F10_EXVLICMDIO, AU_CG133_VLICMDIO, 12, 2,"UNSIGNED");
                            AU_CG133_VLFCPDES = auto (F10_EXVLFCPDES, AU_CG133_VLFCPDES, 12, 2,"UNSIGNED");
                            AU_CG133_VLBASICM = auto (F10_EXVLBASICM, AU_CG133_VLBASICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLBASIPI = auto (F10_EXVLBASIPI, AU_CG133_VLBASIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLBASSTR = auto (F10_EXVLBASSTR, AU_CG133_VLBASSTR, 14, 2,"UNSIGNED");
                            AU_CG133_VLCONTAX = auto (F10_EXVLCONTAX, AU_CG133_VLCONTAX, 14, 2,"UNSIGNED");
                            AU_CG133_VLICMPRO = auto (GLB.ZEROS, AU_CG133_VLICMPRO, 14, 2,"UNSIGNED");
                            AU_CG133_VLICMSTR = auto (F10_EXVLICMSTR, AU_CG133_VLICMSTR, 14, 2,"UNSIGNED");
                            AU_CG133_VLIMPICM = auto (F10_EXVLIMPICM, AU_CG133_VLIMPICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLIMPIPI = auto (F10_EXVLIMPIPI, AU_CG133_VLIMPIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLISEICM = auto (F10_EXVLISEICM, AU_CG133_VLISEICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLISEIPI = auto (F10_EXVLISEIPI, AU_CG133_VLISEIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLLIQUID = auto (GLB.ZEROS, AU_CG133_VLLIQUID, 14, 2,"UNSIGNED");
                            AU_CG133_VLOUTICM = auto (F10_EXVLOUTICM, AU_CG133_VLOUTICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLOUTIPI = auto (F10_EXVLOUTIPI, AU_CG133_VLOUTIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLPERICM = auto (F10_EXVLPERICM, AU_CG133_VLPERICM, 5, 2,"UNSIGNED");
                            AU_CG133_VLPERIPI = auto (F10_EXVLPERIPI, AU_CG133_VLPERIPI, 5, 2,"UNSIGNED");
                            if ((GLB.ERROR.trim()).equals("")==true)
                            {
                                CG133_AutoToFile();
                                CG133_Insert ();
                                CG133_InitAuto();
                            }
                            GLB.SHADOW = " ";
							trace("#Xseed***** -  PONTO7.10" , " EX; 10 AS C@@@@@"); 
                            P_50("PRINT.FRAME");
							trace("#Xseed***** -  PONTO7.11" , "@@@@@"); 
                        }
                        if( ((AV119_VLTAXFRE != GLB.ZEROS) && (AV119_CDMERCAD == 1.0)))
                        {
//::    DW; AV119.VLICMTXF NOT = GLB.ZEROS
                            F10_EXNRSERIEX = move(AV119_TPSERIEN, F10_EXNRSERIEX, 3);
                            F10_EXNRNOTAFI = move (AV119_NRNOTAFI, F10_EXNRNOTAFI, 9, 0,"UNSIGNED");
                            F10_EXCDMODENF = move (AV119_CDMODENF, F10_EXCDMODENF, 1, 0,"UNSIGNED");
                            F10_EXTPREGIST = move (AV119_TPREGIST, F10_EXTPREGIST, 1, 0,"UNSIGNED");
                            if( (AV119_TPREGIST == 1.0))
                            {
                                F10_EXNRNOTFIN = move (AV119_NRORDEMB, F10_EXNRNOTFIN, 7, 0,"UNSIGNED");
                            }
                            F10_EXNRCFICMP = move (SDNRCFICMP, F10_EXNRCFICMP, 6, 0,"UNSIGNED");
                            F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
                            F10_EXDISAINOT = move (AV119_DISAINOT, F10_EXDISAINOT, 8, 0,"UNSIGNED");
                            if( (SDINTXFRET == 1.0))
                            {
                                ITCDNATOPE = move ("1", ITCDNATOPE, 6, 0,"UNSIGNED");
                            }
                            else
                            {
                                ITCDNATOPE = move (GLB.ZEROS, ITCDNATOPE, 6, 0,"UNSIGNED");
                                while (true)
                                {
                                    ITCDNATOPE = add(cDec("1"), ITCDNATOPE, 6, 0, "UNSIGNED", "TRUNCATE");
                                    if( (ITCDNATOPE > 20.0))
                                    {
                                        ITCDNATOPE = move ("1", ITCDNATOPE, 6, 0,"UNSIGNED");
                                        break;
                                    }
                                    if( (TBCDNATOPE[(int)ITCDNATOPE - 1] == SDCDNATOPE))
                                    {
                                        break;
                                    }
                                }
                            }
                            F10_EXCDNATOPE = move (TBCDNATOPE[(int)ITCDNATOPE - 1], F10_EXCDNATOPE, 4, 0,"UNSIGNED");
                            F10_EXCDNATCOM = move (TBCDNATCOM[(int)ITCDNATOPE - 1], F10_EXCDNATCOM, 2, 0,"UNSIGNED");
                            F10_EXNRCONTAX = move (SDCDCRTXFR, F10_EXNRCONTAX, 6, 0,"UNSIGNED");
                            F10_EXPCICMNAT = move (TBPCICMNAT[(int)ITCDNATOPE - 1], F10_EXPCICMNAT, 5, 2,"UNSIGNED");
                            F10_EXVLIMPICM = move (AV119_VLICMTXF, F10_EXVLIMPICM, 13, 2,"UNSIGNED");
                            GEVLIMPICM = add(AV119_VLICMTXF, GEVLIMPICM, 14, 2, "UNSIGNED", "TRUNCATE");
                            GEVLIMPICM_ITEM();
                            F10_EXVLBASICM = move (AV119_VLTAXFRE, F10_EXVLBASICM, 13, 2,"UNSIGNED");
                            GEVLBASICM = add(AV119_VLTAXFRE, GEVLBASICM, 14, 2, "UNSIGNED", "TRUNCATE");
                            GEVLBASICM_ITEM();
                            F10_EXVLCONTAX = move (AV119_VLTAXFRE, F10_EXVLCONTAX, 13, 2,"UNSIGNED");
                            GEVLINTEGR = add(AV119_VLTAXFRE, GEVLINTEGR, 14, 2, "UNSIGNED", "TRUNCATE");
                            GEVLINTEGR_ITEM();
                            F10_EXVLCONTAX = add(AV119_VLIPITXF, F10_EXVLCONTAX, 13, 2, "UNSIGNED", "TRUNCATE");
                            GEVLINTEGR = add(AV119_VLIPITXF, GEVLINTEGR, 14, 2, "UNSIGNED", "TRUNCATE");
                            GEVLINTEGR_ITEM();
//:************ CLASSIFICA O DECENDIO ***************
                            F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
                            GSDDIDISAMD = move (format(AV119_DIEMINOT ,"99999999"), GSDDIDISAMD,8);
                            GSDDIDISAMD_GROUP();
                            if( (AXDIINICIO > 20041000.0))
                            {
                                F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                            }
                            else
                            {
                                if( (AXDIINICIO > 20040100.0))
                                {
                                    if( (GSDDIDDSAMD < 16.0))
                                    {
                                        F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                    else
                                    {
                                        F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                }
                                else
                                {
                                    if( (GSDDIDDSAMD < 11.0))
                                    {
                                        F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                    else
                                    {
                                        if( (GSDDIDDSAMD < 21.0))
                                        {
                                            F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                        }
                                        else
                                        {
                                            F10_EXINDECEND = move ("3", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                        }
                                    }
                                }
                            }
//:*************************************************
//::        EX; 10 AS C
	trace("#Xseed***** -  PONTO7.12" , "EX @@@@@"); 
                            CG133_InitAuto();
                            AU_CG133_CDCONTAX = auto (F10_EXNRCONTAX, AU_CG133_CDCONTAX, 6, 0,"UNSIGNED");
                            AU_CG133_CDEMPRES = auto (GSDCDEMPRES, AU_CG133_CDEMPRES, 2, 0,"UNSIGNED");
                            AU_CG133_CDMODENF = auto (F10_EXCDMODENF, AU_CG133_CDMODENF, 1, 0,"UNSIGNED");
                            AU_CG133_CDNATCOM = auto (F10_EXCDNATCOM, AU_CG133_CDNATCOM, 2, 0,"UNSIGNED");
                            AU_CG133_CDNATOPE = auto (F10_EXCDNATOPE, AU_CG133_CDNATOPE, 4, 0,"UNSIGNED");
                            AU_CG133_CDUFMUNI = auto(F10_EXCDUFMUNI, AU_CG133_CDUFMUNI, 2);
                            AU_CG133_DIEMINOT = auto (F10_EXDIEMINOT, AU_CG133_DIEMINOT, 8, 0,"UNSIGNED");
                            AU_CG133_DISAINOT = auto (F10_EXDISAINOT, AU_CG133_DISAINOT, 8, 0,"UNSIGNED");
                            AU_CG133_INCONFIN = auto (F10_EXINCONFIN, AU_CG133_INCONFIN, 1, 0,"UNSIGNED");
                            AU_CG133_INDECEND = auto (F10_EXINDECEND, AU_CG133_INDECEND, 1, 0,"UNSIGNED");
                            AU_CG133_INORIGEM = auto (F10_EXINORIGEM, AU_CG133_INORIGEM, 1, 0,"UNSIGNED");
                            AU_CG133_INSITNOT = auto (F10_EXNRCANCEL, AU_CG133_INSITNOT, 1, 0,"UNSIGNED");
                            AU_CG133_INSITREG = auto("C", AU_CG133_INSITREG, 1);
                            AU_CG133_INZONAFR = auto (SDINZONAFR, AU_CG133_INZONAFR, 1, 0,"UNSIGNED");
                            AU_CG133_NRCFICMP = auto (F10_EXNRCFICMP, AU_CG133_NRCFICMP, 6, 0,"UNSIGNED");
                            AU_CG133_NRNOTAFI = auto (F10_EXNRNOTAFI, AU_CG133_NRNOTAFI, 9, 0,"UNSIGNED");
                            AU_CG133_NRNOTFIN = auto (F10_EXNRNOTFIN, AU_CG133_NRNOTFIN, 7, 0,"UNSIGNED");
                            AU_CG133_PCICMNAT = auto (F10_EXPCICMNAT, AU_CG133_PCICMNAT, 5, 2,"UNSIGNED");
                            AU_CG133_PCICMPRO = auto (GLB.ZEROS, AU_CG133_PCICMPRO, 4, 2,"UNSIGNED");
                            AU_CG133_TPREGIST = auto (F10_EXTPREGIST, AU_CG133_TPREGIST, 1, 0,"UNSIGNED");
                            AU_CG133_TPSERIEN = auto(F10_EXNRSERIEX, AU_CG133_TPSERIEN, 3);
                            AU_CG133_VLBASDID = auto (F10_EXVLBASDID, AU_CG133_VLBASDID, 14, 2,"UNSIGNED");
                            AU_CG133_VLICMDID = auto (F10_EXVLICMDID, AU_CG133_VLICMDID, 12, 2,"UNSIGNED");
                            AU_CG133_VLICMDIO = auto (F10_EXVLICMDIO, AU_CG133_VLICMDIO, 12, 2,"UNSIGNED");
                            AU_CG133_VLFCPDES = auto (F10_EXVLFCPDES, AU_CG133_VLFCPDES, 12, 2,"UNSIGNED");
                            AU_CG133_VLBASICM = auto (F10_EXVLBASICM, AU_CG133_VLBASICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLBASIPI = auto (F10_EXVLBASIPI, AU_CG133_VLBASIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLBASSTR = auto (F10_EXVLBASSTR, AU_CG133_VLBASSTR, 14, 2,"UNSIGNED");
                            AU_CG133_VLCONTAX = auto (F10_EXVLCONTAX, AU_CG133_VLCONTAX, 14, 2,"UNSIGNED");
                            AU_CG133_VLICMPRO = auto (GLB.ZEROS, AU_CG133_VLICMPRO, 14, 2,"UNSIGNED");
                            AU_CG133_VLICMSTR = auto (F10_EXVLICMSTR, AU_CG133_VLICMSTR, 14, 2,"UNSIGNED");
                            AU_CG133_VLIMPICM = auto (F10_EXVLIMPICM, AU_CG133_VLIMPICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLIMPIPI = auto (F10_EXVLIMPIPI, AU_CG133_VLIMPIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLISEICM = auto (F10_EXVLISEICM, AU_CG133_VLISEICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLISEIPI = auto (F10_EXVLISEIPI, AU_CG133_VLISEIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLLIQUID = auto (GLB.ZEROS, AU_CG133_VLLIQUID, 14, 2,"UNSIGNED");
                            AU_CG133_VLOUTICM = auto (F10_EXVLOUTICM, AU_CG133_VLOUTICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLOUTIPI = auto (F10_EXVLOUTIPI, AU_CG133_VLOUTIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLPERICM = auto (F10_EXVLPERICM, AU_CG133_VLPERICM, 5, 2,"UNSIGNED");
                            AU_CG133_VLPERIPI = auto (F10_EXVLPERIPI, AU_CG133_VLPERIPI, 5, 2,"UNSIGNED");
                            if ((GLB.ERROR.trim()).equals("")==true)
                            {
                                CG133_AutoToFile();
                                CG133_Insert ();
                                CG133_InitAuto();
                            }
							trace("#Xseed***** -  PONTO7.13" , "EX @@@@@"); 
                            GLB.SHADOW = " ";
                            P_50("PRINT.FRAME");
                        }
                        if( ((AV119_VLTAXFRE > GLB.ZEROS) && (AV119_VLIPITXF > GLB.ZEROS)))
                        {
                            if( (SDINTXFRET == 1.0))
                            {
                                ITCDNATOPE = move ("1", ITCDNATOPE, 6, 0,"UNSIGNED");
                            }
                            else
                            {
                                ITCDNATOPE = move (GLB.ZEROS, ITCDNATOPE, 6, 0,"UNSIGNED");
                                while (true)
                                {
                                    ITCDNATOPE = add(cDec("1"), ITCDNATOPE, 6, 0, "UNSIGNED", "TRUNCATE");
                                    if( (ITCDNATOPE > 20.0))
                                    {
                                        ITCDNATOPE = move ("1", ITCDNATOPE, 6, 0,"UNSIGNED");
                                        break;
                                    }
                                    if( (TBCDNATOPE[(int)ITCDNATOPE - 1] == SDCDNATOPE))
                                    {
                                        break;
                                    }
                                }
                            }
                            F10_EXNRSERIEX = move(AV119_TPSERIEN, F10_EXNRSERIEX, 3);
                            F10_EXNRNOTAFI = move (AV119_NRNOTAFI, F10_EXNRNOTAFI, 9, 0,"UNSIGNED");
                            F10_EXCDMODENF = move (AV119_CDMODENF, F10_EXCDMODENF, 1, 0,"UNSIGNED");
                            F10_EXTPREGIST = move (AV119_TPREGIST, F10_EXTPREGIST, 1, 0,"UNSIGNED");
                            if( (AV119_TPREGIST == 1.0))
                            {
                                F10_EXNRNOTFIN = move (AV119_NRORDEMB, F10_EXNRNOTFIN, 7, 0,"UNSIGNED");
                            }
                            F10_EXNRCFICMP = move (SDNRCFICMP, F10_EXNRCFICMP, 6, 0,"UNSIGNED");
                            F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
                            F10_EXDISAINOT = move (AV119_DISAINOT, F10_EXDISAINOT, 8, 0,"UNSIGNED");
                            F10_EXCDNATOPE = move (TBCDNATOPE[(int)ITCDNATOPE - 1], F10_EXCDNATOPE, 4, 0,"UNSIGNED");
                            F10_EXCDNATCOM = move (TBCDNATCOM[(int)ITCDNATOPE - 1], F10_EXCDNATCOM, 2, 0,"UNSIGNED");
                            F10_EXVLBASIPI = move (AV119_VLTAXFRE, F10_EXVLBASIPI, 13, 2,"UNSIGNED");
                            F10_EXVLPERIPI = move (AV119_PCICMTXF, F10_EXVLPERIPI, 5, 2,"UNSIGNED");
                            F10_EXVLIMPIPI = move (AV119_VLIPITXF, F10_EXVLIMPIPI, 13, 2,"UNSIGNED");
                            if( (AV119_INSITNOT == GLB.ZEROS))
                            {
                                GEVLBASIPI = add(AV119_VLTAXFRE, GEVLBASIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                                GEVLBASIPI_ITEM();
                                GEVLIMPIPI = add(AV119_VLIPITXF, GEVLIMPIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                                GEVLIMPIPI_ITEM();
                            }
//:************ CLASSIFICA O DECENDIO ***************
                            F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
                            GSDDIDISAMD = move (format(AV119_DIEMINOT ,"99999999"), GSDDIDISAMD,8);
                            GSDDIDISAMD_GROUP();
                            if( (AXDIINICIO > 20041000.0))
                            {
                                F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                            }
                            else
                            {
                                if( (AXDIINICIO > 20040100.0))
                                {
                                    if( (GSDDIDDSAMD < 16.0))
                                    {
                                        F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                    else
                                    {
                                        F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                }
                                else
                                {
                                    if( (GSDDIDDSAMD < 11.0))
                                    {
                                        F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                    else
                                    {
                                        if( (GSDDIDDSAMD < 21.0))
                                        {
                                            F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                        }
                                        else
                                        {
                                            F10_EXINDECEND = move ("3", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                        }
                                    }
                                }
                            }
//:*************************************************
//::        EX; 10 AS C
trace("#Xseed***** -  PONTO7.14" , "@@@@@"); 
                            CG133_InitAuto();
                            AU_CG133_CDCONTAX = auto (F10_EXNRCONTAX, AU_CG133_CDCONTAX, 6, 0,"UNSIGNED");
                            AU_CG133_CDEMPRES = auto (GSDCDEMPRES, AU_CG133_CDEMPRES, 2, 0,"UNSIGNED");
                            AU_CG133_CDMODENF = auto (F10_EXCDMODENF, AU_CG133_CDMODENF, 1, 0,"UNSIGNED");
                            AU_CG133_CDNATCOM = auto (F10_EXCDNATCOM, AU_CG133_CDNATCOM, 2, 0,"UNSIGNED");
                            AU_CG133_CDNATOPE = auto (F10_EXCDNATOPE, AU_CG133_CDNATOPE, 4, 0,"UNSIGNED");
                            AU_CG133_CDUFMUNI = auto(F10_EXCDUFMUNI, AU_CG133_CDUFMUNI, 2);
                            AU_CG133_DIEMINOT = auto (F10_EXDIEMINOT, AU_CG133_DIEMINOT, 8, 0,"UNSIGNED");
                            AU_CG133_DISAINOT = auto (F10_EXDISAINOT, AU_CG133_DISAINOT, 8, 0,"UNSIGNED");
                            AU_CG133_INCONFIN = auto (F10_EXINCONFIN, AU_CG133_INCONFIN, 1, 0,"UNSIGNED");
                            AU_CG133_INDECEND = auto (F10_EXINDECEND, AU_CG133_INDECEND, 1, 0,"UNSIGNED");
                            AU_CG133_INORIGEM = auto (F10_EXINORIGEM, AU_CG133_INORIGEM, 1, 0,"UNSIGNED");
                            AU_CG133_INSITNOT = auto (F10_EXNRCANCEL, AU_CG133_INSITNOT, 1, 0,"UNSIGNED");
                            AU_CG133_INSITREG = auto("D", AU_CG133_INSITREG, 1);
                            AU_CG133_INZONAFR = auto (SDINZONAFR, AU_CG133_INZONAFR, 1, 0,"UNSIGNED");
                            AU_CG133_NRCFICMP = auto (F10_EXNRCFICMP, AU_CG133_NRCFICMP, 6, 0,"UNSIGNED");
                            AU_CG133_NRNOTAFI = auto (F10_EXNRNOTAFI, AU_CG133_NRNOTAFI, 9, 0,"UNSIGNED");
                            AU_CG133_NRNOTFIN = auto (F10_EXNRNOTFIN, AU_CG133_NRNOTFIN, 7, 0,"UNSIGNED");
                            AU_CG133_PCICMNAT = auto (F10_EXPCICMNAT, AU_CG133_PCICMNAT, 5, 2,"UNSIGNED");
                            AU_CG133_PCICMPRO = auto (GLB.ZEROS, AU_CG133_PCICMPRO, 4, 2,"UNSIGNED");
                            AU_CG133_TPREGIST = auto (F10_EXTPREGIST, AU_CG133_TPREGIST, 1, 0,"UNSIGNED");
                            AU_CG133_TPSERIEN = auto(F10_EXNRSERIEX, AU_CG133_TPSERIEN, 3);
                            AU_CG133_VLBASDID = auto (F10_EXVLBASDID, AU_CG133_VLBASDID, 14, 2,"UNSIGNED");
                            AU_CG133_VLICMDID = auto (F10_EXVLICMDID, AU_CG133_VLICMDID, 12, 2,"UNSIGNED");
                            AU_CG133_VLICMDIO = auto (F10_EXVLICMDIO, AU_CG133_VLICMDIO, 12, 2,"UNSIGNED");
                            AU_CG133_VLFCPDES = auto (F10_EXVLFCPDES, AU_CG133_VLFCPDES, 12, 2,"UNSIGNED");
                            AU_CG133_VLBASICM = auto (F10_EXVLBASICM, AU_CG133_VLBASICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLBASIPI = auto (F10_EXVLBASIPI, AU_CG133_VLBASIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLBASSTR = auto (F10_EXVLBASSTR, AU_CG133_VLBASSTR, 14, 2,"UNSIGNED");
                            AU_CG133_VLCONTAX = auto (F10_EXVLCONTAX, AU_CG133_VLCONTAX, 14, 2,"UNSIGNED");
                            AU_CG133_VLICMPRO = auto (GLB.ZEROS, AU_CG133_VLICMPRO, 14, 2,"UNSIGNED");
                            AU_CG133_VLICMSTR = auto (F10_EXVLICMSTR, AU_CG133_VLICMSTR, 14, 2,"UNSIGNED");
                            AU_CG133_VLIMPICM = auto (F10_EXVLIMPICM, AU_CG133_VLIMPICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLIMPIPI = auto (F10_EXVLIMPIPI, AU_CG133_VLIMPIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLISEICM = auto (F10_EXVLISEICM, AU_CG133_VLISEICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLISEIPI = auto (F10_EXVLISEIPI, AU_CG133_VLISEIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLLIQUID = auto (GLB.ZEROS, AU_CG133_VLLIQUID, 14, 2,"UNSIGNED");
                            AU_CG133_VLOUTICM = auto (F10_EXVLOUTICM, AU_CG133_VLOUTICM, 14, 2,"UNSIGNED");
                            AU_CG133_VLOUTIPI = auto (F10_EXVLOUTIPI, AU_CG133_VLOUTIPI, 14, 2,"UNSIGNED");
                            AU_CG133_VLPERICM = auto (F10_EXVLPERICM, AU_CG133_VLPERICM, 5, 2,"UNSIGNED");
                            AU_CG133_VLPERIPI = auto (F10_EXVLPERIPI, AU_CG133_VLPERIPI, 5, 2,"UNSIGNED");
                            if ((GLB.ERROR.trim()).equals("")==true)
                            {
                                CG133_AutoToFile();
                                CG133_Insert ();
                                CG133_InitAuto();
                            }
							trace("#Xseed***** -  PONTO7.15" , "@@@@@"); 
                            GLB.SHADOW = " ";
                            P_50("PRINT.FRAME");
                        }
                    }
                    if( (SDINTEM119 == GLB.ZEROS))
                    {
                        F10_EXNRSERIEX = move(AV119_TPSERIEN, F10_EXNRSERIEX, 3);
                        F10_EXNRNOTAFI = move (AV119_NRNOTAFI, F10_EXNRNOTAFI, 9, 0,"UNSIGNED");
                        F10_EXCDMODENF = move (AV119_CDMODENF, F10_EXCDMODENF, 1, 0,"UNSIGNED");
                        F10_EXTPREGIST = move (AV119_TPREGIST, F10_EXTPREGIST, 1, 0,"UNSIGNED");
                        if( (AV119_TPREGIST == 1.0))
                        {
                            F10_EXNRNOTFIN = move (AV119_NRORDEMB, F10_EXNRNOTFIN, 7, 0,"UNSIGNED");
                        }
                        F10_EXNRCFICMP = move (SDNRCFICMP, F10_EXNRCFICMP, 6, 0,"UNSIGNED");
                        F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
                        if( (AV119_INSITNOT != 1.0))
                        {
                            F10_EXCDNATOPE = move (SDCDNATOPE, F10_EXCDNATOPE, 4, 0,"UNSIGNED");
                            F10_EXCDNATCOM = move (SDCDNATCOM, F10_EXCDNATCOM, 2, 0,"UNSIGNED");
                            F10_EXVLCONTAX = move (AV119_VLBRUTOP, F10_EXVLCONTAX, 13, 2,"UNSIGNED");
                            F10_EXVLISEIPI = move (AV119_VLBRUTOP, F10_EXVLISEIPI, 13, 2,"UNSIGNED");
                            if( (AV119_CDMERCAD == 2.0))
                            {
                                F10_EXVLCONTAX = add(AV119_VLSEGEXP, F10_EXVLCONTAX, 13, 2, "UNSIGNED", "TRUNCATE");
                                F10_EXVLISEIPI = add(AV119_VLSEGEXP, F10_EXVLISEIPI, 13, 2, "UNSIGNED", "TRUNCATE");
                            }
                        }
//:************** CLASSIFICA O DECENDIO *************
                        F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
                        GSDDIDISAMD = move (format(AV119_DIEMINOT ,"99999999"), GSDDIDISAMD,8);
                        GSDDIDISAMD_GROUP();
                        if( (AXDIINICIO > 20041000.0))
                        {
                            F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                        }
                        else
                        {
                            if( (AXDIINICIO > 20040100.0))
                            {
                                if( (GSDDIDDSAMD < 16.0))
                                {
                                    F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                }
                                else
                                {
                                    F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                }
                            }
                            else
                            {
                                if( (GSDDIDDSAMD < 11.0))
                                {
                                    F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                }
                                else
                                {
                                    if( (GSDDIDDSAMD < 21.0))
                                    {
                                        F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                    else
                                    {
                                        F10_EXINDECEND = move ("3", F10_EXINDECEND, 1, 0,"UNSIGNED");
                                    }
                                }
                            }
                        }
//:*************************************************
//::        EX; 10   AS; C
trace("#Xseed***** -  PONTO7.16" , "@@@@@"); 
                        CG133_InitAuto();
                        AU_CG133_CDCONTAX = auto (F10_EXNRCONTAX, AU_CG133_CDCONTAX, 6, 0,"UNSIGNED");
                        AU_CG133_CDEMPRES = auto (GSDCDEMPRES, AU_CG133_CDEMPRES, 2, 0,"UNSIGNED");
                        AU_CG133_CDMODENF = auto (F10_EXCDMODENF, AU_CG133_CDMODENF, 1, 0,"UNSIGNED");
                        AU_CG133_CDNATCOM = auto (F10_EXCDNATCOM, AU_CG133_CDNATCOM, 2, 0,"UNSIGNED");
                        AU_CG133_CDNATOPE = auto (F10_EXCDNATOPE, AU_CG133_CDNATOPE, 4, 0,"UNSIGNED");
                        AU_CG133_CDUFMUNI = auto(F10_EXCDUFMUNI, AU_CG133_CDUFMUNI, 2);
                        AU_CG133_DIEMINOT = auto (F10_EXDIEMINOT, AU_CG133_DIEMINOT, 8, 0,"UNSIGNED");
                        AU_CG133_DISAINOT = auto (F10_EXDISAINOT, AU_CG133_DISAINOT, 8, 0,"UNSIGNED");
                        AU_CG133_INCONFIN = auto (F10_EXINCONFIN, AU_CG133_INCONFIN, 1, 0,"UNSIGNED");
                        AU_CG133_INDECEND = auto (F10_EXINDECEND, AU_CG133_INDECEND, 1, 0,"UNSIGNED");
                        AU_CG133_INORIGEM = auto (F10_EXINORIGEM, AU_CG133_INORIGEM, 1, 0,"UNSIGNED");
                        AU_CG133_INSITNOT = auto (F10_EXNRCANCEL, AU_CG133_INSITNOT, 1, 0,"UNSIGNED");
                        AU_CG133_INSITREG = auto("E", AU_CG133_INSITREG, 1);
                        AU_CG133_INZONAFR = auto (SDINZONAFR, AU_CG133_INZONAFR, 1, 0,"UNSIGNED");
                        AU_CG133_NRCFICMP = auto (F10_EXNRCFICMP, AU_CG133_NRCFICMP, 6, 0,"UNSIGNED");
                        AU_CG133_NRNOTAFI = auto (F10_EXNRNOTAFI, AU_CG133_NRNOTAFI, 9, 0,"UNSIGNED");
                        AU_CG133_NRNOTFIN = auto (F10_EXNRNOTFIN, AU_CG133_NRNOTFIN, 7, 0,"UNSIGNED");
                        AU_CG133_PCICMNAT = auto (F10_EXPCICMNAT, AU_CG133_PCICMNAT, 5, 2,"UNSIGNED");
                        AU_CG133_PCICMPRO = auto (GLB.ZEROS, AU_CG133_PCICMPRO, 4, 2,"UNSIGNED");
                        AU_CG133_TPREGIST = auto (F10_EXTPREGIST, AU_CG133_TPREGIST, 1, 0,"UNSIGNED");
                        AU_CG133_TPSERIEN = auto(F10_EXNRSERIEX, AU_CG133_TPSERIEN, 3);
                        AU_CG133_VLBASDID = auto (F10_EXVLBASDID, AU_CG133_VLBASDID, 14, 2,"UNSIGNED");
                        AU_CG133_VLICMDID = auto (F10_EXVLICMDID, AU_CG133_VLICMDID, 12, 2,"UNSIGNED");
                        AU_CG133_VLICMDIO = auto (F10_EXVLICMDIO, AU_CG133_VLICMDIO, 12, 2,"UNSIGNED");
                        AU_CG133_VLFCPDES = auto (F10_EXVLFCPDES, AU_CG133_VLFCPDES, 12, 2,"UNSIGNED");
                        AU_CG133_VLBASICM = auto (F10_EXVLBASICM, AU_CG133_VLBASICM, 14, 2,"UNSIGNED");
                        AU_CG133_VLBASIPI = auto (F10_EXVLBASIPI, AU_CG133_VLBASIPI, 14, 2,"UNSIGNED");
                        AU_CG133_VLBASSTR = auto (F10_EXVLBASSTR, AU_CG133_VLBASSTR, 14, 2,"UNSIGNED");
                        AU_CG133_VLCONTAX = auto (F10_EXVLCONTAX, AU_CG133_VLCONTAX, 14, 2,"UNSIGNED");
                        AU_CG133_VLICMPRO = auto (GLB.ZEROS, AU_CG133_VLICMPRO, 14, 2,"UNSIGNED");
                        AU_CG133_VLICMSTR = auto (F10_EXVLICMSTR, AU_CG133_VLICMSTR, 14, 2,"UNSIGNED");
                        AU_CG133_VLIMPICM = auto (F10_EXVLIMPICM, AU_CG133_VLIMPICM, 14, 2,"UNSIGNED");
                        AU_CG133_VLIMPIPI = auto (F10_EXVLIMPIPI, AU_CG133_VLIMPIPI, 14, 2,"UNSIGNED");
                        AU_CG133_VLISEICM = auto (F10_EXVLISEICM, AU_CG133_VLISEICM, 14, 2,"UNSIGNED");
                        AU_CG133_VLISEIPI = auto (F10_EXVLISEIPI, AU_CG133_VLISEIPI, 14, 2,"UNSIGNED");
                        AU_CG133_VLLIQUID = auto (GLB.ZEROS, AU_CG133_VLLIQUID, 14, 2,"UNSIGNED");
                        AU_CG133_VLOUTICM = auto (F10_EXVLOUTICM, AU_CG133_VLOUTICM, 14, 2,"UNSIGNED");
                        AU_CG133_VLOUTIPI = auto (F10_EXVLOUTIPI, AU_CG133_VLOUTIPI, 14, 2,"UNSIGNED");
                        AU_CG133_VLPERICM = auto (F10_EXVLPERICM, AU_CG133_VLPERICM, 5, 2,"UNSIGNED");
                        AU_CG133_VLPERIPI = auto (F10_EXVLPERIPI, AU_CG133_VLPERIPI, 5, 2,"UNSIGNED");
                        if ((GLB.ERROR.trim()).equals("")==true)
                        {
                            CG133_AutoToFile();
                            CG133_Insert ();
                            CG133_InitAuto();
                        }
						trace("#Xseed***** -  PONTO7.17" , "@@@@@"); 
                        GLB.SHADOW = " ";
                        P_50("PRINT.FRAME");
                        SDINCONTRO = move ("1", SDINCONTRO, 1, 0,"UNSIGNED");
                    }
                    if( (((AXTPRELATO == 2.0) || (AXTPRELATO == 4.0)) || (AXTPRELATO == 6.0)))
                    {
                        if( (((rTrim(AXINSEPDEP)).equals(rTrim("S"))==true) && (AV119_INSITNOT == GLB.ZEROS)))
                        {
                            if( (AV119_CDDEPNFI == GLB.ZEROS))
                            {
                                AV119_CDDEPNFI = move ("99", AV119_CDDEPNFI, 2, 0,"UNSIGNED");
                            }
                            F13_EXCDDEPNFI = move (AV119_CDDEPNFI, F13_EXCDDEPNFI, 2, 0,"UNSIGNED");
                            F13_EXNRNOTDEP = move (AV119_NRNOTAFI, F13_EXNRNOTDEP, 9, 0,"UNSIGNED");
                            F13_EXDIEMIDEP = move (AV119_DIEMINOT, F13_EXDIEMIDEP, 8, 0,"UNSIGNED");
                            F13_EXCDCLIDEP = move (AV119_CDCLIENT, F13_EXCDCLIDEP, 6, 0,"UNSIGNED");
                            F13_EXINCLIDEP = move (AV119_INCLIFOR, F13_EXINCLIDEP, 1, 0,"UNSIGNED");
                            F13_EXCDTIPDEP = move (AV119_CDTIPFAT, F13_EXCDTIPDEP, 2, 0,"UNSIGNED");
                            F13_EXVLTOICMN = move (AV119_VLTOICMN, F13_EXVLTOICMN, 12, 2,"UNSIGNED");
                            F13_EXVLTOICMN = add(AV119_VLICMTXF, F13_EXVLTOICMN, 12, 2, "UNSIGNED", "TRUNCATE");
                            if( (AV119_NRSOLICI != GLB.ZEROS))
                            {
                                GLB.SECURE = false;
                                GLB.STATUS = GS11401_DetermineEvery (AV119_NRSOLICI);
                                while (GS114_XSEEDEOF == false)
                                {   GS11401_DetermineMoveNext();
                                    if (GS114_XSEEDEOF == true)
                                    {   break;
                                    }
                                    F13_EXNRUSUNFI = move (GS114_NRUSUARI, F13_EXNRUSUNFI, 4, 0,"UNSIGNED");
                                    break;
                                }
                            }
                            GLBEXE_EXTRACTAS = "13";
                            P_EXTRACTE();
                        }
                    }
                    if( ((AXTPRELATO == 1.0) && (AXINATUALI == 2.0)))
                    {
                        if( (((((((((((((GEVLINTEGR > GLB.ZEROS) || (GEVLBASICM > GLB.ZEROS)) || (GEVLBASIPI > GLB.ZEROS)) || (GEVLIMPICM > GLB.ZEROS)) || (GEVLIMPIPI > GLB.ZEROS)) || (GEVLINTICM > GLB.ZEROS)) || (GEVLINTIPI > GLB.ZEROS)) || (GEVLOUTICM > GLB.ZEROS)) || (GEVLOUTIPI > GLB.ZEROS)) || (GEVLCONTNC > GLB.ZEROS)) || (GEVLBICMNC > GLB.ZEROS)) || (GEVLBASSTR > GLB.ZEROS)) || (GEVLICMSTR > GLB.ZEROS)))
                        {	trace("#Xseed***** -  PONTO7.18" , "@@@@@"); 
                            GLB.SHADOW = " ";
                            P_62("PRINT.FRAME");
                            GEVLINTEGR = move (GLB.ZEROS, GEVLINTEGR, 14, 2,"UNSIGNED");
                            GEVLINTEGR_ITEM();
                            GEVLBASICM = move (GLB.ZEROS, GEVLBASICM, 14, 2,"UNSIGNED");
                            GEVLBASICM_ITEM();
                            GEVLBASIPI = move (GLB.ZEROS, GEVLBASIPI, 14, 2,"UNSIGNED");
                            GEVLBASIPI_ITEM();
                            GEVLIMPICM = move (GLB.ZEROS, GEVLIMPICM, 14, 2,"UNSIGNED");
                            GEVLIMPICM_ITEM();
                            GEVLIMPIPI = move (GLB.ZEROS, GEVLIMPIPI, 14, 2,"UNSIGNED");
                            GEVLIMPIPI_ITEM();
                            GEVLINTICM = move (GLB.ZEROS, GEVLINTICM, 14, 2,"UNSIGNED");
                            GEVLINTICM_ITEM();
                            GEVLINTIPI = move (GLB.ZEROS, GEVLINTIPI, 14, 2,"UNSIGNED");
                            GEVLINTIPI_ITEM();
                            GEVLOUTICM = move (GLB.ZEROS, GEVLOUTICM, 14, 2,"UNSIGNED");
                            GEVLOUTICM_ITEM();
                            GEVLOUTIPI = move (GLB.ZEROS, GEVLOUTIPI, 14, 2,"UNSIGNED");
                            GEVLOUTIPI_ITEM();
                            GEVLCONTNC = move (GLB.ZEROS, GEVLCONTNC, 14, 2,"UNSIGNED");
                            GEVLCONTNC_ITEM();
                            GEVLBICMNC = move (GLB.ZEROS, GEVLBICMNC, 14, 2,"UNSIGNED");
                            GEVLBICMNC_ITEM();
                            GEVLBASSTR = move (GLB.ZEROS, GEVLBASSTR, 14, 2,"UNSIGNED");
                            GEVLBASSTR_ITEM();
                            GEVLICMSTR = move (GLB.ZEROS, GEVLICMSTR, 14, 2,"UNSIGNED");
                            GEVLICMSTR_ITEM();
								trace("#Xseed***** -  PONTO7.19" , "@@@@@"); 
                        }
                    }
                }
                GRVLATUALI = move(GLB.SPACES, GRVLATUALI, 423);
                GRVLATUALI_GROUP();
            }
			trace("#Xseed***** -  PONTO8 " , "@@@@@"); 
            GLB.SHADOW = "N";
            P_29("PRINT.FRAME");
				trace("#Xseed***** -  PONTO7.20" , "@@@@@"); 
            CommitTransaction();
				trace("#Xseed***** -  PONTO7.21" , "@@@@@"); 
            if( ((AXINMESPER == 1.0) && (AXINATUALI == 2.0)))
            {
                message("ATTENTION", "** INCLUSAO ARQUIVO CG122 - IMPOSTOS PARA CLIENTE/FORNECEDOR **");
                trace("#Xseed***** -  PONTO7.22" , "@@@@@"); 
				P_SORT1();
				trace("#Xseed***** -  PONTO7.23" , "@@@@@"); 
                SDCDCLIFOR = move (GLB.ZEROS, SDCDCLIFOR, 6, 0,"UNSIGNED");
                if ((rTrim(GLBEXH.command)).equals("") == true)
                {
                    GLBEXH.open(GLBEXH_XSEEDTITLE, "OUTPUT");
                    if (GLBEXH.openStatus.equals("")==true)
                    {   AuditMSG("Open OUTPUT H (" + GLBEXH_XSEEDTITLE + ")");
                    }
                    else
                    {   abort("Can't OpenFile H (" + GLBEXH_XSEEDTITLE + ")");
                    }
                }
                GLBEXH.command = "DT.ACTUAL";
                if ((rTrim(GLB.EXH_STATUS)).equals("") == false)
                {   if (GLBEXH != null)
                    {   if (GLB.EXH_XSEEDCOUNT != 0)
                        {   GLBEXH.write(GLB.EXH_XSEEDBUFFER.toString());
                            GLB.EXH_XSEEDCOUNT = 0;
                         }
                         if ((GLBEXH.out!=null) && (GLBEXH.out.checkError()) )
                         {   GLB.TASK=53;
                             abort("Error on File : " + GLBEXH_XSEEDTITLE);
                         }
                        GLBEXH.close();
                        AuditMSG("Close H (" + GLBEXH_XSEEDTITLE + "), Reads: " + cStr(GLB.EXH_XSEEDREADS) + " Writes: " + cStr(GLB.EXH_XSEEDWRITES));
                        GLB.EXH_XSEEDREADS = 0;
                        GLB.EXH_XSEEDWRITES = 0;
                    }
                    GLB.EXH_STATUS = "";
                }
                extractFile = new File(GLBEXH_XSEEDTITLE);
                if (extractFile.exists() == false)
                {   AuditMSG (GLBEXH_XSEEDTITLE + " not found");
                    GLB.STATUS = "*****";
                }
                else
                {
                    GLBEXH.open(GLBEXH_XSEEDTITLE,"INPUT");
                    if (GLBEXH.openStatus.equals("")==true)
                    {   AuditMSG("Open INPUT H (" + GLBEXH_XSEEDTITLE + ")");
                        GLB.EXH_STATUS = "INPUT";
                    }
                    else
                    {   abort("Can't Open File H (" + GLBEXH_XSEEDTITLE + ")");
                    }
                    GLB.EXH_STATUS = "INPUT";
                    GLB.STATUS = "*****";
                    if (GLB.RECORDH > 0.0)
                    {   for (double i = 1; i <= GLB.RECORDH + 1; i++)
                        {   GLBEXH_XSEEDREG = GLBEXH.read();
                        }
                        GLB.EXH_XSEEDREADS = GLB.RECORDH;
                    }
                    else
                    {   GLBEXH_XSEEDREG = GLBEXH.read();
                    }
                    while (GLBEXH_XSEEDREG != null)
                    {   GLBEXH_EXTRACTAS = "";
                        P_ReadGLBEXH();
                        GLB.STATUS = "";
                    if( ((H_EXCDCLIFOR != SDCDCLIFOR) || (H_EXINCLIFOR != SDINCLIFOR)))
                    {
                        if( (SDCDCLIFOR != GLB.ZEROS))
                        {
							trace("#Xseed***** -  PONTO7.24" , "@@@@@"); 
                            CG122_InitAuto();
                            AU_CG122_AMMOVTOX = auto (AXAMREFERE, AU_CG122_AMMOVTOX, 6, 0,"UNSIGNED");
                            AU_CG122_CDCLIFOR = auto (SDCDCLIFOR, AU_CG122_CDCLIFOR, 6, 0,"UNSIGNED");
                            AU_CG122_CDEMPRES = auto (GSDCDEMPRES, AU_CG122_CDEMPRES, 2, 0,"UNSIGNED");
                            AU_CG122_CDFILIAL = auto (AXCDFILIAL, AU_CG122_CDFILIAL, 2, 0,"UNSIGNED");
                            AU_CG122_INCLIFOR = auto (SDINCLIFOR, AU_CG122_INCLIFOR, 1, 0,"UNSIGNED");
                            AU_CG122_INENTSAI = auto (2.0, AU_CG122_INENTSAI, 1, 0,"UNSIGNED");
                            AU_CG122_INSITREG = auto("A", AU_CG122_INSITREG, 1);
                            AU_CG122_VLMOVIME = auto (SDVLMOVIME, AU_CG122_VLMOVIME, 12, 2,"UNSIGNED");
                            if ((GLB.ERROR.trim()).equals("")==true)
                            {
                                CG122_AutoToFile();
                                CG122_Insert ();
                                CG122_InitAuto();
                            }
							trace("#Xseed***** -  PONTO7.25" , "@@@@@"); 
                        }
                        SDVLMOVIME = move (GLB.ZEROS, SDVLMOVIME, 14, 2,"UNSIGNED");
                        SDCDCLIFOR = move (H_EXCDCLIFOR, SDCDCLIFOR, 6, 0,"UNSIGNED");
                        SDINCLIFOR = move (H_EXINCLIFOR, SDINCLIFOR, 1, 0,"UNSIGNED");
                    }
                    SDVLMOVIME = add(H_EXVLMOVIME, SDVLMOVIME, 14, 2, "UNSIGNED", "TRUNCATE");
//:: Begin Insertable GlbLogic GSISLP
//  :---------------------------------------------------------------------
//  : OBJETIVO: FAZER SLEEPS EM REPORTS
//  : ---------
//  : PARAMETROS RECEBIDOS
//  : --------------------
//  : GSDNRSLEEPS ED N LE 06 : OPCIONAL. QUANTIDADE DE TRANSACOES A CADA
//  :                          SLEEP. SE NAO FOR INFORMADO, SERA ASSUMIDO
//  :                          100 TRANSACOES
//  : PARAMETROS DEVOLVIDOS
//  : ---------------------
//  : NENHUM
//  :---------------------------------------------------------------------
                    GSDNRCONSLP = add(cDec("1"), GSDNRCONSLP, 6, 0, "UNSIGNED", "TRUNCATE");
                    if( (GSDNRCONSLP > GSDNRSLEEPS))
                    {
                        GSDNRCONSLP = move (GLB.ZEROS, GSDNRCONSLP, 6, 0,"UNSIGNED");
                        CommitTransaction();
                    }
//:: End Insertable GlbLogic GSISLP
                    }
                }
                if( (SDCDCLIFOR != GLB.ZEROS))
                {
					trace("#Xseed***** -  PONTO7.26" , "@@@@@"); 
                    CG122_InitAuto();
                    AU_CG122_AMMOVTOX = auto (AXAMREFERE, AU_CG122_AMMOVTOX, 6, 0,"UNSIGNED");
                    AU_CG122_CDCLIFOR = auto (SDCDCLIFOR, AU_CG122_CDCLIFOR, 6, 0,"UNSIGNED");
                    AU_CG122_CDEMPRES = auto (GSDCDEMPRES, AU_CG122_CDEMPRES, 2, 0,"UNSIGNED");
                    AU_CG122_CDFILIAL = auto (AXCDFILIAL, AU_CG122_CDFILIAL, 2, 0,"UNSIGNED");
                    AU_CG122_INCLIFOR = auto (SDINCLIFOR, AU_CG122_INCLIFOR, 1, 0,"UNSIGNED");
                    AU_CG122_INENTSAI = auto (2.0, AU_CG122_INENTSAI, 1, 0,"UNSIGNED");
                    AU_CG122_INSITREG = auto("A", AU_CG122_INSITREG, 1);
                    AU_CG122_VLMOVIME = auto (SDVLMOVIME, AU_CG122_VLMOVIME, 12, 2,"UNSIGNED");
                    if ((GLB.ERROR.trim()).equals("")==true)
                    {
                        CG122_AutoToFile();
                        CG122_Insert ();
                        CG122_InitAuto();
                    }
					trace("#Xseed***** -  PONTO7.27" , "@@@@@"); 
                }
                CommitTransaction();
                message("ATTENTION", "** INCLUSAO ARQUIVO CG123 - IMPOSTOS POR CLASSIF.FISCAL **");
//:::    SO; I   ASC; I*EXCDCLAFIS
//:::
//:::    MV; GLB.ZEROS                              SDCDCLAFIS
//:::    DT; ACTUAL I
//:::        DW; I*EXCDCLAFIS NOT = SDCDCLAFIS
//:::            DW; SDCDCLAFIS NOT = GLB.ZEROS
//:::                AUTO.ENTRY; CG123
//:::                AUTO; AXAMREFERE                AMMOVTOX
//:::                AUTO; SDCDCLAFIS                CDCLAFIS
//:::                AUTO; GSDCDEMPRES               CDEMPRES
//:::                AUTO; AXCDFILIAL                CDFILIAL
//:::                AUTO; (2)                       INENTSAI
//:::                AUTO; (A)                       INSITREG
//:::                AUTO; SDVLMOVIME                VLMOVIME
//:::                AUTO;WRITE&CLEAR
//:::            END;
//:::            MV; GLB.ZEROS                       SDVLMOVIME
//:::            MV; I*EXCDCLAFIS                    SDCDCLAFIS
//:::        END;
//:::
//:::        AD; I*EXVLMOVIME                        SDVLMOVIME
//:::        INS; GSISLP
//:::    END;
                SDCDCLAFIS = move (GLB.ZEROS, SDCDCLAFIS, 10, 0,"UNSIGNED");
                GLB.SECURE = false;
                GLB.STATUS = CG16801_DetermineGroupFrom (1, false, GSDCDEMPRES, GLB.ZEROS, GSDCDEMPRES, GLB.ZEROS);
                while (CG168_XSEEDEOF == false)
                {
					trace("#Xseed***** -  PONTO7.28" , "@@@@@"); 
                    CG16801_DetermineMoveNext ();
                    if (CG168_XSEEDEOF == true)
                    {    break;
                    }
                    if( (CG168_CDCLAFIS != SDCDCLAFIS))
                    {
                        if( (SDCDCLAFIS != GLB.ZEROS))
                        {
                            CG123_InitAuto();
                            AU_CG123_AMMOVTOX = auto (AXAMREFERE, AU_CG123_AMMOVTOX, 6, 0,"UNSIGNED");
                            AU_CG123_CDCLAFIS = auto (SDCDCLAFIS, AU_CG123_CDCLAFIS, 10, 0,"UNSIGNED");
                            AU_CG123_CDEMPRES = auto (GSDCDEMPRES, AU_CG123_CDEMPRES, 2, 0,"UNSIGNED");
                            AU_CG123_CDFILIAL = auto (AXCDFILIAL, AU_CG123_CDFILIAL, 2, 0,"UNSIGNED");
                            AU_CG123_INENTSAI = auto (2.0, AU_CG123_INENTSAI, 1, 0,"UNSIGNED");
                            AU_CG123_INSITREG = auto("A", AU_CG123_INSITREG, 1);
                            AU_CG123_VLMOVIME = auto (SDVLMOVIME, AU_CG123_VLMOVIME, 12, 2,"UNSIGNED");
                            if ((GLB.ERROR.trim()).equals("")==true)
                            {
                                CG123_AutoToFile();
                                CG123_Insert ();
                                CG123_InitAuto();
                            }
                        }
						trace("#Xseed***** -  PONTO7.29" , "@@@@@"); 
                        SDVLMOVIME = move (GLB.ZEROS, SDVLMOVIME, 14, 2,"UNSIGNED");
                        SDCDCLAFIS = move (CG168_CDCLAFIS, SDCDCLAFIS, 10, 0,"UNSIGNED");
                    }
                    SDVLMOVIME = add(CG168_VLMOVIME, SDVLMOVIME, 14, 2, "UNSIGNED", "TRUNCATE");
//:: Begin Insertable GlbLogic GSISLP
//  :---------------------------------------------------------------------
//  : OBJETIVO: FAZER SLEEPS EM REPORTS
//  : ---------
//  : PARAMETROS RECEBIDOS
//  : --------------------
//  : GSDNRSLEEPS ED N LE 06 : OPCIONAL. QUANTIDADE DE TRANSACOES A CADA
//  :                          SLEEP. SE NAO FOR INFORMADO, SERA ASSUMIDO
//  :                          100 TRANSACOES
//  : PARAMETROS DEVOLVIDOS
//  : ---------------------
//  : NENHUM
//  :---------------------------------------------------------------------
                    GSDNRCONSLP = add(cDec("1"), GSDNRCONSLP, 6, 0, "UNSIGNED", "TRUNCATE");
                    if( (GSDNRCONSLP > GSDNRSLEEPS))
                    {
                        GSDNRCONSLP = move (GLB.ZEROS, GSDNRCONSLP, 6, 0,"UNSIGNED");
						trace("#Xseed***** -  PONTO7.30" , "@@@@@"); 
                        CommitTransaction();
						trace("#Xseed***** -  PONTO7.31" , "@@@@@"); 
                    }
//:: End Insertable GlbLogic GSISLP
                }
                if( (SDCDCLAFIS != GLB.ZEROS))
                {
					trace("#Xseed***** -  PONTO7.32" , "@@@@@"); 
                    CG123_InitAuto();
                    AU_CG123_AMMOVTOX = auto (AXAMREFERE, AU_CG123_AMMOVTOX, 6, 0,"UNSIGNED");
                    AU_CG123_CDCLAFIS = auto (SDCDCLAFIS, AU_CG123_CDCLAFIS, 10, 0,"UNSIGNED");
                    AU_CG123_CDEMPRES = auto (GSDCDEMPRES, AU_CG123_CDEMPRES, 2, 0,"UNSIGNED");
                    AU_CG123_CDFILIAL = auto (AXCDFILIAL, AU_CG123_CDFILIAL, 2, 0,"UNSIGNED");
                    AU_CG123_INENTSAI = auto (2.0, AU_CG123_INENTSAI, 1, 0,"UNSIGNED");
                    AU_CG123_INSITREG = auto("A", AU_CG123_INSITREG, 1);
                    AU_CG123_VLMOVIME = auto (SDVLMOVIME, AU_CG123_VLMOVIME, 12, 2,"UNSIGNED");
                    if ((GLB.ERROR.trim()).equals("")==true)
                    {
                        CG123_AutoToFile();
                        CG123_Insert ();
                        CG123_InitAuto();
                    }
					trace("#Xseed***** -  PONTO7.33" , "@@@@@"); 
                }
				trace("#Xseed***** -  PONTO7.34" , "@@@@@"); 
                CommitTransaction();
				trace("#Xseed***** -  PONTO7.35" , "@@@@@"); 
            }
            if (SDINLIVANU == GLB.ZEROS)
            {
                SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
            }
            else {
                SDNRCONPAG = move (SDNRULTPRS, SDNRCONPAG, 4, 0,"UNSIGNED");
                if( (SDNRCONPAG == GLB.ZEROS))
                {
                    SDNRCONPAG = move ("1", SDNRCONPAG, 4, 0,"UNSIGNED");
                }
            }
            if( ((rTrim(AXINBACDET)).equals(rTrim("S"))==true))
            {
                EXITOROB:
                {
                    message("ATTENTION", "** LEITURA - CG133 - DETALHADO **");
                    SDVLBASICM = move (GLB.ZEROS, SDVLBASICM, 14, 2,"UNSIGNED");
                    SDVLBASSTR = move (GLB.ZEROS, SDVLBASSTR, 14, 2,"UNSIGNED");
                    SDVLICMSTR = move (GLB.ZEROS, SDVLICMSTR, 14, 2,"UNSIGNED");
                    SDINSTATUS = move (GLB.ZEROS, SDINSTATUS, 1, 0,"UNSIGNED");
                    SDCDNATCOM = move (GLB.ZEROS, SDCDNATCOM, 2, 0,"UNSIGNED");
					trace("#Xseed***** -  PONTO7.36" , "@@@@@"); 
                    QCG13301_SelectEvery (GSDCDEMPRES);
                    while(QCG13301_XSEEDEOF == false)
                    {   QCG13301_MoveNext();
                        if (QCG13301_XSEEDEOF == true)
                        {    break;
                        }
                        GSDDIDISAMD = move (format(CG133_DIEMINOT ,"99999999"), GSDDIDISAMD,8);
                        GSDDIDISAMD_GROUP();
                        SDAMEMIATU = move (GSDDIAMSAMD, SDAMEMIATU, 6, 0,"UNSIGNED");
                        if( (SDNRNOTANT == GLB.ZEROS))
                        {
                            SDNRNOTANT = move (CG133_NRNOTAFI, SDNRNOTANT, 9, 0,"UNSIGNED");
                            SDCDMODANT = move (CG133_CDMODENF, SDCDMODANT, 1, 0,"UNSIGNED");
                            SDTPREGANT = move (CG133_TPREGIST, SDTPREGANT, 1, 0,"UNSIGNED");
                            SDNRNOTFIN = move (CG133_NRNOTFIN, SDNRNOTFIN, 6, 0,"UNSIGNED");
                            SDTPSERANT = move(CG133_TPSERIEN, SDTPSERANT, 3);
                            SDCDCONANT = move (CG133_CDCONTAX, SDCDCONANT, 6, 0,"UNSIGNED");
                            SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                            SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                            SDPCIPIANT = move (CG133_VLPERIPI, SDPCIPIANT, 5, 2,"UNSIGNED");
                            SDDIEMIANT = move (CG133_DIEMINOT, SDDIEMIANT, 8, 0,"UNSIGNED");
                            SDNRCFICMP = move (CG133_NRCFICMP, SDNRCFICMP, 6, 0,"UNSIGNED");
                            SDCDUFMUNI = move(CG133_CDUFMUNI, SDCDUFMUNI, 2);
                            SDINZONANT = move (CG133_INZONAFR, SDINZONANT, 1, 0,"UNSIGNED");
                            SDAMEMIANT = move (SDAMEMIATU, SDAMEMIANT, 6, 0,"UNSIGNED");
                        }
                        if( (((CG133_NRNOTAFI != SDNRNOTANT) || ((rTrim(CG133_TPSERIEN)).equals(rTrim(SDTPSERANT))==false)) || (CG133_DIEMINOT != SDDIEMIANT)))
                        {
                            EXITO:
                            {
                                if( (SDCDCANCEL == 1.0))
                                {
                                    F4_RLCDESPECI = move("NF", F4_RLCDESPECI, 3);
                                    if( ((SDINOPTSIM == 1.0) && ((rTrim(SDTPSERANT)).equals(rTrim("2D"))==true)))
                                    {
                                        F4_RLCDESPECI = move("CF", F4_RLCDESPECI, 3);
                                    }
                                    F4_RLNRSERIEX = move(F2_RLNRSERIEX, F4_RLNRSERIEX, 3);
                                    F2_RLNRSERIEX = move(GLB.SPACES, F2_RLNRSERIEX, 3);
                                    F4_RLNRNOTAFI = move (F2_RLNRNOTAFI, F4_RLNRNOTAFI, 9, 0,"UNSIGNED");
                                    F2_RLNRNOTAFI = move (GLB.ZEROS, F2_RLNRNOTAFI, 9, 0,"UNSIGNED");
                                    if( (F2_RLNRNOTFIN > GLB.ZEROS))
                                    {
                                        F4_RLDSLETRAA = move("A", F4_RLDSLETRAA, 1);
                                        F4_RLNRNOTFIN = move (F2_RLNRNOTFIN, F4_RLNRNOTFIN, 4, 0,"UNSIGNED");
                                        F2_RLDSLETRAA = move(GLB.SPACES, F2_RLDSLETRAA, 1);
                                        F2_RLNRNOTFIN = move (GLB.ZEROS, F2_RLNRNOTFIN, 4, 0,"UNSIGNED");
                                    }
                                    F4_RLDTDIADOC = move (F2_RLDTDIADOC, F4_RLDTDIADOC, 2, 0,"UNSIGNED");
                                    F2_RLDTDIADOC = move (GLB.ZEROS, F2_RLDTDIADOC, 2, 0,"UNSIGNED");
                                    F4_RLDSCANCEL = move("NOTA CANCELADA", F4_RLDSCANCEL, 30);
                                    if( ((SDINOPTSIM == 1.0) && ((rTrim(SDTPSERANT)).equals(rTrim("2D"))==true)))
                                    {
                                        F4_RLDSCANCEL = move("CUPOM FISCAL CANCELADO", F4_RLDSCANCEL, 30);
                                    }
                                    GLB.SHADOW = " ";
                                    P_4("PRINT.FRAME");
                                    SDVLBASICM = move (GLB.ZEROS, SDVLBASICM, 14, 2,"UNSIGNED");
                                    SDVLBASSTR = move (GLB.ZEROS, SDVLBASSTR, 14, 2,"UNSIGNED");
                                    SDPCICMNOT = move (GLB.ZEROS, SDPCICMNOT, 5, 2,"UNSIGNED");
                                    SDVLICMNOT = move (GLB.ZEROS, SDVLICMNOT, 14, 2,"UNSIGNED");
                                    SDVLICMSTR = move (GLB.ZEROS, SDVLICMSTR, 14, 2,"UNSIGNED");
                                    SDVLISENTA = move (GLB.ZEROS, SDVLISENTA, 14, 2,"UNSIGNED");
                                    SDVLOUTRAS = move (GLB.ZEROS, SDVLOUTRAS, 14, 2,"UNSIGNED");
                                    SDVLBASIPI = move (GLB.ZEROS, SDVLBASIPI, 14, 2,"UNSIGNED");
                                    SDPCIPINOT = move (GLB.ZEROS, SDPCIPINOT, 5, 2,"UNSIGNED");
                                    SDVLIPINOT = move (GLB.ZEROS, SDVLIPINOT, 14, 2,"UNSIGNED");
                                    SDVLIPIISE = move (GLB.ZEROS, SDVLIPIISE, 14, 2,"UNSIGNED");
                                    SDVLIPIOUT = move (GLB.ZEROS, SDVLIPIOUT, 14, 2,"UNSIGNED");
                                    F2_RLCDCONTAX = move (GLB.ZEROS, F2_RLCDCONTAX, 6, 0,"UNSIGNED");
                                    F2_RLCDCONTAX = move (GLB.ZEROS, F2_RLCDCONTAX, 6, 0,"UNSIGNED");
                                    F2_RLCDNATOGR = move(GLB.SPACES, F2_RLCDNATOGR, 6);
                                    F2_RLNRBASCAL = move (GLB.ZEROS, F2_RLNRBASCAL, 10, 2,"UNSIGNED");
                                    F2_RLVLPERCEN = move (GLB.ZEROS, F2_RLVLPERCEN, 4, 2,"UNSIGNED");
                                    F2_RLVLIMPOST = move (GLB.ZEROS, F2_RLVLIMPOST, 9, 2,"UNSIGNED");
                                    F2_RLVLISENTA = move (GLB.ZEROS, F2_RLVLISENTA, 10, 2,"UNSIGNED");
                                    F2_RLVLOUTRAS = move (GLB.ZEROS, F2_RLVLOUTRAS, 10, 2,"UNSIGNED");
                                    break EXITO;
                                }
                                if( (SDPCICMNOT == 17.00))
                                {
                                    F9_RLVLBASTSC = add(SDVLBASSTR, F9_RLVLBASTSC, 10, 2, "UNSIGNED", "TRUNCATE");
                                    F9_RLVLICSTSC = add(SDVLICMSTR, F9_RLVLICSTSC, 10, 2, "UNSIGNED", "TRUNCATE");
                                }
                                else
                                {
                                    F9_RLVLBASTIN = add(SDVLBASSTR, F9_RLVLBASTIN, 10, 2, "UNSIGNED", "TRUNCATE");
                                    F9_RLVLICSTIN = add(SDVLICMSTR, F9_RLVLICSTIN, 10, 2, "UNSIGNED", "TRUNCATE");
                                }
                                F2_RLDSOBSERV = move("ICMS", F2_RLDSOBSERV, 4);
                                CALC_ICM_NF ();
                                if (GLB.EXIT==true)
                                {
                                   GLB.EXIT=false;
                                    return;
                                }
                                F2_RLVLISENTA = move (SDVLISENTA, F2_RLVLISENTA, 10, 2,"UNSIGNED");
                                F2_RLVLOUTRAS = move (SDVLOUTRAS, F2_RLVLOUTRAS, 10, 2,"UNSIGNED");
                                SDINSTATUS = move (GLB.ZEROS, SDINSTATUS, 1, 0,"UNSIGNED");
                                GLB.SHADOW = " ";
                                P_2("PRINT.FRAME");
                                if( (SDNRCFICMP != GLB.ZEROS))
                                {
                                    F4_RLDSCANCEL = move("ICMS PAGO ECF", F4_RLDSCANCEL, 30);
                                    F4_RLDSCANCEL = attachAndSpace(format(SDNRCFICMP,"999999"), F4_RLDSCANCEL, 30);
                                    GLB.SHADOW = " ";
                                    P_4("PRINT.FRAME");
                                }
                                F3_RLVLBASICM = add(SDVLBASICM, F3_RLVLBASICM, 10, 2, "UNSIGNED", "TRUNCATE");
                                F3_RLVLIMPICM = add(SDVLICMNOT, F3_RLVLIMPICM, 9, 2, "UNSIGNED", "TRUNCATE");
                                F3_RLVLISEICM = add(SDVLISENTA, F3_RLVLISEICM, 10, 2, "UNSIGNED", "TRUNCATE");
                                F3_RLVLOUTICM = add(SDVLOUTRAS, F3_RLVLOUTICM, 10, 2, "UNSIGNED", "TRUNCATE");
                                if( (GLB.LINECOUNT > SDNRLINHAS))
                                {
                                    GLB.SHADOW = " ";
                                    P_3("PRINT.FRAME");
                                }
                                F2_RLDSOBSERV = move("IPI", F2_RLDSOBSERV, 4);
                                F2_RLNRBASCAL = move (SDVLBASIPI, F2_RLNRBASCAL, 10, 2,"UNSIGNED");
                                F2_RLVLPERCEN = move (SDPCIPINOT, F2_RLVLPERCEN, 4, 2,"UNSIGNED");
                                F2_RLVLIMPOST = move (SDVLIPINOT, F2_RLVLIMPOST, 9, 2,"UNSIGNED");
                                F2_RLVLISENTA = move (SDVLIPIISE, F2_RLVLISENTA, 10, 2,"UNSIGNED");
                                F2_RLVLOUTRAS = move (SDVLIPIOUT, F2_RLVLOUTRAS, 10, 2,"UNSIGNED");
                                GLB.SHADOW = " ";
                                P_2("PRINT.FRAME");
                                F3_RLVLBASIPI = add(SDVLBASIPI, F3_RLVLBASIPI, 10, 2, "UNSIGNED", "TRUNCATE");
                                F3_RLVLIMPIPI = add(SDVLIPINOT, F3_RLVLIMPIPI, 9, 2, "UNSIGNED", "TRUNCATE");
                                F3_RLVLISEIPI = add(SDVLIPIISE, F3_RLVLISEIPI, 10, 2, "UNSIGNED", "TRUNCATE");
                                F3_RLVLOUTIPI = add(SDVLIPIOUT, F3_RLVLOUTIPI, 10, 2, "UNSIGNED", "TRUNCATE");
                                if( (GLB.LINECOUNT > SDNRLINHAS))
                                {
                                    GLB.SHADOW = " ";
                                    P_3("PRINT.FRAME");
                                }
                                if( (SDVLBASSTR != GLB.ZEROS))
                                {
                                    F2_RLDSOBSERV = move("S.T.", F2_RLDSOBSERV, 4);
                                    F2_RLNRBASCAL = move (SDVLBASSTR, F2_RLNRBASCAL, 10, 2,"UNSIGNED");
                                    F2_RLVLIMPOST = move (SDVLICMSTR, F2_RLVLIMPOST, 9, 2,"UNSIGNED");
                                    GLB.SHADOW = " ";
                                    P_2("PRINT.FRAME");
                                }
                                SDVLBASICM = move (GLB.ZEROS, SDVLBASICM, 14, 2,"UNSIGNED");
                                SDVLBASSTR = move (GLB.ZEROS, SDVLBASSTR, 14, 2,"UNSIGNED");
                                SDVLICMNOT = move (GLB.ZEROS, SDVLICMNOT, 14, 2,"UNSIGNED");
                                SDVLICMSTR = move (GLB.ZEROS, SDVLICMSTR, 14, 2,"UNSIGNED");
                                SDVLISENTA = move (GLB.ZEROS, SDVLISENTA, 14, 2,"UNSIGNED");
                                SDVLOUTRAS = move (GLB.ZEROS, SDVLOUTRAS, 14, 2,"UNSIGNED");
                                SDPCICMNOT = move (GLB.ZEROS, SDPCICMNOT, 5, 2,"UNSIGNED");
                                SDVLBASIPI = move (GLB.ZEROS, SDVLBASIPI, 14, 2,"UNSIGNED");
                                SDPCIPINOT = move (GLB.ZEROS, SDPCIPINOT, 5, 2,"UNSIGNED");
                                SDVLIPINOT = move (GLB.ZEROS, SDVLIPINOT, 14, 2,"UNSIGNED");
                                SDVLIPIISE = move (GLB.ZEROS, SDVLIPIISE, 14, 2,"UNSIGNED");
                                SDVLIPIOUT = move (GLB.ZEROS, SDVLIPIOUT, 14, 2,"UNSIGNED");
                                SDCDCANCEL = move (GLB.ZEROS, SDCDCANCEL, 1, 0,"UNSIGNED");
                                SDVLVLRCON = move (GLB.ZEROS, SDVLVLRCON, 14, 2,"UNSIGNED");
                                SDTPSERIEX = move(GLB.SPACES, SDTPSERIEX, 3);
                                SDNRCFICMP = move (GLB.ZEROS, SDNRCFICMP, 6, 0,"UNSIGNED");
                            }
                            if( (GLB.LINECOUNT > SDNRLINHAS))
                            {
                                GLB.SHADOW = " ";
                                P_3("PRINT.FRAME");
                            }
                            SDNRNOTANT = move (CG133_NRNOTAFI, SDNRNOTANT, 9, 0,"UNSIGNED");
                            SDCDMODANT = move (CG133_CDMODENF, SDCDMODANT, 1, 0,"UNSIGNED");
                            SDTPREGANT = move (CG133_TPREGIST, SDTPREGANT, 1, 0,"UNSIGNED");
                            SDNRNOTFIN = move (CG133_NRNOTFIN, SDNRNOTFIN, 6, 0,"UNSIGNED");
                            SDTPSERANT = move(CG133_TPSERIEN, SDTPSERANT, 3);
                            SDDIEMIANT = move (CG133_DIEMINOT, SDDIEMIANT, 8, 0,"UNSIGNED");
                            SDCDCONANT = move (CG133_CDCONTAX, SDCDCONANT, 6, 0,"UNSIGNED");
                            SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                            SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                            SDPCIPIANT = move (CG133_VLPERIPI, SDPCIPIANT, 5, 2,"UNSIGNED");
                            SDTPSERIEX = move(CG133_TPSERIEN, SDTPSERIEX, 3);
                            SDNRCFICMP = move (CG133_NRCFICMP, SDNRCFICMP, 6, 0,"UNSIGNED");
                            SDCDUFMUNI = move(CG133_CDUFMUNI, SDCDUFMUNI, 2);
                            SDINZONANT = move (CG133_INZONAFR, SDINZONANT, 1, 0,"UNSIGNED");
                            SDINSTATUS = move (GLB.ZEROS, SDINSTATUS, 1, 0,"UNSIGNED");
                            if( (SDAMEMIATU != SDAMEMIANT))
                            {
                                GLB.LINECOUNT = move ("199", GLB.LINECOUNT, 4, 0,"UNSIGNED");
                                SDAMEMIANT = move (SDAMEMIATU, SDAMEMIANT, 6, 0,"UNSIGNED");
                            }
                        }
                        if( (SDINSTATUS == GLB.ZEROS))
                        {
                            F2_RLCDESPECI = move("NF", F2_RLCDESPECI, 3);
                            if( ((SDINOPTSIM == 1.0) && ((rTrim(CG133_TPSERIEN)).equals(rTrim("2D"))==true)))
                            {
                                F2_RLCDESPECI = move("CF", F2_RLCDESPECI, 3);
                            }
                            F2_RLNRSERIEX = move(CG133_TPSERIEN, F2_RLNRSERIEX, 3);
                            F2_RLNRNOTAFI = move (CG133_NRNOTAFI, F2_RLNRNOTAFI, 9, 0,"UNSIGNED");
                            if( (CG133_NRNOTFIN > GLB.ZEROS))
                            {
                                F2_RLDSLETRAA = move("A", F2_RLDSLETRAA, 1);
                                F2_RLNRNOTFIN = move (CG133_NRNOTFIN, F2_RLNRNOTFIN, 4, 0,"UNSIGNED");
                            }
                            GSDDIDISAMD = move (format(CG133_DIEMINOT ,"99999999"), GSDDIDISAMD,8);
                            GSDDIDISAMD_GROUP();
                            F2_RLDTDIADOC = move (GSDDIDDSAMD, F2_RLDTDIADOC, 2, 0,"UNSIGNED");
                            F2_RLCDUFMUNI = move(CG133_CDUFMUNI, F2_RLCDUFMUNI, 2);
                            if( ((AXTPRELATO == 2.0) && (CG133_DISAINOT > GLB.ZEROS)))
                            {
                                GLB.DC_AUX = formatDC(CG133_DISAINOT, "99999999");
                                DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
                                F2_RLDTSAIDAX = move(GLB.DC_DD_MM_CCYY, F2_RLDTSAIDAX, 10);
                            }
                            if( (AXTPRELATO == 3.0))
                            {
                                GLB.DC_AUX = formatDC(CG133_DIEMINOT, "99999999");
                                DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
                                F2_RLDTSAIDAX = move(GLB.DC_DD_MM_CCYY, F2_RLDTSAIDAX, 10);
                            }
                            SDINSTATUS = move ("1", SDINSTATUS, 1, 0,"UNSIGNED");
                            SDTPSERIEX = move(CG133_TPSERIEN, SDTPSERIEX, 3);
                        }
                        if( ((((CG133_CDCONTAX != SDCDCONANT) || (CG133_CDNATOPE != SDCDNATANT)) || (CG133_CDNATCOM != SDCDNATCOM)) || (CG133_VLPERIPI != SDPCIPIANT)))
                        {
                            CALC_ICM_NF ();
                            if (GLB.EXIT==true)
                            {
                               GLB.EXIT=false;
                                return;
                            }
                            GLB.SHADOW = " ";
                            P_2("PRINT.FRAME");
                            if( (GLB.LINECOUNT > SDNRLINHAS))
                            {
                                GLB.SHADOW = " ";
                                P_3("PRINT.FRAME");
                            }
                            SDCDCONANT = move (CG133_CDCONTAX, SDCDCONANT, 6, 0,"UNSIGNED");
                            SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                            SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                            SDPCIPIANT = move (CG133_VLPERIPI, SDPCIPIANT, 5, 2,"UNSIGNED");
                        }
                        if( (CG133_VLPERICM != GLB.ZEROS))
                        {
                            SDPCICMNOT = move (CG133_VLPERICM, SDPCICMNOT, 5, 2,"UNSIGNED");
                        }
                        SDCDCANCEL = move (CG133_INSITNOT, SDCDCANCEL, 1, 0,"UNSIGNED");
                        F2_RLDSOBSERV = move("ICMS ", F2_RLDSOBSERV, 4);
                        if( (CG133_VLPERICM > GLB.ZEROS))
                        {
                            SDPCICMNOT = move (CG133_VLPERICM, SDPCICMNOT, 5, 2,"UNSIGNED");
                        }
                        F2_RLCDCONTAX = move (CG133_CDCONTAX, F2_RLCDCONTAX, 6, 0,"UNSIGNED");
                        GECDNATNUM = move (CG133_CDNATOPE, GECDNATNUM, 4, 0,"UNSIGNED");
                        GECDNATNUM_ITEM();
                        GRCDNATONU = move(GRCDNATALF, GRCDNATONU, 4);
                        GRCDNATONU_GROUP();
                        if( (CG133_CDNATOPE < 1000.0))
                        {
                            F2_RLCDNATOGR = move (format(GECDSEGPOS ,"9"), F2_RLCDNATOGR,6);
                            F2_RLCDNATOGR = attach(format(GECDULTPOS,"99"), F2_RLCDNATOGR, 6);
                            if( (CG133_CDNATCOM != GLB.ZEROS))
                            {
                                F2_RLCDNATOGR = attach(".", F2_RLCDNATOGR, 6);
                                F2_RLCDNATOGR = attach(format(CG133_CDNATCOM,"99"), F2_RLCDNATOGR, 6);
                            }
                        }
                        else
                        {
                            F2_RLCDNATOGR = move (format(GECDPRIPOS ,"9"), F2_RLCDNATOGR,6);
                            F2_RLCDNATOGR = attach(GRCDNATTRA, F2_RLCDNATOGR, 6);
                        }
                        F2_RLVLCONTAB = add(CG133_VLCONTAX, F2_RLVLCONTAB, 10, 2, "UNSIGNED", "TRUNCATE");
                        SDVLBASICM = add(CG133_VLBASICM, SDVLBASICM, 14, 2, "UNSIGNED", "TRUNCATE");
                        SDVLBASSTR = add(CG133_VLBASSTR, SDVLBASSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                        SDVLICMNOT = add(CG133_VLIMPICM, SDVLICMNOT, 14, 2, "UNSIGNED", "TRUNCATE");
                        SDVLICMSTR = add(CG133_VLICMSTR, SDVLICMSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                        SDVLISENTA = add(CG133_VLISEICM, SDVLISENTA, 14, 2, "UNSIGNED", "TRUNCATE");
                        SDVLOUTRAS = add(CG133_VLOUTICM, SDVLOUTRAS, 14, 2, "UNSIGNED", "TRUNCATE");
                        SDVLVLRCON = add(CG133_VLCONTAX, SDVLVLRCON, 14, 2, "UNSIGNED", "TRUNCATE");
                        SDVLBASIPI = add(CG133_VLBASIPI, SDVLBASIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                        SDVLIPINOT = add(CG133_VLIMPIPI, SDVLIPINOT, 14, 2, "UNSIGNED", "TRUNCATE");
                        SDVLIPIISE = add(CG133_VLISEIPI, SDVLIPIISE, 14, 2, "UNSIGNED", "TRUNCATE");
                        SDVLIPIOUT = add(CG133_VLOUTIPI, SDVLIPIOUT, 14, 2, "UNSIGNED", "TRUNCATE");
                    }
					trace("#Xseed***** -  PONTO7.37" , "@@@@@"); 
                    if( (SDCDCANCEL == 1.0))
                    {
                        F4_RLCDESPECI = move("NF", F4_RLCDESPECI, 3);
                        if( ((SDINOPTSIM == 1.0) && ((rTrim(SDTPSERANT)).equals(rTrim("2D"))==true)))
                        {
                            F4_RLCDESPECI = move("CF", F4_RLCDESPECI, 3);
                        }
                        F4_RLNRSERIEX = move(F2_RLNRSERIEX, F4_RLNRSERIEX, 3);
                        F2_RLNRSERIEX = move(GLB.SPACES, F2_RLNRSERIEX, 3);
                        F4_RLNRNOTAFI = move (F2_RLNRNOTAFI, F4_RLNRNOTAFI, 9, 0,"UNSIGNED");
                        F2_RLNRNOTAFI = move (GLB.ZEROS, F2_RLNRNOTAFI, 9, 0,"UNSIGNED");
                        if( (F2_RLNRNOTFIN > GLB.ZEROS))
                        {
                            F4_RLDSLETRAA = move("A", F4_RLDSLETRAA, 1);
                            F4_RLNRNOTFIN = move (F2_RLNRNOTFIN, F4_RLNRNOTFIN, 4, 0,"UNSIGNED");
                            F2_RLDSLETRAA = move(GLB.SPACES, F2_RLDSLETRAA, 1);
                            F2_RLNRNOTFIN = move (GLB.ZEROS, F2_RLNRNOTFIN, 4, 0,"UNSIGNED");
                        }
                        F4_RLDTDIADOC = move (F2_RLDTDIADOC, F4_RLDTDIADOC, 2, 0,"UNSIGNED");
                        F2_RLDTDIADOC = move (GLB.ZEROS, F2_RLDTDIADOC, 2, 0,"UNSIGNED");
                        F4_RLDSCANCEL = move("NOTA CANCELADA", F4_RLDSCANCEL, 30);
                        if( ((SDINOPTSIM == 1.0) && ((rTrim(SDTPSERANT)).equals(rTrim("2D"))==true)))
                        {
                            F4_RLDSCANCEL = move("CUPOM FISCAL CANCELADO", F4_RLDSCANCEL, 30);
                        }
                        GLB.SHADOW = " ";
                        P_4("PRINT.FRAME");
                        SDVLBASICM = move (GLB.ZEROS, SDVLBASICM, 14, 2,"UNSIGNED");
                        SDVLBASSTR = move (GLB.ZEROS, SDVLBASSTR, 14, 2,"UNSIGNED");
                        SDPCICMNOT = move (GLB.ZEROS, SDPCICMNOT, 5, 2,"UNSIGNED");
                        SDVLICMNOT = move (GLB.ZEROS, SDVLICMNOT, 14, 2,"UNSIGNED");
                        SDVLICMSTR = move (GLB.ZEROS, SDVLICMSTR, 14, 2,"UNSIGNED");
                        SDVLISENTA = move (GLB.ZEROS, SDVLISENTA, 14, 2,"UNSIGNED");
                        SDVLOUTRAS = move (GLB.ZEROS, SDVLOUTRAS, 14, 2,"UNSIGNED");
                        SDVLBASIPI = move (GLB.ZEROS, SDVLBASIPI, 14, 2,"UNSIGNED");
                        SDPCIPINOT = move (GLB.ZEROS, SDPCIPINOT, 5, 2,"UNSIGNED");
                        SDVLIPINOT = move (GLB.ZEROS, SDVLIPINOT, 14, 2,"UNSIGNED");
                        SDVLIPIISE = move (GLB.ZEROS, SDVLIPIISE, 14, 2,"UNSIGNED");
                        SDVLIPIOUT = move (GLB.ZEROS, SDVLIPIOUT, 14, 2,"UNSIGNED");
                        F2_RLCDCONTAX = move (GLB.ZEROS, F2_RLCDCONTAX, 6, 0,"UNSIGNED");
                        F2_RLVLCONTAB = move (GLB.ZEROS, F2_RLVLCONTAB, 10, 2,"UNSIGNED");
                        F2_RLCDNATOGR = move (format(GLB.ZEROS ,"999999"), F2_RLCDNATOGR,6);
                        F2_RLNRBASCAL = move (GLB.ZEROS, F2_RLNRBASCAL, 10, 2,"UNSIGNED");
                        F2_RLVLPERCEN = move (GLB.ZEROS, F2_RLVLPERCEN, 4, 2,"UNSIGNED");
                        F2_RLVLIMPOST = move (GLB.ZEROS, F2_RLVLIMPOST, 9, 2,"UNSIGNED");
                        F2_RLVLISENTA = move (GLB.ZEROS, F2_RLVLISENTA, 10, 2,"UNSIGNED");
                        F2_RLVLOUTRAS = move (GLB.ZEROS, F2_RLVLOUTRAS, 10, 2,"UNSIGNED");
                        break EXITOROB;
                    }
                    if( (SDPCICMNOT == 17.00))
                    {
                        F9_RLVLBASTSC = add(SDVLBASSTR, F9_RLVLBASTSC, 10, 2, "UNSIGNED", "TRUNCATE");
                        F9_RLVLICSTSC = add(SDVLICMSTR, F9_RLVLICSTSC, 10, 2, "UNSIGNED", "TRUNCATE");
                    }
                    else
                    {
                        F9_RLVLBASTIN = add(SDVLBASSTR, F9_RLVLBASTIN, 10, 2, "UNSIGNED", "TRUNCATE");
                        F9_RLVLICSTIN = add(SDVLICMSTR, F9_RLVLICSTIN, 10, 2, "UNSIGNED", "TRUNCATE");
                    }
                    F2_RLDSOBSERV = move("ICMS", F2_RLDSOBSERV, 4);
                    CALC_ICM_NF ();
                    if (GLB.EXIT==true)
                    {
                       GLB.EXIT=false;
                        return;
                    }
                    F2_RLVLISENTA = move (SDVLISENTA, F2_RLVLISENTA, 10, 2,"UNSIGNED");
                    F2_RLVLOUTRAS = move (SDVLOUTRAS, F2_RLVLOUTRAS, 10, 2,"UNSIGNED");
                    SDINSTATUS = move (GLB.ZEROS, SDINSTATUS, 1, 0,"UNSIGNED");
                    GLB.SHADOW = " ";
                    P_2("PRINT.FRAME");
                    if( (SDNRCFICMP != GLB.ZEROS))
                    {
                        F4_RLDSCANCEL = move("ICMS PAGO ECF", F4_RLDSCANCEL, 30);
                        F4_RLDSCANCEL = attachAndSpace(format(SDNRCFICMP,"999999"), F4_RLDSCANCEL, 30);
                        GLB.SHADOW = " ";
                        P_4("PRINT.FRAME");
                    }
                    F3_RLVLBASICM = add(SDVLBASICM, F3_RLVLBASICM, 10, 2, "UNSIGNED", "TRUNCATE");
                    F3_RLVLIMPICM = add(SDVLICMNOT, F3_RLVLIMPICM, 9, 2, "UNSIGNED", "TRUNCATE");
                    F3_RLVLISEICM = add(SDVLISENTA, F3_RLVLISEICM, 10, 2, "UNSIGNED", "TRUNCATE");
                    F3_RLVLOUTICM = add(SDVLOUTRAS, F3_RLVLOUTICM, 10, 2, "UNSIGNED", "TRUNCATE");
                    if( (GLB.LINECOUNT > SDNRLINHAS))
                    {
                        GLB.SHADOW = " ";
                        P_3("PRINT.FRAME");
                    }
                    F2_RLDSOBSERV = move("IPI", F2_RLDSOBSERV, 4);
                    F2_RLNRBASCAL = move (SDVLBASIPI, F2_RLNRBASCAL, 10, 2,"UNSIGNED");
                    F2_RLVLPERCEN = move (SDPCIPINOT, F2_RLVLPERCEN, 4, 2,"UNSIGNED");
                    F2_RLVLIMPOST = move (SDVLIPINOT, F2_RLVLIMPOST, 9, 2,"UNSIGNED");
                    F2_RLVLISENTA = move (SDVLIPIISE, F2_RLVLISENTA, 10, 2,"UNSIGNED");
                    F2_RLVLOUTRAS = move (SDVLIPIOUT, F2_RLVLOUTRAS, 10, 2,"UNSIGNED");
                    GLB.SHADOW = " ";
                    P_2("PRINT.FRAME");
                    F3_RLVLBASIPI = add(SDVLBASIPI, F3_RLVLBASIPI, 10, 2, "UNSIGNED", "TRUNCATE");
                    F3_RLVLIMPIPI = add(SDVLIPINOT, F3_RLVLIMPIPI, 9, 2, "UNSIGNED", "TRUNCATE");
                    F3_RLVLISEIPI = add(SDVLIPIISE, F3_RLVLISEIPI, 10, 2, "UNSIGNED", "TRUNCATE");
                    F3_RLVLOUTIPI = add(SDVLIPIOUT, F3_RLVLOUTIPI, 10, 2, "UNSIGNED", "TRUNCATE");
                    if( (GLB.LINECOUNT > SDNRLINHAS))
                    {
                        GLB.SHADOW = " ";
                        P_3("PRINT.FRAME");
                    }
                    if( (SDVLBASSTR != GLB.ZEROS))
                    {
                        F2_RLDSOBSERV = move("S.T.", F2_RLDSOBSERV, 4);
                        F2_RLNRBASCAL = move (SDVLBASSTR, F2_RLNRBASCAL, 10, 2,"UNSIGNED");
                        F2_RLVLIMPOST = move (SDVLICMSTR, F2_RLVLIMPOST, 9, 2,"UNSIGNED");
                        GLB.SHADOW = " ";
                        P_2("PRINT.FRAME");
                    }
                    SDVLBASICM = move (GLB.ZEROS, SDVLBASICM, 14, 2,"UNSIGNED");
                    SDVLICMNOT = move (GLB.ZEROS, SDVLICMNOT, 14, 2,"UNSIGNED");
                    SDVLISENTA = move (GLB.ZEROS, SDVLISENTA, 14, 2,"UNSIGNED");
                    SDVLOUTRAS = move (GLB.ZEROS, SDVLOUTRAS, 14, 2,"UNSIGNED");
                    SDPCICMNOT = move (GLB.ZEROS, SDPCICMNOT, 5, 2,"UNSIGNED");
                    SDVLBASIPI = move (GLB.ZEROS, SDVLBASIPI, 14, 2,"UNSIGNED");
                    SDPCIPINOT = move (GLB.ZEROS, SDPCIPINOT, 5, 2,"UNSIGNED");
                    SDVLIPINOT = move (GLB.ZEROS, SDVLIPINOT, 14, 2,"UNSIGNED");
                    SDVLIPIISE = move (GLB.ZEROS, SDVLIPIISE, 14, 2,"UNSIGNED");
                    SDVLIPIOUT = move (GLB.ZEROS, SDVLIPIOUT, 14, 2,"UNSIGNED");
                    SDCDCANCEL = move (GLB.ZEROS, SDCDCANCEL, 1, 0,"UNSIGNED");
                    SDTPSERIEX = move(GLB.SPACES, SDTPSERIEX, 3);
                }
                if( (GLB.LINECOUNT > SDNRLINHAS))
                {
                    GLB.SHADOW = " ";
                    P_3("PRINT.FRAME");
                }
                if( ((((((((F3_RLVLBASIPI != GLB.ZEROS) || (F3_RLVLIMPIPI != GLB.ZEROS)) || (F3_RLVLISEIPI != GLB.ZEROS)) || (F3_RLVLOUTIPI != GLB.ZEROS)) || (F3_RLVLBASICM != GLB.ZEROS)) || (F3_RLVLIMPICM != GLB.ZEROS)) || (F3_RLVLISEICM != GLB.ZEROS)) || (F3_RLVLOUTICM != GLB.ZEROS)))
                {
                    GLB.SHADOW = " ";
                    P_3("PRINT.FRAME");
                }
                if( ((((F9_RLVLBASTSC != GLB.ZEROS) || (F9_RLVLICSTSC != GLB.ZEROS)) || (F9_RLVLBASTIN != GLB.ZEROS)) || (F9_RLVLICSTIN != GLB.ZEROS)))
                {
                    GLB.SHADOW = " ";
                    P_9("PRINT.FRAME");
                }
            }
            GENRINFORM = move (SDNRCONPAG, GENRINFORM, 5, 0,"UNSIGNED");
            GENRINFORM_ITEM();
            if( ((rTrim(AXINIMPPCL)).equals(rTrim("S"))==true))
            {
                GLB.SHADOW = " ";
                if (GLB.INITREPORT  == true)
                {
                   if ( GLB.LP.checkError() )
                   {   GLB.TASK=52;
                       abort("Error on File : " + GLB.LP_XSEEDTITLE);
                   }
                   GLB.LP.close();
                   AuditMSG("Close  (" + GLB.LP_XSEEDTITLE + "), Writes: " + GLB.PRINT_XSEEDWRITES );
                   GLB.PRINT_XSEEDWRITES = 0;
                   if (GLB.DEVICE.equals("RP") == true || GLB.DEVICE.equals("TP") == true)
                   {   P_PRINTER();
                   }
                   if (GLB.DEVICE.equals("VD") == true)
                   {   P_VIDEO();
                   }
                   if (GLB.DEVICE.equals("LP") == true)
                   {   P_LINEPRINTER();
                   }
                }
                GLB.LINECOUNT  = 9998;
                GLB.PAGECOUNT  = 0;
                GLB.INITREPORT  = false;
                GLB.LP_XSEEDTITLE = "";

                GLB.FORMDEPTH = move ("63", GLB.FORMDEPTH, 3, 0,"UNSIGNED");
                GLB.TITLE = move("PCL-0617", GLB.TITLE, 60);
            }
			trace("#Xseed***** -  PONTO7.38" , "@@@@@"); 
//:------------------
//:emite resumo p/dia
//:------------------
            message("ATTENTION", "** RESUMO APURACAO ICMS/IPI **");
            GLB.SHADOW = " ";
            P_69("PRINT.FRAME");
//:---------------------------------------------------------
//: exclui registros automaticos de saida do livro apuracao
//:---------------------------------------------------------
            SDTPIMPOST = move (GLB.ZEROS, SDTPIMPOST, 2, 0,"UNSIGNED");
            if( (AXTPRELATO == 1.0))
            {
                SDTPIMPOST = move ("2", SDTPIMPOST, 2, 0,"UNSIGNED");
            }
            if( ((AXTPRELATO == 2.0) || (AXTPRELATO == 6.0)))
            {
                SDTPIMPOST = move ("7", SDTPIMPOST, 2, 0,"UNSIGNED");
                SDCDFISCAL = move ("7", SDCDFISCAL, 4, 0,"UNSIGNED");
            }
            if( (AXTPRELATO == 3.0))
            {
                SDTPIMPOST = move ("6", SDTPIMPOST, 2, 0,"UNSIGNED");
                SDCDFISCAL = move ("2", SDCDFISCAL, 4, 0,"UNSIGNED");
            }
//: se reg.apuracao icms ja foi encerrado, nao permite fazer lancamentos
            if( (SDINENCERR == 1.0))
            {
                SDTPIMPOST = move (GLB.ZEROS, SDTPIMPOST, 2, 0,"UNSIGNED");
            }
            if( (SDTPIMPOST != GLB.ZEROS))
            {
                SDINAPURAC = move (GLB.ZEROS, SDINAPURAC, 1, 0,"UNSIGNED");
                GLB.SHADOW = " ";
                P_70("PRINT.FRAME");
                CommitTransaction();
//: para emissao normal, cria registro por natureza: cria o registro
//:      no fr; 42 a cada natureza
//: para opcao 2 e 3, cria somente 1 registro com o valor total:
//:      no fr; 42 somente acumula
                if( (((AXTPRELATO == 2.0) || (AXTPRELATO == 3.0)) || (AXTPRELATO == 6.0)))
                {
//: busca uma sequencia livre
                    SDNRSEQIMP = move ("99", SDNRSEQIMP, 2, 0,"UNSIGNED");
                    SDINORIGEM = move ("9", SDINORIGEM, 1, 0,"UNSIGNED");
                    SDCDNATCOM = move ("99", SDCDNATCOM, 2, 0,"UNSIGNED");
                    GLB.SECURE = false;
                    GLB.STATUS = CG12401_DetermineLast (GSDCDEMPRES, AXCDFILIAL, AXAMREFERE, SDCDFISCAL, SDCDNATCOM, SDINORIGEM, SDNRSEQIMP);
                    if( ((((((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true) || (CG124_CDEMPRES != GSDCDEMPRES)) || (CG124_CDFILIAL != AXCDFILIAL)) || (CG124_AMMOVTOX != AXAMREFERE)) || (CG124_CDFISCAL != SDCDFISCAL)))
                    {
                        CG124_NRSEQUEN = move (GLB.ZEROS, CG124_NRSEQUEN, 2, 0,"UNSIGNED");
                        GLB.STATUS = move("*****", GLB.STATUS, 5);
                    }
                    SDNRSEQIMP = add(cDec("1"), CG124_NRSEQUEN, SDNRSEQIMP, 2, 0, "UNSIGNED", "TRUNCATE");
                    trace("#Xseed***** -  PONTO7.39" , "@@@@@"); 
					CG124_InitAuto();
                    AU_CG124_AMMOVTOX = auto (AXAMREFERE, AU_CG124_AMMOVTOX, 6, 0,"UNSIGNED");
                    AU_CG124_CDEMPRES = auto (GSDCDEMPRES, AU_CG124_CDEMPRES, 2, 0,"UNSIGNED");
                    AU_CG124_CDFILIAL = auto (AXCDFILIAL, AU_CG124_CDFILIAL, 2, 0,"UNSIGNED");
                    AU_CG124_CDFISCAL = auto (SDCDFISCAL, AU_CG124_CDFISCAL, 4, 0,"UNSIGNED");
                    AU_CG124_CDNATCOM = auto (GLB.ZEROS, AU_CG124_CDNATCOM, 2, 0,"UNSIGNED");
                    AU_CG124_DSIMPOST = auto(GLB.SPACES, AU_CG124_DSIMPOST, 60);
                    AU_CG124_INICMIPI = auto (GLB.ZEROS, AU_CG124_INICMIPI, 1, 0,"UNSIGNED");
                    AU_CG124_TPIMPOST = auto (SDTPIMPOST, AU_CG124_TPIMPOST, 2, 0,"UNSIGNED");
                    AU_CG124_NRSEQUEN = auto (SDNRSEQIMP, AU_CG124_NRSEQUEN, 2, 0,"UNSIGNED");
                    if ((GLB.ERROR.trim()).equals("")==true)
                    {
                        CG124_AutoToFile();
                        CG124_Insert ();
                        CG124_InitAuto();
                    }
					trace("#Xseed***** -  PONTO7.40" , "@@@@@"); 
                    CommitTransaction();
					trace("#Xseed***** -  PONTO7.41" , "@@@@@"); 
                }
            }
            if( (SDINENCIPI == GLB.ZEROS))
            {
                SDINAPURAC = move ("1", SDINAPURAC, 1, 0,"UNSIGNED");
                GLB.SHADOW = " ";
                P_70("PRINT.FRAME");
            }
//:-------- SORT P/ LISTAGEM APURACAO -----------------------------------
trace("#Xseed***** -  PONTO7.42" , "@@@@@"); 
            GLB.SHADOW = " ";
            P_50("PRINT.FRAME");
            message("ATTENTION", "** LEITURA - CG133 - ICMS **");
            beginPageClear("B");
            GLB.ADVANCEB = true;
            beginPage("B","41");
            GSDDIDISAMD = move (format(AXDIINICIO ,"99999999"), GSDDIDISAMD,8);
            GSDDIDISAMD_GROUP();
            GSDDIDDSAMD = move ("15", GSDDIDDSAMD, 2, 0,"UNSIGNED");
            GSDDIDDSAMD_ITEM();
            SDDIDATIPI = move (GSDDIDISAMD, SDDIDATIPI, 8, 0,"UNSIGNED");
            SDCDNATANT = move (GLB.ZEROS, SDCDNATANT, 4, 0,"UNSIGNED");
            SDCDNATCOM = move (GLB.ZEROS, SDCDNATCOM, 2, 0,"UNSIGNED");
            SDINORIGEM = move (GLB.ZEROS, SDINORIGEM, 1, 0,"UNSIGNED");
            GLB.SECURE = false;
            GLB.STATUS = CG13302_DetermineGroupFrom (1, false, GSDCDEMPRES, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS);
            while (CG133_XSEEDEOF == false)
            {
				trace("#Xseed***** -  PONTO7.43" , "@@@@@"); 
                CG13302_DetermineMoveNext ();
                if (CG133_XSEEDEOF == true)
                {    break;
                }
                if( (SDCDNATANT == GLB.ZEROS))
                {
                    SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                    if( (CG133_CDNATOPE < 1000.0))
                    {
                        SDINUMAANT = moveComplex(format(CG133_CDNATOPE	, "9999"), 2, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                    }
                    else
                    {
                        SDINUMAANT = moveComplex(format(CG133_CDNATOPE	, "9999"), 1, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                    }
                    SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    SDINORIGEM = move (CG133_INORIGEM, SDINORIGEM, 1, 0,"UNSIGNED");
                }
                if( (CG133_CDNATOPE < 1000.0))
                {
                    SDINUMANAT = moveComplex(format(CG133_CDNATOPE	, "9999"), 2, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                }
                else
                {
                    SDINUMANAT = moveComplex(format(CG133_CDNATOPE	, "9999"), 1, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                }
                if( (SDINUMANAT != SDINUMAANT))
                {
                    GLB.SHADOW = "B";
                    P_43("PRINT.FRAME");
                    SDINUMAANT = move (SDINUMANAT, SDINUMAANT, 1, 0,"UNSIGNED");
                    SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                    SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    SDINORIGEM = move (CG133_INORIGEM, SDINORIGEM, 1, 0,"UNSIGNED");
                }
                if( (((CG133_CDNATOPE != SDCDNATANT) || (CG133_CDNATCOM != SDCDNATCOM)) || (CG133_INORIGEM != SDINORIGEM)))
                {
                    GLB.SHADOW = "B";
                    P_42("PRINT.FRAME");
                    SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                    SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    SDINORIGEM = move (CG133_INORIGEM, SDINORIGEM, 1, 0,"UNSIGNED");
                }
                F42_RLCDAPCONT = add(CG133_VLCONTAX, F42_RLCDAPCONT, 14, 2, "UNSIGNED", "TRUNCATE");
                F42_RLCDAPBICM = add(CG133_VLBASICM, F42_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
                F42_RLCDAPVICM = add(CG133_VLIMPICM, F42_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
                F42_RLCDAPNICM = add(CG133_VLISEICM, F42_RLCDAPNICM, 13, 2, "UNSIGNED", "TRUNCATE");
                F42_RLVLAPOICM = add(CG133_VLOUTICM, F42_RLVLAPOICM, 13, 2, "UNSIGNED", "TRUNCATE");
            }
            GLB.SHADOW = "B";
            P_44("PRINT.FRAME");
			trace("#Xseed***** -  PONTO7.44" , "@@@@@"); 
            CommitTransaction();
			trace("#Xseed***** -  PONTO7.45" , "@@@@@"); 
//: Por percentual
            message("ATTENTION", "** LEITURA - CG133 - ICMS ALIQUOTA **");
            SDCDNATANT = move (GLB.ZEROS, SDCDNATANT, 4, 0,"UNSIGNED");
            SDCDNATCOM = move (GLB.ZEROS, SDCDNATCOM, 2, 0,"UNSIGNED");
            SDPCICMNOT = move (GLB.ZEROS, SDPCICMNOT, 5, 2,"UNSIGNED");
            GLB.SECURE = false;
			trace("#Xseed***** -  PONTO7.46" , "@@@@@"); 
            GLB.STATUS = CG13303_DetermineGroupFrom (1, false, GSDCDEMPRES, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS);
            while (CG133_XSEEDEOF == false)
            {
                CG13303_DetermineMoveNext ();
                if (CG133_XSEEDEOF == true)
                {    break;
                }
                if( (SDCDNATANT == GLB.ZEROS))
                {
                    SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                    if( (CG133_CDNATOPE < 1000.0))
                    {
                        SDINUMAANT = moveComplex(format(CG133_CDNATOPE	, "9999"), 2, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                    }
                    else
                    {
                        SDINUMAANT = moveComplex(format(CG133_CDNATOPE	, "9999"), 1, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                    }
                    SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    SDPCICMNOT = move (CG133_PCICMNAT, SDPCICMNOT, 5, 2,"UNSIGNED");
                }
                if( (CG133_CDNATOPE < 1000.0))
                {
                    SDINUMANAT = moveComplex(format(CG133_CDNATOPE	, "9999"), 2, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                }
                else
                {
                    SDINUMANAT = moveComplex(format(CG133_CDNATOPE	, "9999"), 1, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                }
                if( (SDINUMANAT != SDINUMAANT))
                {
                    GLB.SHADOW = "J";
                    P_75("PRINT.FRAME");
                    GLB.SHADOW = "J";
                    P_76("PRINT.FRAME");
                    SDINUMAANT = move (SDINUMANAT, SDINUMAANT, 1, 0,"UNSIGNED");
                    SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                    SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    SDPCICMNOT = move (CG133_PCICMNAT, SDPCICMNOT, 5, 2,"UNSIGNED");
                }
                if( (((CG133_CDNATOPE != SDCDNATANT) || (CG133_CDNATCOM != SDCDNATCOM)) || (CG133_PCICMNAT != SDPCICMNOT)))
                {
                    GLB.SHADOW = "J";
                    P_75("PRINT.FRAME");
                    SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                    SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    SDPCICMNOT = move (CG133_PCICMNAT, SDPCICMNOT, 5, 2,"UNSIGNED");
                }
                F75_RLCDAPBICM = add(CG133_VLBASICM, F75_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
                F75_RLCDAPVICM = add(CG133_VLIMPICM, F75_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
                F75_RLCDAPNICM = add(CG133_VLISEICM, F75_RLCDAPNICM, 13, 2, "UNSIGNED", "TRUNCATE");
                F75_RLVLAPOICM = add(CG133_VLOUTICM, F75_RLVLAPOICM, 13, 2, "UNSIGNED", "TRUNCATE");
            }
			trace("#Xseed***** -  PONTO7.47" , "@@@@@"); 
            if( (SDCDNATANT != GLB.ZEROS))
            {
                GLB.SHADOW = "J";
                P_75("PRINT.FRAME");
                GLB.SHADOW = "J";
                P_76("PRINT.FRAME");
            }
//: Faturamento da DIAT
            message("ATTENTION", "** FATURAMENTO DIAT **");
			trace("#Xseed***** -  PONTO7.48" , "@@@@@"); 
            P_SORT2();
			trace("#Xseed***** -  PONTO7.49" , "@@@@@"); 
            SDCDNATANT = move (GLB.ZEROS, SDCDNATANT, 4, 0,"UNSIGNED");
            SDCDNATCOM = move (GLB.ZEROS, SDCDNATCOM, 2, 0,"UNSIGNED");
            SDPCICMNOT = move (GLB.ZEROS, SDPCICMNOT, 5, 2,"UNSIGNED");
            SDINCLIENT = move ("9", SDINCLIENT, 1, 0,"UNSIGNED");
            if ((rTrim(GLBEXD.command)).equals("") == true)
            {
                GLBEXD.open(GLBEXD_XSEEDTITLE, "OUTPUT");
                if (GLBEXD.openStatus.equals("")==true)
                {   AuditMSG("Open OUTPUT D (" + GLBEXD_XSEEDTITLE + ")");
                }
                else
                {   abort("Can't OpenFile D (" + GLBEXD_XSEEDTITLE + ")");
                }
            }
            GLBEXD.command = "DT.ACTUAL";
            if ((rTrim(GLB.EXD_STATUS)).equals("") == false)
            {   if (GLBEXD != null)
                {   if (GLB.EXD_XSEEDCOUNT != 0)
                    {   GLBEXD.write(GLB.EXD_XSEEDBUFFER.toString());
                        GLB.EXD_XSEEDCOUNT = 0;
                     }
                     if ((GLBEXD.out!=null) && (GLBEXD.out.checkError()) )
                     {   GLB.TASK=53;
                         abort("Error on File : " + GLBEXD_XSEEDTITLE);
                     }
                    GLBEXD.close();
                    AuditMSG("Close D (" + GLBEXD_XSEEDTITLE + "), Reads: " + cStr(GLB.EXD_XSEEDREADS) + " Writes: " + cStr(GLB.EXD_XSEEDWRITES));
                    GLB.EXD_XSEEDREADS = 0;
                    GLB.EXD_XSEEDWRITES = 0;
                }
                GLB.EXD_STATUS = "";
            }
			trace("#Xseed***** -  PONTO7.50 , "@@@@@-->" +GLBEXD_XSEEDTITLE); 
            extractFile = new File(GLBEXD_XSEEDTITLE);
            if (extractFile.exists() == false)
            {   AuditMSG (GLBEXD_XSEEDTITLE + " not found");
                GLB.STATUS = "*****";
            }
            else
            {
                GLBEXD.open(GLBEXD_XSEEDTITLE,"INPUT");
                if (GLBEXD.openStatus.equals("")==true)
                {   AuditMSG("Open INPUT D (" + GLBEXD_XSEEDTITLE + ")");
                    GLB.EXD_STATUS = "INPUT";
                }
                else
                {   abort("Can't Open File D (" + GLBEXD_XSEEDTITLE + ")");
                }
                GLB.EXD_STATUS = "INPUT";
                GLB.STATUS = "*****";
                if (GLB.RECORDD > 0.0)
                {   for (double i = 1; i <= GLB.RECORDD + 1; i++)
                    {   GLBEXD_XSEEDREG = GLBEXD.read();
                    }
                    GLB.EXD_XSEEDREADS = GLB.RECORDD;
                }
                else
                {   GLBEXD_XSEEDREG = GLBEXD.read();
                }
                while (GLBEXD_XSEEDREG != null)
                {   GLBEXD_EXTRACTAS = "";
                    P_ReadGLBEXD();
                    GLB.STATUS = "";
                if( (SDCDNATANT == GLB.ZEROS))
                {
                    SDCDNATANT = move (D_EXCDNATDIA, SDCDNATANT, 4, 0,"UNSIGNED");
                    if( (D_EXCDNATDIA < 1000.0))
                    {
                        SDINUMAANT = moveComplex(format(D_EXCDNATDIA	, "9999"), 2, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                    }
                    else
                    {
                        SDINUMAANT = moveComplex(format(D_EXCDNATDIA	, "9999"), 1, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                    }
                    SDPCICMNOT = move (D_EXPCICMDIA, SDPCICMNOT, 5, 2,"UNSIGNED");
                }
                if( (D_EXCDNATDIA < 1000.0))
                {
                    SDINUMANAT = moveComplex(format(D_EXCDNATDIA	, "9999"), 2, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                }
                else
                {
                    SDINUMANAT = moveComplex(format(D_EXCDNATDIA	, "9999"), 1, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                }
                if( (SDINUMANAT != SDINUMAANT))
                {
                    GLB.SHADOW = "O";
                    P_78("PRINT.FRAME");
                    GLB.SHADOW = "O";
                    P_79("PRINT.FRAME");
                    SDINUMAANT = move (SDINUMANAT, SDINUMAANT, 1, 0,"UNSIGNED");
                    SDCDNATANT = move (D_EXCDNATDIA, SDCDNATANT, 4, 0,"UNSIGNED");
                    SDPCICMNOT = move (D_EXPCICMDIA, SDPCICMNOT, 5, 2,"UNSIGNED");
                }
                if( ((D_EXCDNATDIA != SDCDNATANT) || (D_EXPCICMDIA != SDPCICMNOT)))
                {
                    GLB.SHADOW = "O";
                    P_78("PRINT.FRAME");
                    SDCDNATANT = move (D_EXCDNATDIA, SDCDNATANT, 4, 0,"UNSIGNED");
                    SDCDNATCOM = move (D_EXCDNATDIA, SDCDNATCOM, 2, 0,"UNSIGNED");
                    SDPCICMNOT = move (D_EXPCICMDIA, SDPCICMNOT, 5, 2,"UNSIGNED");
                }
                F78_RLCDAPBICM = add(D_EXVLBASDIA, F78_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
                F78_RLCDAPVICM = add(D_EXVLIMPDIA, F78_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
                F78_RLCDAPVDIO = add(D_EXVLICMDIA, F78_RLCDAPVDIO, 13, 2, "UNSIGNED", "TRUNCATE");
                }
            }
            if( (SDCDNATANT != GLB.ZEROS))
            {
                GLB.SHADOW = "O";
                P_78("PRINT.FRAME");
                GLB.SHADOW = "O";
                P_79("PRINT.FRAME");
                GLB.SHADOW = "O";
                P_80("PRINT.FRAME");
                if (GLB.INITREPORTO == false)
                {
                    if ( GLB.LPO_XSEEDTITLE != null  && GLB.LPO_XSEEDTITLE.trim().equals("") == false)
                    {
                        GLB.LPO = new PrintStream(new FileOutputStream(GLB.LPO_XSEEDTITLE ,true));
                    }
                    else
                    {
                        GLB.LPO_XSEEDTITLE = newBackup(GLB.TITLEO,"");
                        GLB.LPO = new PrintStream(new FileOutputStream(GLB.LPO_XSEEDTITLE ,false));
                    }
                }
                GLB.SHADOW = "O";
                if ((GLB.LINECOUNTO >= GLB.FORMDEPTHO) || (GLB.ADVANCEO == true))
                {   P_BEGINPAGE();
                    GLB.LINECOUNTO = GLB.LINECOUNTO - 1;
                }
                if (GLB.INITREPORTO == false)
                {   GLB.INITREPORTO = true;
                }
                for (int i = 1; i <= 01.0; i++)
                {   GLB.LINECOUNTO = GLB.LINECOUNTO + 1;
                    GLB.LPO_XSEEDREG = "";
                    GLB.LPO.println(GLB.LPO_XSEEDREG);
                    GLB.PRINTO_XSEEDWRITES = GLB.PRINTO_XSEEDWRITES + 1;
                    if (GLB.LINECOUNTO  >= GLB.FORMDEPTHO )
                    {
                        break;
                    }
                }
            }
			trace("#Xseed***** -  PONTO7.51" , "@@@@@ P_SORT3"); 
            P_SORT3();
			trace("#Xseed***** -  PONTO7.52" , "@@@@@"); 
            SDCDNATANT = move (GLB.ZEROS, SDCDNATANT, 4, 0,"UNSIGNED");
            SDPCICMNOT = move (GLB.ZEROS, SDPCICMNOT, 5, 2,"UNSIGNED");
            SDINCLIENT = move ("9", SDINCLIENT, 1, 0,"UNSIGNED");
            if ((rTrim(GLBEXD.command)).equals("") == true)
            {
                GLBEXD.open(GLBEXD_XSEEDTITLE, "OUTPUT");
                if (GLBEXD.openStatus.equals("")==true)
                {   AuditMSG("Open OUTPUT D (" + GLBEXD_XSEEDTITLE + ")");
                }
                else
                {   abort("Can't OpenFile D (" + GLBEXD_XSEEDTITLE + ")");
                }
            }
            GLBEXD.command = "DT.ACTUAL";
            if ((rTrim(GLB.EXD_STATUS)).equals("") == false)
            {   if (GLBEXD != null)
                {   if (GLB.EXD_XSEEDCOUNT != 0)
                    {   GLBEXD.write(GLB.EXD_XSEEDBUFFER.toString());
                        GLB.EXD_XSEEDCOUNT = 0;
                     }
                     if ((GLBEXD.out!=null) && (GLBEXD.out.checkError()) )
                     {   GLB.TASK=53;
                         abort("Error on File : " + GLBEXD_XSEEDTITLE);
                     }
                    GLBEXD.close();
                    AuditMSG("Close D (" + GLBEXD_XSEEDTITLE + "), Reads: " + cStr(GLB.EXD_XSEEDREADS) + " Writes: " + cStr(GLB.EXD_XSEEDWRITES));
                    GLB.EXD_XSEEDREADS = 0;
                    GLB.EXD_XSEEDWRITES = 0;
                }
                GLB.EXD_STATUS = "";
            }
			trace("#Xseed***** -  PONTO7.53" , "@@@@@"); 
            extractFile = new File(GLBEXD_XSEEDTITLE);
            if (extractFile.exists() == false)
            {   AuditMSG (GLBEXD_XSEEDTITLE + " not found");
                GLB.STATUS = "*****";
            }
            else
            {
                GLBEXD.open(GLBEXD_XSEEDTITLE,"INPUT");
                if (GLBEXD.openStatus.equals("")==true)
                {   AuditMSG("Open INPUT D (" + GLBEXD_XSEEDTITLE + ")");
                    GLB.EXD_STATUS = "INPUT";
                }
                else
                {   abort("Can't Open File D (" + GLBEXD_XSEEDTITLE + ")");
                }
                GLB.EXD_STATUS = "INPUT";
                GLB.STATUS = "*****";
                if (GLB.RECORDD > 0.0)
                {   for (double i = 1; i <= GLB.RECORDD + 1; i++)
                    {   GLBEXD_XSEEDREG = GLBEXD.read();
                    }
                    GLB.EXD_XSEEDREADS = GLB.RECORDD;
                }
                else
                {   GLBEXD_XSEEDREG = GLBEXD.read();
                }
                while (GLBEXD_XSEEDREG != null)
                {   GLBEXD_EXTRACTAS = "";
                    P_ReadGLBEXD();
                    GLB.STATUS = "";
                ACTUAL_D:
                {
                    if( ((rTrim(D_EXCDUFMUNI)).equals(rTrim("SC"))==false))
                    {
                        break ACTUAL_D;
                    }
                    if( (((D_EXCDNATDIA != SDCDNATANT) || (D_EXPCICMDIA != SDPCICMNOT)) || (D_EXINCLIENT != SDINCLIENT)))
                    {
                        if( (SDINCLIENT != 9.0))
                        {
                            GLB.SHADOW = "O";
                            P_78("PRINT.FRAME");
                        }
                        SDCDNATANT = move (D_EXCDNATDIA, SDCDNATANT, 4, 0,"UNSIGNED");
                        SDINCLIENT = move (D_EXINCLIENT, SDINCLIENT, 1, 0,"UNSIGNED");
                        SDPCICMNOT = move (D_EXPCICMDIA, SDPCICMNOT, 5, 2,"UNSIGNED");
                    }
                    F78_RLCDAPBICM = add(D_EXVLBASDIA, F78_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
                    F78_RLCDAPVICM = add(D_EXVLIMPDIA, F78_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
                    F78_RLCDAPVDIO = add(D_EXVLICMDIA, F78_RLCDAPVDIO, 13, 2, "UNSIGNED", "TRUNCATE");
                }
                }
            }
            if( (SDINCLIENT != 9.0))
            {
                GLB.SHADOW = "O";
                P_78("PRINT.FRAME");
            }
//: -------------------- CREDITO DE ICMS ------------------------------------
            message("ATTENTION", "** CREDITO DE ICMS 
			trace("#Xseed***** -  PONTO7.54" , "@@@@@P_SORT4"); 
            P_SORT4();
			trace("#Xseed***** -  PONTO7.55" , "@@@@@"); 
            SDINTEXCRE = move(GLB.SPACES, SDINTEXCRE, 1);
            SDNRNOTCRE = move (GLB.ZEROS, SDNRNOTCRE, 9, 0,"UNSIGNED");
            if ((rTrim(GLBEXY.command)).equals("") == true)
            {
                GLBEXY.open(GLBEXY_XSEEDTITLE, "OUTPUT");
                if (GLBEXY.openStatus.equals("")==true)
                {   AuditMSG("Open OUTPUT Y (" + GLBEXY_XSEEDTITLE + ")");
                }
                else
                {   abort("Can't OpenFile Y (" + GLBEXY_XSEEDTITLE + ")");
                }
            }
            GLBEXY.command = "DT.ACTUAL";
            if ((rTrim(GLB.EXY_STATUS)).equals("") == false)
            {   if (GLBEXY != null)
                {   if (GLB.EXY_XSEEDCOUNT != 0)
                    {   GLBEXY.write(GLB.EXY_XSEEDBUFFER.toString());
                        GLB.EXY_XSEEDCOUNT = 0;
                     }
                     if ((GLBEXY.out!=null) && (GLBEXY.out.checkError()) )
                     {   GLB.TASK=53;
                         abort("Error on File : " + GLBEXY_XSEEDTITLE);
                     }
                    GLBEXY.close();
                    AuditMSG("Close Y (" + GLBEXY_XSEEDTITLE + "), Reads: " + cStr(GLB.EXY_XSEEDREADS) + " Writes: " + cStr(GLB.EXY_XSEEDWRITES));
                    GLB.EXY_XSEEDREADS = 0;
                    GLB.EXY_XSEEDWRITES = 0;
                }
                GLB.EXY_STATUS = "";
            }
			trace("#Xseed***** -  PONTO7.55","@@@@");
            extractFile = new File(GLBEXY_XSEEDTITLE);
            if (extractFile.exists() == false)
            {   AuditMSG (GLBEXY_XSEEDTITLE + " not found");
                GLB.STATUS = "*****";
            }
            else
            {
                GLBEXY.open(GLBEXY_XSEEDTITLE,"INPUT");
                if (GLBEXY.openStatus.equals("")==true)
                {   AuditMSG("Open INPUT Y (" + GLBEXY_XSEEDTITLE + ")");
                    GLB.EXY_STATUS = "INPUT";
                }
                else
                {   abort("Can't Open File Y (" + GLBEXY_XSEEDTITLE + ")");
                }
                GLB.EXY_STATUS = "INPUT";
                GLB.STATUS = "*****";
                if (GLB.RECORDY > 0.0)
                {   for (double i = 1; i <= GLB.RECORDY + 1; i++)
                    {   GLBEXY_XSEEDREG = GLBEXY.read();
                    }
                    GLB.EXY_XSEEDREADS = GLB.RECORDY;
                }
                else
                {   GLBEXY_XSEEDREG = GLBEXY.read();
                }
                while (GLBEXY_XSEEDREG != null)
                {   GLBEXY_EXTRACTAS = "";
                    P_ReadGLBEXY();
                    GLB.STATUS = "";
                if( ((rTrim(Y_EXINTEXCRE)).equals(rTrim(SDINTEXCRE))==false))
                {
                    if( ((rTrim(SDINTEXCRE)).equals(rTrim(GLB.SPACES))==false))
                    {
                        GLB.SHADOW = "P";
                        P_82("PRINT.FRAME");
                        if (GLB.INITREPORTP == false)
                        {
                            if ( GLB.LPP_XSEEDTITLE != null  && GLB.LPP_XSEEDTITLE.trim().equals("") == false)
                            {
                                GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,true));
                            }
                            else
                            {
                                GLB.LPP_XSEEDTITLE = newBackup(GLB.TITLEP,"");
                                GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,false));
                            }
                        }
                        GLB.SHADOW = "P";
                        if ((GLB.LINECOUNTP >= GLB.FORMDEPTHP) || (GLB.ADVANCEP == true))
                        {   P_BEGINPAGE();
                            GLB.LINECOUNTP = GLB.LINECOUNTP - 1;
                        }
                        if (GLB.INITREPORTP == false)
                        {   GLB.INITREPORTP = true;
                        }
                        for (int i = 1; i <= 01.0; i++)
                        {   GLB.LINECOUNTP = GLB.LINECOUNTP + 1;
                            GLB.LPP_XSEEDREG = "";
                            GLB.LPP.println(GLB.LPP_XSEEDREG);
                            GLB.PRINTP_XSEEDWRITES = GLB.PRINTP_XSEEDWRITES + 1;
                            if (GLB.LINECOUNTP  >= GLB.FORMDEPTHP )
                            {
                                break;
                            }
                        }
                        GLB.SHADOW = "P";
                        P_83("PRINT.FRAME");
                        if (GLB.INITREPORTP == false)
                        {
                            if ( GLB.LPP_XSEEDTITLE != null  && GLB.LPP_XSEEDTITLE.trim().equals("") == false)
                            {
                                GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,true));
                            }
                            else
                            {
                                GLB.LPP_XSEEDTITLE = newBackup(GLB.TITLEP,"");
                                GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,false));
                            }
                        }
                        GLB.SHADOW = "P";
                        if ((GLB.LINECOUNTP >= GLB.FORMDEPTHP) || (GLB.ADVANCEP == true))
                        {   P_BEGINPAGE();
                            GLB.LINECOUNTP = GLB.LINECOUNTP - 1;
                        }
                        if (GLB.INITREPORTP == false)
                        {   GLB.INITREPORTP = true;
                        }
                        GLB.ADVANCEP = true;
                        GLB.LINECOUNTP = 0;
                    }
                    SDINTEXCRE = move(Y_EXINTEXCRE, SDINTEXCRE, 1);
                    SDNRNOTCRE = move (GLB.ZEROS, SDNRNOTCRE, 9, 0,"UNSIGNED");
                }
                if( (Y_EXNRNOTCRE != SDNRNOTCRE))
                {
                    if( (SDNRNOTCRE != GLB.ZEROS))
                    {
                        GLB.SHADOW = "P";
                        P_82("PRINT.FRAME");
                    }
                    F82_RLNRNOTCRE = move (Y_EXNRNOTCRE, F82_RLNRNOTCRE, 9, 0,"UNSIGNED");
                    F82_RLPCICMCRE = move (Y_EXPCICMCRE, F82_RLPCICMCRE, 4, 2,"UNSIGNED");
                    SDNRNOTCRE = move (Y_EXNRNOTCRE, SDNRNOTCRE, 9, 0,"UNSIGNED");
                }
                F82_RLVLCONCRE = add(Y_EXVLCONCRE, F82_RLVLCONCRE, 14, 2, "UNSIGNED", "TRUNCATE");
                F82_RLVLBASCRE = add(Y_EXVLBASCRE, F82_RLVLBASCRE, 14, 2, "UNSIGNED", "TRUNCATE");
                F82_RLVLIMPCRE = add(Y_EXVLIMPCRE, F82_RLVLIMPCRE, 14, 2, "UNSIGNED", "TRUNCATE");
                }
            }
			trace("#Xseed***** -  PONTO7.565","@@@@");
            if( ((rTrim(SDINTEXCRE)).equals(rTrim(GLB.SPACES))==false))
            {
                GLB.SHADOW = "P";
                P_82("PRINT.FRAME");
                if (GLB.INITREPORTP == false)
                {
                    if ( GLB.LPP_XSEEDTITLE != null  && GLB.LPP_XSEEDTITLE.trim().equals("") == false)
                    {
                        GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,true));
                    }
                    else
                    {
                        GLB.LPP_XSEEDTITLE = newBackup(GLB.TITLEP,"");
                        GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,false));
                    }
                }
                GLB.SHADOW = "P";
                if ((GLB.LINECOUNTP >= GLB.FORMDEPTHP) || (GLB.ADVANCEP == true))
                {   P_BEGINPAGE();
                    GLB.LINECOUNTP = GLB.LINECOUNTP - 1;
                }
                if (GLB.INITREPORTP == false)
                {   GLB.INITREPORTP = true;
                }
                for (int i = 1; i <= 01.0; i++)
                {   GLB.LINECOUNTP = GLB.LINECOUNTP + 1;
                    GLB.LPP_XSEEDREG = "";
                    GLB.LPP.println(GLB.LPP_XSEEDREG);
                    GLB.PRINTP_XSEEDWRITES = GLB.PRINTP_XSEEDWRITES + 1;
                    if (GLB.LINECOUNTP  >= GLB.FORMDEPTHP )
                    {
                        break;
                    }
                }
                GLB.SHADOW = "P";
                P_83("PRINT.FRAME");
                if (GLB.INITREPORTP == false)
                {
                    if ( GLB.LPP_XSEEDTITLE != null  && GLB.LPP_XSEEDTITLE.trim().equals("") == false)
                    {
                        GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,true));
                    }
                    else
                    {
                        GLB.LPP_XSEEDTITLE = newBackup(GLB.TITLEP,"");
                        GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,false));
                    }
                }
                GLB.SHADOW = "P";
                if ((GLB.LINECOUNTP >= GLB.FORMDEPTHP) || (GLB.ADVANCEP == true))
                {   P_BEGINPAGE();
                    GLB.LINECOUNTP = GLB.LINECOUNTP - 1;
                }
                if (GLB.INITREPORTP == false)
                {   GLB.INITREPORTP = true;
                }
                for (int i = 1; i <= 01.0; i++)
                {   GLB.LINECOUNTP = GLB.LINECOUNTP + 1;
                    GLB.LPP_XSEEDREG = "";
                    GLB.LPP.println(GLB.LPP_XSEEDREG);
                    GLB.PRINTP_XSEEDWRITES = GLB.PRINTP_XSEEDWRITES + 1;
                    if (GLB.LINECOUNTP  >= GLB.FORMDEPTHP )
                    {
                        break;
                    }
                }
                GLB.SHADOW = "P";
                P_84("PRINT.FRAME");
            }
			trace("#Xseed***** -  PONTO7.57","@@@@");
//:-----------------------------------------------------------------------
            message("ATTENTION", "** CREDITO ICMS 2 **");
            SDNRNOTCRE = move (GLB.ZEROS, SDNRNOTCRE, 9, 0,"UNSIGNED");
            if (GLB.INITREPORTP == false)
            {
                if ( GLB.LPP_XSEEDTITLE != null  && GLB.LPP_XSEEDTITLE.trim().equals("") == false)
                {
                    GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,true));
                }
                else
                {
                    GLB.LPP_XSEEDTITLE = newBackup(GLB.TITLEP,"");
                    GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,false));
                }
            }
            GLB.SHADOW = "P";
            if ((GLB.LINECOUNTP >= GLB.FORMDEPTHP) || (GLB.ADVANCEP == true))
            {   P_BEGINPAGE();
                GLB.LINECOUNTP = GLB.LINECOUNTP - 1;
            }
            if (GLB.INITREPORTP == false)
            {   GLB.INITREPORTP = true;
            }
            GLB.ADVANCEP = true;
            GLB.LINECOUNTP = 0;
            SDINTEXCRE = move(GLB.SPACES, SDINTEXCRE, 1);
            SDCDNATCRE = move (GLB.ZEROS, SDCDNATCRE, 4, 0,"UNSIGNED");
			trace("#Xseed***** -  PONTO7.58","@@@@P_SORT5");
            P_SORT5();
			trace("#Xseed***** -  PONTO7.59","@@@@");
            SDINTEXCRE = move(GLB.SPACES, SDINTEXCRE, 1);
            SDCDNATCRE = move (GLB.ZEROS, SDCDNATCRE, 4, 0,"UNSIGNED");
            if ((rTrim(GLBEXY.command)).equals("") == true)
            {
                GLBEXY.open(GLBEXY_XSEEDTITLE, "OUTPUT");
                if (GLBEXY.openStatus.equals("")==true)
                {   AuditMSG("Open OUTPUT Y (" + GLBEXY_XSEEDTITLE + ")");
                }
                else
                {   abort("Can't OpenFile Y (" + GLBEXY_XSEEDTITLE + ")");
                }
            }
            GLBEXY.command = "DT.ACTUAL";
            if ((rTrim(GLB.EXY_STATUS)).equals("") == false)
            {   if (GLBEXY != null)
                {   if (GLB.EXY_XSEEDCOUNT != 0)
                    {   GLBEXY.write(GLB.EXY_XSEEDBUFFER.toString());
                        GLB.EXY_XSEEDCOUNT = 0;
                     }
                     if ((GLBEXY.out!=null) && (GLBEXY.out.checkError()) )
                     {   GLB.TASK=53;
                         abort("Error on File : " + GLBEXY_XSEEDTITLE);
                     }
                    GLBEXY.close();
                    AuditMSG("Close Y (" + GLBEXY_XSEEDTITLE + "), Reads: " + cStr(GLB.EXY_XSEEDREADS) + " Writes: " + cStr(GLB.EXY_XSEEDWRITES));
                    GLB.EXY_XSEEDREADS = 0;
                    GLB.EXY_XSEEDWRITES = 0;
                }
                GLB.EXY_STATUS = "";
            }
				trace("#Xseed***** -  PONTO7.60","@@@@");
            extractFile = new File(GLBEXY_XSEEDTITLE);
            if (extractFile.exists() == false)
            {   AuditMSG (GLBEXY_XSEEDTITLE + " not found");
                GLB.STATUS = "*****";
            }
            else
            {
                GLBEXY.open(GLBEXY_XSEEDTITLE,"INPUT");
                if (GLBEXY.openStatus.equals("")==true)
                {   AuditMSG("Open INPUT Y (" + GLBEXY_XSEEDTITLE + ")");
                    GLB.EXY_STATUS = "INPUT";
                }
                else
                {   abort("Can't Open File Y (" + GLBEXY_XSEEDTITLE + ")");
                }
                GLB.EXY_STATUS = "INPUT";
                GLB.STATUS = "*****";
                if (GLB.RECORDY > 0.0)
                {   for (double i = 1; i <= GLB.RECORDY + 1; i++)
                    {   GLBEXY_XSEEDREG = GLBEXY.read();
                    }
                    GLB.EXY_XSEEDREADS = GLB.RECORDY;
                }
                else
                {   GLBEXY_XSEEDREG = GLBEXY.read();
                }
                while (GLBEXY_XSEEDREG != null)
                {   GLBEXY_EXTRACTAS = "";
                    P_ReadGLBEXY();
                    GLB.STATUS = "";
                if( ((rTrim(Y_EXINTEXCRE)).equals(rTrim(SDINTEXCRE))==false))
                {
                    if( ((rTrim(SDINTEXCRE)).equals(rTrim(GLB.SPACES))==false))
                    {
                        GLB.SHADOW = "P";
                        P_82("PRINT.FRAME");
                        if (GLB.INITREPORTP == false)
                        {
                            if ( GLB.LPP_XSEEDTITLE != null  && GLB.LPP_XSEEDTITLE.trim().equals("") == false)
                            {
                                GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,true));
                            }
                            else
                            {
                                GLB.LPP_XSEEDTITLE = newBackup(GLB.TITLEP,"");
                                GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,false));
                            }
                        }
                        GLB.SHADOW = "P";
                        if ((GLB.LINECOUNTP >= GLB.FORMDEPTHP) || (GLB.ADVANCEP == true))
                        {   P_BEGINPAGE();
                            GLB.LINECOUNTP = GLB.LINECOUNTP - 1;
                        }
                        if (GLB.INITREPORTP == false)
                        {   GLB.INITREPORTP = true;
                        }
                        for (int i = 1; i <= 01.0; i++)
                        {   GLB.LINECOUNTP = GLB.LINECOUNTP + 1;
                            GLB.LPP_XSEEDREG = "";
                            GLB.LPP.println(GLB.LPP_XSEEDREG);
                            GLB.PRINTP_XSEEDWRITES = GLB.PRINTP_XSEEDWRITES + 1;
                            if (GLB.LINECOUNTP  >= GLB.FORMDEPTHP )
                            {
                                break;
                            }
                        }
                        GLB.SHADOW = "P";
                        P_83("PRINT.FRAME");
                        if (GLB.INITREPORTP == false)
                        {
                            if ( GLB.LPP_XSEEDTITLE != null  && GLB.LPP_XSEEDTITLE.trim().equals("") == false)
                            {
                                GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,true));
                            }
                            else
                            {
                                GLB.LPP_XSEEDTITLE = newBackup(GLB.TITLEP,"");
                                GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,false));
                            }
                        }
                        GLB.SHADOW = "P";
                        if ((GLB.LINECOUNTP >= GLB.FORMDEPTHP) || (GLB.ADVANCEP == true))
                        {   P_BEGINPAGE();
                            GLB.LINECOUNTP = GLB.LINECOUNTP - 1;
                        }
                        if (GLB.INITREPORTP == false)
                        {   GLB.INITREPORTP = true;
                        }
                        GLB.ADVANCEP = true;
                        GLB.LINECOUNTP = 0;
                    }
                    SDINTEXCRE = move(Y_EXINTEXCRE, SDINTEXCRE, 1);
                    SDCDNATCRE = move (GLB.ZEROS, SDCDNATCRE, 4, 0,"UNSIGNED");
                }
                if( (Y_EXCDNATCRE != SDCDNATCRE))
                {
                    if( (SDCDNATCRE != GLB.ZEROS))
                    {
                        GLB.SHADOW = "P";
                        P_82("PRINT.FRAME");
                    }
                    F82_RLNRNOTCRE = move (Y_EXCDNATCRE, F82_RLNRNOTCRE, 9, 0,"UNSIGNED");
                    SDCDNATCRE = move (Y_EXCDNATCRE, SDCDNATCRE, 4, 0,"UNSIGNED");
                }
                F82_RLVLCONCRE = add(Y_EXVLCONCRE, F82_RLVLCONCRE, 14, 2, "UNSIGNED", "TRUNCATE");
                F82_RLVLBASCRE = add(Y_EXVLBASCRE, F82_RLVLBASCRE, 14, 2, "UNSIGNED", "TRUNCATE");
                F82_RLVLIMPCRE = add(Y_EXVLIMPCRE, F82_RLVLIMPCRE, 14, 2, "UNSIGNED", "TRUNCATE");
                }
            }
				trace("#Xseed***** -  PONTO7.61","@@@@");
            if( ((rTrim(SDINTEXCRE)).equals(rTrim(GLB.SPACES))==false))
            {
                GLB.SHADOW = "P";
                P_82("PRINT.FRAME");
                if (GLB.INITREPORTP == false)
                {
                    if ( GLB.LPP_XSEEDTITLE != null  && GLB.LPP_XSEEDTITLE.trim().equals("") == false)
                    {
                        GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,true));
                    }
                    else
                    {
                        GLB.LPP_XSEEDTITLE = newBackup(GLB.TITLEP,"");
                        GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,false));
                    }
                }
                GLB.SHADOW = "P";
                if ((GLB.LINECOUNTP >= GLB.FORMDEPTHP) || (GLB.ADVANCEP == true))
                {   P_BEGINPAGE();
                    GLB.LINECOUNTP = GLB.LINECOUNTP - 1;
                }
                if (GLB.INITREPORTP == false)
                {   GLB.INITREPORTP = true;
                }
                for (int i = 1; i <= 01.0; i++)
                {   GLB.LINECOUNTP = GLB.LINECOUNTP + 1;
                    GLB.LPP_XSEEDREG = "";
                    GLB.LPP.println(GLB.LPP_XSEEDREG);
                    GLB.PRINTP_XSEEDWRITES = GLB.PRINTP_XSEEDWRITES + 1;
                    if (GLB.LINECOUNTP  >= GLB.FORMDEPTHP )
                    {
                        break;
                    }
                }
                GLB.SHADOW = "P";
                P_83("PRINT.FRAME");
                if (GLB.INITREPORTP == false)
                {
                    if ( GLB.LPP_XSEEDTITLE != null  && GLB.LPP_XSEEDTITLE.trim().equals("") == false)
                    {
                        GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,true));
                    }
                    else
                    {
                        GLB.LPP_XSEEDTITLE = newBackup(GLB.TITLEP,"");
                        GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,false));
                    }
                }
                GLB.SHADOW = "P";
                if ((GLB.LINECOUNTP >= GLB.FORMDEPTHP) || (GLB.ADVANCEP == true))
                {   P_BEGINPAGE();
                    GLB.LINECOUNTP = GLB.LINECOUNTP - 1;
                }
                if (GLB.INITREPORTP == false)
                {   GLB.INITREPORTP = true;
                }
                for (int i = 1; i <= 01.0; i++)
                {   GLB.LINECOUNTP = GLB.LINECOUNTP + 1;
                    GLB.LPP_XSEEDREG = "";
                    GLB.LPP.println(GLB.LPP_XSEEDREG);
                    GLB.PRINTP_XSEEDWRITES = GLB.PRINTP_XSEEDWRITES + 1;
                    if (GLB.LINECOUNTP  >= GLB.FORMDEPTHP )
                    {
                        break;
                    }
                }
                GLB.SHADOW = "P";
                P_84("PRINT.FRAME");
            }
//: -------------------- CREDITO DE ICMS DIFAL ------------------------------------
            if( (GSDCDEMPRES == 1.0))
            {
                message("ATTENTION", "** CREDITO DE ICMS **");
                P_SORT6();
                SDNRNOTCRE = move (GLB.ZEROS, SDNRNOTCRE, 9, 0,"UNSIGNED");
                if ((rTrim(GLBEXW.command)).equals("") == true)
                {
                    GLBEXW.open(GLBEXW_XSEEDTITLE, "OUTPUT");
                    if (GLBEXW.openStatus.equals("")==true)
                    {   AuditMSG("Open OUTPUT W (" + GLBEXW_XSEEDTITLE + ")");
                    }
                    else
                    {   abort("Can't OpenFile W (" + GLBEXW_XSEEDTITLE + ")");
                    }
                }
                GLBEXW.command = "DT.ACTUAL";
                if ((rTrim(GLB.EXW_STATUS)).equals("") == false)
                {   if (GLBEXW != null)
                    {   if (GLB.EXW_XSEEDCOUNT != 0)
                        {   GLBEXW.write(GLB.EXW_XSEEDBUFFER.toString());
                            GLB.EXW_XSEEDCOUNT = 0;
                         }
                         if ((GLBEXW.out!=null) && (GLBEXW.out.checkError()) )
                         {   GLB.TASK=53;
                             abort("Error on File : " + GLBEXW_XSEEDTITLE);
                         }
                        GLBEXW.close();
                        AuditMSG("Close W (" + GLBEXW_XSEEDTITLE + "), Reads: " + cStr(GLB.EXW_XSEEDREADS) + " Writes: " + cStr(GLB.EXW_XSEEDWRITES));
                        GLB.EXW_XSEEDREADS = 0;
                        GLB.EXW_XSEEDWRITES = 0;
                    }
                    GLB.EXW_STATUS = "";
                }
                extractFile = new File(GLBEXW_XSEEDTITLE);
                if (extractFile.exists() == false)
                {   AuditMSG (GLBEXW_XSEEDTITLE + " not found");
                    GLB.STATUS = "*****";
                }
                else
                {
                    GLBEXW.open(GLBEXW_XSEEDTITLE,"INPUT");
                    if (GLBEXW.openStatus.equals("")==true)
                    {   AuditMSG("Open INPUT W (" + GLBEXW_XSEEDTITLE + ")");
                        GLB.EXW_STATUS = "INPUT";
                    }
                    else
                    {   abort("Can't Open File W (" + GLBEXW_XSEEDTITLE + ")");
                    }
                    GLB.EXW_STATUS = "INPUT";
                    GLB.STATUS = "*****";
                    if (GLB.RECORDW > 0.0)
                    {   for (double i = 1; i <= GLB.RECORDW + 1; i++)
                        {   GLBEXW_XSEEDREG = GLBEXW.read();
                        }
                        GLB.EXW_XSEEDREADS = GLB.RECORDW;
                    }
                    else
                    {   GLBEXW_XSEEDREG = GLBEXW.read();
                    }
                    while (GLBEXW_XSEEDREG != null)
                    {   GLBEXW_EXTRACTAS = "";
                        P_ReadGLBEXW();
                        GLB.STATUS = "";
                    if( (W_EXNRNOTCRE != SDNRNOTCRE))
                    {
                        if( (SDNRNOTCRE != GLB.ZEROS))
                        {
                            GLB.SHADOW = "R";
                            P_112("PRINT.FRAME");
                        }
                        F112_RLNRNOTCRE = move (W_EXNRNOTCRE, F112_RLNRNOTCRE, 9, 0,"UNSIGNED");
                        SDNRNOTCRE = move (W_EXNRNOTCRE, SDNRNOTCRE, 9, 0,"UNSIGNED");
                    }
                    F112_RLVLBASCRE = add(W_EXVLBASCRE, F112_RLVLBASCRE, 14, 2, "UNSIGNED", "TRUNCATE");
                    F112_RLVLICMDIO = add(W_EXVLICMDIO, F112_RLVLICMDIO, 12, 2, "UNSIGNED", "TRUNCATE");
                    F112_RLVLICMDID = add(W_EXVLICMDID, F112_RLVLICMDID, 12, 2, "UNSIGNED", "TRUNCATE");
                    F112_RLVLFCPDES = add(W_EXVLFCPDES, F112_RLVLFCPDES, 12, 2, "UNSIGNED", "TRUNCATE");
                    }
                }
                if( (SDNRNOTCRE != GLB.ZEROS))
                {
                    GLB.SHADOW = "R";
                    P_112("PRINT.FRAME");
                    if (GLB.INITREPORTR == false)
                    {
                        if ( GLB.LPR_XSEEDTITLE != null  && GLB.LPR_XSEEDTITLE.trim().equals("") == false)
                        {
                            GLB.LPR = new PrintStream(new FileOutputStream(GLB.LPR_XSEEDTITLE ,true));
                        }
                        else
                        {
                            GLB.LPR_XSEEDTITLE = newBackup(GLB.TITLER,"");
                            GLB.LPR = new PrintStream(new FileOutputStream(GLB.LPR_XSEEDTITLE ,false));
                        }
                    }
                    GLB.SHADOW = "R";
                    if ((GLB.LINECOUNTR >= GLB.FORMDEPTHR) || (GLB.ADVANCER == true))
                    {   P_BEGINPAGE();
                        GLB.LINECOUNTR = GLB.LINECOUNTR - 1;
                    }
                    if (GLB.INITREPORTR == false)
                    {   GLB.INITREPORTR = true;
                    }
                    for (int i = 1; i <= 01.0; i++)
                    {   GLB.LINECOUNTR = GLB.LINECOUNTR + 1;
                        GLB.LPR_XSEEDREG = "";
                        GLB.LPR.println(GLB.LPR_XSEEDREG);
                        GLB.PRINTR_XSEEDWRITES = GLB.PRINTR_XSEEDWRITES + 1;
                        if (GLB.LINECOUNTR  >= GLB.FORMDEPTHR )
                        {
                            break;
                        }
                    }
                    GLB.SHADOW = "R";
                    P_113("PRINT.FRAME");
                }
            }
            if( (GSDCDEMPRES == 2.0))
            {
                message("ATTENTION", "** NCM PRODUTO INTERNO **");
                P_SORT7();
                SDCDNATANT = move (GLB.ZEROS, SDCDNATANT, 4, 0,"UNSIGNED");
                SDCDNATCOM = move (GLB.ZEROS, SDCDNATCOM, 2, 0,"UNSIGNED");
                SDPCICMNOT = move (GLB.ZEROS, SDPCICMNOT, 5, 2,"UNSIGNED");
                if ((rTrim(GLBEXS.command)).equals("") == true)
                {
                    GLBEXS.open(GLBEXS_XSEEDTITLE, "OUTPUT");
                    if (GLBEXS.openStatus.equals("")==true)
                    {   AuditMSG("Open OUTPUT S (" + GLBEXS_XSEEDTITLE + ")");
                    }
                    else
                    {   abort("Can't OpenFile S (" + GLBEXS_XSEEDTITLE + ")");
                    }
                }
                GLBEXS.command = "DT.ACTUAL";
                if ((rTrim(GLB.EXS_STATUS)).equals("") == false)
                {   if (GLBEXS != null)
                    {   if (GLB.EXS_XSEEDCOUNT != 0)
                        {   GLBEXS.write(GLB.EXS_XSEEDBUFFER.toString());
                            GLB.EXS_XSEEDCOUNT = 0;
                         }
                         if ((GLBEXS.out!=null) && (GLBEXS.out.checkError()) )
                         {   GLB.TASK=53;
                             abort("Error on File : " + GLBEXS_XSEEDTITLE);
                         }
                        GLBEXS.close();
                        AuditMSG("Close S (" + GLBEXS_XSEEDTITLE + "), Reads: " + cStr(GLB.EXS_XSEEDREADS) + " Writes: " + cStr(GLB.EXS_XSEEDWRITES));
                        GLB.EXS_XSEEDREADS = 0;
                        GLB.EXS_XSEEDWRITES = 0;
                    }
                    GLB.EXS_STATUS = "";
                }
                extractFile = new File(GLBEXS_XSEEDTITLE);
                if (extractFile.exists() == false)
                {   AuditMSG (GLBEXS_XSEEDTITLE + " not found");
                    GLB.STATUS = "*****";
                }
                else
                {
                    GLBEXS.open(GLBEXS_XSEEDTITLE,"INPUT");
                    if (GLBEXS.openStatus.equals("")==true)
                    {   AuditMSG("Open INPUT S (" + GLBEXS_XSEEDTITLE + ")");
                        GLB.EXS_STATUS = "INPUT";
                    }
                    else
                    {   abort("Can't Open File S (" + GLBEXS_XSEEDTITLE + ")");
                    }
                    GLB.EXS_STATUS = "INPUT";
                    GLB.STATUS = "*****";
                    if (GLB.RECORDS > 0.0)
                    {   for (double i = 1; i <= GLB.RECORDS + 1; i++)
                        {   GLBEXS_XSEEDREG = GLBEXS.read();
                        }
                        GLB.EXS_XSEEDREADS = GLB.RECORDS;
                    }
                    else
                    {   GLBEXS_XSEEDREG = GLBEXS.read();
                    }
                    while (GLBEXS_XSEEDREG != null)
                    {   GLBEXS_EXTRACTAS = "";
                        P_ReadGLBEXS();
                        GLB.STATUS = "";
                    if( (SDCDNATANT == GLB.ZEROS))
                    {
                        SDCDNATANT = move (S_EXCDNATDIA, SDCDNATANT, 4, 0,"UNSIGNED");
                        if( (S_EXCDNATDIA < 1000.0))
                        {
                            SDINUMAANT = moveComplex(format(S_EXCDNATDIA	, "9999"), 2, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                        }
                        else
                        {
                            SDINUMAANT = moveComplex(format(S_EXCDNATDIA	, "9999"), 1, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                        }
                        SDPCICMNOT = move (S_EXPCICMDIA, SDPCICMNOT, 5, 2,"UNSIGNED");
                    }
                    if( (S_EXCDNATDIA < 1000.0))
                    {
                        SDINUMANAT = moveComplex(format(S_EXCDNATDIA	, "9999"), 2, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                    }
                    else
                    {
                        SDINUMANAT = moveComplex(format(S_EXCDNATDIA	, "9999"), 1, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                    }
                    if( (SDINUMANAT != SDINUMAANT))
                    {
                        GLB.SHADOW = "S";
                        P_122("PRINT.FRAME");
                        GLB.SHADOW = "S";
                        P_123("PRINT.FRAME");
                        SDINUMAANT = move (SDINUMANAT, SDINUMAANT, 1, 0,"UNSIGNED");
                        SDCDNATANT = move (S_EXCDNATDIA, SDCDNATANT, 4, 0,"UNSIGNED");
                        SDPCICMNOT = move (S_EXPCICMDIA, SDPCICMNOT, 5, 2,"UNSIGNED");
                    }
                    if( ((S_EXCDNATDIA != SDCDNATANT) || (S_EXPCICMDIA != SDPCICMNOT)))
                    {
                        GLB.SHADOW = "S";
                        P_122("PRINT.FRAME");
                        SDCDNATANT = move (S_EXCDNATDIA, SDCDNATANT, 4, 0,"UNSIGNED");
                        SDCDNATCOM = move (S_EXCDNATDIA, SDCDNATCOM, 2, 0,"UNSIGNED");
                        SDPCICMNOT = move (S_EXPCICMDIA, SDPCICMNOT, 5, 2,"UNSIGNED");
                    }
                    F122_RLCDAPBICM = add(S_EXVLBASDIA, F122_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
                    F122_RLCDAPVICM = add(S_EXVLIMPDIA, F122_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
                    F122_RLCDAPVDIO = add(S_EXVLICMDIA, F122_RLCDAPVDIO, 13, 2, "UNSIGNED", "TRUNCATE");
                    }
                }
                if( (SDCDNATANT != GLB.ZEROS))
                {
                    GLB.SHADOW = "S";
                    P_122("PRINT.FRAME");
                    GLB.SHADOW = "S";
                    P_123("PRINT.FRAME");
                    GLB.SHADOW = "S";
                    P_124("PRINT.FRAME");
                    if (GLB.INITREPORTS == false)
                    {
                        if ( GLB.LPS_XSEEDTITLE != null  && GLB.LPS_XSEEDTITLE.trim().equals("") == false)
                        {
                            GLB.LPS = new PrintStream(new FileOutputStream(GLB.LPS_XSEEDTITLE ,true));
                        }
                        else
                        {
                            GLB.LPS_XSEEDTITLE = newBackup(GLB.TITLES,"");
                            GLB.LPS = new PrintStream(new FileOutputStream(GLB.LPS_XSEEDTITLE ,false));
                        }
                    }
                    GLB.SHADOW = "S";
                    if ((GLB.LINECOUNTS >= GLB.FORMDEPTHS) || (GLB.ADVANCES == true))
                    {   P_BEGINPAGE();
                        GLB.LINECOUNTS = GLB.LINECOUNTS - 1;
                    }
                    if (GLB.INITREPORTS == false)
                    {   GLB.INITREPORTS = true;
                    }
                    GLB.ADVANCES = true;
                    GLB.LINECOUNTS = 0;
                }
                message("ATTENTION", "***** EXTRATIFICACAO SIMPLES NACIONAL E NAO CONTRIBUINTE *****");
					trace("#Xseed***** -  PONTO7.62","P_SORT8");
                P_SORT8();
					trace("#Xseed***** -  PONTO7.63","@@@@");
                SDDSTEXAUX = move("***** EXTRATIFICACAO SIMPLES NACIONAL E NAO CONTRIBUINTE *****", SDDSTEXAUX, 65);
                SDCDNATANT = move (GLB.ZEROS, SDCDNATANT, 4, 0,"UNSIGNED");
                SDCDNATCOM = move (GLB.ZEROS, SDCDNATCOM, 2, 0,"UNSIGNED");
                SDPCICMNOT = move (GLB.ZEROS, SDPCICMNOT, 5, 2,"UNSIGNED");
                SDINCLIANT = move (GLB.ZEROS, SDINCLIANT, 1, 0,"UNSIGNED");
                if ((rTrim(GLBEXU.command)).equals("") == true)
                {
                    GLBEXU.open(GLBEXU_XSEEDTITLE, "OUTPUT");
                    if (GLBEXU.openStatus.equals("")==true)
                    {   AuditMSG("Open OUTPUT U (" + GLBEXU_XSEEDTITLE + ")");
                    }
                    else
                    {   abort("Can't OpenFile U (" + GLBEXU_XSEEDTITLE + ")");
                    }
                }
                GLBEXU.command = "DT.ACTUAL";
                if ((rTrim(GLB.EXU_STATUS)).equals("") == false)
                {   if (GLBEXU != null)
                    {   if (GLB.EXU_XSEEDCOUNT != 0)
                        {   GLBEXU.write(GLB.EXU_XSEEDBUFFER.toString());
                            GLB.EXU_XSEEDCOUNT = 0;
                         }
                         if ((GLBEXU.out!=null) && (GLBEXU.out.checkError()) )
                         {   GLB.TASK=53;
                             abort("Error on File : " + GLBEXU_XSEEDTITLE);
                         }
                        GLBEXU.close();
                        AuditMSG("Close U (" + GLBEXU_XSEEDTITLE + "), Reads: " + cStr(GLB.EXU_XSEEDREADS) + " Writes: " + cStr(GLB.EXU_XSEEDWRITES));
                        GLB.EXU_XSEEDREADS = 0;
                        GLB.EXU_XSEEDWRITES = 0;
                    }
                    GLB.EXU_STATUS = "";
                }
                extractFile = new File(GLBEXU_XSEEDTITLE);
                if (extractFile.exists() == false)
                {   AuditMSG (GLBEXU_XSEEDTITLE + " not found");
                    GLB.STATUS = "*****";
                }
                else
                {
                    GLBEXU.open(GLBEXU_XSEEDTITLE,"INPUT");
                    if (GLBEXU.openStatus.equals("")==true)
                    {   AuditMSG("Open INPUT U (" + GLBEXU_XSEEDTITLE + ")");
                        GLB.EXU_STATUS = "INPUT";
                    }
                    else
                    {   abort("Can't Open File U (" + GLBEXU_XSEEDTITLE + ")");
                    }
                    GLB.EXU_STATUS = "INPUT";
                    GLB.STATUS = "*****";
                    if (GLB.RECORDU > 0.0)
                    {   for (double i = 1; i <= GLB.RECORDU + 1; i++)
                        {   GLBEXU_XSEEDREG = GLBEXU.read();
                        }
                        GLB.EXU_XSEEDREADS = GLB.RECORDU;
                    }
                    else
                    {   GLBEXU_XSEEDREG = GLBEXU.read();
                    }
                    while (GLBEXU_XSEEDREG != null)
                    {   GLBEXU_EXTRACTAS = "";
                        P_ReadGLBEXU();
                        GLB.STATUS = "";
                    if( (SDCDNATANT == GLB.ZEROS))
                    {
                        SDCDNATANT = move (U_EXCDNATDIA, SDCDNATANT, 4, 0,"UNSIGNED");
                        if( (U_EXCDNATDIA < 1000.0))
                        {
                            SDINUMAANT = moveComplex(format(U_EXCDNATDIA	, "9999"), 2, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                        }
                        else
                        {
                            SDINUMAANT = moveComplex(format(U_EXCDNATDIA	, "9999"), 1, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                        }
                        SDPCICMNOT = move (U_EXPCICMDIA, SDPCICMNOT, 5, 2,"UNSIGNED");
                        SDINCLIANT = move (U_EXINCLIENT, SDINCLIANT, 1, 0,"UNSIGNED");
                    }
                    if( (U_EXCDNATDIA < 1000.0))
                    {
                        SDINUMANAT = moveComplex(format(U_EXCDNATDIA	, "9999"), 2, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                    }
                    else
                    {
                        SDINUMANAT = moveComplex(format(U_EXCDNATDIA	, "9999"), 1, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                    }
                    if( (SDINUMANAT != SDINUMAANT))
                    {
                        GLB.SHADOW = "S";
                        P_122("PRINT.FRAME");
                        GLB.SHADOW = "S";
                        P_123("PRINT.FRAME");
                        SDINUMAANT = move (SDINUMANAT, SDINUMAANT, 1, 0,"UNSIGNED");
                        SDCDNATANT = move (U_EXCDNATDIA, SDCDNATANT, 4, 0,"UNSIGNED");
                        SDPCICMNOT = move (U_EXPCICMDIA, SDPCICMNOT, 5, 2,"UNSIGNED");
                        SDINCLIANT = move (U_EXINCLIENT, SDINCLIANT, 1, 0,"UNSIGNED");
                    }
                    if( (((U_EXCDNATDIA != SDCDNATANT) || (U_EXPCICMDIA != SDPCICMNOT)) || (U_EXINCLIENT != SDINCLIANT)))
                    {
                        GLB.SHADOW = "S";
                        P_122("PRINT.FRAME");
                        SDCDNATANT = move (U_EXCDNATDIA, SDCDNATANT, 4, 0,"UNSIGNED");
                        SDCDNATCOM = move (U_EXCDNATDIA, SDCDNATCOM, 2, 0,"UNSIGNED");
                        SDPCICMNOT = move (U_EXPCICMDIA, SDPCICMNOT, 5, 2,"UNSIGNED");
                        SDINCLIANT = move (U_EXINCLIENT, SDINCLIANT, 1, 0,"UNSIGNED");
                    }
                    F122_RLCDAPBICM = add(U_EXVLBASDIA, F122_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
                    F122_RLCDAPVICM = add(U_EXVLIMPDIA, F122_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
                    F122_RLCDAPVDIO = add(U_EXVLICMDIA, F122_RLCDAPVDIO, 13, 2, "UNSIGNED", "TRUNCATE");
                    }
                }
                if( (SDCDNATANT != GLB.ZEROS))
                {
                    GLB.SHADOW = "S";
                    P_122("PRINT.FRAME");
                    GLB.SHADOW = "S";
                    P_123("PRINT.FRAME");
                    GLB.SHADOW = "S";
                    P_124("PRINT.FRAME");
                    if (GLB.INITREPORTS == false)
                    {
                        if ( GLB.LPS_XSEEDTITLE != null  && GLB.LPS_XSEEDTITLE.trim().equals("") == false)
                        {
                            GLB.LPS = new PrintStream(new FileOutputStream(GLB.LPS_XSEEDTITLE ,true));
                        }
                        else
                        {
                            GLB.LPS_XSEEDTITLE = newBackup(GLB.TITLES,"");
                            GLB.LPS = new PrintStream(new FileOutputStream(GLB.LPS_XSEEDTITLE ,false));
                        }
                    }
                    GLB.SHADOW = "S";
                    if ((GLB.LINECOUNTS >= GLB.FORMDEPTHS) || (GLB.ADVANCES == true))
                    {   P_BEGINPAGE();
                        GLB.LINECOUNTS = GLB.LINECOUNTS - 1;
                    }
                    if (GLB.INITREPORTS == false)
                    {   GLB.INITREPORTS = true;
                    }
                    for (int i = 1; i <= 01.0; i++)
                    {   GLB.LINECOUNTS = GLB.LINECOUNTS + 1;
                        GLB.LPS_XSEEDREG = "";
                        GLB.LPS.println(GLB.LPS_XSEEDREG);
                        GLB.PRINTS_XSEEDWRITES = GLB.PRINTS_XSEEDWRITES + 1;
                        if (GLB.LINECOUNTS  >= GLB.FORMDEPTHS )
                        {
                            break;
                        }
                    }
                }
            }
//:-----------------------------------------------------------------------
//: consumidor final
trace("#Xseed***** -  PONTO7.64","@@@@");
            message("ATTENTION", "** LEITURA - CG133 - CONSUMIDOR FINAL **");
            SDCDNATANT = move (GLB.ZEROS, SDCDNATANT, 4, 0,"UNSIGNED");
            SDCDNATCOM = move (GLB.ZEROS, SDCDNATCOM, 2, 0,"UNSIGNED");
            GLB.SECURE = false;
            GLB.STATUS = CG13304_DetermineGroupFrom (1, false, GSDCDEMPRES, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS);
            while (CG133_XSEEDEOF == false)
            {
                CG13304_DetermineMoveNext ();
                if (CG133_XSEEDEOF == true)
                {    break;
                }
                SO_CONSUM:
                {
                    if( (CG133_INCONFIN == GLB.ZEROS))
                    {
                        break SO_CONSUM;
                    }
                    if( (SDCDNATANT == GLB.ZEROS))
                    {
                        SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                        if( (CG133_CDNATOPE < 1000.0))
                        {
                            SDINUMAANT = moveComplex(format(CG133_CDNATOPE	, "9999"), 2, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                        }
                        else
                        {
                            SDINUMAANT = moveComplex(format(CG133_CDNATOPE	, "9999"), 1, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                        }
                        SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    }
                    if( (CG133_CDNATOPE < 1000.0))
                    {
                        SDINUMANAT = moveComplex(format(CG133_CDNATOPE	, "9999"), 2, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                    }
                    else
                    {
                        SDINUMANAT = moveComplex(format(CG133_CDNATOPE	, "9999"), 1, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                    }
                    if( (SDINUMANAT != SDINUMAANT))
                    {
                        GLB.SHADOW = "I";
                        P_65("PRINT.FRAME");
                        GLB.SHADOW = "I";
                        P_66("PRINT.FRAME");
                        SDINUMAANT = move (SDINUMANAT, SDINUMAANT, 1, 0,"UNSIGNED");
                        SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                        SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    }
                    if( ((CG133_CDNATOPE != SDCDNATANT) || (CG133_CDNATCOM != SDCDNATCOM)))
                    {
                        GLB.SHADOW = "I";
                        P_65("PRINT.FRAME");
                        SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                        SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    }
                    F65_RLCDAPCONT = add(CG133_VLCONTAX, F65_RLCDAPCONT, 14, 2, "UNSIGNED", "TRUNCATE");
                    F65_RLCDAPBICM = add(CG133_VLBASICM, F65_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
                    F65_RLCDAPVICM = add(CG133_VLIMPICM, F65_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
                    F65_RLCDAPNICM = add(CG133_VLISEICM, F65_RLCDAPNICM, 13, 2, "UNSIGNED", "TRUNCATE");
                    F65_RLVLAPOICM = add(CG133_VLOUTICM, F65_RLVLAPOICM, 13, 2, "UNSIGNED", "TRUNCATE");
                }
            }
			trace("#Xseed***** -  PONTO7.65","@@@@");
            if( (F65_RLCDAPCONT != GLB.ZEROS))
            {
                GLB.SHADOW = "I";
                P_65("PRINT.FRAME");
                GLB.SHADOW = "I";
                P_66("PRINT.FRAME");
                GLB.SHADOW = "I";
                P_67("PRINT.FRAME");
            }
//:***********************************************************************
//:====================== APURACAO POR DECENDIO ==========================
//:***********************************************************************
            GLB.SHADOW = " ";
            P_50("PRINT.FRAME");
            message("ATTENTION", "** LEITURA - CG133 - APURACAO POR DECENDIO IPI **");
            GSDDIDISAMD = move (format(AXDIINICIO ,"99999999"), GSDDIDISAMD,8);
            GSDDIDISAMD_GROUP();
            GSDDIDDSAMD = move ("15", GSDDIDDSAMD, 2, 0,"UNSIGNED");
            GSDDIDDSAMD_ITEM();
            SDDIDATIPI = move (GSDDIDISAMD, SDDIDATIPI, 8, 0,"UNSIGNED");
            SDCDNATANT = move (GLB.ZEROS, SDCDNATANT, 4, 0,"UNSIGNED");
            SDCDNATCOM = move (GLB.ZEROS, SDCDNATCOM, 2, 0,"UNSIGNED");
            SDINDECEND = move (GLB.ZEROS, SDINDECEND, 1, 0,"UNSIGNED");
            GLB.SECURE = false;
			trace("#Xseed***** -  PONTO7.66","@@@@");
            GLB.STATUS = CG13305_DetermineGroupFrom (1, false, GSDCDEMPRES, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS);
            while (CG133_XSEEDEOF == false)
            {
                CG13305_DetermineMoveNext ();
                if (CG133_XSEEDEOF == true)
                {    break;
                }
                if( (CG133_INDECEND != SDINDECEND))
                {
                    if( (SDINDECEND != GLB.ZEROS))
                    {
                        GLB.SHADOW = "C";
                        P_54("PRINT.FRAME");
                        GLB.LINECOUNTC = move ("999", GLB.LINECOUNTC, 4, 0,"UNSIGNED");
                    }
                    GSDDIDISAMD = move (format(CG133_DIEMINOT ,"99999999"), GSDDIDISAMD,8);
                    GSDDIDISAMD_GROUP();
                    if (CG133_INDECEND == 1.0)
                    {
                        SDINDECEN1 = move ("1", SDINDECEN1, 1, 0,"UNSIGNED");
                        GSDDIDDSAMD = move ("01", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                        GSDDIDDSAMD_ITEM();
                        SDDIINIDEC = move (GSDDIDISAMD, SDDIINIDEC, 8, 0,"UNSIGNED");
                        if( (AXDIINICIO > 20041000.0))
                        {
                            GSDDIDDSAMD = move ("1", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                            GSDDIDDSAMD_ITEM();
                            GSDDIMMSAMD = add(cDec("1"), GSDDIMMSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                            GSDDIMMSAMD_ITEM();
                            if( (GSDDIMMSAMD > 12.0))
                            {
                                GSDDIMMSAMD = move ("1", GSDDIMMSAMD, 2, 0,"UNSIGNED");
                                GSDDIMMSAMD_ITEM();
                                GSDDIAASAMD = add(cDec("1"), GSDDIAASAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                                GSDDIAASAMD_ITEM();
                                if( (GSDDIAASAMD == GLB.ZEROS))
                                {
                                    GSDDISSSAMD = add(cDec("1"), GSDDISSSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                                    GSDDISSSAMD_ITEM();
                                }
                            }
                            GLB.DC_AUX = GSDDIDISAMD;
                            DCConvert (GLB.DC_AUX, "-", 1.0, "CCYYMMDD");
                            GSDDIDISAMD = move (format(GLB.DC_CCYYMMDD ,"99999999"), GSDDIDISAMD,8);
                            GSDDIDISAMD_GROUP();
                        }
                        else
                        {
                            if( (AXDIINICIO > 20040100.0))
                            {
                                GSDDIDDSAMD = move ("15", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                                GSDDIDDSAMD_ITEM();
                            }
                            else
                            {
                                GSDDIDDSAMD = move ("10", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                                GSDDIDDSAMD_ITEM();
                            }
                        }
                        SDDIFIMDEC = move (GSDDIDISAMD, SDDIFIMDEC, 8, 0,"UNSIGNED");
                    }
                    else
                    if (CG133_INDECEND == 2.0)
                    {
                        SDINDECEN2 = move ("1", SDINDECEN2, 1, 0,"UNSIGNED");
                        if( (AXDIINICIO > 20040100.0))
                        {
                            GSDDIDDSAMD = move ("16", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                            GSDDIDDSAMD_ITEM();
                        }
                        else
                        {
                            GSDDIDDSAMD = move ("11", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                            GSDDIDDSAMD_ITEM();
                        }
                        SDDIINIDEC = move (GSDDIDISAMD, SDDIINIDEC, 8, 0,"UNSIGNED");
                        if( (AXDIINICIO > 20040100.0))
                        {
                            GSDDIDDSAMD = move ("1", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                            GSDDIDDSAMD_ITEM();
                            GSDDIMMSAMD = add(cDec("1"), GSDDIMMSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                            GSDDIMMSAMD_ITEM();
                            if( (GSDDIMMSAMD > 12.0))
                            {
                                GSDDIMMSAMD = move ("1", GSDDIMMSAMD, 2, 0,"UNSIGNED");
                                GSDDIMMSAMD_ITEM();
                                GSDDIAASAMD = add(cDec("1"), GSDDIAASAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                                GSDDIAASAMD_ITEM();
                                if( (GSDDIAASAMD == GLB.ZEROS))
                                {
                                    GSDDISSSAMD = add(cDec("1"), GSDDISSSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                                    GSDDISSSAMD_ITEM();
                                }
                            }
                            GLB.DC_AUX = GSDDIDISAMD;
                            DCConvert (GLB.DC_AUX, "-", 1.0, "CCYYMMDD");
                            SDDIFIMDEC = move (GLB.DC_CCYYMMDD, SDDIFIMDEC, 8, 0,"UNSIGNED");
                        }
                        else
                        {
                            GSDDIDDSAMD = move ("20", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                            GSDDIDDSAMD_ITEM();
                            SDDIFIMDEC = move (GSDDIDISAMD, SDDIFIMDEC, 8, 0,"UNSIGNED");
                        }
                    }
                    else
                    if (CG133_INDECEND == 3.0)
                    {
                        SDINDECEN3 = move ("1", SDINDECEN3, 1, 0,"UNSIGNED");
                        GSDDIDDSAMD = move ("21", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                        GSDDIDDSAMD_ITEM();
                        SDDIINIDEC = move (GSDDIDISAMD, SDDIINIDEC, 8, 0,"UNSIGNED");
                        GSDDIDDSAMD = move ("1", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                        GSDDIDDSAMD_ITEM();
                        GSDDIMMSAMD = add(cDec("1"), GSDDIMMSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                        GSDDIMMSAMD_ITEM();
                        if( (GSDDIMMSAMD > 12.0))
                        {
                            GSDDIMMSAMD = move ("1", GSDDIMMSAMD, 2, 0,"UNSIGNED");
                            GSDDIMMSAMD_ITEM();
                            GSDDIAASAMD = add(cDec("1"), GSDDIAASAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                            GSDDIAASAMD_ITEM();
                            if( (GSDDIAASAMD == GLB.ZEROS))
                            {
                                GSDDISSSAMD = add(cDec("1"), GSDDISSSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                                GSDDISSSAMD_ITEM();
                            }
                        }
                        GLB.DC_AUX = GSDDIDISAMD;
                        DCConvert (GLB.DC_AUX, "-", 1.0, "CCYYMMDD");
                        SDDIFIMDEC = move (GLB.DC_CCYYMMDD, SDDIFIMDEC, 8, 0,"UNSIGNED");
                        GSDDIDISAMD = move (format(CG133_DIEMINOT ,"99999999"), GSDDIDISAMD,8);
                        GSDDIDISAMD_GROUP();
                    }
                    SDINDECEND = move (CG133_INDECEND, SDINDECEND, 1, 0,"UNSIGNED");
                }
                if( (SDCDNATANT == GLB.ZEROS))
                {
                    SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                    if( (CG133_CDNATOPE < 1000.0))
                    {
                        SDINUMAANT = moveComplex(format(CG133_CDNATOPE	, "9999"), 2, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                    }
                    else
                    {
                        SDINUMAANT = moveComplex(format(CG133_CDNATOPE	, "9999"), 1, 1, SDINUMAANT, 1, 1, 0,"SIGNED");
                    }
                    SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    SDINORIGEM = move (CG133_INORIGEM, SDINORIGEM, 1, 0,"UNSIGNED");
                }
                if( (CG133_CDNATOPE < 1000.0))
                {
                    SDINUMANAT = moveComplex(format(CG133_CDNATOPE	, "9999"), 2, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                }
                else
                {
                    SDINUMANAT = moveComplex(format(CG133_CDNATOPE	, "9999"), 1, 1, SDINUMANAT, 1, 1, 0,"SIGNED");
                }
                if( (SDINUMANAT != SDINUMAANT))
                {
                    GLB.SHADOW = "C";
                    P_53("PRINT.FRAME");
                    SDINUMAANT = move (SDINUMANAT, SDINUMAANT, 1, 0,"UNSIGNED");
                    SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                    SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    SDINORIGEM = move (CG133_INORIGEM, SDINORIGEM, 1, 0,"UNSIGNED");
                }
                if( (((CG133_CDNATOPE != SDCDNATANT) || (CG133_CDNATCOM != SDCDNATCOM)) || (CG133_INORIGEM != SDINORIGEM)))
                {
                    GLB.SHADOW = "C";
                    P_52("PRINT.FRAME");
                    SDCDNATANT = move (CG133_CDNATOPE, SDCDNATANT, 4, 0,"UNSIGNED");
                    SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    SDINORIGEM = move (CG133_INORIGEM, SDINORIGEM, 1, 0,"UNSIGNED");
                }
                F52_RLVLAPCIPI = add(CG133_VLCONTAX, F52_RLVLAPCIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                F52_RLVLAPBIPI = add(CG133_VLBASIPI, F52_RLVLAPBIPI, 13, 2, "UNSIGNED", "TRUNCATE");
                F52_RLVLAPVIPI = add(CG133_VLIMPIPI, F52_RLVLAPVIPI, 13, 2, "UNSIGNED", "TRUNCATE");
                F52_RLVLAPMIPI = add(CG133_VLISEIPI, F52_RLVLAPMIPI, 13, 2, "UNSIGNED", "TRUNCATE");
                F52_RLVLAPOIPI = add(CG133_VLOUTIPI, F52_RLVLAPOIPI, 13, 2, "UNSIGNED", "TRUNCATE");
                if( ((AXINMESPER == 1.0) && (CG133_DIEMINOT > SDDIDATIPI)))
                {
                    F10_EXCDNATOPE = move (CG133_CDNATOPE, F10_EXCDNATOPE, 4, 0,"UNSIGNED");
                    F10_EXCDNATCOM = move (CG133_CDNATCOM, F10_EXCDNATCOM, 2, 0,"UNSIGNED");
                    F10_EXVLCONTAX = move (CG133_VLCONTAX, F10_EXVLCONTAX, 13, 2,"UNSIGNED");
                    F10_EXVLBASIPI = move (CG133_VLBASIPI, F10_EXVLBASIPI, 13, 2,"UNSIGNED");
                    F10_EXVLIMPIPI = move (CG133_VLIMPIPI, F10_EXVLIMPIPI, 13, 2,"UNSIGNED");
                    F10_EXVLISEIPI = move (CG133_VLISEIPI, F10_EXVLISEIPI, 13, 2,"UNSIGNED");
                    F10_EXVLOUTIPI = move (CG133_VLOUTIPI, F10_EXVLOUTIPI, 13, 2,"UNSIGNED");
                    GLBEXI_EXTRACTAS = "10";
                    P_EXTRACTI();
                }
            }
			trace("#Xseed***** -  PONTO7.67","@@@@");
            if( (((SDINDECEN1 != GLB.ZEROS) || (SDINDECEN2 != GLB.ZEROS)) || (SDINDECEN3 != GLB.ZEROS)))
            {
                GLB.SHADOW = "C";
                P_54("PRINT.FRAME");
                GLB.LINECOUNTC = move ("999", GLB.LINECOUNTC, 4, 0,"UNSIGNED");
            }
            NAO_VERIFICA:
            {
//:--- Imprime apuracao para decendios sem movimento p/ opcao mensal ---
                if( (AXINMESPER == 2.0))
                {
                    break NAO_VERIFICA;
                }
                if( (SDINDECEN1 == GLB.ZEROS))
                {
                    GSDDIDDSAMD = move ("01", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                    GSDDIDDSAMD_ITEM();
                    SDDIINIDEC = move (GSDDIDISAMD, SDDIINIDEC, 8, 0,"UNSIGNED");
                    if( (AXDIINICIO > 20041000.0))
                    {
                        GSDDIDDSAMD = move ("1", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                        GSDDIDDSAMD_ITEM();
                        GSDDIMMSAMD = add(cDec("1"), GSDDIMMSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                        GSDDIMMSAMD_ITEM();
                        if( (GSDDIMMSAMD > 12.0))
                        {
                            GSDDIMMSAMD = move ("1", GSDDIMMSAMD, 2, 0,"UNSIGNED");
                            GSDDIMMSAMD_ITEM();
                            GSDDIAASAMD = add(cDec("1"), GSDDIAASAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                            GSDDIAASAMD_ITEM();
                            if( (GSDDIAASAMD == GLB.ZEROS))
                            {
                                GSDDISSSAMD = add(cDec("1"), GSDDISSSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                                GSDDISSSAMD_ITEM();
                            }
                        }
                        GLB.DC_AUX = GSDDIDISAMD;
                        DCConvert (GLB.DC_AUX, "-", 1.0, "CCYYMMDD");
                        GSDDIDISAMD = move (format(GLB.DC_CCYYMMDD ,"99999999"), GSDDIDISAMD,8);
                        GSDDIDISAMD_GROUP();
                    }
                    else
                    {
                        if( (AXDIINICIO > 20040100.0))
                        {
                            GSDDIDDSAMD = move ("15", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                            GSDDIDDSAMD_ITEM();
                        }
                        else
                        {
                            GSDDIDDSAMD = move ("10", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                            GSDDIDDSAMD_ITEM();
                        }
                    }
                    SDDIFIMDEC = move (GSDDIDISAMD, SDDIFIMDEC, 8, 0,"UNSIGNED");
                    GLB.SHADOW = "C";
                    P_54("PRINT.FRAME");
                    GLB.LINECOUNTC = move ("999", GLB.LINECOUNTC, 4, 0,"UNSIGNED");
                }
                if( (SDINDECEN2 == GLB.ZEROS))
                {
                    if( (AXDIINICIO > 20041000.0))
                    {
                    }
                    else
                    {
                        if( (AXDIINICIO > 20040100.0))
                        {
                            GSDDIDDSAMD = move ("16", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                            GSDDIDDSAMD_ITEM();
                            SDDIINIDEC = move (GSDDIDISAMD, SDDIINIDEC, 8, 0,"UNSIGNED");
                            GSDDIDDSAMD = move ("1", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                            GSDDIDDSAMD_ITEM();
                            GSDDIMMSAMD = add(cDec("1"), GSDDIMMSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                            GSDDIMMSAMD_ITEM();
                            if( (GSDDIMMSAMD > 12.0))
                            {
                                GSDDIMMSAMD = move ("1", GSDDIMMSAMD, 2, 0,"UNSIGNED");
                                GSDDIMMSAMD_ITEM();
                                GSDDIAASAMD = add(cDec("1"), GSDDIAASAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                                GSDDIAASAMD_ITEM();
                                if( (GSDDIAASAMD == GLB.ZEROS))
                                {
                                    GSDDISSSAMD = add(cDec("1"), GSDDISSSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                                    GSDDISSSAMD_ITEM();
                                }
                            }
                            GLB.DC_AUX = GSDDIDISAMD;
                            DCConvert (GLB.DC_AUX, "-", 1.0, "CCYYMMDD");
                            SDDIFIMDEC = move (GLB.DC_CCYYMMDD, SDDIFIMDEC, 8, 0,"UNSIGNED");
                        }
                        else
                        {
                            GSDDIDDSAMD = move ("11", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                            GSDDIDDSAMD_ITEM();
                            SDDIINIDEC = move (GSDDIDISAMD, SDDIINIDEC, 8, 0,"UNSIGNED");
                            GSDDIDDSAMD = move ("20", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                            GSDDIDDSAMD_ITEM();
                            SDDIFIMDEC = move (GSDDIDISAMD, SDDIFIMDEC, 8, 0,"UNSIGNED");
                        }
                        GLB.SHADOW = "C";
                        P_54("PRINT.FRAME");
                        GLB.LINECOUNTC = move ("999", GLB.LINECOUNTC, 4, 0,"UNSIGNED");
                    }
                }
                if( (SDINDECEN3 == GLB.ZEROS))
                {
                    if( (AXDIINICIO > 20041000.0))
                    {
                    }
                    else
                    {
                        GSDDIDDSAMD = move ("21", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                        GSDDIDDSAMD_ITEM();
                        SDDIINIDEC = move (GSDDIDISAMD, SDDIINIDEC, 8, 0,"UNSIGNED");
                        GSDDIDDSAMD = move ("1", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                        GSDDIDDSAMD_ITEM();
                        GSDDIMMSAMD = add(cDec("1"), GSDDIMMSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                        GSDDIMMSAMD_ITEM();
                        if( (GSDDIMMSAMD > 12.0))
                        {
                            GSDDIMMSAMD = move ("1", GSDDIMMSAMD, 2, 0,"UNSIGNED");
                            GSDDIMMSAMD_ITEM();
                            GSDDIAASAMD = add(cDec("1"), GSDDIAASAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                            GSDDIAASAMD_ITEM();
                            if( (GSDDIAASAMD == GLB.ZEROS))
                            {
                                GSDDISSSAMD = add(cDec("1"), GSDDISSSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                                GSDDISSSAMD_ITEM();
                            }
                        }
                        GLB.DC_AUX = GSDDIDISAMD;
                        DCConvert (GLB.DC_AUX, "-", 1.0, "CCYYMMDD");
                        SDDIFIMDEC = move (GLB.DC_CCYYMMDD, SDDIFIMDEC, 8, 0,"UNSIGNED");
                        GLB.SHADOW = "C";
                        P_54("PRINT.FRAME");
                        GLB.LINECOUNTC = move ("999", GLB.LINECOUNTC, 4, 0,"UNSIGNED");
                    }
                }
            }
			trace("#Xseed***** -  PONTO7.68","@@@@");
            CommitTransaction();
			trace("#Xseed***** -  PONTO7.69","@@@@");
//:***********************************************************************
//:===================== FIM DA APURACAO POR DECENDIO ====================
//:***********************************************************************
//:-------- LISTAGEM POR UF -----------------------------------
            message("ATTENTION", "** LEITURA - CG133 - LISTAGEM POR UF**");
            SDCDUFMUNI = move(GLB.SPACES, SDCDUFMUNI, 2);
            SDCDNATOPE = move (GLB.ZEROS, SDCDNATOPE, 4, 0,"UNSIGNED");
            SDCDNATCOM = move (GLB.ZEROS, SDCDNATCOM, 2, 0,"UNSIGNED");
            SDVLCONTAB = move (GLB.ZEROS, SDVLCONTAB, 14, 2,"UNSIGNED");
            SDVLBASICM = move (GLB.ZEROS, SDVLBASICM, 14, 2,"UNSIGNED");
            SDVLIMPICM = move (GLB.ZEROS, SDVLIMPICM, 14, 2,"UNSIGNED");
            SDVLINTICM = move (GLB.ZEROS, SDVLINTICM, 14, 2,"UNSIGNED");
            SDVLOUTICM = move (GLB.ZEROS, SDVLOUTICM, 14, 2,"UNSIGNED");
            SDVLBASSTR = move (GLB.ZEROS, SDVLBASSTR, 14, 2,"UNSIGNED");
            SDVLICMSTR = move (GLB.ZEROS, SDVLICMSTR, 14, 2,"UNSIGNED");
            SDVLAPBIPI = move (GLB.ZEROS, SDVLAPBIPI, 14, 2,"UNSIGNED");
            SDVLAPVIPI = move (GLB.ZEROS, SDVLAPVIPI, 14, 2,"UNSIGNED");
            SDVLAPMIPI = move (GLB.ZEROS, SDVLAPMIPI, 14, 2,"UNSIGNED");
            SDVLAPOIPI = move (GLB.ZEROS, SDVLAPOIPI, 14, 2,"UNSIGNED");
            GLB.SECURE = false;
			trace("#Xseed***** -  PONTO7.70","@@@@");
            GLB.STATUS = CG13306_DetermineGroupFrom (1, false, GSDCDEMPRES, format(GLB.ZEROS, "9"), GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, format(GLB.ZEROS, "9"), GLB.ZEROS, GLB.ZEROS, GLB.ZEROS);
            while (CG133_XSEEDEOF == false)
            {
                CG13306_DetermineMoveNext ();
                if (CG133_XSEEDEOF == true)
                {    break;
                }
                if( ((rTrim(CG133_CDUFMUNI)).equals(rTrim(SDCDUFMUNI))==false))
                {
                    if( ((rTrim(SDCDUFMUNI)).equals(rTrim(GLB.SPACES))==false))
                    {
                        GLB.SHADOW = " ";
                        P_57("PRINT.FRAME");
                        GLB.SHADOW = "F";
                        P_47("PRINT.FRAME");
                        GLB.SHADOW = "F";
                        P_48("PRINT.FRAME");
                        GLB.SHADOW = "G";
                        P_37("PRINT.FRAME");
                        GLB.SHADOW = "G";
                        P_38("PRINT.FRAME");
                        GLB.SHADOW = "Q";
                        P_102("PRINT.FRAME");
                        GLB.SHADOW = "Q";
                        P_103("PRINT.FRAME");
                    }
                    SDCDUFMUNI = move(CG133_CDUFMUNI, SDCDUFMUNI, 2);
                    SDCDNATOPE = move (CG133_CDNATOPE, SDCDNATOPE, 4, 0,"UNSIGNED");
                    SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                    F47_RLCDUFMUNI = move(CG133_CDUFMUNI, F47_RLCDUFMUNI, 2);
                    F37_RLCDUFMUNI = move(CG133_CDUFMUNI, F37_RLCDUFMUNI, 2);
                    F102_RLCDUFMUNI = move(CG133_CDUFMUNI, F102_RLCDUFMUNI, 2);
                }
                if( ((CG133_CDNATOPE != SDCDNATOPE) || (CG133_CDNATCOM != SDCDNATCOM)))
                {
                    if( (SDCDNATOPE != GLB.ZEROS))
                    {
                        GLB.SHADOW = " ";
                        P_57("PRINT.FRAME");
                        GLB.SHADOW = "F";
                        P_47("PRINT.FRAME");
                        GLB.SHADOW = "G";
                        P_37("PRINT.FRAME");
                        GLB.SHADOW = "Q";
                        P_102("PRINT.FRAME");
                    }
                    SDCDNATOPE = move (CG133_CDNATOPE, SDCDNATOPE, 4, 0,"UNSIGNED");
                    SDCDNATCOM = move (CG133_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
                }
                F47_RLVLCONTAB = add(CG133_VLCONTAX, F47_RLVLCONTAB, 12, 2, "UNSIGNED", "TRUNCATE");
                F47_RLVLBASICM = add(CG133_VLBASICM, F47_RLVLBASICM, 12, 2, "UNSIGNED", "TRUNCATE");
                F47_RLVLIMPICM = add(CG133_VLIMPICM, F47_RLVLIMPICM, 12, 2, "UNSIGNED", "TRUNCATE");
                F47_RLVLINTICM = add(CG133_VLISEICM, F47_RLVLINTICM, 12, 2, "UNSIGNED", "TRUNCATE");
                F47_RLVLOUTICM = add(CG133_VLOUTICM, F47_RLVLOUTICM, 12, 2, "UNSIGNED", "TRUNCATE");
                F37_RLVLBASSTR = add(CG133_VLBASSTR, F37_RLVLBASSTR, 12, 2, "UNSIGNED", "TRUNCATE");
                F37_RLVLICMSTR = add(CG133_VLICMSTR, F37_RLVLICMSTR, 12, 2, "UNSIGNED", "TRUNCATE");
                F102_RLVLBASDID = add(CG133_VLBASDID, F102_RLVLBASDID, 12, 2, "UNSIGNED", "TRUNCATE");
                F102_RLVLICMDID = add(CG133_VLICMDID, F102_RLVLICMDID, 12, 2, "UNSIGNED", "TRUNCATE");
                F102_RLVLICMDIO = add(CG133_VLICMDIO, F102_RLVLICMDIO, 12, 2, "UNSIGNED", "TRUNCATE");
                F102_RLVLFCPDES = add(CG133_VLFCPDES, F102_RLVLFCPDES, 12, 2, "UNSIGNED", "TRUNCATE");
                SDVLCONTAB = add(CG133_VLCONTAX, SDVLCONTAB, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLBASICM = add(CG133_VLBASICM, SDVLBASICM, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLIMPICM = add(CG133_VLIMPICM, SDVLIMPICM, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLINTICM = add(CG133_VLISEICM, SDVLINTICM, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLOUTICM = add(CG133_VLOUTICM, SDVLOUTICM, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLBASSTR = add(CG133_VLBASSTR, SDVLBASSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLICMSTR = add(CG133_VLICMSTR, SDVLICMSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLAPBIPI = add(CG133_VLBASIPI, SDVLAPBIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLAPVIPI = add(CG133_VLIMPIPI, SDVLAPVIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLAPMIPI = add(CG133_VLISEIPI, SDVLAPMIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLAPOIPI = add(CG133_VLOUTIPI, SDVLAPOIPI, 14, 2, "UNSIGNED", "TRUNCATE");
            }
            GLB.SHADOW = " ";
            P_57("PRINT.FRAME");
            GLB.SHADOW = "F";
            P_47("PRINT.FRAME");
            GLB.SHADOW = "F";
            P_48("PRINT.FRAME");
            GLB.SHADOW = "G";
            P_37("PRINT.FRAME");
            GLB.SHADOW = "G";
            P_38("PRINT.FRAME");
            GLB.SHADOW = "Q";
            P_102("PRINT.FRAME");
            GLB.SHADOW = "Q";
            P_103("PRINT.FRAME");
//:----------------------------------------------------:
//:          NOTAS SEM DATA SAIDA P/ DEPTO             :
//:----------------------------------------------------:
            message("ATTENTION", "** NOTAS FISCAL SEM DATA SAIDA POR DEPARTAMENTO **");
            GSP035 ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            NOTAS_SEM_DATA ();
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
//:----------------------------------------------------:
            if( ((GSDCDEMPRES == 1.0) && (AXCDFILIAL == 18.0)))
            {
				trace("#Xseed***** -  PONTO7.71","@@@@ P_SORT9");
                P_SORT9();
				trace("#Xseed***** -  PONTO7.72","@@@@");
                SDCDDEBICM = move (GLB.ZEROS, SDCDDEBICM, 6, 0,"UNSIGNED");
                SDCDCONCRE = move (GLB.ZEROS, SDCDCONCRE, 6, 0,"UNSIGNED");
                SDCDNATOPE = move (GLB.ZEROS, SDCDNATOPE, 4, 0,"UNSIGNED");
                if ((rTrim(GLBEXP.command)).equals("") == true)
                {
                    GLBEXP.open(GLBEXP_XSEEDTITLE, "OUTPUT");
                    if (GLBEXP.openStatus.equals("")==true)
                    {   AuditMSG("Open OUTPUT P (" + GLBEXP_XSEEDTITLE + ")");
                    }
                    else
                    {   abort("Can't OpenFile P (" + GLBEXP_XSEEDTITLE + ")");
                    }
                }
                GLBEXP.command = "DT.ACTUAL";
                if ((rTrim(GLB.EXP_STATUS)).equals("") == false)
                {   if (GLBEXP != null)
                    {   if (GLB.EXP_XSEEDCOUNT != 0)
                        {   GLBEXP.write(GLB.EXP_XSEEDBUFFER.toString());
                            GLB.EXP_XSEEDCOUNT = 0;
                         }
                         if ((GLBEXP.out!=null) && (GLBEXP.out.checkError()) )
                         {   GLB.TASK=53;
                             abort("Error on File : " + GLBEXP_XSEEDTITLE);
                         }
                        GLBEXP.close();
                        AuditMSG("Close P (" + GLBEXP_XSEEDTITLE + "), Reads: " + cStr(GLB.EXP_XSEEDREADS) + " Writes: " + cStr(GLB.EXP_XSEEDWRITES));
                        GLB.EXP_XSEEDREADS = 0;
                        GLB.EXP_XSEEDWRITES = 0;
                    }
                    GLB.EXP_STATUS = "";
                }
                extractFile = new File(GLBEXP_XSEEDTITLE);
                if (extractFile.exists() == false)
                {   AuditMSG (GLBEXP_XSEEDTITLE + " not found");
                    GLB.STATUS = "*****";
                }
                else
                {
                    GLBEXP.open(GLBEXP_XSEEDTITLE,"INPUT");
                    if (GLBEXP.openStatus.equals("")==true)
                    {   AuditMSG("Open INPUT P (" + GLBEXP_XSEEDTITLE + ")");
                        GLB.EXP_STATUS = "INPUT";
                    }
                    else
                    {   abort("Can't Open File P (" + GLBEXP_XSEEDTITLE + ")");
                    }
                    GLB.EXP_STATUS = "INPUT";
                    GLB.STATUS = "*****";
                    if (GLB.RECORDP > 0.0)
                    {   for (double i = 1; i <= GLB.RECORDP + 1; i++)
                        {   GLBEXP_XSEEDREG = GLBEXP.read();
                        }
                        GLB.EXP_XSEEDREADS = GLB.RECORDP;
                    }
                    else
                    {   GLBEXP_XSEEDREG = GLBEXP.read();
                    }
                    while (GLBEXP_XSEEDREG != null)
                    {   GLBEXP_EXTRACTAS = "";
                        P_ReadGLBEXP();
                        GLB.STATUS = "";
                    if( (((P_EXCDDEBICM != SDCDDEBICM) || (P_EXCDCONCRE != SDCDCONCRE)) || (P_EXCDNATOPE != SDCDNATOPE)))
                    {
                        if( (SDCDDEBICM != GLB.ZEROS))
                        {
                            GLB.SHADOW = "L";
                            P_22("PRINT.FRAME");
                            if( (P_EXCDDEBICM != SDCDDEBICM))
                            {
                                GLB.SHADOW = "L";
                                P_23("PRINT.FRAME");
                                F22_RLCDDEBICM = move (P_EXCDDEBICM, F22_RLCDDEBICM, 6, 0,"UNSIGNED");
                            }
                        }
                        else
                        {
                            F22_RLCDDEBICM = move (P_EXCDDEBICM, F22_RLCDDEBICM, 6, 0,"UNSIGNED");
                        }
                        SDCDDEBICM = move (P_EXCDDEBICM, SDCDDEBICM, 6, 0,"UNSIGNED");
                        SDCDCONCRE = move (P_EXCDCONCRE, SDCDCONCRE, 6, 0,"UNSIGNED");
                        SDCDNATOPE = move (P_EXCDNATOPE, SDCDNATOPE, 4, 0,"UNSIGNED");
                        F22_RLCDCONCRE = move (P_EXCDCONCRE, F22_RLCDCONCRE, 6, 0,"UNSIGNED");
                        F22_RLCDNATOPE = move (P_EXCDNATOPE, F22_RLCDNATOPE, 4, 0,"UNSIGNED");
                    }
                    F22_RLVLCONTAB = add(P_EXVLCONTAB, F22_RLVLCONTAB, 11, 2, "UNSIGNED", "TRUNCATE");
                    F22_RLVLBASICM = add(P_EXVLBASICM, F22_RLVLBASICM, 11, 2, "UNSIGNED", "TRUNCATE");
                    F22_RLVLIMPICM = add(P_EXVLIMPICM, F22_RLVLIMPICM, 11, 2, "UNSIGNED", "TRUNCATE");
                    }
                }
                if( (SDCDDEBICM != GLB.ZEROS))
                {
                    GLB.SHADOW = "L";
                    P_22("PRINT.FRAME");
                    GLB.SHADOW = "L";
                    P_23("PRINT.FRAME");
                    GLB.SHADOW = "L";
                    P_26("PRINT.FRAME");
                }
				trace("#Xseed***** -  PONTO7.73","@@@@ SORT 10");
                P_SORT10();
				trace("#Xseed***** -  PONTO7.74","@@@@");
                SDCDCLAFIS = move (GLB.ZEROS, SDCDCLAFIS, 10, 0,"UNSIGNED");
                if ((rTrim(GLBEXP.command)).equals("") == true)
                {
                    GLBEXP.open(GLBEXP_XSEEDTITLE, "OUTPUT");
                    if (GLBEXP.openStatus.equals("")==true)
                    {   AuditMSG("Open OUTPUT P (" + GLBEXP_XSEEDTITLE + ")");
                    }
                    else
                    {   abort("Can't OpenFile P (" + GLBEXP_XSEEDTITLE + ")");
                    }
                }
                GLBEXP.command = "DT.ACTUAL";
                if ((rTrim(GLB.EXP_STATUS)).equals("") == false)
                {   if (GLBEXP != null)
                    {   if (GLB.EXP_XSEEDCOUNT != 0)
                        {   GLBEXP.write(GLB.EXP_XSEEDBUFFER.toString());
                            GLB.EXP_XSEEDCOUNT = 0;
                         }
                         if ((GLBEXP.out!=null) && (GLBEXP.out.checkError()) )
                         {   GLB.TASK=53;
                             abort("Error on File : " + GLBEXP_XSEEDTITLE);
                         }
                        GLBEXP.close();
                        AuditMSG("Close P (" + GLBEXP_XSEEDTITLE + "), Reads: " + cStr(GLB.EXP_XSEEDREADS) + " Writes: " + cStr(GLB.EXP_XSEEDWRITES));
                        GLB.EXP_XSEEDREADS = 0;
                        GLB.EXP_XSEEDWRITES = 0;
                    }
                    GLB.EXP_STATUS = "";
                }
                extractFile = new File(GLBEXP_XSEEDTITLE);
                if (extractFile.exists() == false)
                {   AuditMSG (GLBEXP_XSEEDTITLE + " not found");
                    GLB.STATUS = "*****";
                }
                else
                {
                    GLBEXP.open(GLBEXP_XSEEDTITLE,"INPUT");
                    if (GLBEXP.openStatus.equals("")==true)
                    {   AuditMSG("Open INPUT P (" + GLBEXP_XSEEDTITLE + ")");
                        GLB.EXP_STATUS = "INPUT";
                    }
                    else
                    {   abort("Can't Open File P (" + GLBEXP_XSEEDTITLE + ")");
                    }
                    GLB.EXP_STATUS = "INPUT";
                    GLB.STATUS = "*****";
                    if (GLB.RECORDP > 0.0)
                    {   for (double i = 1; i <= GLB.RECORDP + 1; i++)
                        {   GLBEXP_XSEEDREG = GLBEXP.read();
                        }
                        GLB.EXP_XSEEDREADS = GLB.RECORDP;
                    }
                    else
                    {   GLBEXP_XSEEDREG = GLBEXP.read();
                    }
                    while (GLBEXP_XSEEDREG != null)
                    {   GLBEXP_EXTRACTAS = "";
                        P_ReadGLBEXP();
                        GLB.STATUS = "";
                    if( (P_EXCDCLAFIS != SDCDCLAFIS))
                    {
                        if( (SDCDCLAFIS != GLB.ZEROS))
                        {
                            GLB.SHADOW = "M";
                            P_25("PRINT.FRAME");
                        }
                        SDCDCLAFIS = move (P_EXCDCLAFIS, SDCDCLAFIS, 10, 0,"UNSIGNED");
                        F25_RLCDCLAFIS = move (format(P_EXCDCLAFIS ,"9999999999"), F25_RLCDCLAFIS,14);
                    }
                    F25_RLVLCONTAB = add(P_EXVLCONTAB, F25_RLVLCONTAB, 11, 2, "UNSIGNED", "TRUNCATE");
                    F25_RLVLBASICM = add(P_EXVLBASICM, F25_RLVLBASICM, 11, 2, "UNSIGNED", "TRUNCATE");
                    F25_RLVLIMPICM = add(P_EXVLIMPICM, F25_RLVLIMPICM, 11, 2, "UNSIGNED", "TRUNCATE");
                    }
                }
                if( (SDCDCLAFIS != GLB.ZEROS))
                {
                    GLB.SHADOW = "M";
                    P_25("PRINT.FRAME");
                    GLB.SHADOW = "M";
                    P_26("PRINT.FRAME");
                }
            }
            if( (AXTPRELATO > 1.0))
            {
                break INCGR032;
            }
            GENRINFORM = add(cDec("1"), GENRINFORM, 5, 0, "UNSIGNED", "TRUNCATE");
            GENRINFORM_ITEM();
            F6_RLNRFOLHAS = move ("1", F6_RLNRFOLHAS, 5, 0,"UNSIGNED");
            F6_RLDSABRENC = move("A B E R T U R A", F6_RLDSABRENC, 23);
            SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
            beginPageClear(" ");
            GLB.ADVANCE  = true;
            if (SDINLIVANU == GLB.ZEROS)
            {
                GLB.SHADOW = " ";
                P_6("PRINT.FRAME");
            }
            else {
                if( ((SDINEMILIV != GLB.ZEROS) || (SDNRCONPAG > SDNRLIMPRS)))
                {
                    GLB.SHADOW = " ";
                    P_6("PRINT.FRAME");
                    SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
                }
                SDNRCONPAG = subtract(cDec("1"), SDNRCONPAG, 4, 0,"UNSIGNED","TRUNCATE");
            }
            F6_RLDSABRENC = move("E N C E R R A M E N T O", F6_RLDSABRENC, 23);
            F6_RLNRFOLHAS = move (SDNRCONPAG, F6_RLNRFOLHAS, 5, 0,"UNSIGNED");
            beginPageClear(" ");
            GLB.ADVANCE  = true;
            if (SDINLIVANU == GLB.ZEROS)
            {
                GLB.SHADOW = " ";
                P_6("PRINT.FRAME");
            }
            else {
                GSDDIAMSAMD = move (format(AXAMREFERE ,"999999"), GSDDIAMSAMD,6);
                GSDDIAMSAMD_ITEM();
                GSDDIAMSAMD_GROUP();
                if( ((GSDDIMMSAMD == 12.0) || (SDNRCONPAG > SDNRLIMPRS)))
                {
                    GLB.SHADOW = " ";
                    P_6("PRINT.FRAME");
                }
            }
            if( ((AXINATUALI == 2.0) && (AXTPRELATO == 1.0)))
            {
                GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
                GSDINSITREG = move("A", GSDINSITREG, 1);
                if( (AXINMESPER == 1.0))
                {
                    GSDCDELEALF = move("AMREGSAI", GSDCDELEALF, 10);
                    GSDCDELEALF_GROUP();
                    if( (AXCDFILIAL > GLB.ZEROS))
                    {
                        GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                        GSDCDELEALF_GROUP();
                    }
                    GSDVLELEMEN = move (AXAMREFERE, GSDVLELEMEN, 16, 0,"UNSIGNED");
                    GSP008 ();
                    if (GLB.EXIT==true)
                    {
                       GLB.EXIT=false;
                        return;
                    }
                    GSDCDELEALF = move("NRLIVRRS", GSDCDELEALF, 10);
                    GSDCDELEALF_GROUP();
                    if( (AXCDFILIAL > GLB.ZEROS))
                    {
                        GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                        GSDCDELEALF_GROUP();
                    }
                    GSDVLELEMEN = move (SDNRLIVRRS, GSDVLELEMEN, 16, 0,"UNSIGNED");
                    if( (SDINEMILIV != GLB.ZEROS))
                    {
                        GSDVLELEMEN = add(cDec("1"), GSDVLELEMEN, 16, 0, "UNSIGNED", "TRUNCATE");
                        SDNRCONPAG = move (GLB.ZEROS, SDNRCONPAG, 4, 0,"UNSIGNED");
                    }
                    GSP008 ();
                    if (GLB.EXIT==true)
                    {
                       GLB.EXIT=false;
                        return;
                    }
                }
                if( (AXINMESPER == 2.0))
                {
                    GSDCDELEALF = move("DIREGSAI", GSDCDELEALF, 10);
                    GSDCDELEALF_GROUP();
                    if( (AXCDFILIAL > 1.0))
                    {
                        GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                        GSDCDELEALF_GROUP();
                    }
                    GSDVLELEMEN = move (AXDIFINALX, GSDVLELEMEN, 16, 0,"UNSIGNED");
                    GSP008 ();
                    if (GLB.EXIT==true)
                    {
                       GLB.EXIT=false;
                        return;
                    }
                }
                GSDCDELEALF = move("NRULTPRS", GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
                if( (AXCDFILIAL > 1.0))
                {
                    GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
                    GSDCDELEALF_GROUP();
                }
                GSDVLELEMEN = move (SDNRCONPAG, GSDVLELEMEN, 16, 0,"UNSIGNED");
                GSP008 ();
                if (GLB.EXIT==true)
                {
                   GLB.EXIT=false;
                    return;
                }
            }
        }
        GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
        GSDCDELEALF = move("INCGR032", GSDCDELEALF, 10);
        GSDCDELEALF_GROUP();
        GSDINSITREG = move("D", GSDINSITREG, 1);
        GSP008 ();
        if (GLB.EXIT==true)
        {
           GLB.EXIT=false;
            return;
        }
		trace("#Xseed***** -  PONTO7.75","@@@@");
        CommitTransaction();
		trace("#Xseed***** -  PONTO7.76","@@@@");
//:: Begin Insertable GlbLogic GSI002
//:-----------------------------------------------------------------
//: LOGICA INSERIDA PARA FINAL
//:-----------------------------------------------------------------
    }
	trace("#Xseed***** -  PONTO7.77","@@@@");
    CommitTransaction();
	trace("#Xseed***** -  PONTO7.78","@@@@");
    if( ((rTrim(GSDCDCOMAND)).equals(rTrim("AUTO"))==true))
    {
        message(GLB.SPACES, "<-- Relatório Automático finalizado...");
    }
    else
    {
        GLB.DC_AUX = formatDC(GLB.YYMMDD, "999999");
        DCConvert (GLB.DC_AUX, "", 0, "YYMMDD");
//:    DC; GLB.TODAYS-DATE-NUM                 FORMAT MMDDYY
        GSDDISISSEC = move (GLB.DC_CCYYMMDD, GSDDISISSEC, 8, 0,"UNSIGNED");
        GSDDISISSEC_ITEM();
        GSDNRREGLID = moveTime();
        GSDNRREGLID_ITEM();
        GLB.SECURE = false;
		trace("#Xseed***** -  PONTO7.79","@@@@");
        GLB.STATUS = GS11401_DetermineEvery (GSDNRSOLICI);
        while (GS114_XSEEDEOF == false)
        {   GS11401_DetermineMoveNext();
            if (GS114_XSEEDEOF == true)
            {   break;
            }
            GS114_DIFIEXEC = flag (GSDDISISSEC, GS114_DIFIEXEC, 8, 0,"UNSIGNED");
            GS114_THFIEXEC = flag (GSDNRREGLID, GS114_THFIEXEC, 8, 0,"UNSIGNED");
            GS114_INSOLICI = flag (8.0, GS114_INSOLICI, 2, 0,"UNSIGNED");
            GS114_Modify ();
        }
		trace("#Xseed***** -  PONTO7.80","@@@@");
        message(format(GSDNRSOLICI, "######"), "<-- Solicitação finalizada.");
    }
    
    trace("#Xseed - end logic","END");
//:: End Insertable GlbLogic GSI002
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "Logic");
    }
}

private void CALC_ICM_NF ()
  throws Exception
{   try
    {
//: CDEMPRES, CDFILIAL, CDMODENF, TPREGIST, NRNOTAFI, CDPRODUT, INBRINDE, CDITEMXX
    if( ((SDINZONANT == GLB.ZEROS) || (SDDIEMIANT >= 20130812.0)))
    {
        SDVLICMZFP = move (GLB.ZEROS, SDVLICMZFP, 12, 2,"UNSIGNED");
sddscomsql =" SELECT /*CGR032*/ AV120.PCICMPRO,SUM(AV120.VLLIQUID) AS VLLIQUID,SUM(AV120.VLICMPRO) AS VLICMPRO, SUM(AV120.VLICMZFP) AS VLICMZFP";
sddscomsql+=" FROM AV120 WITH (NOLOCK INDEX=AV12001)";
sddscomsql+=" WHERE AV120.CDEMPRES =" + (int)GSDCDEMPRES;
sddscomsql+="   AND AV120.CDFILIAL =" + (int)AXCDFILIAL;
sddscomsql+="   AND AV120.CDMODENF =" + (int)SDCDMODANT;
sddscomsql+="   AND AV120.TPREGIST =" + (int)SDTPREGANT;
sddscomsql+="   AND AV120.NRNOTAFI =" + (int)SDNRNOTANT;
if (GSDCDEMPRES == 1) {
sddscomsql+=" AND AV120.NRNOTAFI NOT IN (1325, 1608, 2125, 2358, 2498) ";
}
sddscomsql+=" AND AV120.CDCONCRE =" + (int)SDCDCONANT + " AND AV120.CDNATOPE =" + (int)SDCDNATANT + " AND AV120.CDNATCOM =" + (int)SDCDNATCOM + " AND AV120.PCIPIPRO =" + SDPCIPIANT;
sddscomsql+=" AND AV120.VLICMPRO > 0 ";
sddscomsql+=" GROUP BY AV120.PCICMPRO";
rs_av120 = Funcoes.fazConsulta (GLB.CONNECTION,sddscomsql);
if (rs_av120.next() == true){
F2_RLNRBASCAL = rs_av120.getDouble("VLLIQUID");
F2_RLVLPERCEN = rs_av120.getDouble("PCICMPRO");
F2_RLVLIMPOST = rs_av120.getDouble("VLICMPRO");
SDVLICMZFP    = rs_av120.getDouble("VLICMZFP");
}
rs_av120.close();
        F2_RLNRBASCAL = subtract(SDVLICMZFP, F2_RLNRBASCAL, 10, 2,"UNSIGNED","TRUNCATE");
        if( ((SDINZONANT == 1.0) && (F2_RLVLIMPOST == GLB.ZEROS)))
        {
            F2_RLNRBASCAL = move (GLB.ZEROS, F2_RLNRBASCAL, 10, 2,"UNSIGNED");
            F2_RLVLPERCEN = move (GLB.ZEROS, F2_RLVLPERCEN, 4, 2,"UNSIGNED");
        }
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"CALC-ICM-NF");
    }
}
private void CGP001 ()
  throws Exception
{   try
    {
//:==================================================================:
//: CGP001 - EDICAO DOS INDICES ECONOMICOS                           :
//:                                                                  :
//: CAMPOS DE ENTRADA: GSDNRDECIMA (N 02) - NUMERO DE DECIMAIS       :
//:                    GSDVLINDICE (- 17) - VALOR DO INDICE          :
//:                    GSDTPEDIIND (N 01) - 0 SEPARA MILHARES        :
//:                                       - 1 NAO SEPARA MILHARES    :
//:                                           SOMENTE PARA INTEIROS  :
//: CAMPOS DE SAIDA  : GSDVLINDEDI (A 24) - VALOR DO INDICE EDITADO  :
//:==================================================================:
    CGP001GEVLGRUPO1 = 0;
    CGP001GEVLGRUPO1_ITEM();
    CGP001GEVLGRUPO2 = 0;
    CGP001GEVLGRUPO2_ITEM();
    CGP001GEVLGRUPO3 = 0;
    CGP001GEVLGRUPO3_ITEM();
    CGP001GEVLGRUPO4 = 0;
    CGP001GEVLGRUPO4_ITEM();
    CGP001GEVLGRUPO5 = 0;
    CGP001GEVLGRUPO5_ITEM();
    CGP001GEVLGRUPO6 = 0;
    CGP001GEVLGRUPO6_ITEM();
    CGP001GEVLGRUPO7 = 0;
    CGP001GEVLGRUPO7_ITEM();
    CGP001GEDSVLREDI = fix("",23);
    CGP001GEDSVLREDI_ITEM();
    CGP001GEDSSINEDI = fix("",1);
    CGP001GEDSSINEDI_ITEM();
    CGP001GEVLINDICE = bigZeros;
    CGP001GEVLINDICE_ITEM();
    CGP001SDDSVLINDI = fix("",3);
    CGP001SDINPRIMEI = 0;
    CGP001SDNRGRUPOX = 0;
    CGP001SDNRPOSDES = 0;
    CGP001SDNRPOSORI = 0;
    CGP001SDVLGRUPOX = 0;
    if( (GSDNRDECIMA > GLB.ZEROS))
    {
        GSDTPEDIIND = move (GLB.ZEROS, GSDTPEDIIND, 1, 0,"UNSIGNED");
    }
    if (GSDNRDECIMA == GLB.ZEROS)
    {
        CGP001SDNRPOSDES = move ("2", CGP001SDNRPOSDES, 2, 0,"UNSIGNED");
        CGP001GRDSMASCAR = move ("0233333", CGP001GRDSMASCAR, 7);
        CGP001GRDSMASCAR_GROUP();
    }
    else
    if (GSDNRDECIMA == 1.0)
    {
        CGP001SDNRPOSDES = move ("1", CGP001SDNRPOSDES, 2, 0,"UNSIGNED");
        CGP001GRDSMASCAR = move ("1333331", CGP001GRDSMASCAR, 7);
        CGP001GRDSMASCAR_GROUP();
    }
    else
    if (GSDNRDECIMA == 2.0)
    {
        CGP001SDNRPOSDES = move ("2", CGP001SDNRPOSDES, 2, 0,"UNSIGNED");
        CGP001GRDSMASCAR = move ("0333332", CGP001GRDSMASCAR, 7);
        CGP001GRDSMASCAR_GROUP();
    }
    else
    if (GSDNRDECIMA == 3.0)
    {
        CGP001SDNRPOSDES = move ("2", CGP001SDNRPOSDES, 2, 0,"UNSIGNED");
        CGP001GRDSMASCAR = move ("0233333", CGP001GRDSMASCAR, 7);
        CGP001GRDSMASCAR_GROUP();
    }
    else
    if (GSDNRDECIMA == 4.0)
    {
        CGP001SDNRPOSDES = move ("2", CGP001SDNRPOSDES, 2, 0,"UNSIGNED");
        CGP001GRDSMASCAR = move ("0133334", CGP001GRDSMASCAR, 7);
        CGP001GRDSMASCAR_GROUP();
    }
    else
    if (GSDNRDECIMA == 5.0)
    {
        CGP001SDNRPOSDES = move ("3", CGP001SDNRPOSDES, 2, 0,"UNSIGNED");
        CGP001GRDSMASCAR = move ("0033335", CGP001GRDSMASCAR, 7);
        CGP001GRDSMASCAR_GROUP();
    }
    else
    if (GSDNRDECIMA == 6.0)
    {
        CGP001SDNRPOSDES = move ("3", CGP001SDNRPOSDES, 2, 0,"UNSIGNED");
        CGP001GRDSMASCAR = move ("0023336", CGP001GRDSMASCAR, 7);
        CGP001GRDSMASCAR_GROUP();
    }
    else
    if (GSDNRDECIMA == 7.0)
    {
        CGP001SDNRPOSDES = move ("3", CGP001SDNRPOSDES, 2, 0,"UNSIGNED");
        CGP001GRDSMASCAR = move ("0013337", CGP001GRDSMASCAR, 7);
        CGP001GRDSMASCAR_GROUP();
    }
    else
    if (GSDNRDECIMA == 8.0)
    {
        CGP001SDNRPOSDES = move ("4", CGP001SDNRPOSDES, 2, 0,"UNSIGNED");
        CGP001GRDSMASCAR = move ("0003338", CGP001GRDSMASCAR, 7);
        CGP001GRDSMASCAR_GROUP();
    }
    CGP001GEVLINDICE = move (GSDVLINDICE, CGP001GEVLINDICE, 17, 0,"UNSIGNED");
    CGP001GEVLINDICE_ITEM();
    CGP001SDNRPOSORI = move ("1", CGP001SDNRPOSORI, 2, 0,"UNSIGNED");
    if( (GSDTPEDIIND > GLB.ZEROS))
    {
        CGP001SDNRPOSDES = add(cDec("5"), CGP001SDNRPOSDES, 2, 0, "UNSIGNED", "TRUNCATE");
    }
    CGP001SDNRGRUPOX = move (GLB.ZEROS, CGP001SDNRGRUPOX, 1, 0,"UNSIGNED");
    while (true)
    {
        CGP001SDNRGRUPOX = add(cDec("1"), CGP001SDNRGRUPOX, 1, 0, "UNSIGNED", "TRUNCATE");
        if( (CGP001SDNRGRUPOX > 6.0))
        {
            break;
        }
        if (CGP001SDNRGRUPOX == 1.0)
        {
            CGP001SDVLGRUPOX = move (CGP001GEVLGRUPO1, CGP001SDVLGRUPOX, 1, 0,"UNSIGNED");
        }
        else
        if (CGP001SDNRGRUPOX == 2.0)
        {
            CGP001SDVLGRUPOX = move (CGP001GEVLGRUPO2, CGP001SDVLGRUPOX, 1, 0,"UNSIGNED");
        }
        else
        if (CGP001SDNRGRUPOX == 3.0)
        {
            CGP001SDVLGRUPOX = move (CGP001GEVLGRUPO3, CGP001SDVLGRUPOX, 1, 0,"UNSIGNED");
        }
        else
        if (CGP001SDNRGRUPOX == 4.0)
        {
            CGP001SDVLGRUPOX = move (CGP001GEVLGRUPO4, CGP001SDVLGRUPOX, 1, 0,"UNSIGNED");
        }
        else
        if (CGP001SDNRGRUPOX == 5.0)
        {
            CGP001SDVLGRUPOX = move (CGP001GEVLGRUPO5, CGP001SDVLGRUPOX, 1, 0,"UNSIGNED");
        }
        else
        if (CGP001SDNRGRUPOX == 6.0)
        {
            CGP001SDVLGRUPOX = move (CGP001GEVLGRUPO6, CGP001SDVLGRUPOX, 1, 0,"UNSIGNED");
        }
        if( (CGP001SDVLGRUPOX > GLB.ZEROS))
        {
            CGP001SDDSVLINDI = moveComplex(format(CGP001GRVLINDICE, 17), (int)CGP001SDNRPOSORI, (int)CGP001SDVLGRUPOX, CGP001SDDSVLINDI, 1,3);
            if( (((rTrim(CGP001SDDSVLINDI)).compareTo(rTrim(format(GLB.ZEROS,"999"))) > 0) || (CGP001SDINPRIMEI > GLB.ZEROS)))
            {
                CGP001GEDSVLREDI = moveComplex(format(CGP001SDDSVLINDI, 3), 1, 0, CGP001GEDSVLREDI, (int)CGP001SDNRPOSDES,23);
                CGP001GEDSVLREDI_ITEM();
                if( ((GSDNRDECIMA == GLB.ZEROS) || (CGP001SDNRGRUPOX < 6.0)))
                {
                    if( (GSDTPEDIIND == GLB.ZEROS))
                    {
                        CGP001GEDSVLREDI = attach(".", CGP001GEDSVLREDI, 23);
                        CGP001GEDSVLREDI_ITEM();
                    }
                }
                if( ((GSDNRDECIMA > GLB.ZEROS) && (CGP001SDNRGRUPOX == 6.0)))
                {
                    if( ((rTrim(CGP001GEDSVLREDI)).equals(rTrim(GLB.SPACES))==true))
                    {
                        CGP001GEDSVLREDI = move ("0", CGP001GEDSVLREDI, 23);
                        CGP001GEDSVLREDI_ITEM();
                    }
                    CGP001GEDSVLREDI = attach(",", CGP001GEDSVLREDI, 23);
                    CGP001GEDSVLREDI_ITEM();
                }
                CGP001SDINPRIMEI = move ("1", CGP001SDINPRIMEI, 1, 0,"UNSIGNED");
            }
            CGP001SDNRPOSORI = add(CGP001SDVLGRUPOX, CGP001SDNRPOSORI, 2, 0, "UNSIGNED", "TRUNCATE");
            CGP001SDNRPOSDES = add(CGP001SDVLGRUPOX, CGP001SDNRPOSDES, 2, 0, "UNSIGNED", "TRUNCATE");
            if( (GSDTPEDIIND == GLB.ZEROS))
            {
                CGP001SDNRPOSDES = add(cDec("1"), CGP001SDNRPOSDES, 2, 0, "UNSIGNED", "TRUNCATE");
            }
        }
    }
    if( ((GSDNRDECIMA > GLB.ZEROS) && ((rTrim(CGP001GEDSVLREDI)).equals(rTrim(GLB.SPACES))==true)))
    {
        CGP001SDNRPOSDES = subtract(cDec("1"), CGP001SDNRPOSDES, 2, 0,"UNSIGNED","TRUNCATE");
        CGP001GEDSVLREDI = moveComplex(",", 1, 0, CGP001GEDSVLREDI, (int)CGP001SDNRPOSDES,23);
        CGP001GEDSVLREDI_ITEM();
        CGP001SDNRPOSDES = add(cDec("1"), CGP001SDNRPOSDES, 2, 0, "UNSIGNED", "TRUNCATE");
    }
    CGP001GEDSVLREDI = moveComplex(format(CGP001GRVLINDICE, 17), (int)CGP001SDNRPOSORI, (int)CGP001GEVLGRUPO7, CGP001GEDSVLREDI, (int)CGP001SDNRPOSDES,23);
    CGP001GEDSVLREDI_ITEM();
    if( (less(GSDVLINDICE,GLB.ZEROS) == true))
    {
        CGP001GEDSSINEDI = move("-", CGP001GEDSSINEDI, 1);
        CGP001GEDSSINEDI_ITEM();
    }
    GSDVLINDEDI = move(CGP001GRVLEDITAD, GSDVLINDEDI, 24);
    CGP001SDNRPOSORI = move (GLB.ZEROS, CGP001SDNRPOSORI, 2, 0,"UNSIGNED");
    while (true)
    {
        CGP001SDNRPOSORI = add(cDec("1"), CGP001SDNRPOSORI, 2, 0, "UNSIGNED", "TRUNCATE");
        if( (CGP001SDNRPOSORI > 22.0))
        {
            break;
        }
        GSDDSALFA01 = moveComplex(format(GSDVLINDEDI, 24), (int)CGP001SDNRPOSORI, 0, GSDDSALFA01, 1,1);
        if( (((rTrim(GSDDSALFA01)).compareTo(rTrim(format(GLB.ZEROS,"9"))) > 0) || ((rTrim(GSDDSALFA01)).equals(rTrim(","))==true)))
        {
            if( ((rTrim(GSDDSALFA01)).equals(rTrim(","))==true))
            {
                CGP001SDNRPOSORI = subtract(cDec("1"), CGP001SDNRPOSORI, 2, 0,"UNSIGNED","TRUNCATE");
                GSDDSALFA01 = moveComplex(format(GSDVLINDEDI, 24), (int)CGP001SDNRPOSORI, 0, GSDDSALFA01, 1,1);
                if( ((rTrim(GSDDSALFA01)).equals(rTrim(GLB.SPACES))==true))
                {
                    GSDVLINDEDI = moveComplex("0", 1, 0, GSDVLINDEDI, (int)CGP001SDNRPOSORI,24);
                }
            }
            break;
        }
        if( ((rTrim(GSDDSALFA01)).equals(rTrim(format(GLB.ZEROS,"9")))==true))
        {
            GSDDSALFA01 = move(GLB.SPACES, GSDDSALFA01, 1);
            GSDVLINDEDI = moveComplex(format(GSDDSALFA01, 1), 1, 0, GSDVLINDEDI, (int)CGP001SDNRPOSORI,24);
        }
    }
    GSDCDINDANT = move (GLB.ZEROS, GSDCDINDANT, 3, 0,"UNSIGNED");
//:OBS: CASO O MESMO PROGRAMA USE CGP015
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"CGP001");
    }
}
private void CGP003 ()
  throws Exception
{   try
    {
//:==================================================================:
//: CGP003 - ATUALIZA SALDOS CONTABEIS                               :
//:                                                                  :
//: CAMPOS DE ENTRADA: GSDTPLANCTO (N 02)   - TIPO DE LANCAMENTO     :
//:                    GSDAMSALCON (N 06)   - ANO/MES LANCAMENTO     :
//:                    GSDCDCTACON (N 06)   - CONTA CONTABIL         :
//:                    GSDNRCGCCON (N 09)   - CNPJ PARA VERBAS       :
//:                    GSDCDCLACON (A 12)   - CLASS.CONTABIL         :
//:                    GSDVLLANCAM (- 16 4) - VALOR LANCAMENTO       :
//:                    GSDINSLDCON (N 01)   - IND.ATUALIZA SALDO     :
//:==================================================================:
    FIM_LG_CGP003:
    {
        ATUALIZA_SALDO:
        {
            if( (GSDINSLDCON != GLB.ZEROS))
            {
//    : nao atualiza saldo contabil
                break FIM_LG_CGP003;
            }
            CGP003SDAMENCEXE = 0;
            CGP003SDAMLCTREC = 0;
            CGP003SDAMSALCON = 0;
            CGP003SDCDCLACON = fix("",12);
            CGP003SDCDCTACON = 0;
            CGP003SDDSPOSCTA = fix("",16);
            CGP003SDINMESENC = 0;
            CGP003SDNRCGCCON = 0;
            CGP003SDNRCGCORI = 0;
            CGP003SDNRNIVCTA = 0;
            CGP003SDQTPOSICA = 0;
            CGP003SDVLSALCON = bigZeros;
            CGP003SDVLSALCOR = bigZeros;
            CGP003SDCDATVREP = move(GSDCDATIVID, CGP003SDCDATVREP, 6);
            if( ((rTrim(GSDCDATIVID)).equals(rTrim(GLB.SPACES))==true))
            {
                CGP003SDCDATVREP = move(GSDCDRELATO, CGP003SDCDATVREP, 6);
            }
            CGP003SDNRCGCORI = move (GSDNRCGCCON, CGP003SDNRCGCORI, 9, 0,"UNSIGNED");
            if( (GSDTPLANCTO == GLB.ZEROS))
            {
                CGP003SDNRCGCORI = move (GLB.ZEROS, CGP003SDNRCGCORI, 9, 0,"UNSIGNED");
            }
            if( (GSDCDEMPRES == GLB.ZEROS))
            {
//    : utilizado para criar relacionamento com CG105, porque eh usado comando sql.execute
                GLB.SECURE = false;
                GLB.STATUS = CG105_LookupEvery();
                while (CG105_XSEEDEOF == false)
                {   CG105_LookupMoveNext();
                    if (CG105_XSEEDEOF == true)
                    {   break;
                    }
                    break;
                }
            }
            GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
            if( (GSDNRNIVCTA == GLB.ZEROS))
            {
                GSDCDELEALF = move("CDCLACTA", GSDCDELEALF, 10);
                GSDCDELEALF_GROUP();
                GSP004 ();
                if (GLB.EXIT==true)
                {
                    return;
                }
                GSDCDCOMCTA = move(GSDDSELEMEN, GSDCDCOMCTA, 30);
                GSDCDCOMCTA_GROUP();
            }
            CGP003SDNRNIVCTA = move (GSDNRNIVCTA, CGP003SDNRNIVCTA, 2, 0,"UNSIGNED");
            GSDCDELEALF = move("AMLCTR", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSDCDELEALF = attach(format(GSDTPLANCTO,"99"), GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GLB.SECURE = false;
            GLB.STATUS = GS12502_DetermineEvery (GSDCDDOITEM, GSDCDEMPRES, GSDCDELEALF);
            while (GS125_XSEEDEOF == false)
            {   GS12502_DetermineMoveNext();
                if (GS125_XSEEDEOF == true)
                {   break;
                }
                break;
            }
            if( (((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true) || (equals(GS125_VLELEMEN,GLB.ZEROS) == true)))
            {
                break FIM_LG_CGP003;
            }
            CGP003SDAMLCTREC = move (GS125_VLELEMEN, CGP003SDAMLCTREC, 6, 0,"UNSIGNED");
            if( (CGP003SDAMLCTREC >= GSDAMSALCON))
            {
                break ATUALIZA_SALDO;
            }
//: LEITURA DUPLICADA PARA EVITAR O DEADLOCK NO GS125
            GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
            GSDCDELEALF = move("AMLCTR", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSDCDELEALF = attach(format(GSDTPLANCTO,"99"), GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GLB.SECURE = true;
            GLB.STATUS = GS12502_DetermineEvery (GSDCDDOITEM, GSDCDEMPRES, GSDCDELEALF);
            while (GS125_XSEEDEOF == false)
            {   GS12502_DetermineMoveNext();
                if (GS125_XSEEDEOF == true)
                {   break;
                }
                        GLB.STATUS = GS125_Lock ();
                break;
            }
            CGP003SDAMLCTREC = move (GS125_VLELEMEN, CGP003SDAMLCTREC, 6, 0,"UNSIGNED");
            if( (CGP003SDAMLCTREC >= GSDAMSALCON))
            {
                break ATUALIZA_SALDO;
            }
            if( (GSDTPLANCTO > 2.0))
            {
                CGP016 ();
                if (GLB.EXIT==true)
                {
                    return;
                }
                CGP003SDAMLCTREC = move (GSDAMSALCON, CGP003SDAMLCTREC, 6, 0,"UNSIGNED");
                break ATUALIZA_SALDO;
            }
            GSDCDDOITEM = move("AMENCEXE", GSDCDDOITEM, 8);
            GSDCDELENUM = move (CGP003SDAMLCTREC, GSDCDELENUM, 10, 0,"UNSIGNED");
            GSDCDELENUM_ITEM();
            GSP004 ();
            if (GLB.EXIT==true)
            {
                return;
            }
            if( (GSDINITEMOK == GLB.ZEROS))
            {
                CGP003SDINMESENC = move ("1", CGP003SDINMESENC, 1, 0,"UNSIGNED");
            }
            GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
            GSDCDELEALF = move("AMLCTR", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSDCDELEALF = attach(format(GSDTPLANCTO,"99"), GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GLB.SECURE = true;
            GLB.STATUS = GS12502_DetermineEvery (GSDCDDOITEM, GSDCDEMPRES, GSDCDELEALF);
            while (GS125_XSEEDEOF == false)
            {   GS12502_DetermineMoveNext();
                if (GS125_XSEEDEOF == true)
                {   break;
                }
                        GLB.STATUS = GS125_Lock ();
                break;
            }
            CGP003SDAMLCTREC = move (GS125_VLELEMEN, CGP003SDAMLCTREC, 6, 0,"UNSIGNED");
            if( (CGP003SDAMLCTREC >= GSDAMSALCON))
            {
                break ATUALIZA_SALDO;
            }
            if( (GSDAMSALCON > CGP003SDAMLCTREC))
            {
                trace(format(CGP003SDAMLCTREC, "######"), "ANO/MES SDAMLCTREC");
                trace(format(GSDAMSALCON, "######"), "ANO/MES LANCTO");
                trace(format(GSDNRLOTECG, "######"), "NRO.LOTE");
            }
            GLB.SECURE = true;
            GLB.STATUS = CG10501_DetermineGroupFrom (3, false, GSDCDEMPRES, GSDTPLANCTO, CGP003SDAMLCTREC, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, GSDTPLANCTO, CGP003SDAMLCTREC, GLB.ZEROS, GLB.ZEROS);
            while (CG105_XSEEDEOF == false)
            {
                CG10501_DetermineMoveNext ();
                if (CG105_XSEEDEOF == true)
                {    break;
                }
                        GLB.STATUS = CG105_Lock ();
                LE_CG105:
                {
                    CGP003SDCDCTACON = move (CG105_CDCTACON, CGP003SDCDCTACON, 6, 0,"UNSIGNED");
                    CGP003SDNRCGCCON = move (CG105_NRCGCNUM, CGP003SDNRCGCCON, 9, 0,"UNSIGNED");
                    CGP003SDVLSALCON = move (CG105_VLSALCON, CGP003SDVLSALCON, 17, 4,"SIGNED");
                    if( ((CGP003SDINMESENC == 1.0) && (GSDTPLANCTO <= 2.0)))
                    {
                        GLB.SECURE = false;
                        GLB.STATUS = CG10201_DetermineEvery (GSDCDEMPRES, CGP003SDCDCTACON);
                        while (CG102_XSEEDEOF == false)
                        {   CG10201_DetermineMoveNext();
                            if (CG102_XSEEDEOF == true)
                            {   break;
                            }
                            if( ((CG102_TPCTACON == 1.0) || (CG102_TPCTACON == 3.0)))
                            {
                                CGP003SDVLSALCON = move (GLB.ZEROS, CGP003SDVLSALCON, 17, 4,"SIGNED");
                            }
                            break;
                        }
                    }
                    if( ((GSDTPLANCTO != 1.0) && (GSDTPLANCTO != 2.0)))
                    {
                        if( ((CGP003SDAMLCTREC < 199308.0) && (GSDAMSALCON > 199307.0)))
                        {
                            if (cDec("1000").compareTo(bigZeros) != 0)
                            {
                                CGP003SDVLSALCOR = divide(cDec("1000"), CGP003SDVLSALCON, CGP003SDVLSALCOR, 17, 2,"SIGNED","TRUNCATE");
                            }
                            else
                            {   CGP003SDVLSALCOR = bigZeros;
                            }
                            CGP003SDVLSALCON = move (CGP003SDVLSALCOR, CGP003SDVLSALCON, 17, 4,"SIGNED");
                        }
                        if( ((CGP003SDAMLCTREC < 199407.0) && (GSDAMSALCON > 199406.0)))
                        {
                            if (cDec("2750").compareTo(bigZeros) != 0)
                            {
                                CGP003SDVLSALCOR = divide(cDec("2750"), CGP003SDVLSALCON, CGP003SDVLSALCOR, 17, 2,"SIGNED","TRUNCATE");
                            }
                            else
                            {   CGP003SDVLSALCOR = bigZeros;
                            }
                            CGP003SDVLSALCON = move (CGP003SDVLSALCOR, CGP003SDVLSALCON, 17, 4,"SIGNED");
                        }
                    }
                    GSDDSCOMAND = move("UPDATE /* TRANSFERENCIA SALDO CGP003", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace(CGP003SDCDATVREP, GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attach("*/ CG105 SET CG105.VLSALCON = ", GSDDSCOMAND, 10000);
        GSDDSCOMAND = GSDDSCOMAND + CGP003SDVLSALCON.toString();
                    GSDDSCOMAND = attachAndSpace("WHERE CG105.CDEMPRES =", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace(format(GSDCDEMPRES,"99"), GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace("AND CG105.TPLANCTO =", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace(format(GSDTPLANCTO,"99"), GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace("AND CG105.AMSALCON =", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace(format(GSDAMSALCON,"999999"), GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace("AND CG105.CDCTACON =", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace(format(CGP003SDCDCTACON,"999999"), GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace("AND CG105.NRCGCNUM =", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace(format(CGP003SDNRCGCCON,"999999999"), GSDDSCOMAND, 10000);
                    GSP028 ();
                    if (GLB.EXIT==true)
                    {
                        return;
                    }
                    if( (GSDNRECORDS == GLB.ZEROS))
                    {
                        CG105_InitAuto();
                        AU_CG105_AMSALCON = auto (GSDAMSALCON, AU_CG105_AMSALCON, 6, 0,"UNSIGNED");
                        AU_CG105_CDCTACON = auto (CGP003SDCDCTACON, AU_CG105_CDCTACON, 6, 0,"UNSIGNED");
                        AU_CG105_CDEMPRES = auto (GSDCDEMPRES, AU_CG105_CDEMPRES, 2, 0,"UNSIGNED");
                        AU_CG105_NRCGCNUM = auto (CGP003SDNRCGCCON, AU_CG105_NRCGCNUM, 9, 0,"UNSIGNED");
                        AU_CG105_TPLANCTO = auto (GSDTPLANCTO, AU_CG105_TPLANCTO, 2, 0,"UNSIGNED");
                        AU_CG105_VLSALCON = auto (CGP003SDVLSALCON, AU_CG105_VLSALCON, 17, 4,"SIGNED");
                        if ((GLB.ERROR.trim()).equals("")==true)
                        {
                            CG105_AutoToFile();
                            CG105_Insert ();
                        }
                    }
                }
            }
            GS125_VLELEMEN = flag (GSDAMSALCON, GS125_VLELEMEN, 16, 0,"SIGNED");
            GS125_Modify ();
            CGP003SDAMLCTREC = move (GSDAMSALCON, CGP003SDAMLCTREC, 6, 0,"UNSIGNED");
        }
        GSDCDDOITEM = move("AMENCEXE", GSDCDDOITEM, 8);
        CGP003SDAMSALCON = move (GSDAMSALCON, CGP003SDAMSALCON, 6, 0,"UNSIGNED");
        while (true)
        {
            GSDCDELENUM = move (CGP003SDAMSALCON, GSDCDELENUM, 10, 0,"UNSIGNED");
            GSDCDELENUM_ITEM();
            GLB.SECURE = false;
            GLB.STATUS = GS12502_DetermineEvery (GSDCDDOITEM, GSDCDEMPRES, GSDCDELEALF);
            while (GS125_XSEEDEOF == false)
            {   GS12502_DetermineMoveNext();
                if (GS125_XSEEDEOF == true)
                {   break;
                }
                break;
            }
            if( ((rTrim(GLB.STATUS)).equals(rTrim(GLB.SPACES))==true))
            {
                CGP003SDAMENCEXE = move (CGP003SDAMSALCON, CGP003SDAMENCEXE, 6, 0,"UNSIGNED");
                break;
            }
            CGP003SDAMSALCON = add(cDec("1"), CGP003SDAMSALCON, 6, 0, "UNSIGNED", "TRUNCATE");
            GSDDIAMSAMD = move (format(CGP003SDAMSALCON ,"999999"), GSDDIAMSAMD,6);
            GSDDIAMSAMD_ITEM();
            GSDDIAMSAMD_GROUP();
            if( (GSDDIMMSAMD > 12.0))
            {
                CGP003SDAMSALCON = add(cDec("88"), CGP003SDAMSALCON, 6, 0, "UNSIGNED", "TRUNCATE");
            }
            if( (CGP003SDAMSALCON > CGP003SDAMLCTREC))
            {
                break;
            }
        }
        CGP003SDCDCTACON = move (GSDCDCTACON, CGP003SDCDCTACON, 6, 0,"UNSIGNED");
        CGP003SDCDCLACON = move(GSDCDCLACON, CGP003SDCDCLACON, 12);
        CGP003SDNRCGCCON = move (CGP003SDNRCGCORI, CGP003SDNRCGCCON, 9, 0,"UNSIGNED");
        if( (GSDTPLANCTO <= 2.0))
        {
            GLB.SECURE = false;
            GLB.STATUS = CG10201_DetermineEvery (GSDCDEMPRES, CGP003SDCDCTACON);
            while (CG102_XSEEDEOF == false)
            {   CG10201_DetermineMoveNext();
                if (CG102_XSEEDEOF == true)
                {   break;
                }
                break;
            }
        }
        CGP003SDVLSALCON = move (GSDVLLANCAM, CGP003SDVLSALCON, 17, 4,"SIGNED");
        CGP003SDAMSALCON = move (GSDAMSALCON, CGP003SDAMSALCON, 6, 0,"UNSIGNED");
        while (true)
        {
            GSDDSCOMAND = move("UPDATE CG105 /* ATUALIZAÇÃO SALDO CGP003", GSDDSCOMAND, 10000);
            GSDDSCOMAND = attachAndSpace(CGP003SDCDATVREP, GSDDSCOMAND, 10000);
            GSDDSCOMAND = attach("*/ SET CG105.VLSALCON = CG105.VLSALCON + ", GSDDSCOMAND, 10000);
        GSDDSCOMAND = GSDDSCOMAND + GSDVLLANCAM.toString();
            GSDDSCOMAND = attachAndSpace("WHERE CG105.CDEMPRES =", GSDDSCOMAND, 10000);
            GSDDSCOMAND = attachAndSpace(format(GSDCDEMPRES,"99"), GSDDSCOMAND, 10000);
            GSDDSCOMAND = attachAndSpace("AND CG105.TPLANCTO =", GSDDSCOMAND, 10000);
            GSDDSCOMAND = attachAndSpace(format(GSDTPLANCTO,"99"), GSDDSCOMAND, 10000);
            GSDDSCOMAND = attachAndSpace("AND CG105.AMSALCON =", GSDDSCOMAND, 10000);
            GSDDSCOMAND = attachAndSpace(format(CGP003SDAMSALCON,"999999"), GSDDSCOMAND, 10000);
            GSDDSCOMAND = attachAndSpace("AND CG105.CDCTACON =", GSDDSCOMAND, 10000);
            GSDDSCOMAND = attachAndSpace(format(CGP003SDCDCTACON,"999999"), GSDDSCOMAND, 10000);
            GSDDSCOMAND = attachAndSpace("AND CG105.NRCGCNUM =", GSDDSCOMAND, 10000);
            GSDDSCOMAND = attachAndSpace(format(CGP003SDNRCGCCON,"999999999"), GSDDSCOMAND, 10000);
            GSP028 ();
            if (GLB.EXIT==true)
            {
                return;
            }
            if( (GSDNRECORDS == GLB.ZEROS))
            {
                CG105_InitAuto();
                AU_CG105_AMSALCON = auto (CGP003SDAMSALCON, AU_CG105_AMSALCON, 6, 0,"UNSIGNED");
                AU_CG105_CDCTACON = auto (CGP003SDCDCTACON, AU_CG105_CDCTACON, 6, 0,"UNSIGNED");
                AU_CG105_CDEMPRES = auto (GSDCDEMPRES, AU_CG105_CDEMPRES, 2, 0,"UNSIGNED");
                AU_CG105_INSITREG = auto("A", AU_CG105_INSITREG, 1);
                AU_CG105_NRCGCNUM = auto (CGP003SDNRCGCCON, AU_CG105_NRCGCNUM, 9, 0,"UNSIGNED");
                AU_CG105_TPLANCTO = auto (GSDTPLANCTO, AU_CG105_TPLANCTO, 2, 0,"UNSIGNED");
                AU_CG105_VLSALCON = auto (CGP003SDVLSALCON, AU_CG105_VLSALCON, 17, 4,"SIGNED");
                if ((GLB.ERROR.trim()).equals("")==true)
                {
                    CG105_AutoToFile();
                    CG105_Insert ();
                }
            }
            CGP003SDAMSALCON = add(cDec("1"), CGP003SDAMSALCON, 6, 0, "UNSIGNED", "TRUNCATE");
            GSDDIAMSAMD = move (format(CGP003SDAMSALCON ,"999999"), GSDDIAMSAMD,6);
            GSDDIAMSAMD_ITEM();
            GSDDIAMSAMD_GROUP();
            if( (GSDDIMMSAMD > 12.0))
            {
                CGP003SDAMSALCON = add(cDec("88"), CGP003SDAMSALCON, 6, 0, "UNSIGNED", "TRUNCATE");
            }
            if( (CGP003SDAMSALCON > CGP003SDAMLCTREC))
            {
                break;
            }
            if( (GSDTPLANCTO <= 2.0))
            {
                if( ((CG102_TPCTACON == 1.0) || (CG102_TPCTACON == 3.0)))
                {
                    if( ((CGP003SDAMENCEXE != GLB.ZEROS) && (CGP003SDAMSALCON > CGP003SDAMENCEXE)))
                    {
                        break;
                    }
                }
            }
        }
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"CGP003");
    }
}
private void CGP004 ()
  throws Exception
{   try
    {
// :: Starting setup.data definition (transferred from its original location)
// :: Fields with this mark :<-- were initialized by Xseed
    CGP004SDCDCLACUS = 0;
    CGP004SDCDNIVSAV = 0;
    CGP004SDCDNVCCUS = 0;
    CGP004SDNRNIVCCU = 0;
    CGP004SDNRPOSICA = 0;
    CGP004SDVLPOSICA = 0;
    CGP004SDVLPROGMO = 0;
    CGP004SDVLPROUMG = 0;
    CGP004SDVLREALCR = 0;
    CGP004SDVLREALMG = 0;
    CGP004SDVLREALMO = 0;
// :: Finishing setup.data definition
//:==================================================================:
//: CGP004 - ATUALIZA SALDOS CONTABEIS POR CENTRO DE CUSTOS          :
//: COPIADO PARA:  CGI004                                            :
//:                                                                  :
//: CAMPOS DE ENTRADA: GSDAMSALCON (N 06)   - ANO/MES LANCAMENTO     :
//:                    GSDCDCTANUM (N 12)   - CONTA CONTABIL         :
//:                    GSDCDCUSNUM (N 08)   - CENTRO DE CUSTOS       :
//:                    GSDCDECUSTO (N 03)   - ELEMENTO DE CUSTOS     :
//:                    GSDVLPROGMO (+ 14 4) - VALOR PROGRAMADO SIF   :
//:                    GSDVLPROUMG (+ 14 4) - VALOR PROGRAMADO UMG   :
//:                    GSDVLREALCR (+ 14 2) - VALOR REALIZADO  CR$   :
//:                    GSDVLREALMO (+ 14 4) - VALOR REALIZADO  UMC   :
//:                    GSDVLREALMG (+ 14 4) - VALOR REALIZADO  UMG   :
//:==================================================================:
    GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
    if( (GSDNRNIVCCU == GLB.ZEROS))
    {
        GSDCDELEALF = move("CDCLACCU", GSDCDELEALF, 10);
        GSDCDELEALF_GROUP();
        GSP004 ();
        if (GLB.EXIT==true)
        {
            return;
        }
        GSDCDCOMCCU = move(GSDDSELEMEN, GSDCDCOMCCU, 30);
        GSDCDCOMCCU_GROUP();
        GSDCDCLACCU = move (GSDVLELEMEN, GSDCDCLACCU, 8, 0,"UNSIGNED");
    }
    CGP004SDNRNIVCCU = move (GSDNRNIVCCU, CGP004SDNRNIVCCU, 2, 0,"UNSIGNED");
    if( (GSDCDCUSNUM == GLB.ZEROS))
    {
        trace(GSDCDATIVID, "ATIVIDADE");
        trace(GSDCDRELATO, "RELATORIO");
        trace(GLB.SPACES, "------------");
    }
    CGP004SDCDCLACUS = move (GSDCDCUSNUM, CGP004SDCDCLACUS, 8, 0,"UNSIGNED");
    CGP004SDCDNVCCUS = move (GLB.ZEROS, CGP004SDCDNVCCUS, 1, 0,"UNSIGNED");
    CGP004SDCDNIVSAV = move (GLB.ZEROS, CGP004SDCDNIVSAV, 1, 0,"UNSIGNED");
    while (true)
    {
        CGP004SDCDNIVSAV = add(cDec("1"), CGP004SDCDNIVSAV, 1, 0, "UNSIGNED", "TRUNCATE");
        if( (CGP004SDCDNIVSAV > 8.0))
        {
            break;
        }
        CGP004SDNRPOSICA = moveComplex(format(GSDCDCLACCU	, "99999999"), (int)CGP004SDCDNIVSAV, 1, CGP004SDNRPOSICA, 2, 2, 0,"SIGNED");
        CGP004SDCDNVCCUS = add(CGP004SDNRPOSICA, CGP004SDCDNVCCUS, 1, 0, "UNSIGNED", "TRUNCATE");
        CGP004SDNRPOSICA = add(cDec("1"), CGP004SDCDNVCCUS, CGP004SDNRPOSICA, 2, 0, "UNSIGNED", "TRUNCATE");
        CGP004SDVLPOSICA = moveComplex(format(GSDCDCUSNUM	, "99999999"), (int)CGP004SDNRPOSICA, 0, CGP004SDVLPOSICA, 1, 8, 0,"SIGNED");
        if( (CGP004SDVLPOSICA == GLB.ZEROS))
        {
            break;
        }
    }
    while (true)
    {
        CGP004SDVLPROGMO = move (GSDVLPROGMO, CGP004SDVLPROGMO, 14, 4,"SIGNED");
        CGP004SDVLPROUMG = move (GSDVLPROUMG, CGP004SDVLPROUMG, 14, 4,"SIGNED");
        CGP004SDVLREALCR = move (GSDVLREALCR, CGP004SDVLREALCR, 14, 2,"SIGNED");
        CGP004SDVLREALMO = move (GSDVLREALMO, CGP004SDVLREALMO, 14, 4,"SIGNED");
        CGP004SDVLREALMG = move (GSDVLREALMG, CGP004SDVLREALMG, 14, 4,"SIGNED");
        if (cDec("2").compareTo(bigZeros) != 0)
        {
            CGP004SDCDNVCCUS = divide(cDec("2"), CGP004SDNRNIVCCU, CGP004SDCDNVCCUS, 1, 0,"UNSIGNED","TRUNCATE");
        }
        else
        {   CGP004SDCDNVCCUS = 0;
        }
        CGP004SDCDNVCCUS = add(cDec("1"), CGP004SDCDNVCCUS, 1, 0, "UNSIGNED", "TRUNCATE");
        if( ((((GSDCDEMPRES == 1.0) && (CGP004SDCDNVCCUS == 4.0)) && (CGP004SDCDCLACUS == 21400000.0)) && (GSDCDCTANUM == 215010570000.0)))
        {
            trace(GLB.SPACES, "*** LANCTO DIFAL CENTRO CUSTO ***");
            trace(format(GSDAMSALCON, "######"), "GSDAMSALCON");
            trace(GSDCDATIVID, "ATIVIDADE");
            trace(GSDCDRELATO, "RELATORIO");
            trace(format(CGP004SDVLREALCR, "############.##"), "VALOR");
            trace(GLB.SPACES, "--------");
        }
        GLB.SECURE = true;
        GLB.STATUS = CG10601_DetermineEvery (GSDCDEMPRES, GSDAMSALCON, GSDCDCTANUM, CGP004SDCDCLACUS, CGP004SDCDNVCCUS);
        while (CG106_XSEEDEOF == false)
        {   CG10601_DetermineMoveNext();
            if (CG106_XSEEDEOF == true)
            {   break;
            }
                GLB.STATUS = CG106_Lock ();
            CGP004SDVLPROGMO = add(CG106_VLPROGMO, CGP004SDVLPROGMO, 14, 4, "SIGNED", "TRUNCATE");
            CGP004SDVLPROUMG = add(CG106_VLPROUMG, CGP004SDVLPROUMG, 14, 4, "SIGNED", "TRUNCATE");
            CGP004SDVLREALCR = add(CG106_VLREALCR, CGP004SDVLREALCR, 14, 2, "SIGNED", "TRUNCATE");
            CGP004SDVLREALMO = add(CG106_VLREALMO, CGP004SDVLREALMO, 14, 4, "SIGNED", "TRUNCATE");
            CGP004SDVLREALMG = add(CG106_VLREALMG, CGP004SDVLREALMG, 14, 4, "SIGNED", "TRUNCATE");
            CG106_VLPROGMO = flag (CGP004SDVLPROGMO, CG106_VLPROGMO, 14, 4,"SIGNED");
            CG106_VLPROUMG = flag (CGP004SDVLPROUMG, CG106_VLPROUMG, 14, 4,"SIGNED");
            CG106_VLREALCR = flag (CGP004SDVLREALCR, CG106_VLREALCR, 14, 2,"SIGNED");
            CG106_VLREALMO = flag (CGP004SDVLREALMO, CG106_VLREALMO, 14, 4,"SIGNED");
            CG106_VLREALMG = flag (CGP004SDVLREALMG, CG106_VLREALMG, 14, 4,"SIGNED");
            CG106_CDECUSTO = flag (GSDCDECUSTO, CG106_CDECUSTO, 3, 0,"UNSIGNED");
            CG106_Modify ();
            break;
        }
        if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
        {
            CG106_InitAuto();
            AU_CG106_AMSALCON = auto (GSDAMSALCON, AU_CG106_AMSALCON, 6, 0,"UNSIGNED");
            AU_CG106_CDCLACUS = auto (CGP004SDCDCLACUS, AU_CG106_CDCLACUS, 8, 0,"UNSIGNED");
            AU_CG106_CDCONCLA = auto (GSDCDCTANUM, AU_CG106_CDCONCLA, 12, 0,"UNSIGNED");
            AU_CG106_CDECUSTO = auto (GSDCDECUSTO, AU_CG106_CDECUSTO, 3, 0,"UNSIGNED");
            AU_CG106_CDEMPRES = auto (GSDCDEMPRES, AU_CG106_CDEMPRES, 2, 0,"UNSIGNED");
            AU_CG106_CDNVCCUS = auto (CGP004SDCDNVCCUS, AU_CG106_CDNVCCUS, 1, 0,"UNSIGNED");
            AU_CG106_VLPROGMO = auto (CGP004SDVLPROGMO, AU_CG106_VLPROGMO, 14, 4,"SIGNED");
            AU_CG106_VLPROUMG = auto (CGP004SDVLPROUMG, AU_CG106_VLPROUMG, 14, 4,"SIGNED");
            AU_CG106_VLREALCR = auto (CGP004SDVLREALCR, AU_CG106_VLREALCR, 14, 2,"SIGNED");
            AU_CG106_VLREALMO = auto (CGP004SDVLREALMO, AU_CG106_VLREALMO, 14, 4,"SIGNED");
            AU_CG106_VLREALMG = auto (CGP004SDVLREALMG, AU_CG106_VLREALMG, 14, 4,"SIGNED");
            if ((GLB.ERROR.trim()).equals("")==true)
            {
                CG106_AutoToFile();
                CG106_Insert ();
            }
        }
        if( (CGP004SDNRNIVCCU < 2.0))
        {
            break;
        }
        if( (CGP004SDCDNIVSAV < CGP004SDCDNVCCUS))
        {
            CGP004SDNRNIVCCU = multiply(cDec("2"), CGP004SDCDNIVSAV, CGP004SDNRNIVCCU,2, 0,"UNSIGNED","TRUNCATE");
            CGP004SDNRNIVCCU = add(cDec("1"), CGP004SDNRNIVCCU, 2, 0, "UNSIGNED", "TRUNCATE");
        }
        CGP004SDNRNIVCCU = subtract(cDec("2"), CGP004SDNRNIVCCU, 2, 0,"UNSIGNED","TRUNCATE");
        CGP004SDNRPOSICA = moveComplex(format(GSDNRPOSCCU, 16), (int)CGP004SDNRNIVCCU, 2, CGP004SDNRPOSICA, 1, 2, 0,"SIGNED");
        CGP004SDNRPOSICA = add(cDec("1"), CGP004SDNRPOSICA, 2, 0, "UNSIGNED", "TRUNCATE");
        CGP004SDVLPOSICA = moveComplex(format(CGP004SDCDCLACUS	, "99999999"), (int)CGP004SDNRPOSICA, 0, CGP004SDVLPOSICA, 1, 8, 0,"SIGNED");
        if( (CGP004SDVLPOSICA != GLB.ZEROS))
        {
            CGP004SDCDCLACUS = moveComplex(format(GSDVLRZEROS	, "999999999999999999"), 1, 0, CGP004SDCDCLACUS, (int)CGP004SDNRPOSICA, 8, 0,"SIGNED");
        }
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"CGP004");
    }
}
private void CGP010 ()
  throws Exception
{   try
    {
    FIM_CGP010:
    {
        CGP010SDCDATIVID = fix("",6);
        CGP010SDINTEM107 = 0;
        CGP010SDNRUSUARI = 0;
        CGP010SDVLDIFLAN = bigZeros;
        CGP010SDVLLANCRE = bigZeros;
        CGP010SDVLLANDEB = bigZeros;
//:====================================================================:
//: CGP010 - CRIA/ATUALIZA FECHAMENTO DE LOTES CONTABEIS - CG107/CG120 :
//:                                                                    :
//:  CAMPOS DE ENTRADA: GSDCDORILAN (N 02) - CODIGO ORIGEM LANCAMENTO  :
//:                     GSDDILANCTO (N 08) - DATA LANCAMENTO           :
//:                     GSDNRFORMCG (N 06) - NUMERO DO FORMULARIO      :
//:                     GSDNRLOTECG (N 06) - NUMERO DO LOTE            :
//:                     GSDTPLANCTO (N 02) - TIPO LANCAMENTO           :
//:                     GSDVLLANCRE (- 17 04) - TOTAL LANCTOS CREDITO  :
//:                     GSDVLLANDEB (+ 17 04) - TOTAL LANCTOS DEBITO   :
//:                                                                    :
//:====================================================================:
        if( ((((GSDNRLOTECG == GLB.ZEROS) && (GSDNRFORMCG == GLB.ZEROS)) && (equals(GSDVLLANCRE,GLB.ZEROS) == true)) && (equals(GSDVLLANDEB,GLB.ZEROS) == true)))
        {
            break FIM_CGP010;
        }
        CGP010SDCDATIVID = move(GSDCDATIVID, CGP010SDCDATIVID, 6);
        if( ((rTrim(GSDCDRELATO)).equals(rTrim(GLB.SPACES))==false))
        {
            CGP010SDCDATIVID = move(GSDCDRELATO, CGP010SDCDATIVID, 6);
        }
        CGP010SDNRUSUARI = move (GLB.ZEROS, CGP010SDNRUSUARI, 6, 0,"UNSIGNED");
        if( (GSDCDNIVSEG > 1.0))
        {
            CGP010SDNRUSUARI = move (GSDNRUSUARI, CGP010SDNRUSUARI, 6, 0,"UNSIGNED");
        }
        GLB.SECURE = true;
        GLB.STATUS = CG10703_DetermineEvery (GSDCDEMPRES, GSDTPLANCTO, GSDDILANCTO, GSDCDORILAN, GSDNRLOTECG, GSDNRFORMCG);
        while (CG107_XSEEDEOF == false)
        {   CG10703_DetermineMoveNext();
            if (CG107_XSEEDEOF == true)
            {   break;
            }
                GLB.STATUS = CG107_Lock ();
            CGP010SDINTEM107 = move ("1", CGP010SDINTEM107, 1, 0,"UNSIGNED");
            CGP010SDVLLANCRE = add(CG107_VLLANCRE, GSDVLLANCRE, CGP010SDVLLANCRE, 17, 4, "SIGNED", "TRUNCATE");
            CGP010SDVLLANDEB = add(CG107_VLLANDEB, GSDVLLANDEB, CGP010SDVLLANDEB, 17, 4, "SIGNED", "TRUNCATE");
            CGP010SDVLDIFLAN = add(CGP010SDVLLANDEB, CGP010SDVLLANCRE, CGP010SDVLDIFLAN, 17, 4, "SIGNED", "TRUNCATE");
            CG107_VLLANCRE = flag (CGP010SDVLLANCRE, CG107_VLLANCRE, 17, 4,"SIGNED");
            CG107_VLLANDEB = flag (CGP010SDVLLANDEB, CG107_VLLANDEB, 17, 4,"SIGNED");
            CG107_VLDIFLAN = flag (CGP010SDVLDIFLAN, CG107_VLDIFLAN, 17, 4,"SIGNED");
            CG107_INLOTLIS = flag (GLB.ZEROS, CG107_INLOTLIS, 1, 0,"UNSIGNED");
            CG107_NRUSUALT = flag (CGP010SDNRUSUARI, CG107_NRUSUALT, 4, 0,"UNSIGNED");
            CG107_Modify ();
//    :EDSON - 12/07/2016
            if( ((equals(CGP010SDVLLANCRE,GLB.ZEROS) == true) && (equals(CGP010SDVLLANDEB,GLB.ZEROS) == true)))
            {
                CG107_Delete();
            }
        }
        if( (CGP010SDINTEM107 == GLB.ZEROS))
        {
            CGP010SDVLDIFLAN = add(GSDVLLANDEB, GSDVLLANCRE, CGP010SDVLDIFLAN, 17, 4, "SIGNED", "TRUNCATE");
            CG107_InitAuto();
            AU_CG107_CDATIVID = auto(CGP010SDCDATIVID, AU_CG107_CDATIVID, 6);
            AU_CG107_CDEMPRES = auto (GSDCDEMPRES, AU_CG107_CDEMPRES, 2, 0,"UNSIGNED");
            AU_CG107_CDORILAN = auto (GSDCDORILAN, AU_CG107_CDORILAN, 2, 0,"UNSIGNED");
            AU_CG107_DILANCTO = auto (GSDDILANCTO, AU_CG107_DILANCTO, 8, 0,"UNSIGNED");
            AU_CG107_INLOTLIS = auto (GLB.ZEROS, AU_CG107_INLOTLIS, 1, 0,"UNSIGNED");
            AU_CG107_INSITREG = auto("A", AU_CG107_INSITREG, 1);
            AU_CG107_NRFORMCG = auto (GSDNRFORMCG, AU_CG107_NRFORMCG, 6, 0,"UNSIGNED");
            AU_CG107_NRLOTECG = auto (GSDNRLOTECG, AU_CG107_NRLOTECG, 6, 0,"UNSIGNED");
            AU_CG107_NRUSUCRI = auto (CGP010SDNRUSUARI, AU_CG107_NRUSUCRI, 4, 0,"UNSIGNED");
            AU_CG107_TPLANCTO = auto (GSDTPLANCTO, AU_CG107_TPLANCTO, 2, 0,"UNSIGNED");
            AU_CG107_VLLANCRE = auto (GSDVLLANCRE, AU_CG107_VLLANCRE, 17, 4,"SIGNED");
            AU_CG107_VLLANDEB = auto (GSDVLLANDEB, AU_CG107_VLLANDEB, 17, 4,"SIGNED");
            AU_CG107_VLDIFLAN = auto (CGP010SDVLDIFLAN, AU_CG107_VLDIFLAN, 17, 4,"SIGNED");
            if ((GLB.ERROR.trim()).equals("")==true)
            {
                CG107_AutoToFile();
                CG107_Insert ();
                CG107_InitAuto();
            }
        }
        if( (GSDTPLANCTO > 2.0))
        {
            break FIM_CGP010;
        }
        CGP010SDINTEM107 = move (GLB.ZEROS, CGP010SDINTEM107, 1, 0,"UNSIGNED");
        GLB.SECURE = true;
        GLB.STATUS = CG10704_DetermineEvery (GSDCDEMPRES, GSDTPLANCTO, GSDDILANCTO, GSDCDORILAN, GSDNRLOTECG);
        while (CG107_XSEEDEOF == false)
        {   CG10704_DetermineMoveNext();
            if (CG107_XSEEDEOF == true)
            {   break;
            }
                GLB.STATUS = CG107_Lock ();
            CGP010SDINTEM107 = move ("1", CGP010SDINTEM107, 1, 0,"UNSIGNED");
            CGP010SDVLLANCRE = add(CG107_VLLANCRE, GSDVLLANCRE, CGP010SDVLLANCRE, 17, 4, "SIGNED", "TRUNCATE");
            CGP010SDVLLANDEB = add(CG107_VLLANDEB, GSDVLLANDEB, CGP010SDVLLANDEB, 17, 4, "SIGNED", "TRUNCATE");
            CGP010SDVLDIFLAN = add(CGP010SDVLLANDEB, CGP010SDVLLANCRE, CGP010SDVLDIFLAN, 17, 4, "SIGNED", "TRUNCATE");
            if( (equals(CGP010SDVLDIFLAN,GLB.ZEROS) == false))
            {
                CG107_VLLANCRE = flag (CGP010SDVLLANCRE, CG107_VLLANCRE, 17, 4,"SIGNED");
                CG107_VLLANDEB = flag (CGP010SDVLLANDEB, CG107_VLLANDEB, 17, 4,"SIGNED");
                CG107_VLDIFLAN = flag (CGP010SDVLDIFLAN, CG107_VLDIFLAN, 17, 4,"SIGNED");
                CG107_INLOTLIS = flag (GLB.ZEROS, CG107_INLOTLIS, 1, 0,"UNSIGNED");
                CG107_NRUSUALT = flag (CGP010SDNRUSUARI, CG107_NRUSUALT, 4, 0,"UNSIGNED");
                CG107_Modify ();
            }
            if( (equals(CGP010SDVLDIFLAN,GLB.ZEROS) == true))
            {
                CG107_Delete();
            }
            break;
        }
        if( (CGP010SDINTEM107 == GLB.ZEROS))
        {
            CGP010SDVLDIFLAN = add(GSDVLLANDEB, GSDVLLANCRE, CGP010SDVLDIFLAN, 17, 4, "SIGNED", "TRUNCATE");
            if( (equals(CGP010SDVLDIFLAN,GLB.ZEROS) == false))
            {
                CG107_InitAuto();
                AU_CG107_CDATIVID = auto(CGP010SDCDATIVID, AU_CG107_CDATIVID, 6);
                AU_CG107_CDEMPRES = auto (GSDCDEMPRES, AU_CG107_CDEMPRES, 2, 0,"UNSIGNED");
                AU_CG107_CDORILAN = auto (GSDCDORILAN, AU_CG107_CDORILAN, 2, 0,"UNSIGNED");
                AU_CG107_DILANCTO = auto (GSDDILANCTO, AU_CG107_DILANCTO, 8, 0,"UNSIGNED");
                AU_CG107_INLOTLIS = auto (GLB.ZEROS, AU_CG107_INLOTLIS, 1, 0,"UNSIGNED");
                AU_CG107_INSITREG = auto("A", AU_CG107_INSITREG, 1);
                AU_CG107_NRFORMCG = auto (GLB.ZEROS, AU_CG107_NRFORMCG, 6, 0,"UNSIGNED");
                AU_CG107_NRLOTECG = auto (GSDNRLOTECG, AU_CG107_NRLOTECG, 6, 0,"UNSIGNED");
                AU_CG107_NRUSUCRI = auto (CGP010SDNRUSUARI, AU_CG107_NRUSUCRI, 4, 0,"UNSIGNED");
                AU_CG107_TPLANCTO = auto (GSDTPLANCTO, AU_CG107_TPLANCTO, 2, 0,"UNSIGNED");
                AU_CG107_VLLANCRE = auto (GSDVLLANCRE, AU_CG107_VLLANCRE, 17, 4,"SIGNED");
                AU_CG107_VLLANDEB = auto (GSDVLLANDEB, AU_CG107_VLLANDEB, 17, 4,"SIGNED");
                AU_CG107_VLDIFLAN = auto (CGP010SDVLDIFLAN, AU_CG107_VLDIFLAN, 17, 4,"SIGNED");
                if ((GLB.ERROR.trim()).equals("")==true)
                {
                    CG107_AutoToFile();
                    CG107_Insert ();
                    CG107_InitAuto();
                }
            }
        }
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"CGP010");
    }
}
private void CGP016 ()
  throws Exception
{   try
    {
//:==================================================================:
//: CGP016 - TRANSFERE SALDOS CONTABEIS RAZAO AUXILIAR               :
//:                                                                  :
//: CAMPO  DE ENTRADA:                                               :
//:                    GSDAMSALCON (N 06)   - ANO/MES LANCAMENTO     :
//:==================================================================:
    CGP016SDAMLCTRAZ = 0;
    CGP016SDCDCTARAZ = 0;
    CGP016SDNRCGCRAZ = 0;
    CGP016SDTPLANRAZ = 0;
    CGP016SDVLSALRAZ = bigZeros;
    CGP016SDCDATVREP = move(GSDCDATIVID, CGP016SDCDATVREP, 6);
    if( ((rTrim(GSDCDATIVID)).equals(rTrim(GLB.SPACES))==true))
    {
        CGP016SDCDATVREP = move(GSDCDRELATO, CGP016SDCDATVREP, 6);
    }
    if( (GSDCDEMPRES == GLB.ZEROS))
    {
//    : utilizado para criar relacionamento com CG105, porque eh usado comando sql.execute
        GLB.SECURE = false;
        GLB.STATUS = CG105_LookupEvery();
        while (CG105_XSEEDEOF == false)
        {   CG105_LookupMoveNext();
            if (CG105_XSEEDEOF == true)
            {   break;
            }
            break;
        }
    }
    CGP016SDTPLANRAZ = move ("03", CGP016SDTPLANRAZ, 2, 0,"UNSIGNED");
    while (true)
    {
        PROX_RAZAUX:
        {
            GSDCDDOITEM = move("TPLANCTO", GSDCDDOITEM, 8);
            GSDCDELENUM = move (CGP016SDTPLANRAZ, GSDCDELENUM, 10, 0,"UNSIGNED");
            GSDCDELENUM_ITEM();
            GLB.SECURE = false;
            GLB.STATUS = GS12502_DetermineGroupFrom (2, false, GSDCDDOITEM, GSDCDEMPRES, GSDCDELEALF, GSDCDDOITEM, GSDCDEMPRES, GSDCDELEALF);
            while (GS125_XSEEDEOF == false)
            {
                GS12502_DetermineMoveNext ();
                if (GS125_XSEEDEOF == true)
                {    break;
                }
                break;
            }
            if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
            {
                break;
            }
            GSDCDELEALF = move(GS125_CDELEMTO, GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            CGP016SDTPLANRAZ = move (GSDCDELENUM, CGP016SDTPLANRAZ, 2, 0,"UNSIGNED");
            GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
            GSDCDELEALF = move("AMLCTR", GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSDCDELEALF = attach(format(CGP016SDTPLANRAZ,"99"), GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
            GSDINITEMOK = move ("2", GSDINITEMOK, 1, 0,"UNSIGNED");
            GSP004 ();
            if (GLB.EXIT==true)
            {
                return;
            }
            if( (GSDINITEMOK == 1.0))
            {
                break PROX_RAZAUX;
            }
            CGP016SDAMLCTRAZ = move (GSDVLELEMEN, CGP016SDAMLCTRAZ, 6, 0,"UNSIGNED");
            if( (CGP016SDAMLCTRAZ >= GSDAMSALCON))
            {
                break PROX_RAZAUX;
            }
            GLB.SECURE = true;
            GLB.STATUS = CG10501_DetermineGroupFrom (3, false, GSDCDEMPRES, CGP016SDTPLANRAZ, CGP016SDAMLCTRAZ, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, CGP016SDTPLANRAZ, CGP016SDAMLCTRAZ, GLB.ZEROS, GLB.ZEROS);
            while (CG105_XSEEDEOF == false)
            {
                CG10501_DetermineMoveNext ();
                if (CG105_XSEEDEOF == true)
                {    break;
                }
                        GLB.STATUS = CG105_Lock ();
                PROX_CG105:
                {
                    if( (equals(CG105_VLSALCON,GLB.ZEROS) == true))
                    {
                        break PROX_CG105;
                    }
                    CGP016SDCDCTARAZ = move (CG105_CDCTACON, CGP016SDCDCTARAZ, 6, 0,"UNSIGNED");
                    CGP016SDNRCGCRAZ = move (CG105_NRCGCNUM, CGP016SDNRCGCRAZ, 9, 0,"UNSIGNED");
                    CGP016SDVLSALRAZ = move (CG105_VLSALCON, CGP016SDVLSALRAZ, 17, 4,"SIGNED");
                    GSDDSCOMAND = move("UPDATE /*", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attach(CGP016SDCDATVREP, GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attach("*/ CG105 SET CG105.VLSALCON = ", GSDDSCOMAND, 10000);
            GSDDSCOMAND = GSDDSCOMAND + CGP016SDVLSALRAZ.toString();
                    GSDDSCOMAND = attachAndSpace("WHERE CG105.CDEMPRES =", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace(format(GSDCDEMPRES,"99"), GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace("AND CG105.TPLANCTO =", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace(format(CGP016SDTPLANRAZ,"99"), GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace("AND CG105.AMSALCON =", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace(format(GSDAMSALCON,"999999"), GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace("AND CG105.CDCTACON =", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace(format(CGP016SDCDCTARAZ,"999999"), GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace("AND CG105.NRCGCNUM =", GSDDSCOMAND, 10000);
                    GSDDSCOMAND = attachAndSpace(format(CGP016SDNRCGCRAZ,"999999999"), GSDDSCOMAND, 10000);
                    GSP028 ();
                    if (GLB.EXIT==true)
                    {
                        return;
                    }
                    if( (GSDNRECORDS == GLB.ZEROS))
                    {
                        CG105_InitAuto();
                        AU_CG105_AMSALCON = auto (GSDAMSALCON, AU_CG105_AMSALCON, 6, 0,"UNSIGNED");
                        AU_CG105_CDCTACON = auto (CGP016SDCDCTARAZ, AU_CG105_CDCTACON, 6, 0,"UNSIGNED");
                        AU_CG105_CDEMPRES = auto (GSDCDEMPRES, AU_CG105_CDEMPRES, 2, 0,"UNSIGNED");
                        AU_CG105_NRCGCNUM = auto (CGP016SDNRCGCRAZ, AU_CG105_NRCGCNUM, 9, 0,"UNSIGNED");
                        AU_CG105_TPLANCTO = auto (CGP016SDTPLANRAZ, AU_CG105_TPLANCTO, 2, 0,"UNSIGNED");
                        AU_CG105_VLSALCON = auto (CGP016SDVLSALRAZ, AU_CG105_VLSALCON, 17, 4,"SIGNED");
                        if ((GLB.ERROR.trim()).equals("")==true)
                        {
                            CG105_AutoToFile();
                            CG105_Insert ();
                        }
                    }
                }
            }
            GS125_VLELEMEN = flag (GSDAMSALCON, GS125_VLELEMEN, 16, 0,"SIGNED");
            GS125_Modify ();
        }
        CGP016SDTPLANRAZ = add(cDec("1"), CGP016SDTPLANRAZ, 2, 0, "UNSIGNED", "TRUNCATE");
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"CGP016");
    }
}
private void CONTABILIZA ()
  throws Exception
{   try
    {
    GSDTPLANCTO = move (GLB.ZEROS, GSDTPLANCTO, 2, 0,"UNSIGNED");
    GSDCDORILAN = move ("16", GSDCDORILAN, 2, 0,"UNSIGNED");
    GSDDIDISAMD = move (format(GSDDILANCTO ,"99999999"), GSDDIDISAMD,8);
    GSDDIDISAMD_GROUP();
    GSDAMSALCON = move (GSDDIAMSAMD, GSDAMSALCON, 6, 0,"UNSIGNED");
    GLB.SECURE = false;
    GLB.STATUS = CG10201_DetermineEvery (GSDCDEMPRES, GSDCDCTACON);
    while (CG102_XSEEDEOF == false)
    {   CG10201_DetermineMoveNext();
        if (CG102_XSEEDEOF == true)
        {   break;
        }
        GSDCDCLACON = move(CG102_CDCLACON, GSDCDCLACON, 12);
        GSDCDECUSTO = move (CG102_CDECUSTO, GSDCDECUSTO, 3, 0,"UNSIGNED");
        GSDTPCTACON = move (CG102_TPCTACON, GSDTPCTACON, 2, 0,"UNSIGNED");
        GSDCDRAZAUX = move (CG102_CDRAZAUX, GSDCDRAZAUX, 2, 0,"UNSIGNED");
        GSDINCONCIL = move(CG102_INCONCIL, GSDINCONCIL, 1);
        break;
    }
    GSDNRSEQLAN = move ("9999", GSDNRSEQLAN, 4, 0,"UNSIGNED");
    GLB.SECURE = false;
    GLB.STATUS = CG10401_DetermineLast (GSDCDEMPRES, GSDTPLANCTO, GSDDILANCTO, GSDNRLOTECG, GSDNRFORMCG, GSDNRSEQLAN);
    if( ((((((rTrim(GLB.STATUS)).equals(rTrim(GLB.SPACES))==true) && (CG104_TPLANCTO == GSDTPLANCTO)) && (CG104_DILANCTO == GSDDILANCTO)) && (CG104_NRLOTECG == GSDNRLOTECG)) && (CG104_NRFORMCG == GSDNRFORMCG)))
    {
        GSDNRSEQLAN = add(cDec("1"), CG104_NRSEQLAN, GSDNRSEQLAN, 4, 0, "UNSIGNED", "TRUNCATE");
    }
    if( (GSDNRSEQLAN == 9999.0))
    {
        GSDNRSEQLAN = move ("1", GSDNRSEQLAN, 4, 0,"UNSIGNED");
    }
    CG104_InitAuto();
    AU_CG104_CDCLACUS = auto (GSDCDCUSNUM, AU_CG104_CDCLACUS, 8, 0,"UNSIGNED");
    AU_CG104_CDCTACON = auto (GSDCDCTACON, AU_CG104_CDCTACON, 6, 0,"UNSIGNED");
    AU_CG104_CDORILAN = auto (GSDCDORILAN, AU_CG104_CDORILAN, 2, 0,"UNSIGNED");
    AU_CG104_CDEMPRES = auto (GSDCDEMPRES, AU_CG104_CDEMPRES, 2, 0,"UNSIGNED");
    AU_CG104_CDHISTOR = auto (GSDCDHISTOR, AU_CG104_CDHISTOR, 4, 0,"UNSIGNED");
    AU_CG104_DILANCTO = auto (GSDDILANCTO, AU_CG104_DILANCTO, 8, 0,"UNSIGNED");
    AU_CG104_DSCOMPHI = auto(GSDDSCOMPHI, AU_CG104_DSCOMPHI, 18);
    AU_CG104_INSINLAN = auto (GSDINSINLAN, AU_CG104_INSINLAN, 1, 0,"UNSIGNED");
    AU_CG104_INSITREG = auto("A", AU_CG104_INSITREG, 1);
    AU_CG104_NRFORMCG = auto (GSDNRFORMCG, AU_CG104_NRFORMCG, 6, 0,"UNSIGNED");
    AU_CG104_NRLOTECG = auto (GSDNRLOTECG, AU_CG104_NRLOTECG, 6, 0,"UNSIGNED");
    AU_CG104_NRSEQLAN = auto (GSDNRSEQLAN, AU_CG104_NRSEQLAN, 4, 0,"UNSIGNED");
    AU_CG104_TPLANCTO = auto (GSDTPLANCTO, AU_CG104_TPLANCTO, 2, 0,"UNSIGNED");
    AU_CG104_VLLANCAM = auto (GSDVLLANCAM, AU_CG104_VLLANCAM, 16, 4,"SIGNED");
    if ((GLB.ERROR.trim()).equals("")==true)
    {
        CG104_AutoToFile();
        CG104_Insert ();
        CG104_InitAuto();
    }
    if( ((rTrim(GSDINCONCIL)).equals(rTrim("S"))==true))
    {
        CG118_InitAuto();
        AU_CG118_CDCTACON = auto (GSDCDCTACON, AU_CG118_CDCTACON, 6, 0,"UNSIGNED");
        AU_CG118_CDEMPRES = auto (GSDCDEMPRES, AU_CG118_CDEMPRES, 2, 0,"UNSIGNED");
        AU_CG118_DICONCIL = auto (GLB.ZEROS, AU_CG118_DICONCIL, 8, 0,"UNSIGNED");
        AU_CG118_DILANCTO = auto (GSDDILANCTO, AU_CG118_DILANCTO, 8, 0,"UNSIGNED");
        AU_CG118_INSITREG = auto("A", AU_CG118_INSITREG, 1);
        AU_CG118_NRFORMCG = auto (GSDNRFORMCG, AU_CG118_NRFORMCG, 6, 0,"UNSIGNED");
        AU_CG118_NRLOTECG = auto (GSDNRLOTECG, AU_CG118_NRLOTECG, 6, 0,"UNSIGNED");
        AU_CG118_NRSEQLAN = auto (GSDNRSEQLAN, AU_CG118_NRSEQLAN, 4, 0,"UNSIGNED");
        if ((GLB.ERROR.trim()).equals("")==true)
        {
            CG118_AutoToFile();
            CG118_Insert ();
            CG118_InitAuto();
        }
    }
    CGP003 ();
    if (GLB.EXIT==true)
    {
        return;
    }
    if( (GSDTPCTACON == 3.0))
    {
        GSDCDCTAALF = move(GSDCDCLACON, GSDCDCTAALF, 12);
        GSDCDCTAALF_GROUP();
        GSDVLREALCR = move (GSDVLLANCAM, GSDVLREALCR, 14, 2,"SIGNED");
        CGP004 ();
        if (GLB.EXIT==true)
        {
            return;
        }
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"CONTABILIZA");
    }
}
private void CREDITO_TEXTIL ()
  throws Exception
{   try
    {
    GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
    GSDCDELEALF = move("NRLOTAUT", GSDCDELEALF, 10);
    GSDCDELEALF_GROUP();
    GSDINITEMOK = move ("2", GSDINITEMOK, 1, 0,"UNSIGNED");
    GSP004 ();
    if (GLB.EXIT==true)
    {
        return;
    }
    if( (GSDINITEMOK == GLB.ZEROS))
    {
        if( (equals(GSDVLELEMEN,999999.0) == true))
        {
            GSDVLELEMEN = move ("900000", GSDVLELEMEN, 16, 0,"UNSIGNED");
        }
        SDNRLOTECG = add(cDec("1"), GSDVLELEMEN, SDNRLOTECG, 6, 0, "UNSIGNED", "TRUNCATE");
        GSDVLELEMEN = move (SDNRLOTECG, GSDVLELEMEN, 16, 0,"UNSIGNED");
        GSDINSITREG = move("C", GSDINSITREG, 1);
        GSP008 ();
        if (GLB.EXIT==true)
        {
            return;
        }
    }
    SDINCONTAB = move (GLB.ZEROS, SDINCONTAB, 1, 0,"UNSIGNED");
    GSDVLLANCAM = move (SDVLICMDIO, GSDVLLANCAM, 16, 4,"SIGNED");
    GSDDSCOMPHI = move("EST.DB.DIFAL TEXTIL", GSDDSCOMPHI, 18);
    GSDDILANCTO = move (AXDIFINALX, GSDDILANCTO, 8, 0,"UNSIGNED");
    GSDNRFORMCG = move (SDNRLOTECG, GSDNRFORMCG, 6, 0,"UNSIGNED");
    GSDNRLOTECG = move (SDNRLOTECG, GSDNRLOTECG, 6, 0,"UNSIGNED");
    if( (equals(GSDVLLANCAM,GLB.ZEROS) == false))
    {
//: LANÇAMENTO DO VALOR DO CREDITO TEXTIL A CRÉDITO
        GSDCDCTACON = move (SDCDCTCRTE, GSDCDCTACON, 6, 0,"UNSIGNED");
        GSDCDHISTOR = move (SDCDHISTOR, GSDCDHISTOR, 4, 0,"UNSIGNED");
        GSDINSINLAN = move ("2", GSDINSINLAN, 1, 0,"UNSIGNED");
        GSDVLLANCAM = contra(GSDVLLANCAM);
        GSDVLLANCRE = move (GSDVLLANCAM, GSDVLLANCRE, 17, 4,"SIGNED");
        CONTABILIZA ();
        if (GLB.EXIT==true)
        {
            return;
        }
//: LANÇAMENTO DO VALOR DO PROCESSO A DEBITO
        GSDCDCTACON = move (SDCDCTDBTE, GSDCDCTACON, 6, 0,"UNSIGNED");
        GSDCDHISTOR = move (SDCDHISTOR, GSDCDHISTOR, 4, 0,"UNSIGNED");
        GSDINSINLAN = move ("1", GSDINSINLAN, 1, 0,"UNSIGNED");
        GSDVLLANCAM = contra(GSDVLLANCAM);
        GSDVLLANDEB = move (GSDVLLANCAM, GSDVLLANDEB, 17, 4,"SIGNED");
        CONTABILIZA ();
        if (GLB.EXIT==true)
        {
            return;
        }
        SDINCONTAB = move ("1", SDINCONTAB, 1, 0,"UNSIGNED");
    }
    if( (SDINCONTAB != GLB.ZEROS))
    {
        GSDVLLANCAM = move (SDVLICMDIO, GSDVLLANCAM, 16, 4,"SIGNED");
        GSDVLLANCRE = move (GSDVLLANCAM, GSDVLLANCRE, 17, 4,"SIGNED");
        GSDVLLANCAM = contra(GSDVLLANCAM);
        GSDVLLANDEB = move (GSDVLLANCAM, GSDVLLANDEB, 17, 4,"SIGNED");
        GSDCDORILAN = move ("16", GSDCDORILAN, 2, 0,"UNSIGNED");
        GSDTPLANCTO = move (GLB.ZEROS, GSDTPLANCTO, 2, 0,"UNSIGNED");
        CGP010 ();
        if (GLB.EXIT==true)
        {
            return;
        }
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"CREDITO-TEXTIL");
    }
}
private void ENVIA_EMAIL ()
  throws Exception
{   try
    {
    GLB.SECURE = false;
    GLB.STATUS = GS10703_DetermineEvery (GSDNRUSUARI);
    while (GS107_XSEEDEOF == false)
    {   GS10703_DetermineMoveNext();
        if (GS107_XSEEDEOF == true)
        {   break;
        }
        SDDSEMASER = move(GS107_NMEMAILX, SDDSEMASER, 100);
        break;
    }
    GLB.SECURE = false;
    GLB.STATUS = GS10703_DetermineEvery (SDNRUSUNFI);
    while (GS107_XSEEDEOF == false)
    {   GS10703_DetermineMoveNext();
        if (GS107_XSEEDEOF == true)
        {   break;
        }
        break;
    }
    if( (((rTrim(GLB.STATUS)).equals(rTrim(GLB.SPACES))==true) && ((rTrim(GS107_NMEMAILX)).equals(rTrim(GLB.SPACES))==false)))
    {
        SDDSEMAILX = move(GS107_NMEMAILX, SDDSEMAILX, 500);
    }
    else
    {
        SDDSEMAILX = move(SDDSEMASER, SDDSEMAILX, 500);
    }
    SDDSSUBJEC = move("NOTAS FISCAIS SEM DATA DE SAIDA", SDDSSUBJEC, 100);
    SDDSSUBJEC = attachAndSpace("- PERIODO DE", SDDSSUBJEC, 100);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    SDDSSUBJEC = attachAndSpace(GLB.DC_DD_MM_YY, SDDSSUBJEC, 100);
    SDDSSUBJEC = attachAndSpace("A", SDDSSUBJEC, 100);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    SDDSSUBJEC = attachAndSpace(GLB.DC_DD_MM_YY, SDDSSUBJEC, 100);
    MANDA ();
    if (GLB.EXIT==true)
    {
        return;
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"ENVIA-EMAIL");
    }
}
private void ENVIA_EMAIL_ATENDIMENTO ()
  throws Exception
{   try
    {
    SDCDGRUCHA = move ("1", SDCDGRUCHA, 2, 0,"UNSIGNED");
    SDDSEMAILX = move(GLB.SPACES, SDDSEMAILX, 500);
    GLB.SECURE = false;
    GLB.STATUS = DS10301_DetermineGroupFrom (1, false, SDCDGRUCHA, GLB.ZEROS, SDCDGRUCHA, GLB.ZEROS);
    while (DS103_XSEEDEOF == false)
    {
        DS10301_DetermineMoveNext ();
        if (DS103_XSEEDEOF == true)
        {    break;
        }
        GLB.SECURE = false;
        GLB.STATUS = GS10703_DetermineEvery (DS103_NRUSUARI);
        while (GS107_XSEEDEOF == false)
        {   GS10703_DetermineMoveNext();
            if (GS107_XSEEDEOF == true)
            {   break;
            }
            if( ((rTrim(SDDSEMAILX)).equals(rTrim(GLB.SPACES))==false))
            {
                SDDSEMAILX = attach(";", SDDSEMAILX, 500);
            }
            SDDSEMAILX = attach(GS107_NMEMAILX, SDDSEMAILX, 500);
            break;
        }
    }
    SDDSSUBJEC = move("URGENTE - CGR032 - RECOLOCAR NA FILA", SDDSSUBJEC, 100);
    SDDSAUXEMA = move("CGR032 CANCELADO, JA EXISTE", SDDSAUXEMA, 5000);
    SDDSAUXEMA = attachAndSpace("OUTRO EM EXECUÃO", SDDSAUXEMA, 5000);
    SDDSAUXEMA = attach("<BR>", SDDSAUXEMA, 5000);
    SDDSAUXEMA = attach("QUANDO O RELATÓRIO EM EXECUÇÃO", SDDSAUXEMA, 5000);
    SDDSAUXEMA = attachAndSpace("FINALIZAR, FAVOR RECOLOCAR", SDDSAUXEMA, 5000);
    SDDSAUXEMA = attachAndSpace("NA FILA.", SDDSAUXEMA, 5000);
    SDDSAUXEMA = attach("<BR>", SDDSAUXEMA, 5000);
    SDDSAUXEMA = attachAndSpace("SOLCIITAÇÃO: ", SDDSAUXEMA, 5000);
    SDDSAUXEMA = attachAndSpace(format(GSDNRSOLICI,"999999"), SDDSAUXEMA, 5000);
//: ENDERECO IP/USUARIO/SENHA DO SERVIDOR
    GSDCDDOITEM = move("TBPARGER", GSDCDDOITEM, 8);
    GSDCDELEALF = move("DSIPSERV", GSDCDELEALF, 10);
    GSDCDELEALF_GROUP();
    GSP004 ();
    if (GLB.EXIT==true)
    {
        return;
    }
    SDDSIPSERV = move(GSDDSELEMEN, SDDSIPSERV, 30);
    GSDCDELEALF = move("SMTPUSER", GSDCDELEALF, 10);
    GSDCDELEALF_GROUP();
    GSP004 ();
    if (GLB.EXIT==true)
    {
        return;
    }
    SDSMTPUSER = move(GSDDSELEMEN, SDSMTPUSER, 30);
    GSDCDELEALF = move("SMTPPASS", GSDCDELEALF, 10);
    GSDCDELEALF_GROUP();
    GSP004 ();
    if (GLB.EXIT==true)
    {
        return;
    }
    SDSMTPPASS = move(GSDDSELEMEN, SDSMTPPASS, 30);
    if( ((rTrim(SDDSEMAILX)).equals(rTrim(GLB.SPACES))==true))
    {
//: EMAIL DO CPD
        GSDCDELEALF = move("DSEMASER", GSDCDELEALF, 10);
        GSDCDELEALF_GROUP();
        GSP004 ();
        if (GLB.EXIT==true)
        {
            return;
        }
        SDDSEMAILX = move(GSDDSELEMEN, SDDSEMAILX, 500);
    }
    GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
    GSDCDELEALF = move("DSEMAMKT", GSDCDELEALF, 10);
    GSDCDELEALF_GROUP();
    GSP004 ();
    if (GLB.EXIT==true)
    {
        return;
    }
    SDDSEMASER = move(GSDDSELEMEN, SDDSEMASER, 100);
    MANDA ();
    if (GLB.EXIT==true)
    {
        return;
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"ENVIA-EMAIL-ATENDIMENTO");
    }
}
private void EXCLUIR_CG ()
  throws Exception
{   try
    {
    GLB.SECURE = true;
    GLB.STATUS = CG14002_DetermineGroupFrom (7, false, GSDCDEMPRES, SDTPREGIST, AXCDFILIAL, AXAMREFERE, SDCDUFMUNI, SDTPIMPOST, SDCDFISCAL, GLB.ZEROS, GSDCDEMPRES, SDTPREGIST, AXCDFILIAL, AXAMREFERE, SDCDUFMUNI, SDTPIMPOST, SDCDFISCAL, GLB.ZEROS);
    while (CG140_XSEEDEOF == false)
    {
        CG14002_DetermineMoveNext ();
        if (CG140_XSEEDEOF == true)
        {    break;
        }
        GLB.STATUS = CG140_Lock ();
        if( ((((((CG140_TPREGIST != SDTPREGIST) || (CG140_CDEMPRES != GSDCDEMPRES)) || (CG140_CDFILIAL != AXCDFILIAL)) || (CG140_AMMOVTOX != AXAMREFERE)) || ((rTrim(CG140_CDUFMUNI)).equals(rTrim(SDCDUFMUNI))==false)) || (CG140_CDFISCAL != SDCDFISCAL)))
        {
            break;
        }
        CG140_Delete();
    }
//:: Begin Insertable GlbLogic GSISLP
//  :---------------------------------------------------------------------
//  : OBJETIVO: FAZER SLEEPS EM REPORTS
//  : ---------
//  : PARAMETROS RECEBIDOS
//  : --------------------
//  : GSDNRSLEEPS ED N LE 06 : OPCIONAL. QUANTIDADE DE TRANSACOES A CADA
//  :                          SLEEP. SE NAO FOR INFORMADO, SERA ASSUMIDO
//  :                          100 TRANSACOES
//  : PARAMETROS DEVOLVIDOS
//  : ---------------------
//  : NENHUM
//  :---------------------------------------------------------------------
    GSDNRCONSLP = add(cDec("1"), GSDNRCONSLP, 6, 0, "UNSIGNED", "TRUNCATE");
    if( (GSDNRCONSLP > GSDNRSLEEPS))
    {
        GSDNRCONSLP = move (GLB.ZEROS, GSDNRCONSLP, 6, 0,"UNSIGNED");
        CommitTransaction();
    }
//:: End Insertable GlbLogic GSISLP
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"EXCLUIR-CG");
    }
}
private void EXTENSO ()
  throws Exception
{   try
    {
//:------------------------------------------------------------
//: ROTINA PARA ESCREVER O VALOR POR EXTENSO
//:------------------------------------------------------------
//: CAMPOS DE ENTRADA
//: GSDVLPARAME  ED; N LE; 14 DE; 2
//: GSDINREAISX  ED; A LE; 1    => N - NAO IMPRIME REAIS
//:                             => S - IMPRIME REAIS
//: GSDINASTERI  ED; A LE; 1    => N - NAO IMPRIME ASTERISCOS
//:                             => S - IMPRIME ASTERISCOS
//:------------------------------------------------------------
//: CAMPOS DE SAIDA
//: GSDDSPARAME  ED; A LE; 200
//:------------------------------------------------------------
//: OBSERVACAO
//: QUANDO GSDINREAISX = N, OS VALORES DECIMAIS SERAO REMOVIDOS
//:------------------------------------------------------------
    EXTENSOSDVLINTEIR = 0;
    FIM_EXTENSO:
    {
        GSDDSPARAME = move(GLB.SPACES, GSDDSPARAME, 200);
        if( (GSDVLPARAME == GLB.ZEROS))
        {
            break FIM_EXTENSO;
        }
        if( ((rTrim(GSDINREAISX)).equals(rTrim("N"))==true))
        {
//    : ELIMINA OS DECIMAIS
            EXTENSOSDVLINTEIR = move (GSDVLPARAME, EXTENSOSDVLINTEIR, 14, 0,"UNSIGNED");
            GSDVLPARAME = move (EXTENSOSDVLINTEIR, GSDVLPARAME, 14, 2,"UNSIGNED");
        }
    Extenso teste = new Extenso(new BigDecimal(GSDVLPARAME), new String(GSDINREAISX));
    GSDDSPARAME = teste.toString();
        if( ((rTrim(GSDINASTERI)).equals(rTrim("N"))==false))
        {
            GSDDSPARAME = attachAndSpace("**************************************************", GSDDSPARAME, 200);
            GSDDSPARAME = attach("**************************************************", GSDDSPARAME, 200);
            GSDDSPARAME = attach("**************************************************", GSDDSPARAME, 200);
            GSDDSPARAME = attach("**************************************************", GSDDSPARAME, 200);
        }
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"EXTENSO");
    }
}
private void GSP004 ()
  throws Exception
{   try
    {
//:-------------------------------------------------------------------
//: FUNCAO: PESQUISA ELEMENTOS DOS ITENS DE DADOS CODIFICADOS
//: ------------------------------------------------------------------
//: PARAMETROS RECEBIDOS:
//: ====================
//: GSDCDDOITEM ED A LE 08 : OBRIGATORIO. CONTEM O CODIGO DO ITEM
//: GSDINITEMOK ED N LE 01 : OPCIONAL. SE FOR INFORMADO 2, A LEITURA
//:                          SERA FEITA COM SECURE, SENAO SERA SIMPLES.
//: GSDINLEIDIR ED N LE 01 : OBRIGATORIO. SE = 0, IRA PROCURAR O ITEM NO
//:                          GS125 / GS130 / ITEM DEPENDENTE;
//:                          SE = 1, IRA LER GS125 C/EMPRESA = GSDCDEMPRES
//:                          SE = 2, IRA LER GS125 C/EMPRESA = 0
//:                          SE = 3, IRA LER GS130 C/EMPRESA = GSDCDEMPRES
//:                          SE = 4, IRA LER GS130 C/EMPRESA = 0
//: -----------------------------------------------------------------
//: PARA ITENS CODIFICADOS COM TPCODIFI = SIM
//: =========================================
//: GSDCDELEALF ED A LE 10 : OBRIGATORIO, CONTEM COD. ELEMENTO ALFA.
//: GSDCDELENUM ED N LE 10 : OBRIGATORIO, CONTEM COD. ELEMENTO NUMERICO
//:
//: PARA ITENS CODIFICADOS COM TPCODIFI = S16
//: =========================================
//: GSDCDELEA16 ED A LE 16 : OBRIGATORIO, CONTEM COD. ELEMENTO ALFA.
//: GSDCDELEN16 ED N LE 16 : OBRIGATORIO, CONTEM COD. ELEMENTO NUMERICO
//:
//: PARAMETROS DEVOLVIDOS
//: ---------------------
//: GSDINITEMOK ED N LE 01 : CONTEM  0  QUANDO O ELEMENTO EXISTE E
//:                          CONTEM  1  QUANDO O ELEMENTO NAO EXISTE.
//: GSDDSELEMEN ED N LE 30 : CONTEM A DESCRICAO DO ELEMENTO QUANDO
//:                          ENCONTRADO OU ESPACOS QUANDO NAO EXISTE.
//: GSDVLELEMEN ED N LE 16 : CONTEM O VALOR NUMERICO DO ELEMENTO QUANDO
//:                          ENCONTRADO OU ZEROS QUANDO NAO EXISTE.
//: GSDVLELESIN ED + LE 16 : CONTEM O VALOR COM SINAL DO ELEMENTO QUANDO
//:                          ENCONTRADO OU ZEROS QUANDO NAO EXISTE.
//: OS DEMAIS PARAMETROS RECEBIDOS PERMANECEM INALTERADOS.
//:-------------------------------------------------------------------
    GSP004SDCDITEDEP = fix("",10);
    GSP004SDIN125130 = 0;
    GSP004SDINITEDEP = 0;
    GSP004SDINITEMOK = 0;
    GSDDSELEMEN = move(GLB.SPACES, GSDDSELEMEN, 30);
    GSDVLELEMEN = move (GLB.ZEROS, GSDVLELEMEN, 16, 0,"UNSIGNED");
    GSDVLELESIN = move (GLB.ZEROS, GSDVLELESIN, 16, 0,"SIGNED");
    GSP004SDCDITEDEP = move(GSDCDDOITEM, GSP004SDCDITEDEP, 10);
    GSP004SDINITEMOK = move (GSDINITEMOK, GSP004SDINITEMOK, 1, 0,"UNSIGNED");
    if( ((rTrim(GSDCDDOITEM)).equals(rTrim(GSDCDITEAN4))==true))
    {
        GSDINLEIDIR = move (GSDINLEIANT, GSDINLEIDIR, 1, 0,"UNSIGNED");
        if( ((rTrim(GSDCDDEPANT)).equals(rTrim(GLB.SPACES))==false))
        {
            GSP004SDCDITEDEP = move(GSDCDDEPANT, GSP004SDCDITEDEP, 10);
        }
    }
    GSDCDITEAN4 = move(GSDCDDOITEM, GSDCDITEAN4, 8);
    if (GSDINLEIDIR == GLB.ZEROS)
    {
        GSDINLEIANT = move (GLB.ZEROS, GSDINLEIANT, 1, 0,"UNSIGNED");
        GSDCDDEPANT = move(GLB.SPACES, GSDCDDEPANT, 8);
        while (true)
        {
            PARA_AMBOS_GSP004:
            {
                COM_SECURE_GSP004:
                {
                    if( (GSDINITEMOK == 2.0))
                    {
                        break COM_SECURE_GSP004;
                    }
//        :-------------------    LEITURA SEM SECURE    ------------------
                    GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
                    GLB.SECURE = false;
                    GLB.STATUS = GS12502_DetermineEvery (GSP004SDCDITEDEP, GSDCDEMPRES, GSDCDELEALF);
                    while (GS125_XSEEDEOF == false)
                    {   GS12502_DetermineMoveNext();
                        if (GS125_XSEEDEOF == true)
                        {   break;
                        }
                        GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                        GSDINLEIANT = move ("1", GSDINLEIANT, 1, 0,"UNSIGNED");
                        break PARA_AMBOS_GSP004;
                    }
                    GLB.SECURE = false;
                    GLB.STATUS = GS12502_DetermineEvery (GSP004SDCDITEDEP, GLB.ZEROS, GSDCDELEALF);
                    while (GS125_XSEEDEOF == false)
                    {   GS12502_DetermineMoveNext();
                        if (GS125_XSEEDEOF == true)
                        {   break;
                        }
                        GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                        GSDINLEIANT = move ("2", GSDINLEIANT, 1, 0,"UNSIGNED");
                        break PARA_AMBOS_GSP004;
                    }
                    GLB.SECURE = false;
                    GLB.STATUS = GS13001_DetermineEvery (GSP004SDCDITEDEP, GSDCDEMPRES, GSDCDELEA16);
                    while (GS130_XSEEDEOF == false)
                    {   GS13001_DetermineMoveNext();
                        if (GS130_XSEEDEOF == true)
                        {   break;
                        }
                        GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                        GSDINLEIANT = move ("3", GSDINLEIANT, 1, 0,"UNSIGNED");
                        GSP004SDIN125130 = move ("1", GSP004SDIN125130, 1, 0,"UNSIGNED");
                        break PARA_AMBOS_GSP004;
                    }
                    GLB.SECURE = false;
                    GLB.STATUS = GS13001_DetermineEvery (GSP004SDCDITEDEP, GLB.ZEROS, GSDCDELEA16);
                    while (GS130_XSEEDEOF == false)
                    {   GS13001_DetermineMoveNext();
                        if (GS130_XSEEDEOF == true)
                        {   break;
                        }
                        GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                        GSDINLEIANT = move ("4", GSDINLEIANT, 1, 0,"UNSIGNED");
                        GSP004SDIN125130 = move ("1", GSP004SDIN125130, 1, 0,"UNSIGNED");
                        break PARA_AMBOS_GSP004;
                    }
                    break PARA_AMBOS_GSP004;
//        :-------------------    LEITURA COM SECURE    ------------------
                }
                GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
                GLB.SECURE = true;
                GLB.STATUS = GS12502_DetermineEvery (GSP004SDCDITEDEP, GSDCDEMPRES, GSDCDELEALF);
                while (GS125_XSEEDEOF == false)
                {   GS12502_DetermineMoveNext();
                    if (GS125_XSEEDEOF == true)
                    {   break;
                    }
                                GLB.STATUS = GS125_Lock ();
                    GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                    GSDINLEIANT = move ("1", GSDINLEIANT, 1, 0,"UNSIGNED");
                    break PARA_AMBOS_GSP004;
                }
                GLB.SECURE = true;
                GLB.STATUS = GS12502_DetermineEvery (GSP004SDCDITEDEP, GLB.ZEROS, GSDCDELEALF);
                while (GS125_XSEEDEOF == false)
                {   GS12502_DetermineMoveNext();
                    if (GS125_XSEEDEOF == true)
                    {   break;
                    }
                                GLB.STATUS = GS125_Lock ();
                    GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                    GSDINLEIANT = move ("2", GSDINLEIANT, 1, 0,"UNSIGNED");
                    break PARA_AMBOS_GSP004;
                }
                GLB.SECURE = true;
                GLB.STATUS = GS13001_DetermineEvery (GSP004SDCDITEDEP, GSDCDEMPRES, GSDCDELEA16);
                while (GS130_XSEEDEOF == false)
                {   GS13001_DetermineMoveNext();
                    if (GS130_XSEEDEOF == true)
                    {   break;
                    }
                                GLB.STATUS = GS130_Lock ();
                    GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                    GSDINLEIANT = move ("3", GSDINLEIANT, 1, 0,"UNSIGNED");
                    GSP004SDIN125130 = move ("1", GSP004SDIN125130, 1, 0,"UNSIGNED");
                    break PARA_AMBOS_GSP004;
                }
                GLB.SECURE = true;
                GLB.STATUS = GS13001_DetermineEvery (GSP004SDCDITEDEP, GLB.ZEROS, GSDCDELEA16);
                while (GS130_XSEEDEOF == false)
                {   GS13001_DetermineMoveNext();
                    if (GS130_XSEEDEOF == true)
                    {   break;
                    }
                                GLB.STATUS = GS130_Lock ();
                    GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                    GSDINLEIANT = move ("4", GSDINLEIANT, 1, 0,"UNSIGNED");
                    GSP004SDIN125130 = move ("1", GSP004SDIN125130, 1, 0,"UNSIGNED");
                    break PARA_AMBOS_GSP004;
                }
//        :-------------------        PARA AMBOS        ------------------
            }
            if( (GSDINITEMOK == GLB.ZEROS))
            {
                if( (GSP004SDIN125130 == GLB.ZEROS))
                {
                    GSDDSELEMEN = move(GS125_DSELEMEN, GSDDSELEMEN, 30);
                    GSDVLELEMEN = move (GS125_VLELEMEN, GSDVLELEMEN, 16, 0,"UNSIGNED");
                    GSDVLELESIN = move (GS125_VLELEMEN, GSDVLELESIN, 16, 0,"SIGNED");
                }
                if( (GSP004SDIN125130 != GLB.ZEROS))
                {
                    GSDDSELEMEN = move(GS130_DSELEMEN, GSDDSELEMEN, 30);
                    GSDVLELEMEN = move (GS130_VLELEM16, GSDVLELEMEN, 16, 0,"UNSIGNED");
                    GSDVLELESIN = move (GS130_VLELEM16, GSDVLELESIN, 16, 0,"SIGNED");
                }
                break;
            }
            if( (GSP004SDINITEDEP == 1.0))
            {
                break;
            }
            GSP004SDINITEDEP = move ("1", GSP004SDINITEDEP, 1, 0,"UNSIGNED");
            GLB.SECURE = false;
            GLB.STATUS = GS10601_DetermineEvery (GSDCDDOITEM);
            while (GS106_XSEEDEOF == false)
            {   GS10601_DetermineMoveNext();
                if (GS106_XSEEDEOF == true)
                {   break;
                }
                break;
            }
            if( (((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true) || ((rTrim(GS106_CDITEORI)).equals(rTrim(GLB.SPACES))==true)))
            {
                break;
            }
            GSP004SDCDITEDEP = move(GS106_CDITEORI, GSP004SDCDITEDEP, 10);
            GSDCDDEPANT = move(GS106_CDITEORI, GSDCDDEPANT, 8);
            GSDINITEMOK = move (GSP004SDINITEMOK, GSDINITEMOK, 1, 0,"UNSIGNED");
        }
    }
    else
    if (GSDINLEIDIR == 1.0)
    {
        GSDINLEIANT = move (GSDINLEIDIR, GSDINLEIANT, 1, 0,"UNSIGNED");
        if (GSDINITEMOK == 2.0)
        {
            GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
            GLB.SECURE = true;
            GLB.STATUS = GS12502_DetermineEvery (GSP004SDCDITEDEP, GSDCDEMPRES, GSDCDELEALF);
            while (GS125_XSEEDEOF == false)
            {   GS12502_DetermineMoveNext();
                if (GS125_XSEEDEOF == true)
                {   break;
                }
                        GLB.STATUS = GS125_Lock ();
                GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                GSDDSELEMEN = move(GS125_DSELEMEN, GSDDSELEMEN, 30);
                GSDVLELEMEN = move (GS125_VLELEMEN, GSDVLELEMEN, 16, 0,"UNSIGNED");
                GSDVLELESIN = move (GS125_VLELEMEN, GSDVLELESIN, 16, 0,"SIGNED");
                break;
            }
        }
        else {
            GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
            GLB.SECURE = false;
            GLB.STATUS = GS12502_DetermineEvery (GSP004SDCDITEDEP, GSDCDEMPRES, GSDCDELEALF);
            while (GS125_XSEEDEOF == false)
            {   GS12502_DetermineMoveNext();
                if (GS125_XSEEDEOF == true)
                {   break;
                }
                GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                GSDDSELEMEN = move(GS125_DSELEMEN, GSDDSELEMEN, 30);
                GSDVLELEMEN = move (GS125_VLELEMEN, GSDVLELEMEN, 16, 0,"UNSIGNED");
                GSDVLELESIN = move (GS125_VLELEMEN, GSDVLELESIN, 16, 0,"SIGNED");
                break;
            }
        }
    }
    else
    if (GSDINLEIDIR == 2.0)
    {
        GSDINLEIANT = move (GSDINLEIDIR, GSDINLEIANT, 1, 0,"UNSIGNED");
        if (GSDINITEMOK == 2.0)
        {
            GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
            GLB.SECURE = true;
            GLB.STATUS = GS12502_DetermineEvery (GSP004SDCDITEDEP, GLB.ZEROS, GSDCDELEALF);
            while (GS125_XSEEDEOF == false)
            {   GS12502_DetermineMoveNext();
                if (GS125_XSEEDEOF == true)
                {   break;
                }
                        GLB.STATUS = GS125_Lock ();
                GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                GSDDSELEMEN = move(GS125_DSELEMEN, GSDDSELEMEN, 30);
                GSDVLELEMEN = move (GS125_VLELEMEN, GSDVLELEMEN, 16, 0,"UNSIGNED");
                GSDVLELESIN = move (GS125_VLELEMEN, GSDVLELESIN, 16, 0,"SIGNED");
                break;
            }
        }
        else {
            GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
            GLB.SECURE = false;
            GLB.STATUS = GS12502_DetermineEvery (GSP004SDCDITEDEP, GLB.ZEROS, GSDCDELEALF);
            while (GS125_XSEEDEOF == false)
            {   GS12502_DetermineMoveNext();
                if (GS125_XSEEDEOF == true)
                {   break;
                }
                GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                GSDDSELEMEN = move(GS125_DSELEMEN, GSDDSELEMEN, 30);
                GSDVLELEMEN = move (GS125_VLELEMEN, GSDVLELEMEN, 16, 0,"UNSIGNED");
                GSDVLELESIN = move (GS125_VLELEMEN, GSDVLELESIN, 16, 0,"SIGNED");
                break;
            }
        }
    }
    else
    if (GSDINLEIDIR == 3.0)
    {
        GSDINLEIANT = move (GSDINLEIDIR, GSDINLEIANT, 1, 0,"UNSIGNED");
        if (GSDINITEMOK == 2.0)
        {
            GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
            GLB.SECURE = true;
            GLB.STATUS = GS13001_DetermineEvery (GSP004SDCDITEDEP, GSDCDEMPRES, GSDCDELEA16);
            while (GS130_XSEEDEOF == false)
            {   GS13001_DetermineMoveNext();
                if (GS130_XSEEDEOF == true)
                {   break;
                }
                        GLB.STATUS = GS130_Lock ();
                GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                GSDDSELEMEN = move(GS130_DSELEMEN, GSDDSELEMEN, 30);
                GSDVLELEMEN = move (GS130_VLELEM16, GSDVLELEMEN, 16, 0,"UNSIGNED");
                GSDVLELESIN = move (GS130_VLELEM16, GSDVLELESIN, 16, 0,"SIGNED");
                break;
            }
        }
        else {
            GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
            GLB.SECURE = false;
            GLB.STATUS = GS13001_DetermineEvery (GSP004SDCDITEDEP, GSDCDEMPRES, GSDCDELEA16);
            while (GS130_XSEEDEOF == false)
            {   GS13001_DetermineMoveNext();
                if (GS130_XSEEDEOF == true)
                {   break;
                }
                GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                GSDDSELEMEN = move(GS130_DSELEMEN, GSDDSELEMEN, 30);
                GSDVLELEMEN = move (GS130_VLELEM16, GSDVLELEMEN, 16, 0,"UNSIGNED");
                GSDVLELESIN = move (GS130_VLELEM16, GSDVLELESIN, 16, 0,"SIGNED");
                break;
            }
        }
    }
    else
    if (GSDINLEIDIR == 4.0)
    {
        GSDINLEIANT = move (GSDINLEIDIR, GSDINLEIANT, 1, 0,"UNSIGNED");
        if (GSDINITEMOK == 2.0)
        {
            GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
            GLB.SECURE = true;
            GLB.STATUS = GS13001_DetermineEvery (GSP004SDCDITEDEP, GLB.ZEROS, GSDCDELEA16);
            while (GS130_XSEEDEOF == false)
            {   GS13001_DetermineMoveNext();
                if (GS130_XSEEDEOF == true)
                {   break;
                }
                        GLB.STATUS = GS130_Lock ();
                GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                GSDDSELEMEN = move(GS130_DSELEMEN, GSDDSELEMEN, 30);
                GSDVLELEMEN = move (GS130_VLELEM16, GSDVLELEMEN, 16, 0,"UNSIGNED");
                GSDVLELESIN = move (GS130_VLELEM16, GSDVLELESIN, 16, 0,"SIGNED");
                break;
            }
        }
        else {
            GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
            GLB.SECURE = false;
            GLB.STATUS = GS13001_DetermineEvery (GSP004SDCDITEDEP, GLB.ZEROS, GSDCDELEA16);
            while (GS130_XSEEDEOF == false)
            {   GS13001_DetermineMoveNext();
                if (GS130_XSEEDEOF == true)
                {   break;
                }
                GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                GSDDSELEMEN = move(GS130_DSELEMEN, GSDDSELEMEN, 30);
                GSDVLELEMEN = move (GS130_VLELEM16, GSDVLELEMEN, 16, 0,"UNSIGNED");
                GSDVLELESIN = move (GS130_VLELEM16, GSDVLELESIN, 16, 0,"SIGNED");
                break;
            }
        }
    }
    GSDINLEIDIR = move (GLB.ZEROS, GSDINLEIDIR, 1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"GSP004");
    }
}
private void GSP008 ()
  throws Exception
{   try
    {
//:---------------------------------------------------------------------
//: FUNCAO: CRIACAO/ATUALIZACAO DE ELEMENTOS DE DADOS CODIFICADOS
//: ======
//: PARAMETROS RECEBIDOS
//: --------------------
//: GSDINSITREG ED A LE 01 : OBRIGATORIO, CONTEM A ACAO PARA O REGISTRO
//:                          A - INCLUSAO
//:                          C - ALTERACAO
//:                          D - EXCLUSAO
//: GSDCDDOITEM ED A LE 08 : OBRIGATORIO, CONTEM O CODIGO DO ITEM
//: GSDDSELEMEN ED A LE 30 : OBRIGATORIO PARA INCLUSOES,
//:                          OPCIONAL PARA ATUALIZACOES POIS SO SERA
//:                          ATUALIZADO SE GSDINITEMOK = 2.
//: GSDVLELEMEN ED N LE 16 : OBRIGATORIO, CONTEM VLR.DO ELEMENTO SEM SINAL
//:                          SERA GRAVADO DEPENDENDO DO GSDINELESIN
//: GSDVLELESIN ED + LE 16 : OBRIGATORIO, CONTEM VLR.DO ELEMENTO COM SINAL
//:                          SERA GRAVADO DEPENDENDO DO GSDINELESIN
//: GSDINELESIN ED A LE 01 : OBRIGATORIO.
//:                          SE = S, IRA GRAVAR O GSVLELESIN
//:                          SE DIFERENTE DE S, IRA GRAVAR O GSDVLELEMEN
//: GSDINITEMOK ED N LE 01 : OPCIONAL. O CAMPO GSDDSELEMEN SO SERA
//:                          ATUALIZADO SE ESTE VIER COM 2.
//: PARA ITENS COM TPCODIFI = SIM
//: =============================
//: GSDCDELEALF ED A LE 10 : OBRIGATORIO SE ELEMENTO FOR ALFA
//: GSDCDELENUM ED N LE 10 : OBRIGATORIO SE ELEMENTO FOR NUMERICO
//: PARA ITENS COM TPCODIFI = S16
//: =============================
//: GSDCDELEA16 ED A LE 16 : OBRIGATORIO SE ELEMENTO FOR ALFA
//: GSDCDELEN16 ED N LE 16 : OBRIGATORIO SE ELEMENTO FOR NUMERICO
//: PARAMETROS DEVOLVIDOS
//: ---------------------
//: GSDINITEMOK ED N LE 01 : SE O REGISTRO NAO FOR CRIADO, RETORNA 1.
//:
//: OS DEMAIS, RETORNAM COM O MESMO CONTEUDO DE ENTRADA.
//:------------------------------------------------------------------
    FIM_LG_GSP008:
    {
        GSP008SDCDDOITEM = fix("",8);
        GSP008SDCDEMPRES = 0;
        GSP008SDCDITEORI = fix("",8);
        GSP008SDVLELEMEN = bigZeros;
        if( ((((rTrim(GSDINSITREG)).equals(rTrim("A"))==false) && ((rTrim(GSDINSITREG)).equals(rTrim("C"))==false)) && ((rTrim(GSDINSITREG)).equals(rTrim("D"))==false)))
        {
            GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
            break FIM_LG_GSP008;
        }
        if( ((rTrim(GSDCDDOITEM)).equals(rTrim(GSDCDITEAN8))==false))
        {
            GSDTPCODANT = move(GLB.SPACES, GSDTPCODANT, 3);
            GSDCDDEPANT = move(GLB.SPACES, GSDCDDEPANT, 8);
            GSDINEMPANT = move(GLB.SPACES, GSDINEMPANT, 1);
            GSDINCHAANT = move(GLB.SPACES, GSDINCHAANT, 1);
            GLB.SECURE = false;
            GLB.STATUS = GS10601_DetermineEvery (GSDCDDOITEM);
            while (GS106_XSEEDEOF == false)
            {   GS10601_DetermineMoveNext();
                if (GS106_XSEEDEOF == true)
                {   break;
                }
                GSDTPCODANT = move(GS106_TPCODIFI, GSDTPCODANT, 3);
                GSDCDDEPANT = move(GS106_CDITEORI, GSDCDDEPANT, 8);
                GSDINEMPANT = move(GS106_INPOREMP, GSDINEMPANT, 1);
                GSDINCHAANT = move(GS106_INCHAVDS, GSDINCHAANT, 1);
                break;
            }
        }
        GSDCDITEAN8 = move(GSDCDDOITEM, GSDCDITEAN8, 8);
        GSP008SDCDITEORI = move(GSDCDDOITEM, GSP008SDCDITEORI, 8);
        if( ((rTrim(GSDTPCODANT)).equals(rTrim("DEP"))==true))
        {
            GSP008SDCDITEORI = move(GSDCDDEPANT, GSP008SDCDITEORI, 8);
        }
        GSP008SDCDEMPRES = move (GLB.ZEROS, GSP008SDCDEMPRES, 2, 0,"UNSIGNED");
        if( ((rTrim(GSDINEMPANT)).equals(rTrim("S"))==true))
        {
            GSP008SDCDEMPRES = move (GSDCDEMPRES, GSP008SDCDEMPRES, 2, 0,"UNSIGNED");
        }
        if( ((rTrim(GSDINELESIN)).equals(rTrim("S"))==true))
        {
            GSP008SDVLELEMEN = move (GSDVLELESIN, GSP008SDVLELEMEN, 16, 0,"SIGNED");
        }
        else
        {
            GSP008SDVLELEMEN = move (GSDVLELEMEN, GSP008SDVLELEMEN, 16, 0,"SIGNED");
        }
        if( ((rTrim(GSDTPCODANT)).equals(rTrim("S16"))==false))
        {
            ALTERA_GSP008:
            {
                GLB.SECURE = true;
                GLB.STATUS = GS12502_DetermineEvery (GSP008SDCDITEORI, GSP008SDCDEMPRES, GSDCDELEALF);
                while (GS125_XSEEDEOF == false)
                {   GS12502_DetermineMoveNext();
                    if (GS125_XSEEDEOF == true)
                    {   break;
                    }
                                GLB.STATUS = GS125_Lock ();
                    break;
                }
                if( ((rTrim(GSDINSITREG)).equals(rTrim("A"))==true))
                {
                    if( ((rTrim(GLB.STATUS)).equals(rTrim(GLB.SPACES))==true))
                    {
                        break ALTERA_GSP008;
                    }
                    GS125_InitAuto();
                    AU_GS125_CDDOITEM = auto(GSP008SDCDITEORI, AU_GS125_CDDOITEM, 8);
                    AU_GS125_CDELEMTO = auto(GSDCDELEALF, AU_GS125_CDELEMTO, 10);
                    AU_GS125_CDEMPRES = auto (GSP008SDCDEMPRES, AU_GS125_CDEMPRES, 2, 0,"UNSIGNED");
                    AU_GS125_DSELEMEN = auto(GSDDSELEMEN, AU_GS125_DSELEMEN, 30);
                    AU_GS125_INCHAVDS = auto(GSDINCHAANT, AU_GS125_INCHAVDS, 1);
                    AU_GS125_VLELEMEN = auto (GSP008SDVLELEMEN, AU_GS125_VLELEMEN, 16, 0,"SIGNED");
                    if ((GLB.ERROR.trim()).equals("")==true)
                    {
                        GS125_AutoToFile();
                        GS125_Insert ();
                        GS125_InitAuto();
                    }
                    GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                    break FIM_LG_GSP008;
                }
                if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
                {
                    GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
                    break FIM_LG_GSP008;
                }
            }
            if (rTrim(GSDINSITREG).equals(rTrim("D")))
            {
                GS125_Delete();
            }
            else {
                if( (GSDINITEMOK != 2.0))
                {
                    GSDDSELEMEN = move(GS125_DSELEMEN, GSDDSELEMEN, 30);
                }
                GS125_DSELEMEN = flag (GSDDSELEMEN, GS125_DSELEMEN, 30);
                GS125_VLELEMEN = flag (GSP008SDVLELEMEN, GS125_VLELEMEN, 16, 0,"SIGNED");
                GS125_INSITREG = flag (GSDINSITREG, GS125_INSITREG, 1);
                GS125_Modify ();
            }
            GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
            break FIM_LG_GSP008;
        }
        if( ((rTrim(GSDTPCODANT)).equals(rTrim("S16"))==true))
        {
            ALTERACAO:
            {
                GLB.SECURE = true;
                GLB.STATUS = GS13001_DetermineEvery (GSDCDDOITEM, GSP008SDCDEMPRES, GSDCDELEA16);
                while (GS130_XSEEDEOF == false)
                {   GS13001_DetermineMoveNext();
                    if (GS130_XSEEDEOF == true)
                    {   break;
                    }
                                GLB.STATUS = GS130_Lock ();
                    break;
                }
                if( ((rTrim(GSDINSITREG)).equals(rTrim("A"))==true))
                {
                    if( ((rTrim(GLB.STATUS)).equals(rTrim(GLB.SPACES))==true))
                    {
                        break ALTERACAO;
                    }
                    GS130_InitAuto();
                    AU_GS130_CDDOITEM = auto(GSDCDDOITEM, AU_GS130_CDDOITEM, 8);
                    AU_GS130_CDELEM16 = auto(GSDCDELEA16, AU_GS130_CDELEM16, 16);
                    AU_GS130_CDEMPRES = auto (GSP008SDCDEMPRES, AU_GS130_CDEMPRES, 2, 0,"UNSIGNED");
                    AU_GS130_DSELEMEN = auto(GSDDSELEMEN, AU_GS130_DSELEMEN, 30);
                    AU_GS130_VLELEM16 = auto (GSP008SDVLELEMEN, AU_GS130_VLELEM16, 16, 0,"SIGNED");
                    if ((GLB.ERROR.trim()).equals("")==true)
                    {
                        GS130_AutoToFile();
                        GS130_Insert ();
                        GS130_InitAuto();
                    }
                    GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
                    break FIM_LG_GSP008;
                }
                if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
                {
                    GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
                    break FIM_LG_GSP008;
                }
            }
            if (rTrim(GSDINSITREG).equals(rTrim("D")))
            {
                GS130_Delete();
            }
            else {
                if( (GSDINITEMOK != 2.0))
                {
                    GSDDSELEMEN = move(GS130_DSELEMEN, GSDDSELEMEN, 30);
                }
                GS130_DSELEMEN = flag (GSDDSELEMEN, GS130_DSELEMEN, 30);
                GS130_VLELEM16 = flag (GSP008SDVLELEMEN, GS130_VLELEM16, 16, 0,"SIGNED");
                GS130_INSITREG = flag (GSDINSITREG, GS130_INSITREG, 1);
                GS130_Modify ();
            }
            GSDINITEMOK = move (GLB.ZEROS, GSDINITEMOK, 1, 0,"UNSIGNED");
            break FIM_LG_GSP008;
        }
        GSDINITEMOK = move ("1", GSDINITEMOK, 1, 0,"UNSIGNED");
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"GSP008");
    }
}
private void GSP017 ()
  throws Exception
{   try
    {
//:-------------------------------------------------------------------
//: FUNCAO: CALCULO DE DATAS
//: ------------------------------------------------------------------
//: PARAMETROS RECEBIDOS:
//: ====================
//: GSDTPCALDAT ED N LE 01 : OBRIGATORIO.
//:                          1 - DEVOLVE O ULTIMO DIA DO MES
//:                          2 - DEVOLVE O PRIMEIRO DIA DO MES SEGUINTE
//:                          3 - DEVOLVE O MES CONFORME A QUANTIDADE
//:                          4 - DEVOLVE O PROXIMO MES
//:                          5 - DEVOLVE O MES ANTERIOR
//:                          6 - DEVOLVE A DIFERENCA EM MESES
//: SE GSDTPCALDAT = 1 OU 2:
//:    GSDDIREFSEC ED N LE 08 : OBRIGATORIO
//:
//: SE GSDTPCALDAT = 3:
//:    GSDAMREFSEC ED N LE 06 : OBRIGATORIO
//:    GSDQTMESESX ED N LE 02 : OBRIGATORIO
//:    GSDINADDSUB ED A LE 01 : OBRIGATORIO
//:                               + SOMA GSDQTMESESX AO MES INFORMADO
//:                               - SUBTRAI GSDQTMESESX AO MES INFORMADO
//: SE GSDTPCALDAT = 4, 5 OU 6:
//:    GSDAMREFSEC ED N LE 06 : OBRIGATORIO
//:
//: SE GSDTPCALDAT = 6:
//:    GSDAMREFFIN ED N LE 06 : OBRIGATORIO
//:
//: PARAMETROS DEVOLVIDOS
//: ---------------------
//: GSDDIREFSEC ED N LE 08 : DATA CONVERTIDA SE GSDTPCALDAT FOR 1 OU 2
//: GSDAMREFSEC ED N LE 06 : MES/ANO CONVERTIDO SE GSDTPCALDAT FOR 3
//: GSDQTMESDIF ED N LE 04 : DIFERENCA ENTRE MESES - GSDTPCALDAT = 6
//:-------------------------------------------------------------------
    GSP017SDQTMESESX = 0;
    GSP017SDAAFINALX = 0;
    GSP017SDAAINICIO = 0;
    FIM_GSP017:
    {
        if (GSDTPCALDAT == 1.0)
        {
            GSDDIDISAMD = move (format(GSDDIREFSEC ,"99999999"), GSDDIDISAMD,8);
            GSDDIDISAMD_GROUP();
            GSDDIDDSAMD = move ("1", GSDDIDDSAMD, 2, 0,"UNSIGNED");
            GSDDIDDSAMD_ITEM();
            GSDDIMMSAMD = add(cDec("1"), GSDDIMMSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
            GSDDIMMSAMD_ITEM();
            if( (GSDDIMMSAMD == 13.0))
            {
                GSDDIMMSAMD = move ("1", GSDDIMMSAMD, 2, 0,"UNSIGNED");
                GSDDIMMSAMD_ITEM();
                GSDDIAASAMD = add(cDec("1"), GSDDIAASAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                GSDDIAASAMD_ITEM();
                if( (GSDDIAASAMD == GLB.ZEROS))
                {
                    GSDDISSSAMD = add(cDec("1"), GSDDISSSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                    GSDDISSSAMD_ITEM();
                }
            }
            GLB.DC_AUX = GSDDIDISAMD;
            DCConvert (GLB.DC_AUX, "-", 1.0, "CCYYMMDD");
            GSDDIREFSEC = move (GLB.DC_CCYYMMDD, GSDDIREFSEC, 8, 0,"UNSIGNED");
        }
        else
        if (GSDTPCALDAT == 2.0)
        {
            GSDDIDISAMD = move (format(GSDDIREFSEC ,"99999999"), GSDDIDISAMD,8);
            GSDDIDISAMD_GROUP();
            GSDDIDDSAMD = move ("1", GSDDIDDSAMD, 2, 0,"UNSIGNED");
            GSDDIDDSAMD_ITEM();
            GSDDIMMSAMD = add(cDec("1"), GSDDIMMSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
            GSDDIMMSAMD_ITEM();
            if( (GSDDIMMSAMD == 13.0))
            {
                GSDDIMMSAMD = move ("1", GSDDIMMSAMD, 2, 0,"UNSIGNED");
                GSDDIMMSAMD_ITEM();
                GSDDIAASAMD = add(cDec("1"), GSDDIAASAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                GSDDIAASAMD_ITEM();
                if( (GSDDIAASAMD == GLB.ZEROS))
                {
                    GSDDISSSAMD = add(cDec("1"), GSDDISSSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                    GSDDISSSAMD_ITEM();
                }
            }
            GSDDIREFSEC = move (GSDDIDISAMD, GSDDIREFSEC, 8, 0,"UNSIGNED");
        }
        else
        if (GSDTPCALDAT == 3.0)
        {
            if( (GSDQTMESESX == GLB.ZEROS))
            {
                break FIM_GSP017;
            }
            if( (((rTrim(GSDINADDSUB)).equals(rTrim("+"))==false) && ((rTrim(GSDINADDSUB)).equals(rTrim("-"))==false)))
            {
                break FIM_GSP017;
            }
            GSP017SDQTMESESX = move (GLB.ZEROS, GSP017SDQTMESESX, 3, 0,"UNSIGNED");
            while (true)
            {
                GSP017SDQTMESESX = add(cDec("1"), GSP017SDQTMESESX, 3, 0, "UNSIGNED", "TRUNCATE");
                if( (GSP017SDQTMESESX > GSDQTMESESX))
                {
                    break;
                }
                if( ((rTrim(GSDINADDSUB)).equals(rTrim("+"))==true))
                {
                    GSDDIAMSAMD = move (format(GSDAMREFSEC ,"999999"), GSDDIAMSAMD,6);
                    GSDDIAMSAMD_ITEM();
                    GSDDIAMSAMD_GROUP();
                    GSDDIMMSAMD = add(cDec("1"), GSDDIMMSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                    GSDDIMMSAMD_ITEM();
                    if( (GSDDIMMSAMD == 13.0))
                    {
                        GSDDIMMSAMD = move ("1", GSDDIMMSAMD, 2, 0,"UNSIGNED");
                        GSDDIMMSAMD_ITEM();
                        GSDDIAASAMD = add(cDec("1"), GSDDIAASAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                        GSDDIAASAMD_ITEM();
                        if( (GSDDIAASAMD == GLB.ZEROS))
                        {
                            GSDDISSSAMD = add(cDec("1"), GSDDISSSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                            GSDDISSSAMD_ITEM();
                        }
                    }
                    GSDAMREFSEC = move (GSDDIAMSAMD, GSDAMREFSEC, 6, 0,"UNSIGNED");
                }
                else
                {
                    GSDDIAMSAMD = move (format(GSDAMREFSEC ,"999999"), GSDDIAMSAMD,6);
                    GSDDIAMSAMD_ITEM();
                    GSDDIAMSAMD_GROUP();
                    GSDDIDDSAMD = move ("1", GSDDIDDSAMD, 2, 0,"UNSIGNED");
                    GSDDIDDSAMD_ITEM();
                    GLB.DC_AUX = GSDDIDISAMD;
                    DCConvert (GLB.DC_AUX, "-", 1.0, "CCYYMMDD");
                    GSDDIDISAMD = move (format(GLB.DC_CCYYMMDD ,"99999999"), GSDDIDISAMD,8);
                    GSDDIDISAMD_GROUP();
                    GSDAMREFSEC = move (GSDDIAMSAMD, GSDAMREFSEC, 6, 0,"UNSIGNED");
                }
            }
        }
        else
        if (GSDTPCALDAT == 4.0)
        {
            GSDDIAMSAMD = move (format(GSDAMREFSEC ,"999999"), GSDDIAMSAMD,6);
            GSDDIAMSAMD_ITEM();
            GSDDIAMSAMD_GROUP();
            GSDDIMMSAMD = add(cDec("1"), GSDDIMMSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
            GSDDIMMSAMD_ITEM();
            if( (GSDDIMMSAMD == 13.0))
            {
                GSDDIMMSAMD = move ("1", GSDDIMMSAMD, 2, 0,"UNSIGNED");
                GSDDIMMSAMD_ITEM();
                GSDDIAASAMD = add(cDec("1"), GSDDIAASAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                GSDDIAASAMD_ITEM();
                if( (GSDDIAASAMD == GLB.ZEROS))
                {
                    GSDDISSSAMD = add(cDec("1"), GSDDISSSAMD, 2, 0, "UNSIGNED", "TRUNCATE");
                    GSDDISSSAMD_ITEM();
                }
            }
            GSDAMREFSEC = move (GSDDIAMSAMD, GSDAMREFSEC, 6, 0,"UNSIGNED");
        }
        else
        if (GSDTPCALDAT == 5.0)
        {
            GSDDIAMSAMD = move (format(GSDAMREFSEC ,"999999"), GSDDIAMSAMD,6);
            GSDDIAMSAMD_ITEM();
            GSDDIAMSAMD_GROUP();
            GSDDIDDSAMD = move ("1", GSDDIDDSAMD, 2, 0,"UNSIGNED");
            GSDDIDDSAMD_ITEM();
            GSDDIREFSEC = move (GSDDIDISAMD, GSDDIREFSEC, 8, 0,"UNSIGNED");
            GLB.DC_AUX = formatDC(GSDDIREFSEC, "99999999");
            DCConvert (GLB.DC_AUX, "-", 1.0, "CCYYMMDD");
            GSDDIDISAMD = move (format(GLB.DC_CCYYMMDD ,"99999999"), GSDDIDISAMD,8);
            GSDDIDISAMD_GROUP();
            GSDAMREFSEC = move (GSDDIAMSAMD, GSDAMREFSEC, 6, 0,"UNSIGNED");
        }
        else
        if (GSDTPCALDAT == 6.0)
        {
            GSDDIAMSAMD = move (format(GSDAMREFSEC ,"999999"), GSDDIAMSAMD,6);
            GSDDIAMSAMD_ITEM();
            GSDDIAMSAMD_GROUP();
            GSP017SDAAINICIO = move (GSDDISASAMD, GSP017SDAAINICIO, 4, 0,"UNSIGNED");
            GSDDIAMSAMD = move (format(GSDAMREFFIN ,"999999"), GSDDIAMSAMD,6);
            GSDDIAMSAMD_ITEM();
            GSDDIAMSAMD_GROUP();
            GSP017SDAAFINALX = move (GSDDISASAMD, GSP017SDAAFINALX, 4, 0,"UNSIGNED");
            GSP017SDAAFINALX = subtract(GSP017SDAAINICIO, GSP017SDAAFINALX, 4, 0,"UNSIGNED","TRUNCATE");
            GSDQTMESDIF = subtract(GSDAMREFSEC, GSDAMREFFIN, GSDQTMESDIF, 4, 0,"UNSIGNED","TRUNCATE");
            if( (GSP017SDAAFINALX > GLB.ZEROS))
            {
                GSP017SDAAFINALX = multiply(cDec("88"), GSP017SDAAFINALX, 4, 0,"UNSIGNED","TRUNCATE");
                GSDQTMESDIF = subtract(GSP017SDAAFINALX, GSDQTMESDIF, 4, 0,"UNSIGNED","TRUNCATE");
            }
        }
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"GSP017");
    }
}
private void GSP028 ()
  throws Exception
{   try
    {
    GSDNRECORDS = move (GLB.ZEROS, GSDNRECORDS, 6, 0,"UNSIGNED");
    {
        try
        {
            if (XSEED_CMD != null) {
                XSEED_CMD.close();
                XSEED_CMD = null;
            }
            XSEED_CMD = GLB.CONNECTION.createStatement();
            GSDNRECORDS = XSEED_CMD.executeUpdate(GSDDSCOMAND);
            XSEED_CMD.close();
            XSEED_CMD = null;
        }
        catch(Exception exception)
        {
            ShowErrorMsg(exception, "sqlExecUpdate");
            GSDNRECORDS = 0;
        }
    }
//::LAN; JAVA
//::    {
//::        try
//::        {
//::            Connection GSP028_CON;
//::            Statement GSP028_CMD = null;
//::            GSP028_CON = GLB.CONNECTION;
//::            if (GSP028_CMD==null) {
//::                GSP028_CMD = GSP028_CON.createStatement();
//::            }
//::            GSDNRECORDS = GSP028_CMD.executeUpdate(GSDDSCOMAND);
//::            GSP028_CMD.close();
//::        }
//::        catch(Exception exception)
//::        {
//::            ShowErrorMsg(exception, "sqlExecUpdate");
//::            GSDNRECORDS = 0;
//::        }
//::    }
//::LAN; LDL
//::
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"GSP028");
    }
}
private void GSP035 ()
  throws Exception
{   try
    {
//:--------------------------------------------------------------------:
//:  GSP035 - ASSINATURA DE E-MAIL                                     :
//:                                                                    :
//:  CAMPOS DE ENTRADA                                                 :
//:    GSDCDATVEMA - OPCIONAL - CODIGO DA ATIVIDADE PARA BUSCA DA      :
//:                             ASSINATURA                             :
//:                                                                    :
//:  CAMPOS DE SAIDA                                                   :
//:    GSDDSASSINA - ASSINATURA                                        :
//:--------------------------------------------------------------------:
    GSP035SDCDATIVID = fix("",6);
    GSP035SDDSCARGOX = fix("",50);
    GSP035SDINSEMARQ = 0;
    GSP035SDNMEMAILX = fix("",50);
    GSP035SDNMUSUARI = fix("",60);
    GSP035SDDSSAUASS = fix("",30);
    GSP035SDNMFUNASS = fix("",45);
    GSP035SDDSDEPASS = fix("",40);
    GSP035SDDSCONASA = fix("",50);
    GSP035SDDSCONASB = fix("",50);
    GSP035SDDSCONASC = fix("",50);
    GSP035SDNRFAXCOM = fix("",13);
    GSDDSASSINA = move(GLB.SPACES, GSDDSASSINA, 50000);
    GSP035SDCDATIVID = move(GSDCDATIVID, GSP035SDCDATIVID, 6);
    if( ((rTrim(GSDCDRELATO)).equals(rTrim(GLB.SPACES))==false))
    {
        GSP035SDCDATIVID = move(GSDCDRELATO, GSP035SDCDATIVID, 6);
    }
    if( ((rTrim(GSDCDATVEMA)).equals(rTrim(GLB.SPACES))==false))
    {
        GSP035SDCDATIVID = move(GSDCDATVEMA, GSP035SDCDATIVID, 6);
        GSDCDATVEMA = move(GLB.SPACES, GSDCDATVEMA, 6);
    }
    GLB.SECURE = false;
    GLB.STATUS = GS10701_DetermineEvery (GSDCDUSUARI);
    while (GS107_XSEEDEOF == false)
    {   GS10701_DetermineMoveNext();
        if (GS107_XSEEDEOF == true)
        {   break;
        }
        GSP035SDNMEMAILX = move(GS107_NMEMAILX, GSP035SDNMEMAILX, 50);
        GSP035SDNMUSUARI = move(GS107_NMUSUARI, GSP035SDNMUSUARI, 60);
        GSP035SDDSCARGOX = move(GS107_DSCARGOX, GSP035SDDSCARGOX, 50);
        GSP035SDDSSAUASS = move(GS107_DSSAUASS, GSP035SDDSSAUASS, 30);
        GSP035SDNMFUNASS = move(GS107_NMFUNASS, GSP035SDNMFUNASS, 45);
        GSP035SDDSDEPASS = move(GS107_DSDEPASS, GSP035SDDSDEPASS, 40);
        GSP035SDDSCONASA = move(GS107_DSCONASA, GSP035SDDSCONASA, 50);
        GSP035SDDSCONASB = move(GS107_DSCONASB, GSP035SDDSCONASB, 50);
        GSP035SDDSCONASC = move(GS107_DSCONASC, GSP035SDDSCONASC, 50);
        GSP035SDNRFAXCOM = move(GS107_NRFAXCOM, GSP035SDNRFAXCOM, 13);
        break;
    }
    XseedFile GSP035EXA = new XseedFile();
    int GSP035INASSIAD = 0;
    SingeArq GSP035FT = new SingeArq();
    String GSP035SDNMARQUIV = "";
    String GSP035SDDSREGIST = "";

    // Diretório da assinatura no AD.
    // Segundo Henrique - 25/05/2018 - Só vai deixar de existir o arquivo neste local se a Lince deixar de existir. (AD último server a ser desligado e primeiro a ser ligado)
    String GSP035SDDSDASSAD = "\\\\nt-lince.server\\NETLOGON\\Assinaturas";

    // procura nessa ordem:
    //    empresa \ atividade
    //    empresa
    //    99
    switch ((int)GSDCDEMPRES) {
        case 1:
            GSP035SDDSDASSAD += "\\Circulo.html";
            if (GSP035SDDSCONASA.trim().equals("") == true) {
                GSP035SDDSCONASA = "47 3331-9500";
            }
            if (GSP035SDNRFAXCOM.trim().equals("") == true) {
                GSP035SDNRFAXCOM = "47 3331-9600";
            }
            break;
        case 2:
            GSP035SDDSDASSAD += "\\Plasvale.html";
            if (GSP035SDDSCONASA.trim().equals("") == true) {
                GSP035SDDSCONASA = "47 3331-6000";
            }
            if (GSP035SDNRFAXCOM.trim().equals("") == true) {
                GSP035SDNRFAXCOM = "47 3331-6077";
            }
            break;
        case 43:
            GSP035SDDSDASSAD += "\\Guepardo.html";
            if (GSP035SDDSCONASA.trim().equals("") == true) {
                GSP035SDDSCONASA = "47 3363-3571";
            }
            if (GSP035SDNRFAXCOM.trim().equals("") == true) {
                GSP035SDNRFAXCOM = "47 3360-6735";
            }
            break;
        default:
            GSP035SDDSDASSAD += "\\Lince.html";
            if (GSP035SDDSCONASA.trim().equals("") == true) {
                GSP035SDDSCONASA = "47 3331-9700";
            }
            if (GSP035SDNRFAXCOM.trim().equals("") == true) {
                GSP035SDNRFAXCOM = "47 3331-9747";
            }
            break;
    }
    GSP035SDNMARQUIV = GLB.EXTRACTSDIR + "\\Assinatura\\" + (int)GSDCDEMPRES + "\\" + GSP035SDCDATIVID + "\\assinatura.html";
    if (GSP035FT.existeArq(GSP035SDNMARQUIV).substring(0,5).equals("*****") == true) {
        GSP035INASSIAD = 1;
        GSP035SDNMARQUIV = GSP035SDDSDASSAD;
        if (GSP035FT.existeArq(GSP035SDNMARQUIV).substring(0,5).equals("*****") == true) {
            GSP035INASSIAD = 0;
            GSP035SDNMARQUIV = GLB.EXTRACTSDIR + "\\Assinatura\\" + (int)GSDCDEMPRES + "\\assinatura.html";
            if (GSP035FT.existeArq(GSP035SDNMARQUIV).substring(0,5).equals("*****") == true) {
                GSP035SDNMARQUIV = GLB.EXTRACTSDIR + "\\Assinatura\\99\\assinatura.html";
                if (GSP035FT.existeArq(GSP035SDNMARQUIV).substring(0,5).equals("*****") == true) {
                    GSP035SDINSEMARQ = 1;
                }
            }
        }
    }
    if (GSP035SDINSEMARQ == 0) {
        GSP035EXA.open(GSP035SDNMARQUIV,"INPUT");
        if (GSP035EXA.openStatus.equals("")==true) {
            while (true) {
                GSP035SDDSREGIST = GSP035EXA.read();
                if (GSP035SDDSREGIST == null) {
                    break;
                }
                if (GSP035INASSIAD == 0) {
                    GSP035SDDSREGIST = GSP035SDDSREGIST.replaceAll("Email:", GSP035SDNMEMAILX);
                    GSP035SDDSREGIST = GSP035SDDSREGIST.replaceAll("Nome:", GSP035SDNMUSUARI);
                    GSP035SDDSREGIST = GSP035SDDSREGIST.replaceAll("Cargo:", GSP035SDDSCARGOX);
                } else {
                    GSP035SDDSREGIST = GSP035SDDSREGIST.replaceAll("%%title%%", GSP035SDDSSAUASS);
                    GSP035SDDSREGIST = GSP035SDDSREGIST.replaceAll("%%DisplayName%%", GSP035SDNMFUNASS);
                    GSP035SDDSREGIST = GSP035SDDSREGIST.replaceAll("%%department%%", GSP035SDDSDEPASS);
                    GSP035SDDSREGIST = GSP035SDDSREGIST.replaceAll("%%PhoneNumber%%", GSP035SDDSCONASA);
                    GSP035SDDSREGIST = GSP035SDDSREGIST.replaceAll("%%MobileNumber%%", GSP035SDDSCONASB);
                    GSP035SDDSREGIST = GSP035SDDSREGIST.replaceAll("%%FaxNumber%%", GSP035SDNRFAXCOM);
                    GSP035SDDSREGIST = GSP035SDDSREGIST.replaceAll("%%pager%%", GSP035SDDSCONASC);
                    GSP035SDDSREGIST = GSP035SDDSREGIST.replaceAll("%%Email%%", GSP035SDNMEMAILX);
                }
                GSDDSASSINA += GSP035SDDSREGIST;
            }
        }
        GSP035EXA.close();
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"GSP035");
    }
}
private void GSP103 ()
  throws Exception
{   try
    {
//:-----------------------------------------------------------------------
//: GSP103 - VALIDACAO DE CEPS - TESTE
//:
//: ESTA LOGICA EH UTILIZADA PARA VALIDAR O CEP INFORMADO E POSICIONAR
//: O REGISTRO CORRETO NO GS103
//:
//: O DT FEITO NO GS103 EH SOMENTE PARA DISPONIBILIZAR OS CAMPOS DO
//: GS103 PARA SEREM CARREGADOS.
//:
//: A LEITURA DO CEP NO GS103 EH FEITO COM SQL EXECUTE.
//: A CARGA DOS CAMPOS EH FEITA COM SQL.GETFIELD, SENDO ASSIM SEMPRE QUE
//: O GS103 FOR REORGANIZADO DEVE-SE ATUALIZAR ESTA LOGICA GLOBAL.
//:
//: PARAMETROS DE ENTRADA:
//: GSD; GSDCDPAISGL        ED; N LE; 5 - CODIGO DO PAIS
//: GSD; GSDNRCLOCGL        ED; N LE; 5 - CEP LOCAL
//: GSD; GSDNRCCOMGL        ED; N LE; 3 - CEP COMPLEMENTO
//:
//: PARAMETRO DE SAIDA
//: GSD; GSDINTEMCEP        ED; N LE; 1 - INDICADOR SEM CEP FOI ENCONTRADO
//:                                       0 - SIM
//:                                       1 - NAO
//:-----------------------------------------------------------------------
    GSDINTEMCEP = move ("1", GSDINTEMCEP, 1, 0,"UNSIGNED");
    GSDDSFECPAR = ")";
GSDDSFECPAR = fix(GSDDSFECPAR,1);
    if( (GSDCDEMPRES > 99.0))
    {
        GLB.SECURE = false;
        GLB.STATUS = GS103_LookupEvery();
        while (GS103_XSEEDEOF == false)
        {   GS103_LookupMoveNext();
            if (GS103_XSEEDEOF == true)
            {   break;
            }
            break;
        }
    }
    GSDDSCOMAND = move("select /*GSP103*/top 1 * from gs103(nolock", GSDDSCOMAND, 10000);
    GSDDSCOMAND = attach(GSDDSFECPAR, GSDDSCOMAND, 10000);
    GSDDSCOMAND = attachAndSpace("where cddopais=", GSDDSCOMAND, 10000);
    GSDDSCOMAND = attach(format(GSDCDPAISGL,"999"), GSDDSCOMAND, 10000);
    GSDDSCOMAND = attachAndSpace("and nrceploc=", GSDDSCOMAND, 10000);
    GSDDSCOMAND = attach(format(GSDNRCLOCGL,"99999"), GSDDSCOMAND, 10000);
    GSDDSCOMAND = attachAndSpace("and nrcepcom = case when nrcepcom>0 then", GSDDSCOMAND, 10000);
    GSDDSCOMAND = attachAndSpace(format(GSDNRCCOMGL,"999"), GSDDSCOMAND, 10000);
    GSDDSCOMAND = attachAndSpace("else 0 end order by cddopais, nrceploc, nrcepcom desc", GSDDSCOMAND, 10000);
ResultSet rs_gsp103 = Funcoes.fazConsulta (GLB.CONNECTION,GSDDSCOMAND);
if (rs_gsp103.next() == true) {
   GS103_CDDOPAIS = rs_gsp103.getDouble("cddopais");
   GS103_CDUFMUNI = rs_gsp103.getString("cdufmuni");
   GS103_INSITREG = rs_gsp103.getString("insitreg");
   GS103_NMLOCALI = rs_gsp103.getString("nmlocali");
   GS103_NMMUNICI = rs_gsp103.getString("nmmunici");
   GS103_NRCEPBAS = rs_gsp103.getDouble("nrcepbas");
   GS103_NRCEPLOC = rs_gsp103.getDouble("nrceploc");
   GS103_NRCEPCOM = rs_gsp103.getDouble("nrcepcom");
   GS103_NRCEPMUN = rs_gsp103.getDouble("nrcepmun");
   GS103_TPLOCALI = rs_gsp103.getString("tplocali");
   GS103_CDMUNIBG = rs_gsp103.getDouble("cdmunibg");
   GSDINTEMCEP = 0;
}
rs_gsp103.close();
//:SQL.EXECUTE; GSDDSCOMAND
//:SQL.MOVEFIRST;
//:DW; GLB.STATUS = GLB.SPACES
//:    MV; GLB.ZEROS                                                 GSDINTEMCEP
//:    SQL.GETFIELD; (CDDOPAIS)                                      GS103.CDDOPAIS
//:    SQL.GETFIELD; (CDUFMUNI)                                      GS103.CDUFMUNI
//:    SQL.GETFIELD; (INSITREG)                                      GS103.INSITREG
//:    SQL.GETFIELD; (NMLOCALI)                                      GS103.NMLOCALI
//:    SQL.GETFIELD; (NMMUNICI)                                      GS103.NMMUNICI
//:    SQL.GETFIELD; (NRCEPBAS)                                      GS103.NRCEPBAS
//:    SQL.GETFIELD; (NRCEPCOM)                                      GS103.NRCEPCOM
//:    SQL.GETFIELD; (NRCEPLOC)                                      GS103.NRCEPLOC
//:    SQL.GETFIELD; (NRCEPMUN)                                      GS103.NRCEPMUN
//:    SQL.GETFIELD; (TPLOCALI)                                      GS103.TPLOCALI
//:END;
//:
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"GSP103");
    }
}
private void LEITURA_AV120 ()
  throws Exception
{   try
    {
    QAV12006_SelectEvery (GSDCDEMPRES, AV119_CDFILIAL, AV119_CDMODENF, AV119_TPREGIST, AV119_NRNOTAFI);
    while(QAV12006_XSEEDEOF == false)
    {   QAV12006_MoveNext();
        if (QAV12006_XSEEDEOF == true)
        {    break;
        }
        if( (AV120_INBRIDNF > GLB.ZEROS))
        {
//: se tiver brinde no valor da nota soma o desconto como líquido e bruto
            AV120_VLLIQUID = add(AV120_VLDESCNT, AV120_VLLIQUID, 14, 2, "UNSIGNED", "TRUNCATE");
            AV120_VLBRUTOP = add(AV120_VLDESCNT, AV120_VLBRUTOP, 14, 2, "UNSIGNED", "TRUNCATE");
            AV120_VLDESCNT = move (GLB.ZEROS, AV120_VLDESCNT, 14, 2,"UNSIGNED");
        }
        if( (SDCDNATOPE == GLB.ZEROS))
        {
            SDCDNATOPE = move (AV120_CDNATOPE, SDCDNATOPE, 4, 0,"UNSIGNED");
            SDCDNATCOM = move (AV120_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
            SDCDOCONAT = move (AV120_CDOCONAT, SDCDOCONAT, 2, 0,"UNSIGNED");
        }
        if( (((GSDCDEMPRES == 43.0) && (AV119_NRNOTAFI == 9117.0)) && (AV119_DIEMINOT == 20111213.0)))
        {
            AV120_VLLIQUID = move (GLB.ZEROS, AV120_VLLIQUID, 14, 2,"UNSIGNED");
            AV120_PCICMPRO = move (GLB.ZEROS, AV120_PCICMPRO, 4, 2,"UNSIGNED");
            AV120_VLICMPRO = move (GLB.ZEROS, AV120_VLICMPRO, 14, 2,"UNSIGNED");
            AV119_PCICMNOT = move (GLB.ZEROS, AV119_PCICMNOT, 5, 2,"UNSIGNED");
            AV119_VLTOICMN = move (GLB.ZEROS, AV119_VLTOICMN, 14, 2,"UNSIGNED");
        }
        PRIMEIRA_VEZ ();
        if (GLB.EXIT==true)
        {
            return;
        }
        SDINPRIVEZ = move (GLB.ZEROS, SDINPRIVEZ, 1, 0,"UNSIGNED");
        GLB.SECURE = false;
        GLB.STATUS = CG11001_DetermineEvery (GSDCDEMPRES, AV120_CDNATOPE, AV120_CDNATCOM, AV120_CDOCONAT);
        while (CG110_XSEEDEOF == false)
        {   CG11001_DetermineMoveNext();
            if (CG110_XSEEDEOF == true)
            {   break;
            }
            break;
        }
        if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
        {
            CG110_CDTRIICM = move ("3", CG110_CDTRIICM, 1, 0,"UNSIGNED");
            F96_RLCDOCORRE = move (format(AV120_CDNATOPE ,"9999"), F96_RLCDOCORRE,10);
            F96_RLCDOCORRE = attachAndSpace(format(AV120_CDNATCOM,"99"), F96_RLCDOCORRE, 10);
            F96_RLCDOCORRE = attachAndSpace(format(AV120_CDOCONAT,"99"), F96_RLCDOCORRE, 10);
            F96_RLINOCORRE = move (format(AV120_NRNOTAFI ,"999999999"), F96_RLINOCORRE,20);
            F96_RLDSOCORRE = move("NAT.OPERACAO - AV120", F96_RLDSOCORRE, 45);
            F96_RLDSOCORRE = attachAndSpace("NAO CADASTRADA", F96_RLDSOCORRE, 45);
            GLB.SHADOW = "Z";
            P_96("PRINT.FRAME");
        }
        GSDCDDOITEM = move("NRNFICMP", GSDCDDOITEM, 8);
        GENRNFICMP = move (AV119_NRNOTAFI, GENRNFICMP, 9, 0,"UNSIGNED");
        GENRNFICMP_ITEM();
        GECDMODICM = move (AV119_CDMODENF, GECDMODICM, 1, 0,"UNSIGNED");
        GECDMODICM_ITEM();
        GECDFILICM = move (AXCDFILIAL, GECDFILICM, 2, 0,"UNSIGNED");
        GECDFILICM_ITEM();
        GECDZEROSX = move (GLB.ZEROS, GECDZEROSX, 4, 0,"UNSIGNED");
        GECDZEROSX_ITEM();
        GSDCDELEA16 = move(GRNRNFICMP, GSDCDELEA16, 16);
        GSDCDELEA16_GROUP();
        GSP004 ();
        if (GLB.EXIT==true)
        {
            return;
        }
        if( (GSDINITEMOK == GLB.ZEROS))
        {
            SDNRCFICMP = move (GSDVLELEMEN, SDNRCFICMP, 6, 0,"UNSIGNED");
            CG110_CDTRIICM = move ("3", CG110_CDTRIICM, 1, 0,"UNSIGNED");
        }
        if( (((SDINZONAFR == 1.0) && (AV119_CDTIPFAT != 13.0)) && (AV119_CDTIPFAT != 14.0)))
        {
            if( ((SDCDTIPFBO != AV119_CDTIPFAT) || (SDCDTIPFBO == GLB.ZEROS)))
            {
                if( (AV119_DIEMINOT < 20130812.0))
                {
                    CG110_CDTRIICM = move ("2", CG110_CDTRIICM, 1, 0,"UNSIGNED");
                    AV120_VLBRUTOP = subtract(AV120_VLICMPRO, AV120_VLBRUTOP, 14, 2,"UNSIGNED","TRUNCATE");
                    AV120_VLLIQUID = subtract(AV120_VLICMPRO, AV120_VLLIQUID, 14, 2,"UNSIGNED","TRUNCATE");
                }
                if( (AV120_VLICMZFP > GLB.ZEROS))
                {
                    CG110_CDTRIICM = move ("2", CG110_CDTRIICM, 1, 0,"UNSIGNED");
                    AV120_VLBRUTOP = subtract(AV120_VLICMZFP, AV120_VLBRUTOP, 14, 2,"UNSIGNED","TRUNCATE");
                    AV120_VLLIQUID = subtract(AV120_VLICMZFP, AV120_VLLIQUID, 14, 2,"UNSIGNED","TRUNCATE");
                }
            }
        }
        if( (AV120_VLPISCZF > AV120_VLLIQUID))
        {
            AV120_VLBRUTOP = move (GLB.ZEROS, AV120_VLBRUTOP, 14, 2,"UNSIGNED");
            AV120_VLLIQUID = move (GLB.ZEROS, AV120_VLLIQUID, 14, 2,"UNSIGNED");
        }
        else
        {
            AV120_VLBRUTOP = subtract(AV120_VLPISCZF, AV120_VLBRUTOP, 14, 2,"UNSIGNED","TRUNCATE");
            AV120_VLLIQUID = subtract(AV120_VLPISCZF, AV120_VLLIQUID, 14, 2,"UNSIGNED","TRUNCATE");
            if( (SDVLBRUNEG != GLB.ZEROS))
            {
                if( ((AV120_CDNATOPE == SDCDNATCZF) || (SDCDNATCZF == GLB.ZEROS)))
                {
                    SDVLNEGATI = add(SDVLBRUNEG, AV120_VLBRUTOP, SDVLNEGATI, 14, 2, "SIGNED", "TRUNCATE");
                    if( (SDVLNEGATI > GLB.ZEROS))
                    {
                        AV120_VLBRUTOP = add(SDVLBRUNEG, AV120_VLBRUTOP, 14, 2, "UNSIGNED", "TRUNCATE");
                        AV120_VLLIQUID = add(SDVLLIQNEG, AV120_VLLIQUID, 14, 2, "UNSIGNED", "TRUNCATE");
                        SDVLBRUNEG = move (GLB.ZEROS, SDVLBRUNEG, 14, 2,"SIGNED");
                        SDVLLIQNEG = move (GLB.ZEROS, SDVLLIQNEG, 14, 2,"SIGNED");
                    }
                    else
                    {
                        SDVLBRUNEG = subtract(SDVLNEGATI, SDVLBRUNEG, 14, 2,"SIGNED","TRUNCATE");
                        SDVLNEGATI = add(SDVLLIQNEG, AV120_VLLIQUID, SDVLNEGATI, 14, 2, "SIGNED", "TRUNCATE");
                        SDVLLIQNEG = subtract(SDVLNEGATI, SDVLLIQNEG, 14, 2,"SIGNED","TRUNCATE");
                        AV120_VLBRUTOP = move (GLB.ZEROS, AV120_VLBRUTOP, 14, 2,"UNSIGNED");
                        AV120_VLLIQUID = move (GLB.ZEROS, AV120_VLLIQUID, 14, 2,"UNSIGNED");
                    }
                }
            }
        }
        if( ((AV119_CDTIPFAT == 11.0) || (AV119_CDTIPFAT == 66.0)))
        {
            if (SDINPRIICM == GLB.ZEROS)
            {
                AV120_VLICMPRO = move (AV119_VLTOICMN, AV120_VLICMPRO, 14, 2,"UNSIGNED");
                SDINPRIICM = move ("1", SDINPRIICM, 1, 0,"UNSIGNED");
            }
            else {
                AV120_VLICMPRO = move (GLB.ZEROS, AV120_VLICMPRO, 14, 2,"UNSIGNED");
            }
            AV120_VLLIQUID = move (GLB.ZEROS, AV120_VLLIQUID, 14, 2,"UNSIGNED");
            AV120_VLBRUTOP = move (GLB.ZEROS, AV120_VLBRUTOP, 14, 2,"UNSIGNED");
        }
        if( (AV119_CDTIPFAT == 12.0))
        {
            if (SDINPRIICM == GLB.ZEROS)
            {
                AV120_VLIPIPRO = move (AV119_VLIPINOT, AV120_VLIPIPRO, 14, 2,"UNSIGNED");
                AV120_VLLIQUID = move (AV119_VLLIQUID, AV120_VLLIQUID, 14, 2,"UNSIGNED");
                AV120_VLBRUTOP = move (AV119_VLBRUTOP, AV120_VLBRUTOP, 14, 2,"UNSIGNED");
                SDINPRIICM = move ("1", SDINPRIICM, 1, 0,"UNSIGNED");
            }
            else {
                AV120_VLIPIPRO = move (GLB.ZEROS, AV120_VLIPIPRO, 14, 2,"UNSIGNED");
                AV120_VLLIQUID = move (GLB.ZEROS, AV120_VLLIQUID, 14, 2,"UNSIGNED");
                AV120_VLBRUTOP = move (GLB.ZEROS, AV120_VLBRUTOP, 14, 2,"UNSIGNED");
            }
        }
        SDINSVLCON = move (GLB.ZEROS, SDINSVLCON, 1, 0,"UNSIGNED");
        if( (((SDTPNFMANI != GLB.ZEROS) && (AV119_CDTIPFAT == SDTPNFMANI)) && (AV119_TPREGIST == GLB.ZEROS)))
        {
            SDINSVLCON = move ("1", SDINSVLCON, 1, 0,"UNSIGNED");
        }
//:qdo houver reducao base calculo ICMS, a diferenca deve
//:ser considerada como isenta e nao tributavel.
        SDVLBCIINT = move (GLB.ZEROS, SDVLBCIINT, 14, 2,"UNSIGNED");
        if( (((GSDCDEMPRES == 43.0) && (AV119_NRNOTAFI == 9117.0)) && (AV119_DIEMINOT == 20111213.0)))
        {
            SDVLBCIINT = move (AV120_VLBRUTOP, SDVLBCIINT, 14, 2,"UNSIGNED");
        }
        SDINCONFIN = move (GLB.ZEROS, SDINCONFIN, 1, 0,"UNSIGNED");
        if( ((AV119_CDVDCONS == 1.0) || (AV119_CDVDCONS == 2.0)))
        {
            SDINCONFIN = move ("1", SDINCONFIN, 1, 0,"UNSIGNED");
        }
        F10_EXINORIGEM = move (SDINORIGEM, F10_EXINORIGEM, 1, 0,"UNSIGNED");
//: ate janeiro/2001 o sistema considerava consumidor final
//: somente quem era cdvdcons = 1
        if( ((AV119_CDVDCONS == 2.0) && (AV119_DIEMINOT <= 20010131.0)))
        {
            SDINCONFIN = move (GLB.ZEROS, SDINCONFIN, 1, 0,"UNSIGNED");
        }
        F10_EXINCONFIN = move (SDINCONFIN, F10_EXINCONFIN, 1, 0,"UNSIGNED");
        if( (CG110_CDTRIICM == 1.0))
        {
            SDVLAUXILI = move (AV120_VLLIQUID, SDVLAUXILI, 14, 2,"UNSIGNED");
            if( (AV119_INDESPCO == 1.0))
            {
                SDVLAUXILI = add(AV120_VLDESCNT, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
            }
            if( (((SDINCONFIN == 1.0) && (CG110_INCALICM == GLB.ZEROS)) && (CG110_PCICMFIS > GLB.ZEROS)))
            {
                SDVLAUXILI = move (AV120_VLBRUTOP, SDVLAUXILI, 14, 2,"UNSIGNED");
            }
            if( (AV120_INIPIDBC == 1.0))
            {
                SDVLAUXILI = add(AV120_VLIPIDEV, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
            }
            SDVLAUXILI = add(AV120_VLADIBIC, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
            if( (AV120_VLBASRIC != GLB.ZEROS))
            {
                SDVLBCIINT = subtract(AV120_VLBASRIC, AV120_VLLIQUID, SDVLBCIINT, 14, 2,"UNSIGNED","TRUNCATE");
                SDVLAUXILI = move (AV120_VLBASRIC, SDVLAUXILI, 14, 2,"UNSIGNED");
            }
            if( (AV119_INSITNOT == GLB.ZEROS))
            {
                GEVLBASICM = add(SDVLAUXILI, GEVLBASICM, 14, 2, "UNSIGNED", "TRUNCATE");
                GEVLBASICM_ITEM();
                if( (SDINCONFIN == 1.0))
                {
                    GEVLBICMNC = add(SDVLAUXILI, GEVLBICMNC, 14, 2, "UNSIGNED", "TRUNCATE");
                    GEVLBICMNC_ITEM();
                }
                GEVLBASSTR = add(AV120_VLBASSTR, GEVLBASSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                GEVLBASSTR_ITEM();
            }
            SDVLICMNAT = add(SDVLAUXILI, SDVLICMNAT, 14, 2, "UNSIGNED", "TRUNCATE");
            SDVLIMPICM = add(AV120_VLICMPRO, SDVLIMPICM, 14, 2, "UNSIGNED", "TRUNCATE");
//::DIFAL
            SDVLBASDID = add(AV120_VLBASDID, SDVLBASDID, 14, 2, "UNSIGNED", "TRUNCATE");
            SDVLICMDID = add(AV120_VLICMDID, SDVLICMDID, 14, 2, "UNSIGNED", "TRUNCATE");
            SDVLICMDIO = add(AV120_VLICMDIO, SDVLICMDIO, 14, 2, "UNSIGNED", "TRUNCATE");
            SDVLFCPDES = add(AV120_VLFCPDES, SDVLFCPDES, 14, 2, "UNSIGNED", "TRUNCATE");
//:  CONSIDERA VALOR DA ST COMO OUTRAS
            if( ((AV120_CDEMPRES == 1.0) && (AV120_NRNOTAFI == 468964.0)))
            {
                F10_EXVLOUTICM = move (AV120_VLICMSTR, F10_EXVLOUTICM, 13, 2,"UNSIGNED");
                F10_EXVLOUTICM = add(AV120_VLFCPSTR, F10_EXVLOUTICM, 13, 2, "UNSIGNED", "TRUNCATE");
                GEVLOUTICM = add(AV120_VLICMSTR, GEVLOUTICM, 14, 2, "UNSIGNED", "TRUNCATE");
                GEVLOUTICM_ITEM();
                GEVLOUTICM = add(AV120_VLFCPSTR, GEVLOUTICM, 14, 2, "UNSIGNED", "TRUNCATE");
                GEVLOUTICM_ITEM();
            }
            else
            {
                SDVLBASSTR = add(AV120_VLBASSTR, SDVLBASSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLICMSTR = add(AV120_VLICMSTR, SDVLICMSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLICMSTR = add(AV120_VLFCPSTR, SDVLICMSTR, 14, 2, "UNSIGNED", "TRUNCATE");
            }
            if( ((((GSDCDEMPRES == 1.0) && (AV119_CDFILIAL == 18.0)) && (AV119_DIEMINOT > 20100400.0)) && ((rTrim(SDCDUFMUNI)).equals(rTrim("PE"))==false)))
            {
                SDININCENT = move ("1", SDININCENT, 1, 0,"UNSIGNED");
                if( (AV119_CDTIPFAT == GLB.ZEROS))
                {
                    SDININCENT = move ("2", SDININCENT, 1, 0,"UNSIGNED");
                }
                else
                {
                    GLB.SECURE = false;
                    GLB.STATUS = CG10201_DetermineEvery (GSDCDEMPRES, AV120_CDCONCRE);
                    while (CG102_XSEEDEOF == false)
                    {   CG10201_DetermineMoveNext();
                        if (CG102_XSEEDEOF == true)
                        {   break;
                        }
                        GSDDSALFA01 = move(CG102_CDCLACON, GSDDSALFA01, 1);
                        if( ((rTrim(GSDDSALFA01)).equals(rTrim("4"))==true))
                        {
                            SDININCENT = move ("2", SDININCENT, 1, 0,"UNSIGNED");
                        }
                        break;
                    }
                }
                if( ((AXAMREFERE > 201006.0) || (AXDIINICIO > 20100630.0)))
                {
                    if (AV120_CDNATOPE == 6101.0 || AV120_CDNATOPE == 6102.0 || AV120_CDNATOPE == 6103.0 || AV120_CDNATOPE == 6104.0 || AV120_CDNATOPE == 6105.0 || AV120_CDNATOPE == 6106.0 || AV120_CDNATOPE == 6109.0 || AV120_CDNATOPE == 6110.0 || AV120_CDNATOPE == 6111.0 || AV120_CDNATOPE == 6112.0 || AV120_CDNATOPE == 6113.0 || AV120_CDNATOPE == 6114.0 || AV120_CDNATOPE == 6115.0)
                    {
//: cfops incentivadas
                    }
                    else
                    if (AV120_CDNATOPE == 6116.0 || AV120_CDNATOPE == 6117.0 || AV120_CDNATOPE == 6118.0 || AV120_CDNATOPE == 6119.0 || AV120_CDNATOPE == 6120.0 || AV120_CDNATOPE == 6122.0 || AV120_CDNATOPE == 6123.0 || AV120_CDNATOPE == 6151.0 || AV120_CDNATOPE == 6152.0 || AV120_CDNATOPE == 6155.0 || AV120_CDNATOPE == 6156.0 || AV120_CDNATOPE == 6401.0 || AV120_CDNATOPE == 6402.0)
                    {
//: cfops incentivadas
                    }
                    else
                    if (AV120_CDNATOPE == 6403.0 || AV120_CDNATOPE == 6408.0 || AV120_CDNATOPE == 6409.0)
                    {
//: cfops incentivadas
                    }
                    else {
                        SDININCENT = move ("1", SDININCENT, 1, 0,"UNSIGNED");
                    }
                }
                if( (SDININCENT == 2.0))
                {
                    GSDCDDOITEM = move("CDCLFIIN", GSDCDDOITEM, 8);
                    GSDCDELENUM = move (AV120_CDCLAFIS, GSDCDELENUM, 10, 0,"UNSIGNED");
                    GSDCDELENUM_ITEM();
                    GSP004 ();
                    if (GLB.EXIT==true)
                    {
                        return;
                    }
                    if( (GSDINITEMOK == 1.0))
                    {
                        F28_RLNRNOTAFI = move (AV119_NRNOTAFI, F28_RLNRNOTAFI, 9, 0,"UNSIGNED");
                        F28_RLCDPRODUT = move (AV120_CDPRODUT, F28_RLCDPRODUT, 7, 0,"UNSIGNED");
                        F28_RLCDCORPRO = move (AV120_CDITEMXX, F28_RLCDCORPRO, 4, 0,"UNSIGNED");
                        F28_RLCDCLAFIS = move (AV120_CDCLAFIS, F28_RLCDCLAFIS, 10, 0,"UNSIGNED");
                        GLB.SECURE = false;
                        GLB.STATUS = PR10101_DetermineEvery (GSDCDEMPRES, AV120_CDPRODUT, AV120_CDITEMXX);
                        while (PR101_XSEEDEOF == false)
                        {   PR10101_DetermineMoveNext();
                            if (PR101_XSEEDEOF == true)
                            {   break;
                            }
                            break;
                        }
                        F28_RLDSPRODUT = attachAndSpace(PR101_DSPRODUT, F28_RLDSPRODUT, 30);
                        F28_RLVLBASICM = move (SDVLAUXILI, F28_RLVLBASICM, 11, 2,"UNSIGNED");
                        F28_RLVLICMPRO = move (AV120_VLICMPRO, F28_RLVLICMPRO, 11, 2,"UNSIGNED");
                        GLB.SHADOW = "N";
                        P_28("PRINT.FRAME");
                    }
                    else
                    {
                        F92_EXCDNATOPE = move (AV120_CDNATOPE, F92_EXCDNATOPE, 4, 0,"UNSIGNED");
                        F92_EXCDUFMUNI = move(SDCDUFMUNI, F92_EXCDUFMUNI, 2);
                        F92_EXCDCLAFIS = move (AV120_CDCLAFIS, F92_EXCDCLAFIS, 10, 0,"UNSIGNED");
                        F92_EXCDDEBICM = move (AV120_CDDEBICM, F92_EXCDDEBICM, 6, 0,"UNSIGNED");
                        F92_EXCDCONCRE = move (AV120_CDCONCRE, F92_EXCDCONCRE, 6, 0,"UNSIGNED");
                        F92_EXVLCONTAB = move (AV120_VLBRUTOP, F92_EXVLCONTAB, 12, 2,"UNSIGNED");
                        F92_EXVLBASICM = move (SDVLAUXILI, F92_EXVLBASICM, 12, 2,"UNSIGNED");
                        F92_EXVLIMPICM = move (AV120_VLICMPRO, F92_EXVLIMPICM, 12, 2,"UNSIGNED");
                        GLBEXP_EXTRACTAS = "92";
                        P_EXTRACTP();
                    }
                }
            }
        }
        if( (CG110_CDTRIICM == 2.0))
        {
            SDVLAUXILI = move (AV120_VLLIQUID, SDVLAUXILI, 14, 2,"UNSIGNED");
            if( (AV119_INDESPCO == 1.0))
            {
                SDVLAUXILI = add(AV120_VLDESCNT, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
            }
            F10_EXVLISEICM = move (SDVLAUXILI, F10_EXVLISEICM, 13, 2,"UNSIGNED");
            if( (AV119_INSITNOT == GLB.ZEROS))
            {
                GEVLINTICM = add(SDVLAUXILI, GEVLINTICM, 14, 2, "UNSIGNED", "TRUNCATE");
                GEVLINTICM_ITEM();
            }
//:Não calcula icms, mas calcula icms st
            if( (CG110_INCALCST == GLB.ZEROS))
            {
                if( (AV119_INSITNOT == GLB.ZEROS))
                {
                    GEVLBASSTR = add(AV120_VLBASSTR, GEVLBASSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                    GEVLBASSTR_ITEM();
                }
                SDVLBASSTR = add(AV120_VLBASSTR, SDVLBASSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLICMSTR = add(AV120_VLICMSTR, SDVLICMSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLICMSTR = add(AV120_VLFCPSTR, SDVLICMSTR, 14, 2, "UNSIGNED", "TRUNCATE");
            }
        }
        F10_EXVLISEICM = add(SDVLBCIINT, F10_EXVLISEICM, 13, 2, "UNSIGNED", "TRUNCATE");
        GEVLINTICM = add(SDVLBCIINT, GEVLINTICM, 14, 2, "UNSIGNED", "TRUNCATE");
        GEVLINTICM_ITEM();
        if( (CG110_CDTRIICM == 3.0))
        {
            SDVLAUXILI = move (AV120_VLLIQUID, SDVLAUXILI, 14, 2,"UNSIGNED");
            if( (AV119_INDESPCO == 1.0))
            {
                SDVLAUXILI = add(AV120_VLDESCNT, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
            }
            F10_EXVLOUTICM = move (SDVLAUXILI, F10_EXVLOUTICM, 13, 2,"UNSIGNED");
            if( (AV119_INSITNOT == GLB.ZEROS))
            {
                GEVLOUTICM = add(SDVLAUXILI, GEVLOUTICM, 14, 2, "UNSIGNED", "TRUNCATE");
                GEVLOUTICM_ITEM();
            }
//:Não calcula icms, mas calcula icms st
            if( (CG110_INCALCST == GLB.ZEROS))
            {
                if( (AV119_INSITNOT == GLB.ZEROS))
                {
                    GEVLBASSTR = add(AV120_VLBASSTR, GEVLBASSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                    GEVLBASSTR_ITEM();
                }
                SDVLBASSTR = add(AV120_VLBASSTR, SDVLBASSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLICMSTR = add(AV120_VLICMSTR, SDVLICMSTR, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLICMSTR = add(AV120_VLFCPSTR, SDVLICMSTR, 14, 2, "UNSIGNED", "TRUNCATE");
            }
        }
        if( (AV120_VLIPIPRO != GLB.ZEROS))
        {
            AV120_VLLIQUID = add(AV120_VLDESCNT, AV120_VLLIQUID, 14, 2, "UNSIGNED", "TRUNCATE");
            AV120_VLLIQUID = add(AV120_VLDESCON, AV120_VLLIQUID, 14, 2, "UNSIGNED", "TRUNCATE");
        }
        if( (AV119_INSITNOT == GLB.ZEROS))
        {
            if( (SDINSVLCON == GLB.ZEROS))
            {
                GEVLINTEGR = add(AV120_VLBRUTOP, GEVLINTEGR, 14, 2, "UNSIGNED", "TRUNCATE");
                GEVLINTEGR_ITEM();
            }
            GEVLAUXIL1 = move (AV120_VLLIQUID, GEVLAUXIL1, 14, 2,"UNSIGNED");
            GEVLAUXIL1_ITEM();
            GEVLAUXIL2 = move (AV120_VLIPIPRO, GEVLAUXIL2, 14, 2,"UNSIGNED");
            GEVLAUXIL2_ITEM();
            if( ((SDINCONFIN == 1.0) && (SDINSVLCON == GLB.ZEROS)))
            {
                GEVLCONTNC = add(AV120_VLBRUTOP, GEVLCONTNC, 14, 2, "UNSIGNED", "TRUNCATE");
                GEVLCONTNC_ITEM();
            }
        }
//::        INS; VERIFICA-CLIENTE()
        F10_EXCDUFMUNI = move(GLB.SPACES, F10_EXCDUFMUNI, 2);
        GSDCDPAISGL = move (AV101_CDDOPAIS, GSDCDPAISGL, 3, 0,"UNSIGNED");
        GSDNRCLOCGL = move (AV101_NRCEPLOC, GSDNRCLOCGL, 5, 0,"UNSIGNED");
        GSDNRCCOMGL = move (AV101_NRCEPCOM, GSDNRCCOMGL, 3, 0,"UNSIGNED");
        GSP103 ();
        if (GLB.EXIT==true)
        {
            return;
        }
        if( (GSDINTEMCEP == GLB.ZEROS))
        {
            F10_EXCDUFMUNI = move(GS103_CDUFMUNI, F10_EXCDUFMUNI, 2);
        }
        F10_EXNRSERIEX = move(AV119_TPSERIEN, F10_EXNRSERIEX, 3);
        F10_EXNRNOTAFI = move (AV120_NRNOTAFI, F10_EXNRNOTAFI, 9, 0,"UNSIGNED");
        F10_EXCDMODENF = move (AV120_CDMODENF, F10_EXCDMODENF, 1, 0,"UNSIGNED");
        F10_EXTPREGIST = move (AV120_TPREGIST, F10_EXTPREGIST, 1, 0,"UNSIGNED");
        if( (AV119_TPREGIST == 1.0))
        {
            F10_EXNRNOTFIN = move (AV119_NRORDEMB, F10_EXNRNOTFIN, 7, 0,"UNSIGNED");
        }
        F10_EXNRCFICMP = move (SDNRCFICMP, F10_EXNRCFICMP, 6, 0,"UNSIGNED");
        F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
        F10_EXDISAINOT = move (AV119_DISAINOT, F10_EXDISAINOT, 8, 0,"UNSIGNED");
        F10_EXVLCONTAX = move (GLB.ZEROS, F10_EXVLCONTAX, 13, 2,"UNSIGNED");
        if( (SDINSVLCON == GLB.ZEROS))
        {
            F10_EXVLCONTAX = move (AV120_VLBRUTOP, F10_EXVLCONTAX, 13, 2,"UNSIGNED");
        }
        F10_EXNRCONTAX = move (AV120_CDCONCRE, F10_EXNRCONTAX, 6, 0,"UNSIGNED");
        if( (AV120_VLIPIPRO == GLB.ZEROS))
        {
            AV120_PCIPIPRO = move (GLB.ZEROS, AV120_PCIPIPRO, 5, 2,"UNSIGNED");
        }
        if( (AV120_CDNATOPE == 5918.0))
        {
            AV120_PCIPIPRO = move (GLB.ZEROS, AV120_PCIPIPRO, 5, 2,"UNSIGNED");
            AV120_VLIPIPRO = move (GLB.ZEROS, AV120_VLIPIPRO, 14, 2,"UNSIGNED");
        }
        if( (((AV120_PCIPIPRO != GLB.ZEROS) || (AV120_VLIPIPRO != GLB.ZEROS)) || (AV119_CDTIPFAT == 12.0)))
        {
            F10_EXVLBASIPI = move (AV120_VLLIQUID, F10_EXVLBASIPI, 13, 2,"UNSIGNED");
            F10_EXVLPERIPI = move (AV120_PCIPIPRO, F10_EXVLPERIPI, 5, 2,"UNSIGNED");
            F10_EXVLIMPIPI = move (AV120_VLIPIPRO, F10_EXVLIMPIPI, 13, 2,"UNSIGNED");
            if( (AV119_INSITNOT == GLB.ZEROS))
            {
                GEVLBASIPI = add(AV120_VLLIQUID, GEVLBASIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                GEVLBASIPI_ITEM();
                GEVLIMPIPI = add(AV120_VLIPIPRO, GEVLIMPIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                GEVLIMPIPI_ITEM();
            }
        }
        if( ((((AV120_PCIPIPRO == GLB.ZEROS) && (AV120_VLIPIPRO == GLB.ZEROS)) && (AV119_CDTIPFAT != 12.0)) && (SDINOPTSIM != 1.0)))
        {
            GEVLAUXIL2 = move (GLB.ZEROS, GEVLAUXIL2, 14, 2,"UNSIGNED");
            GEVLAUXIL2_ITEM();
            if( (CG110_CDTRIIPI == 2.0))
            {
                F10_EXVLISEIPI = move (AV120_VLLIQUID, F10_EXVLISEIPI, 13, 2,"UNSIGNED");
                if( (AV119_CDMERCAD == 2.0))
                {
                    F10_EXVLISEIPI = add(AV119_VLSEGEXP, F10_EXVLISEIPI, 13, 2, "UNSIGNED", "TRUNCATE");
                }
                if( (AV119_INSITNOT == GLB.ZEROS))
                {
                    GEVLINTIPI = add(AV120_VLLIQUID, GEVLINTIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                    GEVLINTIPI_ITEM();
                    if( (AV119_CDMERCAD == 2.0))
                    {
                        GEVLINTIPI = add(AV119_VLSEGEXP, GEVLINTIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                        GEVLINTIPI_ITEM();
                    }
                }
            }
            else
            {
                F10_EXVLOUTIPI = move (AV120_VLLIQUID, F10_EXVLOUTIPI, 13, 2,"UNSIGNED");
                if( (AV119_CDMERCAD == 2.0))
                {
                    F10_EXVLOUTIPI = add(AV119_VLSEGEXP, F10_EXVLOUTIPI, 13, 2, "UNSIGNED", "TRUNCATE");
                }
                if( (AV119_INSITNOT == GLB.ZEROS))
                {
                    GEVLOUTIPI = add(AV120_VLLIQUID, GEVLOUTIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                    GEVLOUTIPI_ITEM();
                    if( (AV119_CDMERCAD == 2.0))
                    {
                        GEVLOUTIPI = add(AV119_VLSEGEXP, GEVLOUTIPI, 14, 2, "UNSIGNED", "TRUNCATE");
                        GEVLOUTIPI_ITEM();
                    }
                }
            }
        }
        if( (AV120_INORIPRO == GLB.ZEROS))
        {
            GLB.SECURE = false;
            GLB.STATUS = PR10101_DetermineEvery (GSDCDEMPRES, AV120_CDPRODUT, AV120_CDITEMXX);
            while (PR101_XSEEDEOF == false)
            {   PR10101_DetermineMoveNext();
                if (PR101_XSEEDEOF == true)
                {   break;
                }
                break;
            }
            if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
            {
                F96_RLCDOCORRE = move (format(AV120_CDPRODUT ,"9999999"), F96_RLCDOCORRE,10);
                F96_RLCDOCORRE = attachAndSpace(format(AV120_CDITEMXX,"999999"), F96_RLCDOCORRE, 10);
                F96_RLINOCORRE = move (format(AV120_NRNOTAFI ,"999999999"), F96_RLINOCORRE,20);
                F96_RLINOCORRE = attachAndSpace("PROD-AV120", F96_RLINOCORRE, 20);
                F96_RLDSOCORRE = move("NAO CADASTRADO PR101", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                PR101_PQLIQPRO = move (GLB.ZEROS, PR101_PQLIQPRO, 9, 5,"UNSIGNED");
            }
        }
        if( (AV120_INORIPRO == 1.0))
        {
            GLB.SECURE = false;
            GLB.STATUS = SU10301_DetermineEvery (GSDCDEMPRES, AV120_CDPRODUT);
            while (SU103_XSEEDEOF == false)
            {   SU10301_DetermineMoveNext();
                if (SU103_XSEEDEOF == true)
                {   break;
                }
                break;
            }
            if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
            {
                F96_RLCDOCORRE = move (format(AV120_CDPRODUT ,"9999999"), F96_RLCDOCORRE,10);
                F96_RLINOCORRE = move (format(AV120_NRNOTAFI ,"999999999"), F96_RLINOCORRE,20);
                F96_RLINOCORRE = attachAndSpace("PROD - AV120", F96_RLINOCORRE, 20);
                F96_RLDSOCORRE = move("NAO CADASTRADO SU103", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                SU103_QTPESMAT = move (GLB.ZEROS, SU103_QTPESMAT, 10, 5,"UNSIGNED");
            }
            PR101_PQLIQPRO = move (SU103_QTPESMAT, PR101_PQLIQPRO, 9, 5,"UNSIGNED");
        }
        if( (AV120_INORIPRO == 2.0))
        {
            GLB.SECURE = false;
            GLB.STATUS = AV11201_DetermineEvery (GSDCDEMPRES, AV120_CDPRODUT);
            while (AV112_XSEEDEOF == false)
            {   AV11201_DetermineMoveNext();
                if (AV112_XSEEDEOF == true)
                {   break;
                }
                break;
            }
            if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
            {
                F96_RLCDOCORRE = move (format(AV120_CDPRODUT ,"9999999"), F96_RLCDOCORRE,10);
                F96_RLINOCORRE = move (format(AV120_NRNOTAFI ,"999999999"), F96_RLINOCORRE,20);
                F96_RLINOCORRE = attachAndSpace("PROD - AV120", F96_RLINOCORRE, 20);
                F96_RLDSOCORRE = move("NAO CADASTRADO AV112", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                AV112_VLPMPROF = move (GLB.ZEROS, AV112_VLPMPROF, 9, 5,"UNSIGNED");
            }
            PR101_PQLIQPRO = move (AV112_VLPMPROF, PR101_PQLIQPRO, 9, 5,"UNSIGNED");
        }
        if( (AV120_INORIPRO == 3.0))
        {
            GLB.SECURE = false;
            GLB.STATUS = TP10101_DetermineEvery (GSDCDEMPRES, AV120_CDPRODUT);
            while (TP101_XSEEDEOF == false)
            {   TP10101_DetermineMoveNext();
                if (TP101_XSEEDEOF == true)
                {   break;
                }
                break;
            }
            if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
            {
                F96_RLCDOCORRE = move (format(AV120_CDPRODUT ,"9999999"), F96_RLCDOCORRE,10);
                F96_RLINOCORRE = move (format(AV120_NRNOTAFI ,"999999999"), F96_RLINOCORRE,20);
                F96_RLINOCORRE = attachAndSpace("PROD - AV120", F96_RLINOCORRE, 20);
                F96_RLDSOCORRE = move("NAO CADASTRADO TP101", F96_RLDSOCORRE, 45);
                GLB.SHADOW = "Z";
                P_96("PRINT.FRAME");
                TP101_VLPMPROF = move (GLB.ZEROS, TP101_VLPMPROF, 9, 5,"UNSIGNED");
            }
            PR101_PQLIQPRO = move (TP101_VLPMPROF, PR101_PQLIQPRO, 9, 5,"UNSIGNED");
        }
        GEQTPESOKG = multiply(PR101_PQLIQPRO, AV120_QTFATURA, GEQTPESOKG,10, 1,"UNSIGNED","ROUNDED");
        GEQTPESOKG_ITEM();
        GEINDEBIPI = move (GLB.ZEROS, GEINDEBIPI, 1, 0,"UNSIGNED");
        GEINDEBIPI_ITEM();
        if( (GEVLAUXIL2 > GLB.ZEROS))
        {
            GEINDEBIPI = move ("1", GEINDEBIPI, 1, 0,"UNSIGNED");
            GEINDEBIPI_ITEM();
        }
        if( ((AXTPRELATO == 1.0) && (AXINATUALI == 2.0)))
        {
            if( (CG110_INATUDIP == 1.0))
            {
                F90_EXINCLIFOR = move (AV119_INCLIFOR, F90_EXINCLIFOR, 1, 0,"UNSIGNED");
                F90_EXCDCLIFOR = move (AV119_CDCLIENT, F90_EXCDCLIFOR, 6, 0,"UNSIGNED");
                F90_EXVLMOVIME = move (AV120_VLLIQUID, F90_EXVLMOVIME, 14, 2,"UNSIGNED");
                GLBEXH_EXTRACTAS = "90";
                P_EXTRACTH();
//::                BC; AV120.INORIPRO
//::                CS; GLB.ZEROS
//::                    MV; AV120.CDPRODUT          EXCDCLAFIS
//::                CS; (1)
//::                    AD; (1000000000) AV120.CDPRODUT GIV EXCDCLAFIS
//::                CS; (2)
//::                    AD; (2000000000) AV120.CDPRODUT GIV EXCDCLAFIS
//::                EC;
//::                MV; AV120.VLLIQUID              EXVLMOVIME OF 91
//::                EX; 91   AS I
                SDCDCLFIAU = move (GLB.ZEROS, SDCDCLFIAU, 10, 0,"UNSIGNED");
                SDVLMOVAUX = move (GLB.ZEROS, SDVLMOVAUX, 14, 2,"UNSIGNED");
                if (AV120_INORIPRO == GLB.ZEROS)
                {
                    SDCDCLFIAU = move (AV120_CDPRODUT, SDCDCLFIAU, 10, 0,"UNSIGNED");
                }
                else
                if (AV120_INORIPRO == 1.0)
                {
                    SDCDCLFIAU = add(cDec("1000000000"), AV120_CDPRODUT, SDCDCLFIAU, 10, 0, "UNSIGNED", "TRUNCATE");
                }
                else
                if (AV120_INORIPRO == 2.0)
                {
                    SDCDCLFIAU = add(cDec("2000000000"), AV120_CDPRODUT, SDCDCLFIAU, 10, 0, "UNSIGNED", "TRUNCATE");
                }
                SDVLMOVAUX = move (AV120_VLLIQUID, SDVLMOVAUX, 14, 2,"UNSIGNED");
                CG168_InitAuto();
                AU_CG168_CDCLAFIS = auto (SDCDCLFIAU, AU_CG168_CDCLAFIS, 10, 0,"UNSIGNED");
                AU_CG168_CDEMPRES = auto (GSDCDEMPRES, AU_CG168_CDEMPRES, 2, 0,"UNSIGNED");
                AU_CG168_INSITREG = auto("A", AU_CG168_INSITREG, 1);
                AU_CG168_VLMOVIME = auto (SDVLMOVAUX, AU_CG168_VLMOVIME, 12, 2,"UNSIGNED");
                if ((GLB.ERROR.trim()).equals("")==true)
                {
                    CG168_AutoToFile();
                    CG168_Insert ();
                    CG168_InitAuto();
                }
            }
        }
        if( (AV120_INORIPRO == GLB.ZEROS))
        {
            SDINEXTDIA = move (GLB.ZEROS, SDINEXTDIA, 1, 0,"UNSIGNED");
            if( (SDINZONAFR == GLB.ZEROS))
            {
                SDINEXTDIA = move ("1", SDINEXTDIA, 1, 0,"UNSIGNED");
            }
            if( (SDINZONAFR == 1.0))
            {
//: a partir dessa data extrai tambem o diat se tiver icms
                if( ((AV119_DIEMINOT >= SDDIINITTD) && (AV120_VLICMPRO > GLB.ZEROS)))
                {
                    SDINEXTDIA = move ("1", SDINEXTDIA, 1, 0,"UNSIGNED");
                }
            }
            if( (AV119_DIEMINOT < SDDIINITTD))
            {
                SDINEXTDIA = move (GLB.ZEROS, SDINEXTDIA, 1, 0,"UNSIGNED");
            }
            if( (SDINEXTDIA == 1.0))
            {
                GLB.SECURE = false;
                GLB.STATUS = PR10101_DetermineEvery (GSDCDEMPRES, AV120_CDPRODUT, AV120_CDITEMXX);
                while (PR101_XSEEDEOF == false)
                {   PR10101_DetermineMoveNext();
                    if (PR101_XSEEDEOF == true)
                    {   break;
                    }
                    if( (AV119_DIEMINOT >= SDDIINITTD))
                    {
                        PR101_CDTRIDIF = move (AV120_CDTRIDIF, PR101_CDTRIDIF, 2, 0,"UNSIGNED");
                    }
                    if( (PR101_CDTRIDIF == 5.0))
                    {
//:Extrai dados do faturamento da DIAT.
                        SDVLAUXILI = move (AV120_VLLIQUID, SDVLAUXILI, 14, 2,"UNSIGNED");
                        if( (AV119_INDESPCO == 1.0))
                        {
                            SDVLAUXILI = add(AV120_VLDESCNT, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                        }
                        if( (((SDINCONFIN == 1.0) && (CG110_INCALICM == GLB.ZEROS)) && (CG110_PCICMFIS > GLB.ZEROS)))
                        {
                            SDVLAUXILI = move (AV120_VLBRUTOP, SDVLAUXILI, 14, 2,"UNSIGNED");
                        }
                        if( (AV120_INIPIDBC == 1.0))
                        {
                            SDVLAUXILI = add(AV120_VLIPIDEV, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                        }
                        SDVLAUXILI = add(AV120_VLADIBIC, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                        F93_EXCDUFMUNI = move(SDCDUFMUNI, F93_EXCDUFMUNI, 2);
                        F93_EXINCLIENT = move (SDINCLIENT, F93_EXINCLIENT, 1, 0,"UNSIGNED");
                        F93_EXCDNATDIA = move (AV120_CDNATOPE, F93_EXCDNATDIA, 4, 0,"UNSIGNED");
                        F93_EXVLCONDIA = move (AV120_VLBRUTOP, F93_EXVLCONDIA, 12, 2,"UNSIGNED");
                        F93_EXVLBASDIA = move (SDVLAUXILI, F93_EXVLBASDIA, 12, 2,"UNSIGNED");
                        F93_EXVLIMPDIA = move (AV120_VLICMPRO, F93_EXVLIMPDIA, 12, 2,"UNSIGNED");
                        F93_EXVLICMDIA = move (AV120_VLICMDIO, F93_EXVLICMDIA, 12, 2,"UNSIGNED");
                        F93_EXPCICMDIA = move (AV120_PCICMPRO, F93_EXPCICMDIA, 5, 2,"UNSIGNED");
                        F93_EXNRNOTDIA = move (AV120_NRNOTAFI, F93_EXNRNOTDIA, 9, 0,"UNSIGNED");
                        F93_EXCDPRODUT = move (AV120_CDPRODUT, F93_EXCDPRODUT, 7, 0,"UNSIGNED");
                        F93_EXINBRINDE = move (AV120_INBRINDE, F93_EXINBRINDE, 1, 0,"UNSIGNED");
                        GLBEXD_EXTRACTAS = "93";
                        P_EXTRACTD();
                    }
                    if( (GSDCDEMPRES == 2.0))
                    {
                        if( (((((PR101_INVENDAX == GLB.ZEROS) && (PR101_CDLINPRO != 19.0)) && (PR101_CDLINPRO != 20.0)) && (PR101_CDLINPRO != 21.0)) && (AV120_VLICMPRO > GLB.ZEROS)))
                        {
                            SDVLAUXILI = move (AV120_VLLIQUID, SDVLAUXILI, 14, 2,"UNSIGNED");
                            if( (AV119_INDESPCO == 1.0))
                            {
                                SDVLAUXILI = add(AV120_VLDESCNT, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                            }
                            if( (((SDINCONFIN == 1.0) && (CG110_INCALICM == GLB.ZEROS)) && (CG110_PCICMFIS > GLB.ZEROS)))
                            {
                                SDVLAUXILI = move (AV120_VLBRUTOP, SDVLAUXILI, 14, 2,"UNSIGNED");
                            }
                            if( (AV120_INIPIDBC == 1.0))
                            {
                                SDVLAUXILI = add(AV120_VLIPIDEV, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                            }
                            SDVLAUXILI = add(AV120_VLADIBIC, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                            F94_EXNRNOTCRE = move (AV120_NRNOTAFI, F94_EXNRNOTCRE, 9, 0,"UNSIGNED");
                            F94_EXCDNATCRE = move (AV120_CDNATOPE, F94_EXCDNATCRE, 4, 0,"UNSIGNED");
                            F94_EXVLCONCRE = move (AV120_VLBRUTOP, F94_EXVLCONCRE, 12, 2,"UNSIGNED");
                            F94_EXVLBASCRE = move (SDVLAUXILI, F94_EXVLBASCRE, 12, 2,"UNSIGNED");
                            F94_EXVLIMPCRE = move (AV120_VLICMPRO, F94_EXVLIMPCRE, 12, 2,"UNSIGNED");
                            F94_EXPCICMCRE = move (AV120_PCICMPRO, F94_EXPCICMCRE, 5, 2,"UNSIGNED");
                            F94_EXCDLINCRE = move (PR101_CDLINPRO, F94_EXCDLINCRE, 3, 0,"UNSIGNED");
                            ITCDLINTEX = move (PR101_CDLINPRO, ITCDLINTEX, 6, 0,"UNSIGNED");
                            F94_EXINTEXCRE = move("N", F94_EXINTEXCRE, 1);
                            GLBEXY_EXTRACTAS = "94";
                            P_EXTRACTY();
//::Produtos de fabricação propria - Difal
                            if( ((PR101_CDLINPRO > GLB.ZEROS) && (AV120_VLICMDIO > GLB.ZEROS)))
                            {
                                F94_EXINTEXCRE = move("S", F94_EXINTEXCRE, 1);
                                F104_EXNRNOTCRE = move (AV120_NRNOTAFI, F104_EXNRNOTCRE, 9, 0,"UNSIGNED");
                                F104_EXVLBASCRE = move (AV120_VLBASDID, F104_EXVLBASCRE, 12, 2,"UNSIGNED");
                                F104_EXVLICMDID = move (AV120_VLICMDID, F104_EXVLICMDID, 12, 2,"UNSIGNED");
                                F104_EXVLICMDIO = move (AV120_VLICMDIO, F104_EXVLICMDIO, 12, 2,"UNSIGNED");
                                F104_EXVLFCPDES = move (AV120_VLFCPDES, F104_EXVLFCPDES, 12, 2,"UNSIGNED");
                                GLBEXW_EXTRACTAS = "104";
                                P_EXTRACTW();
                            }
                            if( ((PR101_CDCLAFIS == 39241000.0) || (PR101_CDCLAFIS == 39249000.0)))
                            {
//:Extrai dados do faturamento da DIAT.
                                SDVLAUXILI = move (AV120_VLLIQUID, SDVLAUXILI, 14, 2,"UNSIGNED");
                                if( (AV119_INDESPCO == 1.0))
                                {
                                    SDVLAUXILI = add(AV120_VLDESCNT, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                                }
                                if( (((SDINCONFIN == 1.0) && (CG110_INCALICM == GLB.ZEROS)) && (CG110_PCICMFIS > GLB.ZEROS)))
                                {
                                    SDVLAUXILI = move (AV120_VLBRUTOP, SDVLAUXILI, 14, 2,"UNSIGNED");
                                }
                                if( (AV120_INIPIDBC == 1.0))
                                {
                                    SDVLAUXILI = add(AV120_VLIPIDEV, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                                }
                                SDVLAUXILI = add(AV120_VLADIBIC, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                                F125_EXINCLIENT = move (SDINCLIENT, F125_EXINCLIENT, 1, 0,"UNSIGNED");
                                F125_EXCDUFMUNI = move(SDCDUFMUNI, F125_EXCDUFMUNI, 2);
                                F125_EXCDNATDIA = move (AV120_CDNATOPE, F125_EXCDNATDIA, 4, 0,"UNSIGNED");
                                F125_EXVLCONDIA = move (AV120_VLBRUTOP, F125_EXVLCONDIA, 12, 2,"UNSIGNED");
                                F125_EXVLBASDIA = move (SDVLAUXILI, F125_EXVLBASDIA, 12, 2,"UNSIGNED");
                                F125_EXVLIMPDIA = move (AV120_VLICMPRO, F125_EXVLIMPDIA, 12, 2,"UNSIGNED");
                                F125_EXVLICMDIA = move (AV120_VLICMDIO, F125_EXVLICMDIA, 12, 2,"UNSIGNED");
                                F125_EXPCICMDIA = move (AV120_PCICMPRO, F125_EXPCICMDIA, 5, 2,"UNSIGNED");
                                GLBEXS_EXTRACTAS = "125";
                                P_EXTRACTS();
                                if( (SDINCLIENT >= 1.0))
                                {
                                    GLBEXU_EXTRACTAS = "125";
                                    P_EXTRACTU();
                                }
                            }
                        }
                    }
                    else
                    {
                        if( (((PR101_INVENDAX == GLB.ZEROS) && (PR101_CDLINPRO != 23.0)) && (AV120_VLICMPRO > GLB.ZEROS)))
                        {
                            SDVLAUXILI = move (AV120_VLLIQUID, SDVLAUXILI, 14, 2,"UNSIGNED");
                            if( (AV119_INDESPCO == 1.0))
                            {
                                SDVLAUXILI = add(AV120_VLDESCNT, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                            }
                            if( (((SDINCONFIN == 1.0) && (CG110_INCALICM == GLB.ZEROS)) && (CG110_PCICMFIS > GLB.ZEROS)))
                            {
                                SDVLAUXILI = move (AV120_VLBRUTOP, SDVLAUXILI, 14, 2,"UNSIGNED");
                            }
                            if( (AV120_INIPIDBC == 1.0))
                            {
                                SDVLAUXILI = add(AV120_VLIPIDEV, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                            }
                            SDVLAUXILI = add(AV120_VLADIBIC, SDVLAUXILI, 14, 2, "UNSIGNED", "TRUNCATE");
                            F94_EXNRNOTCRE = move (AV120_NRNOTAFI, F94_EXNRNOTCRE, 9, 0,"UNSIGNED");
                            F94_EXCDNATCRE = move (AV120_CDNATOPE, F94_EXCDNATCRE, 4, 0,"UNSIGNED");
                            F94_EXVLCONCRE = move (AV120_VLBRUTOP, F94_EXVLCONCRE, 12, 2,"UNSIGNED");
                            F94_EXVLBASCRE = move (SDVLAUXILI, F94_EXVLBASCRE, 12, 2,"UNSIGNED");
                            F94_EXVLIMPCRE = move (AV120_VLICMPRO, F94_EXVLIMPCRE, 12, 2,"UNSIGNED");
                            F94_EXPCICMCRE = move (AV120_PCICMPRO, F94_EXPCICMCRE, 5, 2,"UNSIGNED");
                            F94_EXCDLINCRE = move (PR101_CDLINPRO, F94_EXCDLINCRE, 3, 0,"UNSIGNED");
                            ITCDLINTEX = move (PR101_CDLINPRO, ITCDLINTEX, 6, 0,"UNSIGNED");
                            F94_EXINTEXCRE = move("N", F94_EXINTEXCRE, 1);
                            if( (PR101_CDLINPRO > GLB.ZEROS))
                            {
                                if( (TBINTEXTIL[(int)ITCDLINTEX - 1] != 1.0))
                                {
                                    F94_EXINTEXCRE = move("S", F94_EXINTEXCRE, 1);
//::Produtos de fabricação propria - Difal carme chamado 75541
                                    if( ((GSDCDEMPRES == 1.0) && (AV120_VLICMDIO > GLB.ZEROS)))
                                    {
                                        F104_EXNRNOTCRE = move (AV120_NRNOTAFI, F104_EXNRNOTCRE, 9, 0,"UNSIGNED");
                                        F104_EXVLBASCRE = move (AV120_VLBASDID, F104_EXVLBASCRE, 12, 2,"UNSIGNED");
                                        F104_EXVLICMDID = move (AV120_VLICMDID, F104_EXVLICMDID, 12, 2,"UNSIGNED");
                                        F104_EXVLICMDIO = move (AV120_VLICMDIO, F104_EXVLICMDIO, 12, 2,"UNSIGNED");
                                        F104_EXVLFCPDES = move (AV120_VLFCPDES, F104_EXVLFCPDES, 12, 2,"UNSIGNED");
                                        GLBEXW_EXTRACTAS = "104";
                                        P_EXTRACTW();
                                    }
                                }
                            }
                            GLBEXY_EXTRACTAS = "94";
                            P_EXTRACTY();
                        }
                    }
                    break;
                }
            }
        }
        SDINTEM119 = move ("1", SDINTEM119, 1, 0,"UNSIGNED");
        SDINCONTRO = move ("1", SDINCONTRO, 1, 0,"UNSIGNED");
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"LEITURA-AV120");
    }
}
private void MANDA ()
  throws Exception
{   try
    {
XseedEmail email = new XseedEmail();
email.host = SDDSIPSERV;
email.from = SDDSEMASER;
email.to = SDDSEMAILX;
email.bcc = "robson.richart@lince.com.br";
email.subject = SDDSSUBJEC;
email.html = SDDSFONTEX + SDDSAUXEMA.replaceAll(" ","&nbsp;") + GSDDSASSINA;
email.SMTPUser = SDSMTPUSER;
email.SMTPPassword = SDSMTPPASS;
email.sendEmail();
if (email.exception.equals("") == false)
{
trace ("email.exception > " , email.exception.replace('\n',' '));
trace ("emailto : ", email.to);
}
email = null;
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"MANDA");
    }
}
private void NOTAS_SEM_DATA ()
  throws Exception
{   try
    {
    P_SORT11();
    SDCDDEPNFI = move (GLB.ZEROS, SDCDDEPNFI, 2, 0,"UNSIGNED");
    SDNRUSUNFI = move (GLB.ZEROS, SDNRUSUNFI, 4, 0,"UNSIGNED");
    if ((rTrim(GLBEXE.command)).equals("") == true)
    {
        GLBEXE.open(GLBEXE_XSEEDTITLE, "OUTPUT");
        if (GLBEXE.openStatus.equals("")==true)
        {   AuditMSG("Open OUTPUT E (" + GLBEXE_XSEEDTITLE + ")");
        }
        else
        {   abort("Can't OpenFile E (" + GLBEXE_XSEEDTITLE + ")");
        }
    }
    GLBEXE.command = "DT.ACTUAL";
    if ((rTrim(GLB.EXE_STATUS)).equals("") == false)
    {   if (GLBEXE != null)
        {   if (GLB.EXE_XSEEDCOUNT != 0)
            {   GLBEXE.write(GLB.EXE_XSEEDBUFFER.toString());
                GLB.EXE_XSEEDCOUNT = 0;
             }
             if ((GLBEXE.out!=null) && (GLBEXE.out.checkError()) )
             {   GLB.TASK=53;
                 abort("Error on File : " + GLBEXE_XSEEDTITLE);
             }
            GLBEXE.close();
            AuditMSG("Close E (" + GLBEXE_XSEEDTITLE + "), Reads: " + cStr(GLB.EXE_XSEEDREADS) + " Writes: " + cStr(GLB.EXE_XSEEDWRITES));
            GLB.EXE_XSEEDREADS = 0;
            GLB.EXE_XSEEDWRITES = 0;
        }
        GLB.EXE_STATUS = "";
    }
    extractFile = new File(GLBEXE_XSEEDTITLE);
    if (extractFile.exists() == false)
    {   AuditMSG (GLBEXE_XSEEDTITLE + " not found");
        GLB.STATUS = "*****";
    }
    else
    {
        GLBEXE.open(GLBEXE_XSEEDTITLE,"INPUT");
        if (GLBEXE.openStatus.equals("")==true)
        {   AuditMSG("Open INPUT E (" + GLBEXE_XSEEDTITLE + ")");
            GLB.EXE_STATUS = "INPUT";
        }
        else
        {   abort("Can't Open File E (" + GLBEXE_XSEEDTITLE + ")");
        }
        GLB.EXE_STATUS = "INPUT";
        GLB.STATUS = "*****";
        if (GLB.RECORDE > 0.0)
        {   for (double i = 1; i <= GLB.RECORDE + 1; i++)
            {   GLBEXE_XSEEDREG = GLBEXE.read();
            }
            GLB.EXE_XSEEDREADS = GLB.RECORDE;
        }
        else
        {   GLBEXE_XSEEDREG = GLBEXE.read();
        }
        while (GLBEXE_XSEEDREG != null)
        {   GLBEXE_EXTRACTAS = "";
            P_ReadGLBEXE();
            GLB.STATUS = "";
//: QUEBRA PARA ENVIO DE E-MAIL
//: NÃO ENVIAR E-MAIL PARA DEPARTAMENTO ZERO (SDCDDEPNFI = 99)
        if( ((E_EXNRUSUNFI != SDNRUSUNFI) && (SDCDDEPNFI != 99.0)))
        {
            if( (SDNRUSUNFI != GLB.ZEROS))
            {
                SDDSAUXEMA = attachAndSpace("</font>", SDDSAUXEMA, 5000);
                ENVIA_EMAIL ();
                if (GLB.EXIT==true)
                {
                    return;
                }
            }
            SDNRUSUNFI = move (E_EXNRUSUNFI, SDNRUSUNFI, 4, 0,"UNSIGNED");
            SDDSFONTEX = move("<font face=\"Courier New\" size=2>\n", SDDSFONTEX, 100);
            SDDSAUXEMA = move("<B>As notas fiscais abaixo estão sem data de saída, favor verificar.</B>", SDDSAUXEMA, 5000);
            SDDSAUXEMA = attach("<BR><BR>", SDDSAUXEMA, 5000);
            SDDSAUXEMA = attach("<B>", SDDSAUXEMA, 5000);
            SDDSAUXEMA = attach(GRDSCABECA, SDDSAUXEMA, 5000);
            SDDSAUXEMA = attach("</B>", SDDSAUXEMA, 5000);
        }
        if( (E_EXCDDEPNFI != SDCDDEPNFI))
        {
            if( (SDCDDEPNFI != GLB.ZEROS))
            {
                GLB.SHADOW = "E";
                if (GLB.INITREPORTE == true)
                {
                   if ( GLB.LPE.checkError() )
                   {   GLB.TASK=52;
                       abort("Error on File : " + GLB.LPE_XSEEDTITLE);
                   }
                   GLB.LPE.close();
                   AuditMSG("Close E (" + GLB.LPE_XSEEDTITLE + "), Writes: " + GLB.PRINTE_XSEEDWRITES );
                   GLB.PRINTE_XSEEDWRITES = 0;
                   if (GLB.DEVICE.equals("RP") == true || GLB.DEVICE.equals("TP") == true)
                   {   P_PRINTER();
                   }
                   if (GLB.DEVICE.equals("VD") == true)
                   {   P_VIDEO();
                   }
                   if (GLB.DEVICE.equals("LP") == true)
                   {   P_LINEPRINTER();
                   }
                }
                GLB.LINECOUNTE = 9998;
                GLB.PAGECOUNTE = 0;
                GLB.INITREPORTE = false;
                GLB.LPE_XSEEDTITLE = "";

            }
            SDCDDEPNFI = move (E_EXCDDEPNFI, SDCDDEPNFI, 2, 0,"UNSIGNED");
        }
        SDNRUSUNFI = move (E_EXNRUSUNFI, SDNRUSUNFI, 4, 0,"UNSIGNED");
        GLB.SECURE = false;
        GLB.STATUS = GS10703_DetermineEvery (SDNRUSUNFI);
        while (GS107_XSEEDEOF == false)
        {   GS10703_DetermineMoveNext();
            if (GS107_XSEEDEOF == true)
            {   break;
            }
            SDCDUSUARI = move(GS107_CDUSUARI, SDCDUSUARI, 25);
            break;
        }
        GLB.SHADOW = "E";
        P_56("PRINT.FRAME");
        if( (SDCDDEPNFI != 99.0))
        {
            SDDSAUXEMA = attach("<BR>", SDDSAUXEMA, 5000);
            SDDSAUXEMA = attach(GRDSLINHAX, SDDSAUXEMA, 5000);
        }
        }
    }
    if( ((SDNRUSUNFI != GLB.ZEROS) && (SDCDDEPNFI != 99.0)))
    {
        SDDSAUXEMA = attachAndSpace("</font>", SDDSAUXEMA, 5000);
        ENVIA_EMAIL ();
        if (GLB.EXIT==true)
        {
            return;
        }
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"NOTAS-SEM-DATA");
    }
}
private void PRIMEIRA_VEZ ()
  throws Exception
{   try
    {
    if( (SDINPRIVEZ == GLB.ZEROS))
    {
        F10_EXCDNATOPE = move (SDCDNATOPE, F10_EXCDNATOPE, 4, 0,"UNSIGNED");
        F10_EXCDNATCOM = move (SDCDNATCOM, F10_EXCDNATCOM, 2, 0,"UNSIGNED");
        if( (((AV120_CDNATOPE != SDCDNATOPE) || (AV120_CDNATCOM != SDCDNATCOM)) || (AV120_CDOCONAT != SDCDOCONAT)))
        {
            F10_EXVLBASICM = move (SDVLICMNAT, F10_EXVLBASICM, 13, 2,"UNSIGNED");
            F10_EXVLBASSTR = move (SDVLBASSTR, F10_EXVLBASSTR, 14, 2,"UNSIGNED");
//::DIFAL
            F10_EXVLBASDID = move (SDVLBASDID, F10_EXVLBASDID, 14, 2,"UNSIGNED");
            F10_EXVLICMDID = move (SDVLICMDID, F10_EXVLICMDID, 12, 2,"UNSIGNED");
            F10_EXVLICMDIO = move (SDVLICMDIO, F10_EXVLICMDIO, 12, 2,"UNSIGNED");
            F10_EXVLFCPDES = move (SDVLFCPDES, F10_EXVLFCPDES, 12, 2,"UNSIGNED");
            if( (AV119_CDTIPFAT == GLB.ZEROS))
            {
                F10_EXVLIMPICM = move (SDVLIMPICM, F10_EXVLIMPICM, 13, 2,"UNSIGNED");
                F10_EXVLICMSTR = move (SDVLICMSTR, F10_EXVLICMSTR, 14, 2,"UNSIGNED");
                if( (AV119_DIEMINOT > 19940700.0))
                {
                    F10_EXVLBASICM = move (GLB.ZEROS, F10_EXVLBASICM, 13, 2,"UNSIGNED");
                    F10_EXVLBASSTR = move (GLB.ZEROS, F10_EXVLBASSTR, 14, 2,"UNSIGNED");
                    F10_EXVLIMPICM = move (GLB.ZEROS, F10_EXVLIMPICM, 13, 2,"UNSIGNED");
                    F10_EXVLICMSTR = move (GLB.ZEROS, F10_EXVLICMSTR, 14, 2,"UNSIGNED");
                }
            }
            if( (AV119_CDTIPFAT != GLB.ZEROS))
            {
                F10_EXVLIMPICM = move (SDVLIMPICM, F10_EXVLIMPICM, 13, 2,"UNSIGNED");
                F10_EXVLICMSTR = move (SDVLICMSTR, F10_EXVLICMSTR, 14, 2,"UNSIGNED");
                F10_EXPCICMNAT = move (CG110_PCICMFIS, F10_EXPCICMNAT, 5, 2,"UNSIGNED");
            }
            if( (SDINICMPRO == 1.0))
            {
                if( (((SDVLICMNAT != GLB.ZEROS) || (SDVLIMPICM != GLB.ZEROS)) || (SDVLICMSTR != GLB.ZEROS)))
                {
                    ITCDNATOPE = move (GLB.ZEROS, ITCDNATOPE, 6, 0,"UNSIGNED");
                    while (true)
                    {
                        ITCDNATOPE = add(cDec("1"), ITCDNATOPE, 6, 0, "UNSIGNED", "TRUNCATE");
                        if( (ITCDNATOPE > 20.0))
                        {
                            break;
                        }
                        if( (TBCDNATOPE[(int)ITCDNATOPE - 1] == GLB.ZEROS))
                        {
                            TBCDNATOPE[(int)ITCDNATOPE - 1] = move (CG110_CDNATOPE, TBCDNATOPE[(int)ITCDNATOPE - 1], 4, 0,"UNSIGNED");
                            TBCDNATCOM[(int)ITCDNATOPE - 1] = move (CG110_CDNATCOM, TBCDNATCOM[(int)ITCDNATOPE - 1], 2, 0,"UNSIGNED");
                            TBCDOCONAT[(int)ITCDNATOPE - 1] = move (CG110_CDOCONAT, TBCDOCONAT[(int)ITCDNATOPE - 1], 2, 0,"UNSIGNED");
                            TBPCICMNAT[(int)ITCDNATOPE - 1] = move (CG110_PCICMFIS, TBPCICMNAT[(int)ITCDNATOPE - 1], 14, 2,"UNSIGNED");
                            TBVLBASICM[(int)ITCDNATOPE - 1] = move (SDVLICMNAT, TBVLBASICM[(int)ITCDNATOPE - 1], 14, 2,"UNSIGNED");
                            TBVLICMNAT[(int)ITCDNATOPE - 1] = move (SDVLIMPICM, TBVLICMNAT[(int)ITCDNATOPE - 1], 14, 2,"UNSIGNED");
                            TBNRCONTAX[(int)ITCDNATOPE - 1] = move (F10_EXNRCONTAX, TBNRCONTAX[(int)ITCDNATOPE - 1], 6, 0,"UNSIGNED");
                            TBVLBASSTR[(int)ITCDNATOPE - 1] = move (SDVLBASSTR, TBVLBASSTR[(int)ITCDNATOPE - 1], 14, 2,"UNSIGNED");
                            TBVLICMSTR[(int)ITCDNATOPE - 1] = move (SDVLICMSTR, TBVLICMSTR[(int)ITCDNATOPE - 1], 14, 2,"UNSIGNED");
                            break;
                        }
                        if( (((TBCDNATOPE[(int)ITCDNATOPE - 1] == CG110_CDNATOPE) && (TBCDNATCOM[(int)ITCDNATOPE - 1] == CG110_CDNATCOM)) && (TBCDOCONAT[(int)ITCDNATOPE - 1] == CG110_CDOCONAT)))
                        {
                            TBVLBASICM[(int)ITCDNATOPE - 1] = add(SDVLICMNAT, TBVLBASICM[(int)ITCDNATOPE - 1], 14, 2, "UNSIGNED", "TRUNCATE");
                            TBVLICMNAT[(int)ITCDNATOPE - 1] = add(SDVLIMPICM, TBVLICMNAT[(int)ITCDNATOPE - 1], 14, 2, "UNSIGNED", "TRUNCATE");
                            TBVLBASSTR[(int)ITCDNATOPE - 1] = add(SDVLBASSTR, TBVLBASSTR[(int)ITCDNATOPE - 1], 14, 2, "UNSIGNED", "TRUNCATE");
                            TBVLICMSTR[(int)ITCDNATOPE - 1] = add(SDVLICMSTR, TBVLICMSTR[(int)ITCDNATOPE - 1], 14, 2, "UNSIGNED", "TRUNCATE");
                            break;
                        }
                    }
                }
            }
            if( ((AXTPRELATO == 1.0) && (AXINATUALI == 2.0)))
            {
                GEVLIMPICM = move (SDVLIMPICM, GEVLIMPICM, 14, 2,"UNSIGNED");
                GEVLIMPICM_ITEM();
                GEVLICMSTR = move (SDVLICMSTR, GEVLICMSTR, 14, 2,"UNSIGNED");
                GEVLICMSTR_ITEM();
                GEVLBASICM = move (SDVLICMNAT, GEVLBASICM, 14, 2,"UNSIGNED");
                GEVLBASICM_ITEM();
                GEVLBASSTR = move (SDVLBASSTR, GEVLBASSTR, 14, 2,"UNSIGNED");
                GEVLBASSTR_ITEM();
                GLB.SHADOW = " ";
                P_62("PRINT.FRAME");
                GEVLINTEGR = move (GLB.ZEROS, GEVLINTEGR, 14, 2,"UNSIGNED");
                GEVLINTEGR_ITEM();
                GEVLBASICM = move (GLB.ZEROS, GEVLBASICM, 14, 2,"UNSIGNED");
                GEVLBASICM_ITEM();
                GEVLBASIPI = move (GLB.ZEROS, GEVLBASIPI, 14, 2,"UNSIGNED");
                GEVLBASIPI_ITEM();
                GEVLIMPICM = move (GLB.ZEROS, GEVLIMPICM, 14, 2,"UNSIGNED");
                GEVLIMPICM_ITEM();
                GEVLIMPIPI = move (GLB.ZEROS, GEVLIMPIPI, 14, 2,"UNSIGNED");
                GEVLIMPIPI_ITEM();
                GEVLINTICM = move (GLB.ZEROS, GEVLINTICM, 14, 2,"UNSIGNED");
                GEVLINTICM_ITEM();
                GEVLINTIPI = move (GLB.ZEROS, GEVLINTIPI, 14, 2,"UNSIGNED");
                GEVLINTIPI_ITEM();
                GEVLOUTICM = move (GLB.ZEROS, GEVLOUTICM, 14, 2,"UNSIGNED");
                GEVLOUTICM_ITEM();
                GEVLOUTIPI = move (GLB.ZEROS, GEVLOUTIPI, 14, 2,"UNSIGNED");
                GEVLOUTIPI_ITEM();
                GEVLCONTNC = move (GLB.ZEROS, GEVLCONTNC, 14, 2,"UNSIGNED");
                GEVLCONTNC_ITEM();
                GEVLBICMNC = move (GLB.ZEROS, GEVLBICMNC, 14, 2,"UNSIGNED");
                GEVLBICMNC_ITEM();
                GEVLBASSTR = move (GLB.ZEROS, GEVLBASSTR, 14, 2,"UNSIGNED");
                GEVLBASSTR_ITEM();
                GEVLICMSTR = move (GLB.ZEROS, GEVLICMSTR, 14, 2,"UNSIGNED");
                GEVLICMSTR_ITEM();
            }
            SDCDNATOPE = move (AV120_CDNATOPE, SDCDNATOPE, 4, 0,"UNSIGNED");
            SDCDNATCOM = move (AV120_CDNATCOM, SDCDNATCOM, 2, 0,"UNSIGNED");
            SDCDOCONAT = move (AV120_CDOCONAT, SDCDOCONAT, 2, 0,"UNSIGNED");
            SDVLICMNAT = move (GLB.ZEROS, SDVLICMNAT, 14, 2,"UNSIGNED");
            SDVLBASSTR = move (GLB.ZEROS, SDVLBASSTR, 14, 2,"UNSIGNED");
            SDVLIMPICM = move (GLB.ZEROS, SDVLIMPICM, 14, 2,"UNSIGNED");
            SDVLICMSTR = move (GLB.ZEROS, SDVLICMSTR, 14, 2,"UNSIGNED");
//::DIFAL
            SDVLBASDID = move (GLB.ZEROS, SDVLBASDID, 14, 2,"UNSIGNED");
            SDVLICMDID = move (GLB.ZEROS, SDVLICMDID, 14, 2,"UNSIGNED");
            SDVLICMDIO = move (GLB.ZEROS, SDVLICMDIO, 14, 2,"UNSIGNED");
            SDVLFCPDES = move (GLB.ZEROS, SDVLFCPDES, 14, 2,"UNSIGNED");
        }
//:************ CLASSIFICA O DECENDIO **************
        F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
        GSDDIDISAMD = move (format(AV119_DIEMINOT ,"99999999"), GSDDIDISAMD,8);
        GSDDIDISAMD_GROUP();
        if( (AXDIINICIO > 20041000.0))
        {
            F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
        }
        else
        {
            if( (AXDIINICIO > 20040100.0))
            {
                if( (GSDDIDDSAMD < 16.0))
                {
                    F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                }
                else
                {
                    F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                }
            }
            else
            {
                if( (GSDDIDDSAMD < 11.0))
                {
                    F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
                }
                else
                {
                    if( (GSDDIDDSAMD < 21.0))
                    {
                        F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                    }
                    else
                    {
                        F10_EXINDECEND = move ("3", F10_EXINDECEND, 1, 0,"UNSIGNED");
                    }
                }
            }
        }
//:*************************************************
//::        EX; 10 AS; C
        CG133_InitAuto();
        AU_CG133_CDCONTAX = auto (F10_EXNRCONTAX, AU_CG133_CDCONTAX, 6, 0,"UNSIGNED");
        AU_CG133_CDEMPRES = auto (GSDCDEMPRES, AU_CG133_CDEMPRES, 2, 0,"UNSIGNED");
        AU_CG133_CDMODENF = auto (F10_EXCDMODENF, AU_CG133_CDMODENF, 1, 0,"UNSIGNED");
        AU_CG133_CDNATCOM = auto (F10_EXCDNATCOM, AU_CG133_CDNATCOM, 2, 0,"UNSIGNED");
        AU_CG133_CDNATOPE = auto (F10_EXCDNATOPE, AU_CG133_CDNATOPE, 4, 0,"UNSIGNED");
        AU_CG133_CDUFMUNI = auto(F10_EXCDUFMUNI, AU_CG133_CDUFMUNI, 2);
        AU_CG133_DIEMINOT = auto (F10_EXDIEMINOT, AU_CG133_DIEMINOT, 8, 0,"UNSIGNED");
        AU_CG133_DISAINOT = auto (F10_EXDISAINOT, AU_CG133_DISAINOT, 8, 0,"UNSIGNED");
        AU_CG133_INCONFIN = auto (F10_EXINCONFIN, AU_CG133_INCONFIN, 1, 0,"UNSIGNED");
        AU_CG133_INDECEND = auto (F10_EXINDECEND, AU_CG133_INDECEND, 1, 0,"UNSIGNED");
        AU_CG133_INORIGEM = auto (F10_EXINORIGEM, AU_CG133_INORIGEM, 1, 0,"UNSIGNED");
        AU_CG133_INSITNOT = auto (F10_EXNRCANCEL, AU_CG133_INSITNOT, 1, 0,"UNSIGNED");
        AU_CG133_INSITREG = auto("F", AU_CG133_INSITREG, 1);
        AU_CG133_INZONAFR = auto (SDINZONAFR, AU_CG133_INZONAFR, 1, 0,"UNSIGNED");
        AU_CG133_NRCFICMP = auto (F10_EXNRCFICMP, AU_CG133_NRCFICMP, 6, 0,"UNSIGNED");
        AU_CG133_NRNOTAFI = auto (F10_EXNRNOTAFI, AU_CG133_NRNOTAFI, 9, 0,"UNSIGNED");
        AU_CG133_NRNOTFIN = auto (F10_EXNRNOTFIN, AU_CG133_NRNOTFIN, 7, 0,"UNSIGNED");
        AU_CG133_PCICMNAT = auto (F10_EXPCICMNAT, AU_CG133_PCICMNAT, 5, 2,"UNSIGNED");
        AU_CG133_PCICMPRO = auto (GLB.ZEROS, AU_CG133_PCICMPRO, 4, 2,"UNSIGNED");
        AU_CG133_TPREGIST = auto (F10_EXTPREGIST, AU_CG133_TPREGIST, 1, 0,"UNSIGNED");
        AU_CG133_TPSERIEN = auto(F10_EXNRSERIEX, AU_CG133_TPSERIEN, 3);
        AU_CG133_VLBASDID = auto (F10_EXVLBASDID, AU_CG133_VLBASDID, 14, 2,"UNSIGNED");
        AU_CG133_VLICMDID = auto (F10_EXVLICMDID, AU_CG133_VLICMDID, 12, 2,"UNSIGNED");
        AU_CG133_VLICMDIO = auto (F10_EXVLICMDIO, AU_CG133_VLICMDIO, 12, 2,"UNSIGNED");
        AU_CG133_VLFCPDES = auto (F10_EXVLFCPDES, AU_CG133_VLFCPDES, 12, 2,"UNSIGNED");
        AU_CG133_VLBASICM = auto (F10_EXVLBASICM, AU_CG133_VLBASICM, 14, 2,"UNSIGNED");
        AU_CG133_VLBASIPI = auto (F10_EXVLBASIPI, AU_CG133_VLBASIPI, 14, 2,"UNSIGNED");
        AU_CG133_VLBASSTR = auto (F10_EXVLBASSTR, AU_CG133_VLBASSTR, 14, 2,"UNSIGNED");
        AU_CG133_VLCONTAX = auto (F10_EXVLCONTAX, AU_CG133_VLCONTAX, 14, 2,"UNSIGNED");
        AU_CG133_VLICMPRO = auto (GLB.ZEROS, AU_CG133_VLICMPRO, 14, 2,"UNSIGNED");
        AU_CG133_VLICMSTR = auto (F10_EXVLICMSTR, AU_CG133_VLICMSTR, 14, 2,"UNSIGNED");
        AU_CG133_VLIMPICM = auto (F10_EXVLIMPICM, AU_CG133_VLIMPICM, 14, 2,"UNSIGNED");
        AU_CG133_VLIMPIPI = auto (F10_EXVLIMPIPI, AU_CG133_VLIMPIPI, 14, 2,"UNSIGNED");
        AU_CG133_VLISEICM = auto (F10_EXVLISEICM, AU_CG133_VLISEICM, 14, 2,"UNSIGNED");
        AU_CG133_VLISEIPI = auto (F10_EXVLISEIPI, AU_CG133_VLISEIPI, 14, 2,"UNSIGNED");
        AU_CG133_VLLIQUID = auto (GLB.ZEROS, AU_CG133_VLLIQUID, 14, 2,"UNSIGNED");
        AU_CG133_VLOUTICM = auto (F10_EXVLOUTICM, AU_CG133_VLOUTICM, 14, 2,"UNSIGNED");
        AU_CG133_VLOUTIPI = auto (F10_EXVLOUTIPI, AU_CG133_VLOUTIPI, 14, 2,"UNSIGNED");
        AU_CG133_VLPERICM = auto (F10_EXVLPERICM, AU_CG133_VLPERICM, 5, 2,"UNSIGNED");
        AU_CG133_VLPERIPI = auto (F10_EXVLPERIPI, AU_CG133_VLPERIPI, 5, 2,"UNSIGNED");
        if ((GLB.ERROR.trim()).equals("")==true)
        {
            CG133_AutoToFile();
            CG133_Insert ();
            CG133_InitAuto();
        }
        GLB.SHADOW = " ";
        P_50("PRINT.FRAME");
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"PRIMEIRA-VEZ");
    }
}
private void VERIF_ORIGEM ()
  throws Exception
{   try
    {
    if( ((rTrim(SDCDUFMUNI)).equals(rTrim(GS101_CDUFLOCA))==true))
    {
        SDINORIGEM = move ("1", SDINORIGEM, 1, 0,"UNSIGNED");
    }
    else
    {
        if (rTrim(SDCDUFMUNI).equals(rTrim("EX")))
        {
            SDINORIGEM = move ("4", SDINORIGEM, 1, 0,"UNSIGNED");
        }
        else
        if (rTrim(SDCDUFMUNI).equals(rTrim("PR")) || rTrim(SDCDUFMUNI).equals(rTrim("SC")) || rTrim(SDCDUFMUNI).equals(rTrim("RS")) || rTrim(SDCDUFMUNI).equals(rTrim("SP")) || rTrim(SDCDUFMUNI).equals(rTrim("RJ")) || rTrim(SDCDUFMUNI).equals(rTrim("MG")))
        {
            SDINORIGEM = move ("2", SDINORIGEM, 1, 0,"UNSIGNED");
        }
        else {
            SDINORIGEM = move ("3", SDINORIGEM, 1, 0,"UNSIGNED");
        }
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"VERIF-ORIGEM");
    }
}
private void VERIFICA_CLIENTE ()
  throws Exception
{   try
    {
    SDINCLIENT = move (GLB.ZEROS, SDINCLIENT, 1, 0,"UNSIGNED");
    SDINACHOUX = move (GLB.ZEROS, SDINACHOUX, 1, 0,"UNSIGNED");
    if (AV119_INCLIFOR == GLB.ZEROS)
    {
        GLB.SECURE = false;
        GLB.STATUS = AV10101_DetermineEvery (GSDCDEMPRES, AV119_CDCLIENT);
        while (AV101_XSEEDEOF == false)
        {   AV10101_DetermineMoveNext();
            if (AV101_XSEEDEOF == true)
            {   break;
            }
            if( (AV101_CDFISJUR == 1.0))
            {
                SDINCLIENT = move ("1", SDINCLIENT, 1, 0,"UNSIGNED");
            }
            if( (AV101_INSIMNAC != GLB.ZEROS))
            {
                SDINCLIENT = move ("2", SDINCLIENT, 1, 0,"UNSIGNED");
            }
            if( (AV101_CDVDCONS == 2.0))
            {
                SDINCLIENT = move ("3", SDINCLIENT, 1, 0,"UNSIGNED");
            }
            SDINACHOUX = move ("1", SDINACHOUX, 1, 0,"UNSIGNED");
            break;
        }
    }
    else
    if (AV119_INCLIFOR == 1.0)
    {
        GLB.SECURE = false;
        GLB.STATUS = SU10101_DetermineEvery (GSDCDEMPRES, AV119_CDCLIENT);
        while (SU101_XSEEDEOF == false)
        {   SU10101_DetermineMoveNext();
            if (SU101_XSEEDEOF == true)
            {   break;
            }
            AV101_CDDOPAIS = move (SU101_CDDOPAIS, AV101_CDDOPAIS, 3, 0,"UNSIGNED");
            AV101_NRCEPLOC = move (SU101_NRCEPLOC, AV101_NRCEPLOC, 5, 0,"UNSIGNED");
            if( (SU101_CDFISJUR == 1.0))
            {
                SDINCLIENT = move ("1", SDINCLIENT, 1, 0,"UNSIGNED");
            }
            SDINACHOUX = move ("1", SDINACHOUX, 1, 0,"UNSIGNED");
            break;
        }
    }
    else
    if (AV119_INCLIFOR == 2.0)
    {
        GLB.SECURE = false;
        GLB.STATUS = MK10201_DetermineEvery (GSDCDEMPRES, AV119_CDCLIENT);
        while (MK102_XSEEDEOF == false)
        {   MK10201_DetermineMoveNext();
            if (MK102_XSEEDEOF == true)
            {   break;
            }
            AV101_CDDOPAIS = move (MK102_CDDOPAIS, AV101_CDDOPAIS, 3, 0,"UNSIGNED");
            AV101_NRCEPLOC = move (MK102_NRCEPLOC, AV101_NRCEPLOC, 5, 0,"UNSIGNED");
            SDINCLIENT = move ("1", SDINCLIENT, 1, 0,"UNSIGNED");
            SDINACHOUX = move ("1", SDINACHOUX, 1, 0,"UNSIGNED");
            break;
        }
    }
    else
    if (AV119_INCLIFOR == 3.0)
    {
        GLB.SECURE = false;
        GLB.STATUS = MK10101_DetermineEvery (GSDCDEMPRES, AV119_CDCLIENT);
        while (MK101_XSEEDEOF == false)
        {   MK10101_DetermineMoveNext();
            if (MK101_XSEEDEOF == true)
            {   break;
            }
            AV101_CDDOPAIS = move (MK101_CDDOPAIS, AV101_CDDOPAIS, 3, 0,"UNSIGNED");
            AV101_NRCEPLOC = move (MK101_NRCEPLOC, AV101_NRCEPLOC, 5, 0,"UNSIGNED");
            if( (MK101_CDFISJUR == 1.0))
            {
                SDINCLIENT = move ("1", SDINCLIENT, 1, 0,"UNSIGNED");
            }
            SDINACHOUX = move ("1", SDINACHOUX, 1, 0,"UNSIGNED");
            break;
        }
    }
    else
    if (AV119_INCLIFOR == 4.0)
    {
        GLB.SECURE = false;
        GLB.STATUS = GS10703_DetermineEvery (AV119_CDCLIENT);
        while (GS107_XSEEDEOF == false)
        {   GS10703_DetermineMoveNext();
            if (GS107_XSEEDEOF == true)
            {   break;
            }
            AV101_CDDOPAIS = move (GLB.ZEROS, AV101_CDDOPAIS, 3, 0,"UNSIGNED");
            AV101_NRCEPLOC = move (GS107_NRCEPRES, AV101_NRCEPLOC, 5, 0,"UNSIGNED");
            SDINCLIENT = move ("1", SDINCLIENT, 1, 0,"UNSIGNED");
            SDINACHOUX = move ("1", SDINACHOUX, 1, 0,"UNSIGNED");
            break;
        }
    }
    else
    if (AV119_INCLIFOR == 5.0)
    {
        GLB.SECURE = false;
        GLB.STATUS = CE12101_DetermineEvery (GSDCDEMPRES, AV119_CDCLIENT);
        while (CE121_XSEEDEOF == false)
        {   CE12101_DetermineMoveNext();
            if (CE121_XSEEDEOF == true)
            {   break;
            }
            AV101_CDDOPAIS = move (CE121_CDDOPAIS, AV101_CDDOPAIS, 3, 0,"UNSIGNED");
            AV101_NRCEPLOC = move (CE121_NRCEPLOC, AV101_NRCEPLOC, 5, 0,"UNSIGNED");
            SDINACHOUX = move ("1", SDINACHOUX, 1, 0,"UNSIGNED");
            break;
        }
    }
    else
    if (AV119_INCLIFOR == 6.0)
    {
        GLB.SECURE = false;
        GLB.STATUS = CE11801_DetermineEvery (GSDCDEMPRES, AV119_CDCLIENT);
        while (CE118_XSEEDEOF == false)
        {   CE11801_DetermineMoveNext();
            if (CE118_XSEEDEOF == true)
            {   break;
            }
            AV101_CDDOPAIS = move (CE118_CDDOPAIS, AV101_CDDOPAIS, 3, 0,"UNSIGNED");
            AV101_NRCEPLOC = move (CE118_NRCEPLOC, AV101_NRCEPLOC, 5, 0,"UNSIGNED");
            SDINACHOUX = move ("1", SDINACHOUX, 1, 0,"UNSIGNED");
            break;
        }
    }
    GLB.SECURE = false;
    GLB.STATUS = AV28101_DetermineGroupFrom (3, true, GSDCDEMPRES, AV119_INCLIFOR, AV119_CDCLIENT, SDDIINICIO, GLB.ZEROS, GSDCDEMPRES, AV119_INCLIFOR, AV119_CDCLIENT, SDDIFINALX, 999999.0);
    while (AV281_XSEEDEOF == false)
    {
        AV28101_DetermineMoveNext ();
        if (AV281_XSEEDEOF == true)
        {    break;
        }
        AV101_CDDOPAIS = move (AV281_CDDOPAIS, AV101_CDDOPAIS, 3, 0,"UNSIGNED");
        AV101_NRCEPLOC = move (AV281_NRCEPLOC, AV101_NRCEPLOC, 5, 0,"UNSIGNED");
        AV101_NRCEPCOM = move (AV281_NRCEPCOM, AV101_NRCEPCOM, 3, 0,"UNSIGNED");
    }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"VERIFICA-CLIENTE");
    }
}
private void P_1 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
    if( ((SDINLIVANU != GLB.ZEROS) && (SDNRCONPAG > SDNRLIMPRS)))
    {
        GLB.SHADOW = " ";
        P_7("PRINT.FRAME");
        GLB.SHADOW = currentShadow;
    }
    if( ((rTrim(AXINBACDET)).equals(rTrim("S"))==true))
    {
        GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
        DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
        F1_RLDTINICIA = move(GLB.DC_DD_MM_CCYY, F1_RLDTINICIA, 10);
        GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
        DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
        F1_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F1_RLDTFINALX, 10);
        F1_RLNMEMPRES = move(SDNMEMPRES, F1_RLNMEMPRES, 30);
        F1_RLNRIESEMP = move(GS101_NRINSCRE, F1_RLNRIESEMP, 15);
        F1_RLNRCGCNUM = move (GS101_NRCGCNUM, F1_RLNRCGCNUM, 8, 0,"UNSIGNED");
        F1_RLNRCGCFIL = move (GS101_NRCGCFIL, F1_RLNRCGCFIL, 4, 0,"UNSIGNED");
        F1_RLNRCGCDIG = move (GS101_NRCGCDIG, F1_RLNRCGCDIG, 2, 0,"UNSIGNED");
        F1_RLNRFOLHAS = move (SDNRCONPAG, F1_RLNRFOLHAS, 5, 0,"UNSIGNED");
        F1_RLDSLITOBS = move("OBSERV.", F1_RLDSLITOBS, 6);
        F1_RLNRSOLICI = move (GSDNRSOLICI, F1_RLNRSOLICI, 6, 0,"UNSIGNED");
        if( (((AXTPRELATO == 2.0) || (AXTPRELATO == 4.0)) || (AXTPRELATO == 6.0)))
        {
            F1_RLDSTIPREL = move("** EMITIDAS NO MES E NAO DESPACHADAS **", F1_RLDSTIPREL, 46);
            F1_RLDSLITOBS = move("DATA SAIDA", F1_RLDSLITOBS, 6);
        }
        if( ((AXTPRELATO == 3.0) || (AXTPRELATO == 5.0)))
        {
            F1_RLDSTIPREL = move("** DESPACHADAS NO MES REF. MESES ANTERIORES **", F1_RLDSTIPREL, 46);
            F1_RLDSLITOBS = move("DATA EMIS.", F1_RLDSLITOBS, 6);
        }
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_1();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_1");
    }
}
private void P_2 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_2();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_2");
    }
}
private void P_3 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    if( (((((((((F3_RLVLBASICM == GLB.ZEROS) && (F3_RLVLBASIPI == GLB.ZEROS)) && (F3_RLVLIMPICM == GLB.ZEROS)) && (F3_RLVLIMPIPI == GLB.ZEROS)) && (F3_RLVLISEICM == GLB.ZEROS)) && (F3_RLVLISEIPI == GLB.ZEROS)) && (F3_RLVLOUTICM == GLB.ZEROS)) && (F3_RLVLOUTIPI == GLB.ZEROS)) && (GLB.LINECOUNT == GLB.FORMDEPTH)))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_3();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_3");
    }
}
private void P_4 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_4();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_4");
    }
}
private void P_6 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GSDDSALFA01 = move(F6_RLDSABRENC, GSDDSALFA01, 1);
    if( ((rTrim(GSDDSALFA01)).equals(rTrim("A"))==true))
    {
        F6_RLDTDIAATU = move ("01", F6_RLDTDIAATU, 2, 0,"UNSIGNED");
        if( (SDINLIVANU != GLB.ZEROS))
        {
            GSDDIMMSAMD = move ("01", GSDDIMMSAMD, 2, 0,"UNSIGNED");
            GSDDIMMSAMD_ITEM();
        }
    }
    else
    {
        GSDDIAMSAMD = move (format(AXAMREFERE ,"999999"), GSDDIAMSAMD,6);
        GSDDIAMSAMD_ITEM();
        GSDDIAMSAMD_GROUP();
        GSDDIDDSAMD = move ("01", GSDDIDDSAMD, 2, 0,"UNSIGNED");
        GSDDIDDSAMD_ITEM();
        GSDDIREFSEC = move (GSDDIDISAMD, GSDDIREFSEC, 8, 0,"UNSIGNED");
        GSDTPCALDAT = move ("1", GSDTPCALDAT, 1, 0,"UNSIGNED");
        GSP017 ();
        GLB.SHADOW = currentShadow;
        if (GLB.EXIT==true)
        {
           GLB.EXIT=false;
            return;
        }
        GSDDIDISAMD = move (format(GSDDIREFSEC ,"99999999"), GSDDIDISAMD,8);
        GSDDIDISAMD_GROUP();
        F6_RLDTDIAATU = move (GSDDIDDSAMD, F6_RLDTDIAATU, 2, 0,"UNSIGNED");
    }
    GSDDIAMSAMD = move (format(AXAMREFERE ,"999999"), GSDDIAMSAMD,6);
    GSDDIAMSAMD_ITEM();
    GSDDIAMSAMD_GROUP();
    F6_RLAATERMOX = move (format(GSDDISSSAMD ,"99"), F6_RLAATERMOX,4);
    F6_RLAATERMOX = attach(format(GSDDIAASAMD,"99"), F6_RLAATERMOX, 4);
    if( (((rTrim(GSDDSALFA01)).equals(rTrim("A"))==true) && (SDINLIVANU != GLB.ZEROS)))
    {
        GSDDIMMSAMD = move ("01", GSDDIMMSAMD, 2, 0,"UNSIGNED");
        GSDDIMMSAMD_ITEM();
    }
    GSDCDDOITEM = move("NMMESEXT", GSDCDDOITEM, 8);
    GSDCDELENUM = move (GSDDIMMSAMD, GSDCDELENUM, 10, 0,"UNSIGNED");
    GSDCDELENUM_ITEM();
    GSP004 ();
    GLB.SHADOW = currentShadow;
    if (GLB.EXIT==true)
    {
       GLB.EXIT=false;
        return;
    }
    if( (GSDINITEMOK == GLB.ZEROS))
    {
        F6_RLDSMESEXT = move(GSDDSELEMEN, F6_RLDSMESEXT, 9);
    }
    if( (SDINLIVANU != GLB.ZEROS))
    {
        GSDDIDISAMD = move (format(AXDIINICIO ,"99999999"), GSDDIDISAMD,8);
        GSDDIDISAMD_GROUP();
        GSDDIMMSAMD = move ("01", GSDDIMMSAMD, 2, 0,"UNSIGNED");
        GSDDIMMSAMD_ITEM();
        GLB.DC_AUX = GSDDIDISAMD;
        DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    }
    else
    {
        GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
        DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    }
    F6_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F6_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F6_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F6_RLDTFINALX, 10);
    F6_RLNRLIVROX = move (SDNRLIVRRS, F6_RLNRLIVROX, 3, 0,"UNSIGNED");
    F6_RLNRPAGINA = move (SDNRCONPAG, F6_RLNRPAGINA, 3, 0,"UNSIGNED");
    GLB.SHADOW = " ";
    P_31("PRINT.FRAME");
    GLB.SHADOW = currentShadow;
    F6_RLNRPAGFIM = move (SDNRCONPAG, F6_RLNRPAGFIM, 3, 0,"UNSIGNED");
    F6_RLNRCGCNUM = move (GS101_NRCGCNUM, F6_RLNRCGCNUM, 8, 0,"UNSIGNED");
    F6_RLNRCGCFIL = move (GS101_NRCGCFIL, F6_RLNRCGCFIL, 4, 0,"UNSIGNED");
    F6_RLNRCGCDIG = move (GS101_NRCGCDIG, F6_RLNRCGCDIG, 2, 0,"UNSIGNED");
    GLB.DC_AUX = formatDC(SDDIREGJUN, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F6_RLDTREGIST = move(GLB.DC_DD_MM_CCYY, F6_RLDTREGIST, 10);
    F6_RLDSCIDADE = move(GS101_NMLOCALI, F6_RLDSCIDADE, 20);
    F6_RLDSENDEMP = move(GS101_DSENDERE, F6_RLDSENDEMP, 67);
    if( ((rTrim(GS101_DSENDERE)).equals(rTrim(GLB.SPACES))==false))
    {
        F6_RLDSENDEMP = attach(",", F6_RLDSENDEMP, 67);
        if( (GS101_NRENDLOC == GLB.ZEROS))
        {
            F6_RLDSENDEMP = attachAndSpace("S/N", F6_RLDSENDEMP, 67);
        }
        else
        {
            SDDSENDAUX = leftAlign(GS101_NRENDLOC,SDDSENDAUX,false," ",5,0);
            F6_RLDSENDEMP = attachAndSpace(SDDSENDAUX, F6_RLDSENDEMP, 67);
        }
    }
    F6_RLCDUFLEMP = move(SDCDUFLEMP, F6_RLCDUFLEMP, 2);
    F6_RLNRIESEMP = move(GS101_NRINSCRE, F6_RLNRIESEMP, 15);
    F6_RLNRREGJUN = move (SDNRREGJUN, F6_RLNRREGJUN, 11, 0,"UNSIGNED");
    F6_RLNRCRCCON = move(SDNRCRCCON, F6_RLNRCRCCON, 14);
    F6_RLNMCONTAD = move(SDNMCONTAD, F6_RLNMCONTAD, 30);
    F6_RLNMEMPRES = move(SDNMEMPRES, F6_RLNMEMPRES, 80);
//: SE EXISTIR, IMPRIME NOME EXTENSO DA EMPRESA
    if( ((rTrim(GS101_NMEMPEXT)).equals(rTrim(GLB.SPACES))==false))
    {
        F6_RLNMEMPRES = move(GS101_NMEMPEXT, F6_RLNMEMPRES, 80);
    }
//: ATUALIZA NOME DO RESPONSAVEL PERANTE A SRF
    GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
    GSDCDELEALF = move("NMRESSRF", GSDCDELEALF, 10);
    GSDCDELEALF_GROUP();
    GSP004 ();
    GLB.SHADOW = currentShadow;
    if (GLB.EXIT==true)
    {
       GLB.EXIT=false;
        return;
    }
    if( (GSDINITEMOK == GLB.ZEROS))
    {
        F6_RLNMRESSRF = move(GSDDSELEMEN, F6_RLNMRESSRF, 30);
    }
//: ATUALIZA CPF DO RESPONSAVEL PERANTE A SRF
    GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
    GSDCDELEALF = move("NRCPFSRF", GSDCDELEALF, 10);
    GSDCDELEALF_GROUP();
    GSP004 ();
    GLB.SHADOW = currentShadow;
    if (GLB.EXIT==true)
    {
       GLB.EXIT=false;
        return;
    }
    if( (GSDINITEMOK == GLB.ZEROS))
    {
        SDNRCGCNUM = move (GSDVLELEMEN, SDNRCGCNUM, 11, 0,"UNSIGNED");
        GRNRCPFSRF = move (format(SDNRCGCNUM ,"99999999999"), GRNRCPFSRF,11);
        GRNRCPFSRF_GROUP();
        GENRCPFED1 = move (GENRCPF001, GENRCPFED1, 3, 0,"UNSIGNED");
        GENRCPFED1_ITEM();
        GENRCPFED2 = move (GENRCPF002, GENRCPFED2, 3, 0,"UNSIGNED");
        GENRCPFED2_ITEM();
        GENRCPFED3 = move (GENRCPF003, GENRCPFED3, 3, 0,"UNSIGNED");
        GENRCPFED3_ITEM();
        GENRCPFDIG = move (GENRCPF004, GENRCPFDIG, 2, 0,"UNSIGNED");
        GENRCPFDIG_ITEM();
        F6_RLNRCPFSRF = move(GRNRCPFEDI, F6_RLNRCPFSRF, 14);
    }
//:ATUALIZA O CARGO DO RESPONSAVEL PELO IRRF
    GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
    GSDCDELEALF = move("DSCARSRF", GSDCDELEALF, 10);
    GSDCDELEALF_GROUP();
    GSP004 ();
    GLB.SHADOW = currentShadow;
    if (GLB.EXIT==true)
    {
       GLB.EXIT=false;
        return;
    }
    if( (GSDINITEMOK == GLB.ZEROS))
    {
        F6_RLDSCARSRF = move(GSDDSELEMEN, F6_RLDSCARSRF, 30);
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_6();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_6");
    }
}
private void P_7 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    FIM_FR07:
    {
        GENRINFORM = move (SDNRCONPAG, GENRINFORM, 5, 0,"UNSIGNED");
        GENRINFORM_ITEM();
//: DW; AXINIMPPCL = (S)
//:      RELEASE;
//: MV; GLB.ZEROS                       GLB.PAGECOUNT
//: ADVANCE; NEW.PAGE
//:
//: MV; (63)                            GLB.FORMDEPTH
//: MV; (PCL-0617)                      GLB.TITLE
//: END;
        if( (AXTPRELATO > 1.0))
        {
            break FIM_FR07;
        }
        GENRINFORM = add(cDec("1"), GENRINFORM, 5, 0, "UNSIGNED", "TRUNCATE");
        GENRINFORM_ITEM();
        F6_RLNRFOLHAS = move ("1", F6_RLNRFOLHAS, 5, 0,"UNSIGNED");
        F6_RLDSABRENC = move("A B E R T U R A", F6_RLDSABRENC, 23);
        SDNRCONPAG = move (GLB.ZEROS, SDNRCONPAG, 4, 0,"UNSIGNED");
        SDNRCONPAG = add(SDNRULTPRS, SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
        GENRINFORM = move (SDNRCONPAG, GENRINFORM, 5, 0,"UNSIGNED");
        GENRINFORM_ITEM();
        if( ((rTrim(AXINIMPPCL)).equals(rTrim("S"))==true))
        {
//: BP; CLEAR AS H
            GLB.SHADOW = "H";
            P_6("PRINT.FRAME");
            GLB.SHADOW = currentShadow;
            if (GLB.INITREPORTH == false)
            {
                if ( GLB.LPH_XSEEDTITLE != null  && GLB.LPH_XSEEDTITLE.trim().equals("") == false)
                {
                    GLB.LPH = new PrintStream(new FileOutputStream(GLB.LPH_XSEEDTITLE ,true));
                }
                else
                {
                    GLB.LPH_XSEEDTITLE = newBackup(GLB.TITLEH,"");
                    GLB.LPH = new PrintStream(new FileOutputStream(GLB.LPH_XSEEDTITLE ,false));
                }
            }
            GLB.SHADOW = "H";
            if ((GLB.LINECOUNTH >= GLB.FORMDEPTHH) || (GLB.ADVANCEH == true))
            {   P_BEGINPAGE();
                GLB.LINECOUNTH = GLB.LINECOUNTH - 1;
            }
            if (GLB.INITREPORTH == false)
            {   GLB.INITREPORTH = true;
            }
            GLB.ADVANCEH = true;
            GLB.LINECOUNTH = 0;
        }
        else
        {
            beginPageClear(" ");
            GLB.ADVANCE  = true;
            GLB.SHADOW = " ";
            P_6("PRINT.FRAME");
            GLB.SHADOW = currentShadow;
            if (GLB.INITREPORT == false)
            {
                if ( GLB.LP_XSEEDTITLE != null  && GLB.LP_XSEEDTITLE.trim().equals("") == false)
                {
                    GLB.LP = new PrintStream(new FileOutputStream(GLB.LP_XSEEDTITLE ,true));
                }
                else
                {
                    GLB.LP_XSEEDTITLE = newBackup(GLB.TITLE,"");
                    GLB.LP = new PrintStream(new FileOutputStream(GLB.LP_XSEEDTITLE ,false));
                }
            }
            GLB.SHADOW = " ";
            if ((GLB.LINECOUNT  >= GLB.FORMDEPTH ) || (GLB.ADVANCE  == true))
            {   P_BEGINPAGE();
                GLB.LINECOUNT  = GLB.LINECOUNT  - 1;
            }
            if (GLB.INITREPORT  == false)
            {   GLB.INITREPORT  = true;
            }
            GLB.ADVANCE  = true;
            GLB.LINECOUNT  = 0;
        }
        F6_RLDSABRENC = move("E N C E R R A M E N T O", F6_RLDSABRENC, 23);
        F6_RLNRFOLHAS = move (SDNRCONPAG, F6_RLNRFOLHAS, 5, 0,"UNSIGNED");
        if( ((rTrim(AXINIMPPCL)).equals(rTrim("S"))==true))
        {
//: BP; CLEAR AS H
            GLB.SHADOW = "H";
            P_6("PRINT.FRAME");
            GLB.SHADOW = currentShadow;
        }
        else
        {
            beginPageClear(" ");
            GLB.ADVANCE  = true;
            GLB.SHADOW = " ";
            P_6("PRINT.FRAME");
            GLB.SHADOW = currentShadow;
        }
        SDNRCONPAG = move (GLB.ZEROS, SDNRCONPAG, 4, 0,"UNSIGNED");
        SDNRULTPRS = move (GLB.ZEROS, SDNRULTPRS, 3, 0,"UNSIGNED");
        GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
        GSDCDELEALF = move("NRULTPRS", GSDCDELEALF, 10);
        GSDCDELEALF_GROUP();
        if( (AXCDFILIAL > 1.0))
        {
            GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
        }
        GSDINSITREG = move("A", GSDINSITREG, 1);
        GSDVLELEMEN = move ("1", GSDVLELEMEN, 16, 0,"UNSIGNED");
        GSP008 ();
        GLB.SHADOW = currentShadow;
        if (GLB.EXIT==true)
        {
           GLB.EXIT=false;
            return;
        }
        GSDCDDOITEM = move("TBPAREMP", GSDCDDOITEM, 8);
        GSDCDELEALF = move("NRLIVRRS", GSDCDELEALF, 10);
        GSDCDELEALF_GROUP();
        if( (AXCDFILIAL > GLB.ZEROS))
        {
            GSDCDELEALF = attach(format(AXCDFILIAL,"99"), GSDCDELEALF, 10);
            GSDCDELEALF_GROUP();
        }
        GSDINSITREG = move("A", GSDINSITREG, 1);
        SDNRLIVRRS = add(cDec("1"), SDNRLIVRRS, 3, 0, "UNSIGNED", "TRUNCATE");
        GSDVLELEMEN = move (SDNRLIVRRS, GSDVLELEMEN, 16, 0,"UNSIGNED");
        GSP008 ();
        GLB.SHADOW = currentShadow;
        if (GLB.EXIT==true)
        {
           GLB.EXIT=false;
            return;
        }
        SDNRCONPAG = move ("1", SDNRCONPAG, 4, 0,"UNSIGNED");
    }
    if( (GSDCDEMPRES != GLB.ZEROS))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_7();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_7");
    }
}
private void P_9 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_9();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_9");
    }
}
private void P_10 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_10();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_10");
    }
}
private void P_13 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_13();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_13");
    }
}
private void P_21 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F21_RLNMABREMP = move(GSDNMABREMP, F21_RLNMABREMP, 16);
    F21_RLDTSISTEM = move (GSDDTSISSEC, F21_RLDTSISTEM, 8, 0,"UNSIGNED");
    F21_RLTHHHMMED = move(GSDTHHHMMED, F21_RLTHHHMMED, 5);
    F21_RLNRSOLICI = move (GSDNRSOLICI, F21_RLNRSOLICI, 6, 0,"UNSIGNED");
    F21_RLNRPAGINA = move (GLB.PAGECOUNTL, F21_RLNRPAGINA, 4, 0,"UNSIGNED");
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F21_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F21_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F21_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F21_RLDTFINALX, 10);
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_21();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_21");
    }
}
private void P_22 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F23_RLVLCONTAB = add(F22_RLVLCONTAB, F23_RLVLCONTAB, 11, 2, "UNSIGNED", "TRUNCATE");
    F23_RLVLBASICM = add(F22_RLVLBASICM, F23_RLVLBASICM, 11, 2, "UNSIGNED", "TRUNCATE");
    F23_RLVLIMPICM = add(F22_RLVLIMPICM, F23_RLVLIMPICM, 11, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_22();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_22");
    }
}
private void P_23 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F26_RLVLCONTAB = add(F23_RLVLCONTAB, F26_RLVLCONTAB, 11, 2, "UNSIGNED", "TRUNCATE");
    F26_RLVLBASICM = add(F23_RLVLBASICM, F26_RLVLBASICM, 11, 2, "UNSIGNED", "TRUNCATE");
    F26_RLVLIMPICM = add(F23_RLVLIMPICM, F26_RLVLIMPICM, 11, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_23();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_23");
    }
}
private void P_24 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F24_RLNMABREMP = move(GSDNMABREMP, F24_RLNMABREMP, 16);
    F24_RLDTSISTEM = move (GSDDTSISSEC, F24_RLDTSISTEM, 8, 0,"UNSIGNED");
    F24_RLTHHHMMED = move(GSDTHHHMMED, F24_RLTHHHMMED, 5);
    F24_RLNRSOLICI = move (GSDNRSOLICI, F24_RLNRSOLICI, 6, 0,"UNSIGNED");
    F24_RLNRPAGINA = move (GLB.PAGECOUNTM, F24_RLNRPAGINA, 4, 0,"UNSIGNED");
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F24_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F24_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F24_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F24_RLDTFINALX, 10);
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_24();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_24");
    }
}
private void P_25 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F26_RLVLCONTAB = add(F25_RLVLCONTAB, F26_RLVLCONTAB, 11, 2, "UNSIGNED", "TRUNCATE");
    F26_RLVLBASICM = add(F25_RLVLBASICM, F26_RLVLBASICM, 11, 2, "UNSIGNED", "TRUNCATE");
    F26_RLVLIMPICM = add(F25_RLVLIMPICM, F26_RLVLIMPICM, 11, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_25();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_25");
    }
}
private void P_26 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_26();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_26");
    }
}
private void P_27 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F27_RLNMABREMP = move(GSDNMABREMP, F27_RLNMABREMP, 16);
    F27_RLDTSISTEM = move (GSDDTSISSEC, F27_RLDTSISTEM, 8, 0,"UNSIGNED");
    F27_RLTHHHMMED = move(GSDTHHHMMED, F27_RLTHHHMMED, 5);
    F27_RLNRSOLICI = move (GSDNRSOLICI, F27_RLNRSOLICI, 6, 0,"UNSIGNED");
    F27_RLNRPAGINA = move (GLB.PAGECOUNTN, F27_RLNRPAGINA, 4, 0,"UNSIGNED");
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F27_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F27_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F27_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F27_RLDTFINALX, 10);
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_27();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_27");
    }
}
private void P_28 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F29_RLVLBASICM = add(F28_RLVLBASICM, F29_RLVLBASICM, 11, 2, "UNSIGNED", "TRUNCATE");
    F29_RLVLICMPRO = add(F28_RLVLICMPRO, F29_RLVLICMPRO, 11, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_28();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_28");
    }
}
private void P_29 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    if( (F29_RLVLBASICM == GLB.ZEROS))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_29();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_29");
    }
}
private void P_31 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
//: ROTINA DE EXTENSO
//:------------------------
    GENRINFORM = move (GLB.ZEROS, GENRINFORM, 5, 0,"UNSIGNED");
    GENRINFORM_ITEM();
    GSDVLPARAME = move (F6_RLNRPAGINA, GSDVLPARAME, 14, 2,"UNSIGNED");
    GSDINREAISX = move("N", GSDINREAISX, 1);
    EXTENSO ();
    GLB.SHADOW = currentShadow;
    if (GLB.EXIT==true)
    {
       GLB.EXIT=false;
        return;
    }
    F6_RLDSPAGINA = move(GSDDSPARAME, F6_RLDSPAGINA, 36);
//:
//:MV; RLNRPAGINA OF 06                            GENRINFORM
//:
//:MV; (ROTEXT PI 01 TL 36 CA * MF F NR)           GLB.PARAM
//:ATS; GRNRINFORM                                 GLB.PARAM
//:
//:BC; GLB.MACHINE
//:CS; (A)
//:    ::?CALL; (PROCEDUREDIVISION) (OBJ/GS/0200) : LINE COMMENTED BY XSEED - 12.08.2003 **
//:OW;
//:    : CALL; (EXTENSO) (GS200)
//:    ME; ATTENTION (ROTINA EXTENSO NA FUNCIONA LG/31)
//:EC;
//:
//:MV; GLB.PARAM                                   RLDSPAGINA
    if( (GSDCDEMPRES > GLB.ZEROS))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_31();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_31");
    }
}
private void P_36 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
    F36_RLDTCABECA = move (GSDDTSISSEC, F36_RLDTCABECA, 8, 0,"UNSIGNED");
    F36_RLNRSOLICI = move (GSDNRSOLICI, F36_RLNRSOLICI, 6, 0,"UNSIGNED");
    F36_RLNRPAGINA = move (SDNRCONPAG, F36_RLNRPAGINA, 4, 0,"UNSIGNED");
    F36_RLHMCABECA = move(GSDTHHHMMED, F36_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F36_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F36_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F36_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F36_RLDTFINALX, 10);
    F36_RLNMABREMP = move(GSDNMABREMP, F36_RLNMABREMP, 16);
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_36();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_36");
    }
}
private void P_37 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GECDNATNUM = move (SDCDNATOPE, GECDNATNUM, 4, 0,"UNSIGNED");
    GECDNATNUM_ITEM();
    GRCDNATONU = move(GRCDNATALF, GRCDNATONU, 4);
    GRCDNATONU_GROUP();
    if( (SDCDNATOPE < 1000.0))
    {
        GECDPO1GR1 = move (format(GECDSEGPOS ,"9"), GECDPO1GR1,1);
        GECDPO1GR1_ITEM();
        GECDPO3GR1 = move (format(GECDULTPOS ,"99"), GECDPO3GR1,2);
        GECDPO3GR1_ITEM();
        GECDPO5GR1 = move (format(SDCDNATCOM ,"99"), GECDPO5GR1,2);
        GECDPO5GR1_ITEM();
        F37_RLCDNATOGR = move(GRCDNATGR1, F37_RLCDNATOGR, 7);
    }
    else
    {
        GECDPO1GR2 = move (format(GECDPRIPOS ,"9"), GECDPO1GR2,1);
        GECDPO1GR2_ITEM();
        GECDPO3GR2 = move(GRCDNATTRA, GECDPO3GR2, 3);
        GECDPO3GR2_ITEM();
        F37_RLCDNATOGR = move(GRCDNATGR2, F37_RLCDNATOGR, 7);
    }
    F38_RLVLBASSTR = add(F37_RLVLBASSTR, F38_RLVLBASSTR, 12, 2, "UNSIGNED", "TRUNCATE");
    F38_RLVLICMSTR = add(F37_RLVLICMSTR, F38_RLVLICMSTR, 12, 2, "UNSIGNED", "TRUNCATE");
    if( ((F37_RLVLBASSTR == GLB.ZEROS) && (F37_RLVLICMSTR == GLB.ZEROS)))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_37();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_37");
    }
}
private void P_38 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F38_RLCDUFMUNI = move(SDCDUFMUNI, F38_RLCDUFMUNI, 2);
    if( ((F38_RLVLBASSTR == GLB.ZEROS) && (F38_RLVLICMSTR == GLB.ZEROS)))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_38();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_38");
    }
}
private void P_41 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
    F41_RLDTCABECA = move (GSDDTSISSEC, F41_RLDTCABECA, 8, 0,"UNSIGNED");
    F41_RLNRSOLICI = move (GSDNRSOLICI, F41_RLNRSOLICI, 6, 0,"UNSIGNED");
    F41_RLNRPAGINA = move (SDNRCONPAG, F41_RLNRPAGINA, 4, 0,"UNSIGNED");
    F41_RLHMCABECA = move(GSDTHHHMMED, F41_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F41_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F41_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F41_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F41_RLDTFINALX, 10);
    F41_RLNMABREMP = move(GSDNMABREMP, F41_RLNMABREMP, 16);
    F41_RLDSCONDEF = move(" - CONFERENCIA ", F41_RLDSCONDEF, 17);
    if( (AXINATUALI == 2.0))
    {
        F41_RLDSCONDEF = move(" - DEFINITIVA  ", F41_RLDSCONDEF, 17);
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_41();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_41");
    }
}
private void P_42 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GECDNATNUM = move (SDCDNATANT, GECDNATNUM, 4, 0,"UNSIGNED");
    GECDNATNUM_ITEM();
    GRCDNATONU = move(GRCDNATALF, GRCDNATONU, 4);
    GRCDNATONU_GROUP();
    if( (SDCDNATANT < 1000.0))
    {
        GECDPO1GR1 = move (format(GECDSEGPOS ,"9"), GECDPO1GR1,1);
        GECDPO1GR1_ITEM();
        GECDPO3GR1 = move (format(GECDULTPOS ,"99"), GECDPO3GR1,2);
        GECDPO3GR1_ITEM();
        if( (SDCDNATCOM != GLB.ZEROS))
        {
            GECDPO5GR1 = move (format(SDCDNATCOM ,"99"), GECDPO5GR1,2);
            GECDPO5GR1_ITEM();
        }
        else
        {
            GECDPO5GR1 = move(GLB.SPACES, GECDPO5GR1, 2);
            GECDPO5GR1_ITEM();
        }
        F42_RLCDNATOGR = move(GRCDNATGR1, F42_RLCDNATOGR, 7);
    }
    else
    {
        GECDPO1GR2 = move (format(GECDPRIPOS ,"9"), GECDPO1GR2,1);
        GECDPO1GR2_ITEM();
        GECDPO3GR2 = move(GRCDNATTRA, GECDPO3GR2, 3);
        GECDPO3GR2_ITEM();
        F42_RLCDNATOGR = move(GRCDNATGR2, F42_RLCDNATOGR, 7);
    }
    F42_RLINORIGEM = move (format(SDINORIGEM ,"9"), F42_RLINORIGEM,1);
    F43_RLVLSACONT = add(F42_RLCDAPCONT, F43_RLVLSACONT, 14, 2, "UNSIGNED", "TRUNCATE");
    F43_RLVLSABICM = add(F42_RLCDAPBICM, F43_RLVLSABICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F43_RLVLSAVICM = add(F42_RLCDAPVICM, F43_RLVLSAVICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F43_RLVLSANICM = add(F42_RLCDAPNICM, F43_RLVLSANICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F43_RLVLSAOICM = add(F42_RLVLAPOICM, F43_RLVLSAOICM, 13, 2, "UNSIGNED", "TRUNCATE");
//:---------------------------------------------------
//: atualiza valores de impostos p/ livro de apuracao
//:---------------------------------------------------
    if( (SDTPIMPOST != GLB.ZEROS))
    {
        SDINAPURAC = move (GLB.ZEROS, SDINAPURAC, 1, 0,"UNSIGNED");
        if( (AXTPRELATO == 1.0))
        {
            SDNRSEQUEN = move (GLB.ZEROS, SDNRSEQUEN, 2, 0,"UNSIGNED");
            SDCDFISCAL = move (SDCDNATANT, SDCDFISCAL, 4, 0,"UNSIGNED");
            SDCDNATCO1 = move (SDCDNATCOM, SDCDNATCO1, 2, 0,"UNSIGNED");
        }
        if( (((AXTPRELATO == 2.0) || (AXTPRELATO == 3.0)) || (AXTPRELATO == 6.0)))
        {
            SDNRSEQUEN = move (SDNRSEQIMP, SDNRSEQUEN, 2, 0,"UNSIGNED");
        }
        GLB.SECURE = true;
        GLB.STATUS = CG12401_DetermineEvery (GSDCDEMPRES, AXCDFILIAL, AXAMREFERE, SDCDFISCAL, SDCDNATCO1, SDINORIGEM, SDNRSEQUEN);
        while (CG124_XSEEDEOF == false)
        {   CG12401_DetermineMoveNext();
            if (CG124_XSEEDEOF == true)
            {   break;
            }
                GLB.STATUS = CG124_Lock ();
            break;
        }
        if (rTrim(GLB.STATUS).equals(rTrim("*****")))
        {
            CG124_InitAuto();
            AU_CG124_AMMOVTOX = auto (AXAMREFERE, AU_CG124_AMMOVTOX, 6, 0,"UNSIGNED");
            AU_CG124_CDEMPRES = auto (GSDCDEMPRES, AU_CG124_CDEMPRES, 2, 0,"UNSIGNED");
            AU_CG124_CDFILIAL = auto (AXCDFILIAL, AU_CG124_CDFILIAL, 2, 0,"UNSIGNED");
            AU_CG124_CDFISCAL = auto (SDCDFISCAL, AU_CG124_CDFISCAL, 4, 0,"UNSIGNED");
            AU_CG124_CDNATCOM = auto (SDCDNATCO1, AU_CG124_CDNATCOM, 2, 0,"UNSIGNED");
            AU_CG124_DSIMPOST = auto(GLB.SPACES, AU_CG124_DSIMPOST, 60);
            AU_CG124_INICMIPI = auto (SDINAPURAC, AU_CG124_INICMIPI, 1, 0,"UNSIGNED");
            AU_CG124_INORIGEM = auto (SDINORIGEM, AU_CG124_INORIGEM, 1, 0,"UNSIGNED");
            AU_CG124_TPIMPOST = auto (SDTPIMPOST, AU_CG124_TPIMPOST, 2, 0,"UNSIGNED");
            AU_CG124_NRSEQUEN = auto (SDNRSEQUEN, AU_CG124_NRSEQUEN, 2, 0,"UNSIGNED");
            AU_CG124_VLBASICM = auto (F42_RLCDAPBICM, AU_CG124_VLBASICM, 14, 2,"UNSIGNED");
            AU_CG124_VLCONTAB = auto (F42_RLCDAPCONT, AU_CG124_VLCONTAB, 14, 2,"UNSIGNED");
            AU_CG124_VLIMPICM = auto (F42_RLCDAPVICM, AU_CG124_VLIMPICM, 14, 2,"UNSIGNED");
            AU_CG124_VLINTICM = auto (F42_RLCDAPNICM, AU_CG124_VLINTICM, 14, 2,"UNSIGNED");
            AU_CG124_VLOUTICM = auto (F42_RLVLAPOICM, AU_CG124_VLOUTICM, 14, 2,"UNSIGNED");
            if ((GLB.ERROR.trim()).equals("")==true)
            {
                CG124_AutoToFile();
                CG124_Insert ();
                CG124_InitAuto();
            }
        }
        else {
            SDVLIMPIAP = add(F42_RLCDAPVICM, CG124_VLIMPICM, SDVLIMPIAP, 14, 2, "UNSIGNED", "TRUNCATE");
            if( (AXTPRELATO == 1.0))
            {
                SDVLBICMAP = add(F42_RLCDAPBICM, CG124_VLBASICM, SDVLBICMAP, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLCONTAP = add(F42_RLCDAPCONT, CG124_VLCONTAB, SDVLCONTAP, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLINTIAP = add(F42_RLCDAPNICM, CG124_VLINTICM, SDVLINTIAP, 14, 2, "UNSIGNED", "TRUNCATE");
                SDVLOUTIAP = add(F42_RLVLAPOICM, CG124_VLOUTICM, SDVLOUTIAP, 14, 2, "UNSIGNED", "TRUNCATE");
            }
            CG124_VLBASICM = flag (SDVLBICMAP, CG124_VLBASICM, 14, 2,"UNSIGNED");
            CG124_VLCONTAB = flag (SDVLCONTAP, CG124_VLCONTAB, 14, 2,"UNSIGNED");
            CG124_VLIMPICM = flag (SDVLIMPIAP, CG124_VLIMPICM, 14, 2,"UNSIGNED");
            CG124_VLINTICM = flag (SDVLINTIAP, CG124_VLINTICM, 14, 2,"UNSIGNED");
            CG124_VLOUTICM = flag (SDVLOUTIAP, CG124_VLOUTICM, 14, 2,"UNSIGNED");
            CG124_Modify ();
        }
//:: Begin Insertable GlbLogic GSISLP
//  :---------------------------------------------------------------------
//  : OBJETIVO: FAZER SLEEPS EM REPORTS
//  : ---------
//  : PARAMETROS RECEBIDOS
//  : --------------------
//  : GSDNRSLEEPS ED N LE 06 : OPCIONAL. QUANTIDADE DE TRANSACOES A CADA
//  :                          SLEEP. SE NAO FOR INFORMADO, SERA ASSUMIDO
//  :                          100 TRANSACOES
//  : PARAMETROS DEVOLVIDOS
//  : ---------------------
//  : NENHUM
//  :---------------------------------------------------------------------
        GSDNRCONSLP = add(cDec("1"), GSDNRCONSLP, 6, 0, "UNSIGNED", "TRUNCATE");
        if( (GSDNRCONSLP > GSDNRSLEEPS))
        {
            GSDNRCONSLP = move (GLB.ZEROS, GSDNRCONSLP, 6, 0,"UNSIGNED");
            CommitTransaction();
        }
//:: End Insertable GlbLogic GSISLP
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_42();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_42");
    }
}
private void P_43 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GLB.SHADOW = "B";
    P_42("PRINT.FRAME");
    GLB.SHADOW = currentShadow;
    F44_RLVLTOTCON = add(F43_RLVLSACONT, F44_RLVLTOTCON, 14, 2, "UNSIGNED", "TRUNCATE");
    F44_RLVLTTBICM = add(F43_RLVLSABICM, F44_RLVLTTBICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F44_RLVLTTVICM = add(F43_RLVLSAVICM, F44_RLVLTTVICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F44_RLVLTTNICM = add(F43_RLVLSANICM, F44_RLVLTTNICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F44_RLVLTTOICM = add(F43_RLVLSAOICM, F44_RLVLTTOICM, 13, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_43();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_43");
    }
}
private void P_44 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GLB.SHADOW = "B";
    P_43("PRINT.FRAME");
    GLB.SHADOW = currentShadow;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_44();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_44");
    }
}
private void P_46 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
    F46_RLDTCABECA = move (GSDDTSISSEC, F46_RLDTCABECA, 8, 0,"UNSIGNED");
    F46_RLNRSOLICI = move (GSDNRSOLICI, F46_RLNRSOLICI, 6, 0,"UNSIGNED");
    F46_RLNRPAGINA = move (SDNRCONPAG, F46_RLNRPAGINA, 4, 0,"UNSIGNED");
    F46_RLHMCABECA = move(GSDTHHHMMED, F46_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F46_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F46_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F46_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F46_RLDTFINALX, 10);
    F46_RLNMABREMP = move(GSDNMABREMP, F46_RLNMABREMP, 16);
    F46_RLDSCONDEF = move(" - CONFERENCIA ", F46_RLDSCONDEF, 17);
    if( (AXINATUALI == 2.0))
    {
        F46_RLDSCONDEF = move(" - DEFINITIVA  ", F46_RLDSCONDEF, 17);
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_46();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_46");
    }
}
private void P_47 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GECDNATNUM = move (SDCDNATOPE, GECDNATNUM, 4, 0,"UNSIGNED");
    GECDNATNUM_ITEM();
    GRCDNATONU = move(GRCDNATALF, GRCDNATONU, 4);
    GRCDNATONU_GROUP();
    if( (SDCDNATOPE < 1000.0))
    {
        GECDPO1GR1 = move (format(GECDSEGPOS ,"9"), GECDPO1GR1,1);
        GECDPO1GR1_ITEM();
        GECDPO3GR1 = move (format(GECDULTPOS ,"99"), GECDPO3GR1,2);
        GECDPO3GR1_ITEM();
        GECDPO5GR1 = move (format(SDCDNATCOM ,"99"), GECDPO5GR1,2);
        GECDPO5GR1_ITEM();
        F47_RLCDNATOGR = move(GRCDNATGR1, F47_RLCDNATOGR, 7);
    }
    else
    {
        GECDPO1GR2 = move (format(GECDPRIPOS ,"9"), GECDPO1GR2,1);
        GECDPO1GR2_ITEM();
        GECDPO3GR2 = move(GRCDNATTRA, GECDPO3GR2, 3);
        GECDPO3GR2_ITEM();
        F47_RLCDNATOGR = move(GRCDNATGR2, F47_RLCDNATOGR, 7);
    }
    F48_RLVLCONTAB = add(F47_RLVLCONTAB, F48_RLVLCONTAB, 12, 2, "UNSIGNED", "TRUNCATE");
    F48_RLVLBASICM = add(F47_RLVLBASICM, F48_RLVLBASICM, 12, 2, "UNSIGNED", "TRUNCATE");
    F48_RLVLIMPICM = add(F47_RLVLIMPICM, F48_RLVLIMPICM, 12, 2, "UNSIGNED", "TRUNCATE");
    F48_RLVLINTICM = add(F47_RLVLINTICM, F48_RLVLINTICM, 12, 2, "UNSIGNED", "TRUNCATE");
    F48_RLVLOUTICM = add(F47_RLVLOUTICM, F48_RLVLOUTICM, 12, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_47();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_47");
    }
}
private void P_48 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F48_RLCDUFMUNI = move(SDCDUFMUNI, F48_RLCDUFMUNI, 2);
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_48();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_48");
    }
}
private void P_50 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F10_EXNRSERIEX = move(GLB.SPACES, F10_EXNRSERIEX, 3);
    F10_EXNRNOTAFI = move (GLB.ZEROS, F10_EXNRNOTAFI, 9, 0,"UNSIGNED");
    F10_EXDIEMINOT = move (GLB.ZEROS, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
    F10_EXVLCONTAX = move (GLB.ZEROS, F10_EXVLCONTAX, 13, 2,"UNSIGNED");
    F10_EXNRCONTAX = move (GLB.ZEROS, F10_EXNRCONTAX, 6, 0,"UNSIGNED");
    F10_EXCDNATOPE = move (GLB.ZEROS, F10_EXCDNATOPE, 4, 0,"UNSIGNED");
    F10_EXCDNATCOM = move (GLB.ZEROS, F10_EXCDNATCOM, 2, 0,"UNSIGNED");
    F10_EXVLBASICM = move (GLB.ZEROS, F10_EXVLBASICM, 13, 2,"UNSIGNED");
    F10_EXVLPERICM = move (GLB.ZEROS, F10_EXVLPERICM, 5, 2,"UNSIGNED");
    F10_EXVLIMPICM = move (GLB.ZEROS, F10_EXVLIMPICM, 13, 2,"UNSIGNED");
    F10_EXVLISEICM = move (GLB.ZEROS, F10_EXVLISEICM, 13, 2,"UNSIGNED");
    F10_EXVLOUTICM = move (GLB.ZEROS, F10_EXVLOUTICM, 13, 2,"UNSIGNED");
    F10_EXDISAINOT = move (GLB.ZEROS, F10_EXDISAINOT, 8, 0,"UNSIGNED");
    F10_EXNRNOTFIN = move (GLB.ZEROS, F10_EXNRNOTFIN, 7, 0,"UNSIGNED");
    F10_EXVLBASIPI = move (GLB.ZEROS, F10_EXVLBASIPI, 13, 2,"UNSIGNED");
    F10_EXVLPERIPI = move (GLB.ZEROS, F10_EXVLPERIPI, 5, 2,"UNSIGNED");
    F10_EXVLIMPIPI = move (GLB.ZEROS, F10_EXVLIMPIPI, 13, 2,"UNSIGNED");
    F10_EXVLISEIPI = move (GLB.ZEROS, F10_EXVLISEIPI, 13, 2,"UNSIGNED");
    F10_EXVLOUTIPI = move (GLB.ZEROS, F10_EXVLOUTIPI, 13, 2,"UNSIGNED");
    F10_EXNRCANCEL = move (GLB.ZEROS, F10_EXNRCANCEL, 1, 0,"UNSIGNED");
    F10_EXVLICMSTR = move (GLB.ZEROS, F10_EXVLICMSTR, 14, 2,"UNSIGNED");
    F10_EXVLBASSTR = move (GLB.ZEROS, F10_EXVLBASSTR, 14, 2,"UNSIGNED");
    F10_EXVLBASDID = move (GLB.ZEROS, F10_EXVLBASDID, 14, 2,"UNSIGNED");
    F10_EXVLICMDID = move (GLB.ZEROS, F10_EXVLICMDID, 12, 2,"UNSIGNED");
    F10_EXVLICMDIO = move (GLB.ZEROS, F10_EXVLICMDIO, 12, 2,"UNSIGNED");
    F10_EXVLFCPDES = move (GLB.ZEROS, F10_EXVLFCPDES, 12, 2,"UNSIGNED");
    F10_EXINDECEND = move (GLB.ZEROS, F10_EXINDECEND, 1, 0,"UNSIGNED");
    F10_EXNRCFICMP = move (GLB.ZEROS, F10_EXNRCFICMP, 6, 0,"UNSIGNED");
    F10_EXPCICMNAT = move (GLB.ZEROS, F10_EXPCICMNAT, 5, 2,"UNSIGNED");
    F10_EXCDMODENF = move (GLB.ZEROS, F10_EXCDMODENF, 1, 0,"UNSIGNED");
    F10_EXTPREGIST = move (GLB.ZEROS, F10_EXTPREGIST, 1, 0,"UNSIGNED");
    if( (GSDCDEMPRES == GSDCDEMPRES))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_50();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_50");
    }
}
private void P_51 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
    F51_RLDTCABECA = move (GSDDTSISSEC, F51_RLDTCABECA, 8, 0,"UNSIGNED");
    F51_RLNRSOLICI = move (GSDNRSOLICI, F51_RLNRSOLICI, 6, 0,"UNSIGNED");
    F51_RLNRPAGINA = move (SDNRCONPAG, F51_RLNRPAGINA, 4, 0,"UNSIGNED");
    F51_RLHMCABECA = move(GSDTHHHMMED, F51_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(SDDIINIDEC, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F51_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F51_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(SDDIFIMDEC, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F51_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F51_RLDTFINALX, 10);
    F51_RLNMABREMP = move(GSDNMABREMP, F51_RLNMABREMP, 16);
    F51_RLDSCONDEF = move(" - CONFERENCIA ", F51_RLDSCONDEF, 17);
    if( (AXINATUALI == 2.0))
    {
        F51_RLDSCONDEF = move(" - DEFINITIVA  ", F51_RLDSCONDEF, 17);
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_51();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_51");
    }
}
private void P_52 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
//: SE CAMPOS ESTIVEREM ZERADOS, NAO IMPRIME
    if( (((((F52_RLVLAPCIPI == GLB.ZEROS) && (F52_RLVLAPBIPI == GLB.ZEROS)) && (F52_RLVLAPVIPI == GLB.ZEROS)) && (F52_RLVLAPMIPI == GLB.ZEROS)) && (F52_RLVLAPOIPI == GLB.ZEROS)))
    {
    return;    //END.NO.PRINT
    }
    GECDNATNUM = move (SDCDNATANT, GECDNATNUM, 4, 0,"UNSIGNED");
    GECDNATNUM_ITEM();
    GRCDNATONU = move(GRCDNATALF, GRCDNATONU, 4);
    GRCDNATONU_GROUP();
    if( (SDCDNATANT < 1000.0))
    {
        GECDPO1GR1 = move (format(GECDSEGPOS ,"9"), GECDPO1GR1,1);
        GECDPO1GR1_ITEM();
        GECDPO3GR1 = move (format(GECDULTPOS ,"99"), GECDPO3GR1,2);
        GECDPO3GR1_ITEM();
        if( (SDCDNATCOM != GLB.ZEROS))
        {
            GECDPO5GR1 = move (format(SDCDNATCOM ,"99"), GECDPO5GR1,2);
            GECDPO5GR1_ITEM();
        }
        else
        {
            GECDPO5GR1 = move(GLB.SPACES, GECDPO5GR1, 2);
            GECDPO5GR1_ITEM();
        }
        F52_RLCDNATOGR = move(GRCDNATGR1, F52_RLCDNATOGR, 7);
    }
    else
    {
        GECDPO1GR2 = move (format(GECDPRIPOS ,"9"), GECDPO1GR2,1);
        GECDPO1GR2_ITEM();
        GECDPO3GR2 = move(GRCDNATTRA, GECDPO3GR2, 3);
        GECDPO3GR2_ITEM();
        F52_RLCDNATOGR = move(GRCDNATGR2, F52_RLCDNATOGR, 7);
    }
    F53_RLVLSACIPI = add(F52_RLVLAPCIPI, F53_RLVLSACIPI, 14, 2, "UNSIGNED", "TRUNCATE");
    F53_RLVLSABIPI = add(F52_RLVLAPBIPI, F53_RLVLSABIPI, 13, 2, "UNSIGNED", "TRUNCATE");
    F53_RLVLSAVIPI = add(F52_RLVLAPVIPI, F53_RLVLSAVIPI, 13, 2, "UNSIGNED", "TRUNCATE");
    F53_RLVLSANIPI = add(F52_RLVLAPMIPI, F53_RLVLSANIPI, 13, 2, "UNSIGNED", "TRUNCATE");
    F53_RLVLSAOIPI = add(F52_RLVLAPOIPI, F53_RLVLSAOIPI, 13, 2, "UNSIGNED", "TRUNCATE");
//:----------------------------------------------
//: atualiza valores de IPI p/ livro de apuracao
//:----------------------------------------------
    if( (SDINENCIPI == GLB.ZEROS))
    {
        SDINAPURAC = move ("1", SDINAPURAC, 1, 0,"UNSIGNED");
        SDCDFISCAL = move (SDCDNATANT, SDCDFISCAL, 4, 0,"UNSIGNED");
        GLB.SECURE = true;
        GLB.STATUS = CG12403_DetermineEvery (GSDCDEMPRES, AXCDFILIAL, SDAMREFERE, SDNRDECEND, SDCDFISCAL, SDCDNATCOM, SDINORIGEM, GLB.ZEROS);
        while (CG124_XSEEDEOF == false)
        {   CG12403_DetermineMoveNext();
            if (CG124_XSEEDEOF == true)
            {   break;
            }
                GLB.STATUS = CG124_Lock ();
            break;
        }
        if (rTrim(GLB.STATUS).equals(rTrim("*****")))
        {
            CG124_InitAuto();
            AU_CG124_AMMOVTOX = auto (SDAMREFERE, AU_CG124_AMMOVTOX, 6, 0,"UNSIGNED");
            AU_CG124_CDEMPRES = auto (GSDCDEMPRES, AU_CG124_CDEMPRES, 2, 0,"UNSIGNED");
            AU_CG124_CDFILIAL = auto (AXCDFILIAL, AU_CG124_CDFILIAL, 2, 0,"UNSIGNED");
            AU_CG124_CDFISCAL = auto (SDCDNATANT, AU_CG124_CDFISCAL, 4, 0,"UNSIGNED");
            AU_CG124_CDNATCOM = auto (SDCDNATCOM, AU_CG124_CDNATCOM, 2, 0,"UNSIGNED");
            AU_CG124_DSIMPOST = auto(GLB.SPACES, AU_CG124_DSIMPOST, 60);
            AU_CG124_INICMIPI = auto (SDINAPURAC, AU_CG124_INICMIPI, 1, 0,"UNSIGNED");
            AU_CG124_INORIGEM = auto (SDINORIGEM, AU_CG124_INORIGEM, 1, 0,"UNSIGNED");
            AU_CG124_NRDECEND = auto (SDNRDECEND, AU_CG124_NRDECEND, 1, 0,"UNSIGNED");
            AU_CG124_NRSEQUEN = auto (GLB.ZEROS, AU_CG124_NRSEQUEN, 2, 0,"UNSIGNED");
            AU_CG124_TPIMPOST = auto (GLB.ZEROS, AU_CG124_TPIMPOST, 2, 0,"UNSIGNED");
            AU_CG124_VLBASIPI = auto (F52_RLVLAPBIPI, AU_CG124_VLBASIPI, 14, 2,"UNSIGNED");
            AU_CG124_VLCONTAB = auto (F52_RLVLAPCIPI, AU_CG124_VLCONTAB, 14, 2,"UNSIGNED");
            AU_CG124_VLIMPIPI = auto (F52_RLVLAPVIPI, AU_CG124_VLIMPIPI, 14, 2,"UNSIGNED");
            AU_CG124_VLINTIPI = auto (F52_RLVLAPMIPI, AU_CG124_VLINTIPI, 14, 2,"UNSIGNED");
            AU_CG124_VLOUTIPI = auto (F52_RLVLAPOIPI, AU_CG124_VLOUTIPI, 14, 2,"UNSIGNED");
            if ((GLB.ERROR.trim()).equals("")==true)
            {
                CG124_AutoToFile();
                CG124_Insert ();
                CG124_InitAuto();
            }
        }
        else {
            SDVLBICMAP = add(F52_RLVLAPBIPI, CG124_VLBASIPI, SDVLBICMAP, 14, 2, "UNSIGNED", "TRUNCATE");
            SDVLCONTAP = add(F52_RLVLAPCIPI, CG124_VLCONTAB, SDVLCONTAP, 14, 2, "UNSIGNED", "TRUNCATE");
            SDVLIMPIAP = add(F52_RLVLAPVIPI, CG124_VLIMPIPI, SDVLIMPIAP, 14, 2, "UNSIGNED", "TRUNCATE");
            SDVLINTIAP = add(F52_RLVLAPMIPI, CG124_VLINTIPI, SDVLINTIAP, 14, 2, "UNSIGNED", "TRUNCATE");
            SDVLOUTIAP = add(F52_RLVLAPOIPI, CG124_VLOUTIPI, SDVLOUTIAP, 14, 2, "UNSIGNED", "TRUNCATE");
            CG124_VLBASIPI = flag (SDVLBICMAP, CG124_VLBASIPI, 14, 2,"UNSIGNED");
            CG124_VLCONTAB = flag (SDVLCONTAP, CG124_VLCONTAB, 14, 2,"UNSIGNED");
            CG124_VLIMPIPI = flag (SDVLIMPIAP, CG124_VLIMPIPI, 14, 2,"UNSIGNED");
            CG124_VLINTIPI = flag (SDVLINTIAP, CG124_VLINTIPI, 14, 2,"UNSIGNED");
            CG124_VLOUTIPI = flag (SDVLOUTIAP, CG124_VLOUTIPI, 14, 2,"UNSIGNED");
            CG124_Modify ();
        }
//:: Begin Insertable GlbLogic GSISLP
//  :---------------------------------------------------------------------
//  : OBJETIVO: FAZER SLEEPS EM REPORTS
//  : ---------
//  : PARAMETROS RECEBIDOS
//  : --------------------
//  : GSDNRSLEEPS ED N LE 06 : OPCIONAL. QUANTIDADE DE TRANSACOES A CADA
//  :                          SLEEP. SE NAO FOR INFORMADO, SERA ASSUMIDO
//  :                          100 TRANSACOES
//  : PARAMETROS DEVOLVIDOS
//  : ---------------------
//  : NENHUM
//  :---------------------------------------------------------------------
        GSDNRCONSLP = add(cDec("1"), GSDNRCONSLP, 6, 0, "UNSIGNED", "TRUNCATE");
        if( (GSDNRCONSLP > GSDNRSLEEPS))
        {
            GSDNRCONSLP = move (GLB.ZEROS, GSDNRCONSLP, 6, 0,"UNSIGNED");
            CommitTransaction();
        }
//:: End Insertable GlbLogic GSISLP
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_52();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_52");
    }
}
private void P_53 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GLB.SHADOW = "C";
    P_52("PRINT.FRAME");
    GLB.SHADOW = currentShadow;
    F54_RLTOTACIPI = add(F53_RLVLSACIPI, F54_RLTOTACIPI, 14, 2, "UNSIGNED", "TRUNCATE");
    F54_RLTOTABIPI = add(F53_RLVLSABIPI, F54_RLTOTABIPI, 13, 2, "UNSIGNED", "TRUNCATE");
    F54_RLTOTAVIPI = add(F53_RLVLSAVIPI, F54_RLTOTAVIPI, 13, 2, "UNSIGNED", "TRUNCATE");
    F54_RLTOTANIPI = add(F53_RLVLSANIPI, F54_RLTOTANIPI, 13, 2, "UNSIGNED", "TRUNCATE");
    F54_RLTOTAOIPI = add(F53_RLVLSAOIPI, F54_RLTOTAOIPI, 13, 2, "UNSIGNED", "TRUNCATE");
//: SE OS CAMPOS ESTIVEREM ZERADOS, NAO IMPRIME
    if( (((((F53_RLVLSACIPI == GLB.ZEROS) && (F53_RLVLSABIPI == GLB.ZEROS)) && (F53_RLVLSAVIPI == GLB.ZEROS)) && (F53_RLVLSANIPI == GLB.ZEROS)) && (F53_RLVLSAOIPI == GLB.ZEROS)))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_53();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_53");
    }
}
private void P_54 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GLB.SHADOW = "C";
    P_53("PRINT.FRAME");
    GLB.SHADOW = currentShadow;
//: SE CAMPOS ESTIVEREM ZERADOS, NAO IMPRIME
//: DW; RLTOTACIPI = GLB.ZEROS AND
//: DW; RLTOTABIPI = GLB.ZEROS AND
//: DW; RLTOTAVIPI = GLB.ZEROS AND
//: DW; RLTOTANIPI = GLB.ZEROS AND
//: DW; RLTOTAOIPI = GLB.ZEROS
//: ENP;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_54();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_54");
    }
}
private void P_55 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
    F55_RLDTSOLICI = move (GSDDTSISSEC, F55_RLDTSOLICI, 8, 0,"UNSIGNED");
    F55_RLNMABREMP = move(GSDNMABREMP, F55_RLNMABREMP, 16);
    F55_RLNRSOLICI = move (GSDNRSOLICI, F55_RLNRSOLICI, 6, 0,"UNSIGNED");
    F55_RLNRPAGINA = move (SDNRCONPAG, F55_RLNRPAGINA, 4, 0,"UNSIGNED");
    F55_RLHMCABECA = move(GSDTHHHMMED, F55_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F55_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F55_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F55_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F55_RLDTFINALX, 10);
    if( (E_EXCDDEPNFI == 99.0))
    {
        F55_RLCDDEPNFI = move (GLB.ZEROS, F55_RLCDDEPNFI, 2, 0,"UNSIGNED");
        F55_RLDSDEPNFI = move("SEM DEPARTAMENTO", F55_RLDSDEPNFI, 20);
    }
    else
    {
        F55_RLCDDEPNFI = move (E_EXCDDEPNFI, F55_RLCDDEPNFI, 2, 0,"UNSIGNED");
        GSDCDDOITEM = move("CDDEPNFI", GSDCDDOITEM, 8);
        GSDCDELENUM = move (E_EXCDDEPNFI, GSDCDELENUM, 10, 0,"UNSIGNED");
        GSDCDELENUM_ITEM();
        GSP004 ();
        GLB.SHADOW = currentShadow;
        if (GLB.EXIT==true)
        {
           GLB.EXIT=false;
            return;
        }
        F55_RLDSDEPNFI = move(GSDDSELEMEN, F55_RLDSDEPNFI, 20);
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_55();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_55");
    }
}
private void P_56 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F56_RLNRNOTDEP = move (E_EXNRNOTDEP, F56_RLNRNOTDEP, 9, 0,"UNSIGNED");
    F56_RLCDCLIDEP = move (E_EXCDCLIDEP, F56_RLCDCLIDEP, 6, 0,"UNSIGNED");
    AV101_NMCLIENT = move(GLB.SPACES, AV101_NMCLIENT, 60);
    if (E_EXINCLIDEP == GLB.ZEROS)
    {
        GLB.SECURE = false;
        GLB.STATUS = AV10101_DetermineEvery (GSDCDEMPRES, E_EXCDCLIDEP);
        while (AV101_XSEEDEOF == false)
        {   AV10101_DetermineMoveNext();
            if (AV101_XSEEDEOF == true)
            {   break;
            }
            break;
        }
        if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
        {
            AV101_NMCLIENT = move(GLB.SPACES, AV101_NMCLIENT, 60);
        }
    }
    else
    if (E_EXINCLIDEP == 1.0)
    {
        GLB.SECURE = false;
        GLB.STATUS = SU10101_DetermineEvery (GSDCDEMPRES, E_EXCDCLIDEP);
        while (SU101_XSEEDEOF == false)
        {   SU10101_DetermineMoveNext();
            if (SU101_XSEEDEOF == true)
            {   break;
            }
            AV101_NMCLIENT = move(SU101_NMFORNEC, AV101_NMCLIENT, 60);
            break;
        }
    }
    else
    if (E_EXINCLIDEP == 2.0)
    {
        GLB.SECURE = false;
        GLB.STATUS = MK10201_DetermineEvery (GSDCDEMPRES, E_EXCDCLIDEP);
        while (MK102_XSEEDEOF == false)
        {   MK10201_DetermineMoveNext();
            if (MK102_XSEEDEOF == true)
            {   break;
            }
            AV101_NMCLIENT = move(MK102_NMPROFES, AV101_NMCLIENT, 60);
            break;
        }
    }
    else
    if (E_EXINCLIDEP == 3.0)
    {
        GLB.SECURE = false;
        GLB.STATUS = MK10101_DetermineEvery (GSDCDEMPRES, E_EXCDCLIDEP);
        while (MK101_XSEEDEOF == false)
        {   MK10101_DetermineMoveNext();
            if (MK101_XSEEDEOF == true)
            {   break;
            }
            AV101_NMCLIENT = move(MK101_NMCLIENT, AV101_NMCLIENT, 60);
            break;
        }
    }
    F56_RLNMCLIENT = move(AV101_NMCLIENT, F56_RLNMCLIENT, 60);
    GLB.DC_AUX = formatDC(E_EXDIEMIDEP, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F56_RLDIEMIDEP = move(GLB.DC_DD_MM_CCYY, F56_RLDIEMIDEP, 10);
    F56_RLCDTIPDEP = move (E_EXCDTIPDEP, F56_RLCDTIPDEP, 2, 0,"UNSIGNED");
    F56_RLVLTOICMN = move (E_EXVLTOICMN, F56_RLVLTOICMN, 11, 2,"UNSIGNED");
    F56_RLCDUSUARI = move(SDCDUSUARI, F56_RLCDUSUARI, 25);
    if( (SDCDDEPNFI != 99.0))
    {
        GSDVLINDICE = move (E_EXNRNOTDEP, GSDVLINDICE, 17, 0,"SIGNED");
        GSDNRDECIMA = move (GLB.ZEROS, GSDNRDECIMA, 1, 0,"UNSIGNED");
        GSDTPEDIIND = move ("1", GSDTPEDIIND, 1, 0,"UNSIGNED");
        CGP001 ();
        GLB.SHADOW = currentShadow;
        if (GLB.EXIT==true)
        {
           GLB.EXIT=false;
            return;
        }
        GENRNOTDEP = moveComplex(format(GSDVLINDEDI, 24), 15, 9, GENRNOTDEP, 1,9);
        GENRNOTDEP_ITEM();
        GEDIEMIDEP = move(GLB.DC_DD_MM_YY, GEDIEMIDEP, 8);
        GEDIEMIDEP_ITEM();
        GSDVLINDICE = move (E_EXCDCLIDEP, GSDVLINDICE, 17, 0,"SIGNED");
        GSDNRDECIMA = move (GLB.ZEROS, GSDNRDECIMA, 1, 0,"UNSIGNED");
        GSDTPEDIIND = move ("1", GSDTPEDIIND, 1, 0,"UNSIGNED");
        CGP001 ();
        GLB.SHADOW = currentShadow;
        if (GLB.EXIT==true)
        {
           GLB.EXIT=false;
            return;
        }
        GECDCLIDEP = moveComplex(format(GSDVLINDEDI, 24), 17, 7, GECDCLIDEP, 1,7);
        GECDCLIDEP_ITEM();
        GENMCLIENT = move(AV101_NMCLIENT, GENMCLIENT, 60);
        GENMCLIENT_ITEM();
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_56();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_56");
    }
}
private void P_57 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    if( (AXINATUALI == 2.0))
    {
        SDTPREGIST = move ("6", SDTPREGIST, 1, 0,"UNSIGNED");
        GLB.SECURE = true;
        GLB.STATUS = CG11102_DetermineEvery (GSDCDEMPRES, AXCDFILIAL, AXAMREFERE, SDTPREGIST, SDCDUFMUNI, format(SDCDNATOPE, "9999"), SDCDNATCOM);
        while (CG111_XSEEDEOF == false)
        {   CG11102_DetermineMoveNext();
            if (CG111_XSEEDEOF == true)
            {   break;
            }
                GLB.STATUS = CG111_Lock ();
            GEVLTRAB01 = add(CG111_VLINTEGR, SDVLCONTAB, GEVLTRAB01, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB01_ITEM();
            GEVLTRAB02 = add(CG111_VLBASICM, SDVLBASICM, GEVLTRAB02, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB02_ITEM();
            GEVLTRAB03 = add(CG111_VLBASIPI, SDVLAPBIPI, GEVLTRAB03, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB03_ITEM();
            GEVLTRAB04 = add(CG111_VLIMPICM, SDVLIMPICM, GEVLTRAB04, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB04_ITEM();
            GEVLTRAB05 = add(CG111_VLIMPIPI, SDVLAPVIPI, GEVLTRAB05, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB05_ITEM();
            GEVLTRAB06 = add(CG111_VLINTICM, SDVLINTICM, GEVLTRAB06, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB06_ITEM();
            GEVLTRAB07 = add(CG111_VLINTIPI, SDVLAPMIPI, GEVLTRAB07, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB07_ITEM();
            GEVLTRAB08 = add(CG111_VLOUTICM, SDVLOUTICM, GEVLTRAB08, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB08_ITEM();
            GEVLTRAB09 = add(CG111_VLOUTIPI, SDVLAPOIPI, GEVLTRAB09, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB09_ITEM();
            GEVLTRAB10 = add(CG111_VLBASSTR, SDVLBASSTR, GEVLTRAB10, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB10_ITEM();
            GEVLTRAB11 = add(CG111_VLICMSTR, SDVLICMSTR, GEVLTRAB11, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB11_ITEM();
            CG111_VLINTEGR = flag (GEVLTRAB01, CG111_VLINTEGR, 14, 2,"UNSIGNED");
            CG111_VLBASICM = flag (GEVLTRAB02, CG111_VLBASICM, 14, 2,"UNSIGNED");
            CG111_VLBASIPI = flag (GEVLTRAB03, CG111_VLBASIPI, 14, 2,"UNSIGNED");
            CG111_VLIMPICM = flag (GEVLTRAB04, CG111_VLIMPICM, 14, 2,"UNSIGNED");
            CG111_VLIMPIPI = flag (GEVLTRAB05, CG111_VLIMPIPI, 14, 2,"UNSIGNED");
            CG111_VLINTICM = flag (GEVLTRAB06, CG111_VLINTICM, 14, 2,"UNSIGNED");
            CG111_VLINTIPI = flag (GEVLTRAB07, CG111_VLINTIPI, 14, 2,"UNSIGNED");
            CG111_VLOUTICM = flag (GEVLTRAB08, CG111_VLOUTICM, 14, 2,"UNSIGNED");
            CG111_VLOUTIPI = flag (GEVLTRAB09, CG111_VLOUTIPI, 14, 2,"UNSIGNED");
            CG111_VLBASSTR = flag (GEVLTRAB10, CG111_VLBASSTR, 14, 2,"UNSIGNED");
            CG111_VLICMSTR = flag (GEVLTRAB11, CG111_VLICMSTR, 14, 2,"UNSIGNED");
            CG111_Modify ();
            break;
        }
        if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
        {
            CG111_InitAuto();
            AU_CG111_AMMOVTOX = auto (AXAMREFERE, AU_CG111_AMMOVTOX, 6, 0,"UNSIGNED");
            AU_CG111_CDEMPRES = auto (GSDCDEMPRES, AU_CG111_CDEMPRES, 2, 0,"UNSIGNED");
            AU_CG111_CDFILIAL = auto (AXCDFILIAL, AU_CG111_CDFILIAL, 2, 0,"UNSIGNED");
            AU_CG111_CDNATCOM = auto (SDCDNATCOM, AU_CG111_CDNATCOM, 2, 0,"UNSIGNED");
            AU_CG111_CDREFIMP = auto (format(SDCDNATOPE ,"9999"), AU_CG111_CDREFIMP, 4);
            AU_CG111_CDUFMUNI = auto(SDCDUFMUNI, AU_CG111_CDUFMUNI, 2);
            AU_CG111_INSITREG = auto("A", AU_CG111_INSITREG, 1);
            AU_CG111_TPREGIMP = auto (SDTPREGIST, AU_CG111_TPREGIMP, 1, 0,"UNSIGNED");
            AU_CG111_VLBASICM = auto (SDVLBASICM, AU_CG111_VLBASICM, 14, 2,"UNSIGNED");
            AU_CG111_VLBASIPI = auto (SDVLAPBIPI, AU_CG111_VLBASIPI, 14, 2,"UNSIGNED");
            AU_CG111_VLIMPICM = auto (SDVLIMPICM, AU_CG111_VLIMPICM, 14, 2,"UNSIGNED");
            AU_CG111_VLIMPIPI = auto (SDVLAPVIPI, AU_CG111_VLIMPIPI, 14, 2,"UNSIGNED");
            AU_CG111_VLINTEGR = auto (SDVLCONTAB, AU_CG111_VLINTEGR, 14, 2,"UNSIGNED");
            AU_CG111_VLINTICM = auto (SDVLINTICM, AU_CG111_VLINTICM, 14, 2,"UNSIGNED");
            AU_CG111_VLINTIPI = auto (SDVLAPMIPI, AU_CG111_VLINTIPI, 14, 2,"UNSIGNED");
            AU_CG111_VLOUTICM = auto (SDVLOUTICM, AU_CG111_VLOUTICM, 14, 2,"UNSIGNED");
            AU_CG111_VLOUTIPI = auto (SDVLAPOIPI, AU_CG111_VLOUTIPI, 14, 2,"UNSIGNED");
            AU_CG111_VLBASSTR = auto (SDVLBASSTR, AU_CG111_VLBASSTR, 14, 2,"UNSIGNED");
            AU_CG111_VLICMSTR = auto (SDVLICMSTR, AU_CG111_VLICMSTR, 14, 2,"UNSIGNED");
            if ((GLB.ERROR.trim()).equals("")==true)
            {
                CG111_AutoToFile();
                CG111_Insert ();
                CG111_InitAuto();
            }
        }
    }
    SDVLCONTAB = move (GLB.ZEROS, SDVLCONTAB, 14, 2,"UNSIGNED");
    SDVLBASICM = move (GLB.ZEROS, SDVLBASICM, 14, 2,"UNSIGNED");
    SDVLIMPICM = move (GLB.ZEROS, SDVLIMPICM, 14, 2,"UNSIGNED");
    SDVLINTICM = move (GLB.ZEROS, SDVLINTICM, 14, 2,"UNSIGNED");
    SDVLOUTICM = move (GLB.ZEROS, SDVLOUTICM, 14, 2,"UNSIGNED");
    SDVLBASSTR = move (GLB.ZEROS, SDVLBASSTR, 14, 2,"UNSIGNED");
    SDVLICMSTR = move (GLB.ZEROS, SDVLICMSTR, 14, 2,"UNSIGNED");
    SDVLAPBIPI = move (GLB.ZEROS, SDVLAPBIPI, 14, 2,"UNSIGNED");
    SDVLAPVIPI = move (GLB.ZEROS, SDVLAPVIPI, 14, 2,"UNSIGNED");
    SDVLAPMIPI = move (GLB.ZEROS, SDVLAPMIPI, 14, 2,"UNSIGNED");
    SDVLAPOIPI = move (GLB.ZEROS, SDVLAPOIPI, 14, 2,"UNSIGNED");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_57();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_57");
    }
}
private void P_60 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDTPREGIST = move ("3", SDTPREGIST, 1, 0,"UNSIGNED");
    GLB.SECURE = true;
    GLB.STATUS = CG11101_DetermineGroupFrom (3, false, GSDCDEMPRES, AXCDFILIAL, AXAMREFERE, SDTPREGIST, GLB.SPACES, GLB.ZEROS, GSDCDEMPRES, AXCDFILIAL, AXAMREFERE, SDTPREGIST, GLB.SPACES, GLB.ZEROS);
    while (CG111_XSEEDEOF == false)
    {
        CG11101_DetermineMoveNext ();
        if (CG111_XSEEDEOF == true)
        {    break;
        }
        GLB.STATUS = CG111_Lock ();
        if( (CG111_TPREGIMP > 4.0))
        {
            break;
        }
        CG111_Delete();
//:: Begin Insertable GlbLogic GSISLP
//  :---------------------------------------------------------------------
//  : OBJETIVO: FAZER SLEEPS EM REPORTS
//  : ---------
//  : PARAMETROS RECEBIDOS
//  : --------------------
//  : GSDNRSLEEPS ED N LE 06 : OPCIONAL. QUANTIDADE DE TRANSACOES A CADA
//  :                          SLEEP. SE NAO FOR INFORMADO, SERA ASSUMIDO
//  :                          100 TRANSACOES
//  : PARAMETROS DEVOLVIDOS
//  : ---------------------
//  : NENHUM
//  :---------------------------------------------------------------------
        GSDNRCONSLP = add(cDec("1"), GSDNRCONSLP, 6, 0, "UNSIGNED", "TRUNCATE");
        if( (GSDNRCONSLP > GSDNRSLEEPS))
        {
            GSDNRCONSLP = move (GLB.ZEROS, GSDNRCONSLP, 6, 0,"UNSIGNED");
            CommitTransaction();
        }
//:: End Insertable GlbLogic GSISLP
    }
    CommitTransaction();
    SDTPREGIST = move ("2", SDTPREGIST, 1, 0,"UNSIGNED");
    GLB.SECURE = true;
    GLB.STATUS = CG12201_DetermineGroupFrom (4, false, GSDCDEMPRES, AXCDFILIAL, SDTPREGIST, AXAMREFERE, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, AXCDFILIAL, SDTPREGIST, AXAMREFERE, GLB.ZEROS, GLB.ZEROS);
    while (CG122_XSEEDEOF == false)
    {
        CG12201_DetermineMoveNext ();
        if (CG122_XSEEDEOF == true)
        {    break;
        }
        GLB.STATUS = CG122_Lock ();
        if( (CG122_CDEMPRES != GSDCDEMPRES))
        {
            break;
        }
        CG122_Delete();
//:: Begin Insertable GlbLogic GSISLP
//  :---------------------------------------------------------------------
//  : OBJETIVO: FAZER SLEEPS EM REPORTS
//  : ---------
//  : PARAMETROS RECEBIDOS
//  : --------------------
//  : GSDNRSLEEPS ED N LE 06 : OPCIONAL. QUANTIDADE DE TRANSACOES A CADA
//  :                          SLEEP. SE NAO FOR INFORMADO, SERA ASSUMIDO
//  :                          100 TRANSACOES
//  : PARAMETROS DEVOLVIDOS
//  : ---------------------
//  : NENHUM
//  :---------------------------------------------------------------------
        GSDNRCONSLP = add(cDec("1"), GSDNRCONSLP, 6, 0, "UNSIGNED", "TRUNCATE");
        if( (GSDNRCONSLP > GSDNRSLEEPS))
        {
            GSDNRCONSLP = move (GLB.ZEROS, GSDNRCONSLP, 6, 0,"UNSIGNED");
            CommitTransaction();
        }
//:: End Insertable GlbLogic GSISLP
    }
    CommitTransaction();
    GLB.SECURE = true;
    GLB.STATUS = CG12301_DetermineGroupFrom (4, false, GSDCDEMPRES, AXCDFILIAL, SDTPREGIST, AXAMREFERE, GLB.ZEROS, GSDCDEMPRES, AXCDFILIAL, SDTPREGIST, AXAMREFERE, GLB.ZEROS);
    while (CG123_XSEEDEOF == false)
    {
        CG12301_DetermineMoveNext ();
        if (CG123_XSEEDEOF == true)
        {    break;
        }
        GLB.STATUS = CG123_Lock ();
        CG123_Delete();
//:: Begin Insertable GlbLogic GSISLP
//  :---------------------------------------------------------------------
//  : OBJETIVO: FAZER SLEEPS EM REPORTS
//  : ---------
//  : PARAMETROS RECEBIDOS
//  : --------------------
//  : GSDNRSLEEPS ED N LE 06 : OPCIONAL. QUANTIDADE DE TRANSACOES A CADA
//  :                          SLEEP. SE NAO FOR INFORMADO, SERA ASSUMIDO
//  :                          100 TRANSACOES
//  : PARAMETROS DEVOLVIDOS
//  : ---------------------
//  : NENHUM
//  :---------------------------------------------------------------------
        GSDNRCONSLP = add(cDec("1"), GSDNRCONSLP, 6, 0, "UNSIGNED", "TRUNCATE");
        if( (GSDNRCONSLP > GSDNRSLEEPS))
        {
            GSDNRCONSLP = move (GLB.ZEROS, GSDNRCONSLP, 6, 0,"UNSIGNED");
            CommitTransaction();
        }
//:: End Insertable GlbLogic GSISLP
    }
    CommitTransaction();
    if( (GSDCDEMPRES == GSDCDEMPRES))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_60();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_60");
    }
}
private void P_62 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDTPREGIST = move ("3", SDTPREGIST, 1, 0,"UNSIGNED");
    GSDCDDOITEM = move("CDESTADO", GSDCDDOITEM, 8);
    GSDCDELENUM = move (AV119_CDESTADO, GSDCDELENUM, 10, 0,"UNSIGNED");
    GSDCDELENUM_ITEM();
    GSP004 ();
    GLB.SHADOW = currentShadow;
    if (GLB.EXIT==true)
    {
       GLB.EXIT=false;
        return;
    }
    if( (GSDINITEMOK == 1.0))
    {
        F96_RLCDOCORRE = move (format(AV119_NRNOTAFI ,"999999999"), F96_RLCDOCORRE,10);
        F96_RLINOCORRE = move (format(AV119_CDESTADO ,"99"), F96_RLINOCORRE,20);
        F96_RLDSOCORRE = move("CEP CLIENTE/FORNECEDOR NAO CADASTRADO", F96_RLDSOCORRE, 45);
        GLB.SHADOW = "Z";
        P_96("PRINT.FRAME");
        GLB.SHADOW = currentShadow;
    }
    GEDSESTADO = move(GLB.SPACES, GEDSESTADO, 4);
    GEDSESTADO_ITEM();
    GEDSESTADO = moveComplex(format(GSDDSELEMEN, 30), 1, 2, GEDSESTADO, 1,4);
    GEDSESTADO_ITEM();
    GECDNATCOM = move (GLB.ZEROS, GECDNATCOM, 2, 0,"UNSIGNED");
    GECDNATCOM_ITEM();
    SDCDUFMUNI = move(GEDSESTADO, SDCDUFMUNI, 2);
    while (true)
    {
        if( (SDTPREGIST > 4.0))
        {
            break;
        }
        GLB.SECURE = true;
        GLB.STATUS = CG11101_DetermineEvery (GSDCDEMPRES, AXCDFILIAL, AXAMREFERE, SDTPREGIST, GEDSESTADO, GECDNATCOM);
        while (CG111_XSEEDEOF == false)
        {   CG11101_DetermineMoveNext();
            if (CG111_XSEEDEOF == true)
            {   break;
            }
                GLB.STATUS = CG111_Lock ();
            GEVLTRAB01 = add(CG111_VLINTEGR, GEVLINTEGR, GEVLTRAB01, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB01_ITEM();
            GEVLTRAB02 = add(CG111_VLBASICM, GEVLBASICM, GEVLTRAB02, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB02_ITEM();
            GEVLTRAB03 = add(CG111_VLBASIPI, GEVLBASIPI, GEVLTRAB03, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB03_ITEM();
            GEVLTRAB04 = add(CG111_VLIMPICM, GEVLIMPICM, GEVLTRAB04, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB04_ITEM();
            GEVLTRAB05 = add(CG111_VLIMPIPI, GEVLIMPIPI, GEVLTRAB05, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB05_ITEM();
            GEVLTRAB06 = add(CG111_VLINTICM, GEVLINTICM, GEVLTRAB06, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB06_ITEM();
            GEVLTRAB07 = add(CG111_VLINTIPI, GEVLINTIPI, GEVLTRAB07, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB07_ITEM();
            GEVLTRAB08 = add(CG111_VLOUTICM, GEVLOUTICM, GEVLTRAB08, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB08_ITEM();
            GEVLTRAB09 = add(CG111_VLOUTIPI, GEVLOUTIPI, GEVLTRAB09, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB09_ITEM();
            GEVLTRAB10 = add(CG111_VLCONTNC, GEVLCONTNC, GEVLTRAB10, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB10_ITEM();
            GEVLTRAB11 = add(CG111_VLBICMNC, GEVLBICMNC, GEVLTRAB11, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB11_ITEM();
            GEVLTRAB12 = add(CG111_VLBASSTR, GEVLBASSTR, GEVLTRAB12, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB12_ITEM();
            GEVLTRAB13 = add(CG111_VLICMSTR, GEVLICMSTR, GEVLTRAB13, 14, 2, "UNSIGNED", "TRUNCATE");
            GEVLTRAB13_ITEM();
            CG111_VLINTEGR = flag (GEVLTRAB01, CG111_VLINTEGR, 14, 2,"UNSIGNED");
            CG111_VLBASICM = flag (GEVLTRAB02, CG111_VLBASICM, 14, 2,"UNSIGNED");
            CG111_VLBASIPI = flag (GEVLTRAB03, CG111_VLBASIPI, 14, 2,"UNSIGNED");
            CG111_VLIMPICM = flag (GEVLTRAB04, CG111_VLIMPICM, 14, 2,"UNSIGNED");
            CG111_VLIMPIPI = flag (GEVLTRAB05, CG111_VLIMPIPI, 14, 2,"UNSIGNED");
            CG111_VLINTICM = flag (GEVLTRAB06, CG111_VLINTICM, 14, 2,"UNSIGNED");
            CG111_VLINTIPI = flag (GEVLTRAB07, CG111_VLINTIPI, 14, 2,"UNSIGNED");
            CG111_VLOUTICM = flag (GEVLTRAB08, CG111_VLOUTICM, 14, 2,"UNSIGNED");
            CG111_VLOUTIPI = flag (GEVLTRAB09, CG111_VLOUTIPI, 14, 2,"UNSIGNED");
            CG111_VLCONTNC = flag (GEVLTRAB10, CG111_VLCONTNC, 14, 2,"UNSIGNED");
            CG111_VLBICMNC = flag (GEVLTRAB11, CG111_VLBICMNC, 14, 2,"UNSIGNED");
            CG111_VLBASSTR = flag (GEVLTRAB12, CG111_VLBASSTR, 14, 2,"UNSIGNED");
            CG111_VLICMSTR = flag (GEVLTRAB13, CG111_VLICMSTR, 14, 2,"UNSIGNED");
            CG111_Modify ();
            break;
        }
        if( ((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true))
        {
            CG111_InitAuto();
            AU_CG111_AMMOVTOX = auto (AXAMREFERE, AU_CG111_AMMOVTOX, 6, 0,"UNSIGNED");
            AU_CG111_CDEMPRES = auto (GSDCDEMPRES, AU_CG111_CDEMPRES, 2, 0,"UNSIGNED");
            AU_CG111_CDFILIAL = auto (AXCDFILIAL, AU_CG111_CDFILIAL, 2, 0,"UNSIGNED");
            AU_CG111_CDREFIMP = auto(GEDSESTADO, AU_CG111_CDREFIMP, 4);
            AU_CG111_CDNATCOM = auto (GECDNATCOM, AU_CG111_CDNATCOM, 2, 0,"UNSIGNED");
            AU_CG111_INSITREG = auto("A", AU_CG111_INSITREG, 1);
            AU_CG111_TPREGIMP = auto (SDTPREGIST, AU_CG111_TPREGIMP, 1, 0,"UNSIGNED");
            AU_CG111_VLBASICM = auto (GEVLBASICM, AU_CG111_VLBASICM, 14, 2,"UNSIGNED");
            AU_CG111_VLBASIPI = auto (GEVLBASIPI, AU_CG111_VLBASIPI, 14, 2,"UNSIGNED");
            AU_CG111_VLIMPICM = auto (GEVLIMPICM, AU_CG111_VLIMPICM, 14, 2,"UNSIGNED");
            AU_CG111_VLIMPIPI = auto (GEVLIMPIPI, AU_CG111_VLIMPIPI, 14, 2,"UNSIGNED");
            AU_CG111_VLINTEGR = auto (GEVLINTEGR, AU_CG111_VLINTEGR, 14, 2,"UNSIGNED");
            AU_CG111_VLINTICM = auto (GEVLINTICM, AU_CG111_VLINTICM, 14, 2,"UNSIGNED");
            AU_CG111_VLINTIPI = auto (GEVLINTIPI, AU_CG111_VLINTIPI, 14, 2,"UNSIGNED");
            AU_CG111_VLOUTICM = auto (GEVLOUTICM, AU_CG111_VLOUTICM, 14, 2,"UNSIGNED");
            AU_CG111_VLOUTIPI = auto (GEVLOUTIPI, AU_CG111_VLOUTIPI, 14, 2,"UNSIGNED");
            AU_CG111_VLCONTNC = auto (GEVLCONTNC, AU_CG111_VLCONTNC, 14, 2,"UNSIGNED");
            AU_CG111_VLBICMNC = auto (GEVLBICMNC, AU_CG111_VLBICMNC, 14, 2,"UNSIGNED");
            AU_CG111_VLBASSTR = auto (GEVLBASSTR, AU_CG111_VLBASSTR, 14, 2,"UNSIGNED");
            AU_CG111_VLICMSTR = auto (GEVLICMSTR, AU_CG111_VLICMSTR, 14, 2,"UNSIGNED");
            if ((GLB.ERROR.trim()).equals("")==true)
            {
                CG111_AutoToFile();
                CG111_Insert ();
                CG111_InitAuto();
            }
        }
        SDTPREGIST = add(cDec("1"), SDTPREGIST, 1, 0, "UNSIGNED", "TRUNCATE");
        if( (SDCDNATOPE < 1000.0))
        {
            SDCDNATAUX = move (SDCDNATOPE, SDCDNATAUX, 3, 0,"UNSIGNED");
            GEDSESTADO = move (format(SDCDNATAUX ,"999"), GEDSESTADO,4);
            GEDSESTADO_ITEM();
        }
        else
        {
            GEDSESTADO = move (format(SDCDNATOPE ,"9999"), GEDSESTADO,4);
            GEDSESTADO_ITEM();
        }
        GECDNATCOM = move (SDCDNATCOM, GECDNATCOM, 2, 0,"UNSIGNED");
        GECDNATCOM_ITEM();
//:: Begin Insertable GlbLogic GSISLP
//  :---------------------------------------------------------------------
//  : OBJETIVO: FAZER SLEEPS EM REPORTS
//  : ---------
//  : PARAMETROS RECEBIDOS
//  : --------------------
//  : GSDNRSLEEPS ED N LE 06 : OPCIONAL. QUANTIDADE DE TRANSACOES A CADA
//  :                          SLEEP. SE NAO FOR INFORMADO, SERA ASSUMIDO
//  :                          100 TRANSACOES
//  : PARAMETROS DEVOLVIDOS
//  : ---------------------
//  : NENHUM
//  :---------------------------------------------------------------------
        GSDNRCONSLP = add(cDec("1"), GSDNRCONSLP, 6, 0, "UNSIGNED", "TRUNCATE");
        if( (GSDNRCONSLP > GSDNRSLEEPS))
        {
            GSDNRCONSLP = move (GLB.ZEROS, GSDNRCONSLP, 6, 0,"UNSIGNED");
            CommitTransaction();
        }
//:: End Insertable GlbLogic GSISLP
    }
    if( (GSDCDEMPRES == GSDCDEMPRES))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_62();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_62");
    }
}
private void P_63 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F10_EXNRSERIEX = move(AV119_TPSERIEN, F10_EXNRSERIEX, 3);
    F10_EXNRNOTAFI = move (AV119_NRNOTAFI, F10_EXNRNOTAFI, 9, 0,"UNSIGNED");
    F10_EXCDMODENF = move (AV119_CDMODENF, F10_EXCDMODENF, 1, 0,"UNSIGNED");
    F10_EXTPREGIST = move (AV119_TPREGIST, F10_EXTPREGIST, 1, 0,"UNSIGNED");
    if( (AV119_TPREGIST == 1.0))
    {
        F10_EXNRNOTFIN = move (AV119_NRORDEMB, F10_EXNRNOTFIN, 7, 0,"UNSIGNED");
    }
    F10_EXNRCFICMP = move (SDNRCFICMP, F10_EXNRCFICMP, 6, 0,"UNSIGNED");
    F10_EXDIEMINOT = move (AV119_DIEMINOT, F10_EXDIEMINOT, 8, 0,"UNSIGNED");
    F10_EXDISAINOT = move (AV119_DISAINOT, F10_EXDISAINOT, 8, 0,"UNSIGNED");
    F10_EXCDNATOPE = move (TBCDNATOPE[(int)ITCDNATOPE - 1], F10_EXCDNATOPE, 4, 0,"UNSIGNED");
    F10_EXCDNATCOM = move (TBCDNATCOM[(int)ITCDNATOPE - 1], F10_EXCDNATCOM, 2, 0,"UNSIGNED");
    F10_EXPCICMNAT = move (TBPCICMNAT[(int)ITCDNATOPE - 1], F10_EXPCICMNAT, 5, 2,"UNSIGNED");
    F10_EXNRCONTAX = move (TBNRCONTAX[(int)ITCDNATOPE - 1], F10_EXNRCONTAX, 6, 0,"UNSIGNED");
    F10_EXVLIMPICM = move (TBVLICMNAT[(int)ITCDNATOPE - 1], F10_EXVLIMPICM, 13, 2,"UNSIGNED");
    F10_EXVLBASICM = move (TBVLBASICM[(int)ITCDNATOPE - 1], F10_EXVLBASICM, 13, 2,"UNSIGNED");
    F10_EXVLBASSTR = move (TBVLBASSTR[(int)ITCDNATOPE - 1], F10_EXVLBASSTR, 14, 2,"UNSIGNED");
    F10_EXVLICMSTR = move (TBVLICMSTR[(int)ITCDNATOPE - 1], F10_EXVLICMSTR, 14, 2,"UNSIGNED");
//:************ CLASSIFICA O DECENDIO ***********************
    GSDDIDISAMD = move (format(AV119_DIEMINOT ,"99999999"), GSDDIDISAMD,8);
    GSDDIDISAMD_GROUP();
    if( (AXDIINICIO > 20041000.0))
    {
        F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
    }
    else
    {
        if( (AXDIINICIO > 20040100.0))
        {
            if( (GSDDIDDSAMD < 16.0))
            {
                F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
            }
            else
            {
                F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
            }
        }
        else
        {
            if( (GSDDIDDSAMD < 11.0))
            {
                F10_EXINDECEND = move ("1", F10_EXINDECEND, 1, 0,"UNSIGNED");
            }
            else
            {
                if( (GSDDIDDSAMD < 21.0))
                {
                    F10_EXINDECEND = move ("2", F10_EXINDECEND, 1, 0,"UNSIGNED");
                }
                else
                {
                    F10_EXINDECEND = move ("3", F10_EXINDECEND, 1, 0,"UNSIGNED");
                }
            }
        }
    }
//:**********************************************************
//::EX; 10 AS C
    CG133_InitAuto();
    AU_CG133_CDCONTAX = auto (F10_EXNRCONTAX, AU_CG133_CDCONTAX, 6, 0,"UNSIGNED");
    AU_CG133_CDEMPRES = auto (GSDCDEMPRES, AU_CG133_CDEMPRES, 2, 0,"UNSIGNED");
    AU_CG133_CDMODENF = auto (F10_EXCDMODENF, AU_CG133_CDMODENF, 1, 0,"UNSIGNED");
    AU_CG133_CDNATCOM = auto (F10_EXCDNATCOM, AU_CG133_CDNATCOM, 2, 0,"UNSIGNED");
    AU_CG133_CDNATOPE = auto (F10_EXCDNATOPE, AU_CG133_CDNATOPE, 4, 0,"UNSIGNED");
    AU_CG133_CDUFMUNI = auto(F10_EXCDUFMUNI, AU_CG133_CDUFMUNI, 2);
    AU_CG133_DIEMINOT = auto (F10_EXDIEMINOT, AU_CG133_DIEMINOT, 8, 0,"UNSIGNED");
    AU_CG133_DISAINOT = auto (F10_EXDISAINOT, AU_CG133_DISAINOT, 8, 0,"UNSIGNED");
    AU_CG133_INCONFIN = auto (F10_EXINCONFIN, AU_CG133_INCONFIN, 1, 0,"UNSIGNED");
    AU_CG133_INDECEND = auto (F10_EXINDECEND, AU_CG133_INDECEND, 1, 0,"UNSIGNED");
    AU_CG133_INORIGEM = auto (F10_EXINORIGEM, AU_CG133_INORIGEM, 1, 0,"UNSIGNED");
    AU_CG133_INSITNOT = auto (F10_EXNRCANCEL, AU_CG133_INSITNOT, 1, 0,"UNSIGNED");
    AU_CG133_INSITREG = auto("G", AU_CG133_INSITREG, 1);
    AU_CG133_INZONAFR = auto (SDINZONAFR, AU_CG133_INZONAFR, 1, 0,"UNSIGNED");
    AU_CG133_NRCFICMP = auto (F10_EXNRCFICMP, AU_CG133_NRCFICMP, 6, 0,"UNSIGNED");
    AU_CG133_NRNOTAFI = auto (F10_EXNRNOTAFI, AU_CG133_NRNOTAFI, 9, 0,"UNSIGNED");
    AU_CG133_NRNOTFIN = auto (F10_EXNRNOTFIN, AU_CG133_NRNOTFIN, 7, 0,"UNSIGNED");
    AU_CG133_PCICMNAT = auto (F10_EXPCICMNAT, AU_CG133_PCICMNAT, 5, 2,"UNSIGNED");
    AU_CG133_PCICMPRO = auto (GLB.ZEROS, AU_CG133_PCICMPRO, 4, 2,"UNSIGNED");
    AU_CG133_TPREGIST = auto (F10_EXTPREGIST, AU_CG133_TPREGIST, 1, 0,"UNSIGNED");
    AU_CG133_TPSERIEN = auto(F10_EXNRSERIEX, AU_CG133_TPSERIEN, 3);
    AU_CG133_VLBASICM = auto (F10_EXVLBASICM, AU_CG133_VLBASICM, 14, 2,"UNSIGNED");
    AU_CG133_VLBASIPI = auto (F10_EXVLBASIPI, AU_CG133_VLBASIPI, 14, 2,"UNSIGNED");
    AU_CG133_VLBASSTR = auto (F10_EXVLBASSTR, AU_CG133_VLBASSTR, 14, 2,"UNSIGNED");
    AU_CG133_VLCONTAX = auto (F10_EXVLCONTAX, AU_CG133_VLCONTAX, 14, 2,"UNSIGNED");
    AU_CG133_VLBASDID = auto (F10_EXVLBASDID, AU_CG133_VLBASDID, 14, 2,"UNSIGNED");
    AU_CG133_VLICMDID = auto (F10_EXVLICMDID, AU_CG133_VLICMDID, 12, 2,"UNSIGNED");
    AU_CG133_VLICMDIO = auto (F10_EXVLICMDIO, AU_CG133_VLICMDIO, 12, 2,"UNSIGNED");
    AU_CG133_VLFCPDES = auto (F10_EXVLFCPDES, AU_CG133_VLFCPDES, 12, 2,"UNSIGNED");
    AU_CG133_VLICMPRO = auto (GLB.ZEROS, AU_CG133_VLICMPRO, 14, 2,"UNSIGNED");
    AU_CG133_VLICMSTR = auto (F10_EXVLICMSTR, AU_CG133_VLICMSTR, 14, 2,"UNSIGNED");
    AU_CG133_VLIMPICM = auto (F10_EXVLIMPICM, AU_CG133_VLIMPICM, 14, 2,"UNSIGNED");
    AU_CG133_VLIMPIPI = auto (F10_EXVLIMPIPI, AU_CG133_VLIMPIPI, 14, 2,"UNSIGNED");
    AU_CG133_VLISEICM = auto (F10_EXVLISEICM, AU_CG133_VLISEICM, 14, 2,"UNSIGNED");
    AU_CG133_VLISEIPI = auto (F10_EXVLISEIPI, AU_CG133_VLISEIPI, 14, 2,"UNSIGNED");
    AU_CG133_VLLIQUID = auto (GLB.ZEROS, AU_CG133_VLLIQUID, 14, 2,"UNSIGNED");
    AU_CG133_VLOUTICM = auto (F10_EXVLOUTICM, AU_CG133_VLOUTICM, 14, 2,"UNSIGNED");
    AU_CG133_VLOUTIPI = auto (F10_EXVLOUTIPI, AU_CG133_VLOUTIPI, 14, 2,"UNSIGNED");
    AU_CG133_VLPERICM = auto (F10_EXVLPERICM, AU_CG133_VLPERICM, 5, 2,"UNSIGNED");
    AU_CG133_VLPERIPI = auto (F10_EXVLPERIPI, AU_CG133_VLPERIPI, 5, 2,"UNSIGNED");
    if ((GLB.ERROR.trim()).equals("")==true)
    {
        CG133_AutoToFile();
        CG133_Insert ();
        CG133_InitAuto();
    }
    GLB.SHADOW = " ";
    P_50("PRINT.FRAME");
    GLB.SHADOW = currentShadow;
    if( (GSDCDEMPRES == GSDCDEMPRES))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_63();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_63");
    }
}
private void P_64 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F64_RLDTCABECA = move (GSDDTSISSEC, F64_RLDTCABECA, 8, 0,"UNSIGNED");
    F64_RLNRSOLICI = move (GSDNRSOLICI, F64_RLNRSOLICI, 6, 0,"UNSIGNED");
    F64_RLNRPAGINA = move (GLB.PAGECOUNTI, F64_RLNRPAGINA, 4, 0,"UNSIGNED");
    F64_RLHMCABECA = move(GSDTHHHMMED, F64_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F64_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F64_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F64_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F64_RLDTFINALX, 10);
    F64_RLNMABREMP = move(GSDNMABREMP, F64_RLNMABREMP, 16);
    F64_RLDSCONDEF = move(" - CONFERENCIA ", F64_RLDSCONDEF, 17);
    if( (AXINATUALI == 2.0))
    {
        F64_RLDSCONDEF = move(" - DEFINITIVA  ", F64_RLDSCONDEF, 17);
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_64();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_64");
    }
}
private void P_65 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GECDNATNUM = move (SDCDNATANT, GECDNATNUM, 4, 0,"UNSIGNED");
    GECDNATNUM_ITEM();
    GRCDNATONU = move(GRCDNATALF, GRCDNATONU, 4);
    GRCDNATONU_GROUP();
    if( (SDCDNATANT < 1000.0))
    {
        GECDPO1GR1 = move (format(GECDSEGPOS ,"9"), GECDPO1GR1,1);
        GECDPO1GR1_ITEM();
        GECDPO3GR1 = move (format(GECDULTPOS ,"99"), GECDPO3GR1,2);
        GECDPO3GR1_ITEM();
        if( (SDCDNATCOM != GLB.ZEROS))
        {
            GECDPO5GR1 = move (format(SDCDNATCOM ,"99"), GECDPO5GR1,2);
            GECDPO5GR1_ITEM();
        }
        else
        {
            GECDPO5GR1 = move(GLB.SPACES, GECDPO5GR1, 2);
            GECDPO5GR1_ITEM();
        }
        F65_RLCDNATOGR = move(GRCDNATGR1, F65_RLCDNATOGR, 7);
    }
    else
    {
        GECDPO1GR2 = move (format(GECDPRIPOS ,"9"), GECDPO1GR2,1);
        GECDPO1GR2_ITEM();
        GECDPO3GR2 = move(GRCDNATTRA, GECDPO3GR2, 3);
        GECDPO3GR2_ITEM();
        F65_RLCDNATOGR = move(GRCDNATGR2, F65_RLCDNATOGR, 7);
    }
    F66_RLVLSACONT = add(F65_RLCDAPCONT, F66_RLVLSACONT, 14, 2, "UNSIGNED", "TRUNCATE");
    F66_RLVLSABICM = add(F65_RLCDAPBICM, F66_RLVLSABICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F66_RLVLSAVICM = add(F65_RLCDAPVICM, F66_RLVLSAVICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F66_RLVLSANICM = add(F65_RLCDAPNICM, F66_RLVLSANICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F66_RLVLSAOICM = add(F65_RLVLAPOICM, F66_RLVLSAOICM, 13, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_65();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_65");
    }
}
private void P_66 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F67_RLVLTOTCON = add(F66_RLVLSACONT, F67_RLVLTOTCON, 14, 2, "UNSIGNED", "TRUNCATE");
    F67_RLVLTTBICM = add(F66_RLVLSABICM, F67_RLVLTTBICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F67_RLVLTTVICM = add(F66_RLVLSAVICM, F67_RLVLTTVICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F67_RLVLTTNICM = add(F66_RLVLSANICM, F67_RLVLTTNICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F67_RLVLTTOICM = add(F66_RLVLSAOICM, F67_RLVLTTOICM, 13, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_66();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_66");
    }
}
private void P_67 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_67();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_67");
    }
}
private void P_69 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDDIEMINOT = move (GLB.ZEROS, SDDIEMINOT, 8, 0,"UNSIGNED");
//::  SO; C ASC; C*EXDIEMINOT
//::  DT; ACTUAL C
    GLB.SECURE = false;
    GLB.STATUS = CG13307_DetermineGroupFrom (1, false, GSDCDEMPRES, GLB.ZEROS, GSDCDEMPRES, GLB.ZEROS);
    while (CG133_XSEEDEOF == false)
    {
        CG13307_DetermineMoveNext ();
        if (CG133_XSEEDEOF == true)
        {    break;
        }
        if( (SDDIEMINOT == GLB.ZEROS))
        {
            SDDIEMINOT = move (CG133_DIEMINOT, SDDIEMINOT, 8, 0,"UNSIGNED");
        }
        if( (CG133_DIEMINOT != SDDIEMINOT))
        {
            GLB.DC_AUX = formatDC(SDDIEMINOT, "99999999");
            DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
            F72_RLDTEMIRES = move (GLB.DC_DD_MM_CCYY, F72_RLDTEMIRES, 6, 0,"UNSIGNED");
            if( ((F72_RLVLICMRES != GLB.ZEROS) || (F72_RLVLIPIRES != GLB.ZEROS)))
            {
                GLB.SHADOW = "D";
                P_72("PRINT.FRAME");
                GLB.SHADOW = currentShadow;
            }
            SDDIEMINOT = move (CG133_DIEMINOT, SDDIEMINOT, 8, 0,"UNSIGNED");
        }
        if( (CG133_INSITNOT == GLB.ZEROS))
        {
            F72_RLVLICMRES = add(CG133_VLIMPICM, F72_RLVLICMRES, 14, 2, "UNSIGNED", "TRUNCATE");
            F72_RLVLIPIRES = add(CG133_VLIMPIPI, F72_RLVLIPIRES, 14, 2, "UNSIGNED", "TRUNCATE");
            F73_RLVLICMRES = add(CG133_VLIMPICM, F73_RLVLICMRES, 14, 2, "UNSIGNED", "TRUNCATE");
            F73_RLVLIPIRES = add(CG133_VLIMPIPI, F73_RLVLIPIRES, 14, 2, "UNSIGNED", "TRUNCATE");
        }
    }
    if( ((F72_RLVLICMRES != GLB.ZEROS) || (F72_RLVLIPIRES != GLB.ZEROS)))
    {
        GLB.DC_AUX = formatDC(SDDIEMINOT, "99999999");
        DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
        F72_RLDTEMIRES = move (GLB.DC_DD_MM_CCYY, F72_RLDTEMIRES, 6, 0,"UNSIGNED");
        GLB.SHADOW = "D";
        P_72("PRINT.FRAME");
        GLB.SHADOW = currentShadow;
    }
    if( ((F73_RLVLICMRES != GLB.ZEROS) || (F73_RLVLIPIRES != GLB.ZEROS)))
    {
        GLB.SHADOW = "D";
        P_73("PRINT.FRAME");
        GLB.SHADOW = currentShadow;
    }
    if( (GSDCDEMPRES != GLB.ZEROS))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_69();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_69");
    }
}
private void P_70 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
//: apuracao ICMS
    if( (SDINAPURAC == GLB.ZEROS))
    {
        GLB.SECURE = false;
        GLB.STATUS = CG12402_DetermineGroupFrom (4, false, GSDCDEMPRES, AXCDFILIAL, AXAMREFERE, SDTPIMPOST, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, AXCDFILIAL, AXAMREFERE, SDTPIMPOST, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS);
        while (CG124_XSEEDEOF == false)
        {
            CG12402_DetermineMoveNext ();
            if (CG124_XSEEDEOF == true)
            {    break;
            }
            if( (CG124_INICMIPI == GLB.ZEROS))
            {
                CG124_Delete();
            }
//:: Begin Insertable GlbLogic GSISLP
//  :---------------------------------------------------------------------
//  : OBJETIVO: FAZER SLEEPS EM REPORTS
//  : ---------
//  : PARAMETROS RECEBIDOS
//  : --------------------
//  : GSDNRSLEEPS ED N LE 06 : OPCIONAL. QUANTIDADE DE TRANSACOES A CADA
//  :                          SLEEP. SE NAO FOR INFORMADO, SERA ASSUMIDO
//  :                          100 TRANSACOES
//  : PARAMETROS DEVOLVIDOS
//  : ---------------------
//  : NENHUM
//  :---------------------------------------------------------------------
            GSDNRCONSLP = add(cDec("1"), GSDNRCONSLP, 6, 0, "UNSIGNED", "TRUNCATE");
            if( (GSDNRCONSLP > GSDNRSLEEPS))
            {
                GSDNRCONSLP = move (GLB.ZEROS, GSDNRCONSLP, 6, 0,"UNSIGNED");
                CommitTransaction();
            }
//:: End Insertable GlbLogic GSISLP
        }
        CommitTransaction();
    }
//: apuracao IPI
    if( (SDINAPURAC == 1.0))
    {
        SDCDFISAUX = move ("500", SDCDFISAUX, 4, 0,"UNSIGNED");
        if( (SDAMREFERE > 200212.0))
        {
            SDCDFISAUX = move ("5000", SDCDFISAUX, 4, 0,"UNSIGNED");
        }
        GLB.SECURE = false;
        GLB.STATUS = CG12403_DetermineGroupFrom (4, false, GSDCDEMPRES, AXCDFILIAL, SDAMREFERE, SDNRDECEND, SDCDFISAUX, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, AXCDFILIAL, SDAMREFERE, SDNRDECEND, SDCDFISAUX, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS);
        while (CG124_XSEEDEOF == false)
        {
            CG12403_DetermineMoveNext ();
            if (CG124_XSEEDEOF == true)
            {    break;
            }
            if( (CG124_CDEMPRES != GSDCDEMPRES))
            {
                break;
            }
            CG124_Delete();
//:: Begin Insertable GlbLogic GSISLP
//  :---------------------------------------------------------------------
//  : OBJETIVO: FAZER SLEEPS EM REPORTS
//  : ---------
//  : PARAMETROS RECEBIDOS
//  : --------------------
//  : GSDNRSLEEPS ED N LE 06 : OPCIONAL. QUANTIDADE DE TRANSACOES A CADA
//  :                          SLEEP. SE NAO FOR INFORMADO, SERA ASSUMIDO
//  :                          100 TRANSACOES
//  : PARAMETROS DEVOLVIDOS
//  : ---------------------
//  : NENHUM
//  :---------------------------------------------------------------------
            GSDNRCONSLP = add(cDec("1"), GSDNRCONSLP, 6, 0, "UNSIGNED", "TRUNCATE");
            if( (GSDNRCONSLP > GSDNRSLEEPS))
            {
                GSDNRCONSLP = move (GLB.ZEROS, GSDNRCONSLP, 6, 0,"UNSIGNED");
                CommitTransaction();
            }
//:: End Insertable GlbLogic GSISLP
        }
        CommitTransaction();
    }
    if( (GSDCDEMPRES != GLB.ZEROS))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_70();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_70");
    }
}
private void P_71 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
    F71_RLDTCABECA = move (GSDDTSISSEC, F71_RLDTCABECA, 8, 0,"UNSIGNED");
    F71_RLNRSOLICI = move (GSDNRSOLICI, F71_RLNRSOLICI, 6, 0,"UNSIGNED");
    F71_RLNRPAGINA = move (SDNRCONPAG, F71_RLNRPAGINA, 4, 0,"UNSIGNED");
    F71_RLHMCABECA = move(GSDTHHHMMED, F71_RLHMCABECA, 5);
    F71_RLNMABREMP = move(GSDNMABREMP, F71_RLNMABREMP, 16);
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_71();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_71");
    }
}
private void P_72 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_72();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_72");
    }
}
private void P_73 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_73();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_73");
    }
}
private void P_74 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F74_RLDTCABECA = move (GSDDTSISSEC, F74_RLDTCABECA, 8, 0,"UNSIGNED");
    F74_RLNRSOLICI = move (GSDNRSOLICI, F74_RLNRSOLICI, 6, 0,"UNSIGNED");
    F74_RLNRPAGINA = move (GLB.PAGECOUNTJ, F74_RLNRPAGINA, 4, 0,"UNSIGNED");
    F74_RLHMCABECA = move(GSDTHHHMMED, F74_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F74_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F74_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F74_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F74_RLDTFINALX, 10);
    F74_RLNMABREMP = move(GSDNMABREMP, F74_RLNMABREMP, 16);
    F74_RLDSCONDEF = move(" - CONFERENCIA ", F74_RLDSCONDEF, 17);
    if( (AXINATUALI == 2.0))
    {
        F74_RLDSCONDEF = move(" - DEFINITIVA  ", F74_RLDSCONDEF, 17);
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_74();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_74");
    }
}
private void P_75 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GECDNATNUM = move (SDCDNATANT, GECDNATNUM, 4, 0,"UNSIGNED");
    GECDNATNUM_ITEM();
    GRCDNATONU = move(GRCDNATALF, GRCDNATONU, 4);
    GRCDNATONU_GROUP();
    if( (SDCDNATANT < 1000.0))
    {
        GECDPO1GR1 = move (format(GECDSEGPOS ,"9"), GECDPO1GR1,1);
        GECDPO1GR1_ITEM();
        GECDPO3GR1 = move (format(GECDULTPOS ,"99"), GECDPO3GR1,2);
        GECDPO3GR1_ITEM();
        if( (SDCDNATCOM != GLB.ZEROS))
        {
            GECDPO5GR1 = move (format(SDCDNATCOM ,"99"), GECDPO5GR1,2);
            GECDPO5GR1_ITEM();
        }
        else
        {
            GECDPO5GR1 = move(GLB.SPACES, GECDPO5GR1, 2);
            GECDPO5GR1_ITEM();
        }
        F75_RLCDNATOGR = move(GRCDNATGR1, F75_RLCDNATOGR, 7);
    }
    else
    {
        GECDPO1GR2 = move (format(GECDPRIPOS ,"9"), GECDPO1GR2,1);
        GECDPO1GR2_ITEM();
        GECDPO3GR2 = move(GRCDNATTRA, GECDPO3GR2, 3);
        GECDPO3GR2_ITEM();
        F75_RLCDNATOGR = move(GRCDNATGR2, F75_RLCDNATOGR, 7);
    }
    F75_RLPCICMNOT = move (SDPCICMNOT, F75_RLPCICMNOT, 4, 2,"UNSIGNED");
    F76_RLCDAPBICM = add(F75_RLCDAPBICM, F76_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F76_RLCDAPVICM = add(F75_RLCDAPVICM, F76_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F76_RLCDAPNICM = add(F75_RLCDAPNICM, F76_RLCDAPNICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F76_RLVLAPOICM = add(F75_RLVLAPOICM, F76_RLVLAPOICM, 13, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_75();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_75");
    }
}
private void P_76 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_76();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_76");
    }
}
private void P_77 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F77_RLDTCABECA = move (GSDDTSISSEC, F77_RLDTCABECA, 8, 0,"UNSIGNED");
    F77_RLNRSOLICI = move (GSDNRSOLICI, F77_RLNRSOLICI, 6, 0,"UNSIGNED");
    F77_RLNRPAGINA = move (GLB.PAGECOUNTO, F77_RLNRPAGINA, 4, 0,"UNSIGNED");
    F77_RLHMCABECA = move(GSDTHHHMMED, F77_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F77_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F77_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F77_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F77_RLDTFINALX, 10);
    F77_RLNMABREMP = move(GSDNMABREMP, F77_RLNMABREMP, 16);
    F77_RLDSCONDEF = move(" - CONFERENCIA ", F77_RLDSCONDEF, 17);
    if( (AXINATUALI == 2.0))
    {
        F77_RLDSCONDEF = move(" - DEFINITIVA  ", F77_RLDSCONDEF, 17);
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_77();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_77");
    }
}
private void P_78 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GECDNATNUM = move (SDCDNATANT, GECDNATNUM, 4, 0,"UNSIGNED");
    GECDNATNUM_ITEM();
    GRCDNATONU = move(GRCDNATALF, GRCDNATONU, 4);
    GRCDNATONU_GROUP();
    if( (SDCDNATANT < 1000.0))
    {
        GECDPO1GR1 = move (format(GECDSEGPOS ,"9"), GECDPO1GR1,1);
        GECDPO1GR1_ITEM();
        GECDPO3GR1 = move (format(GECDULTPOS ,"99"), GECDPO3GR1,2);
        GECDPO3GR1_ITEM();
        if( (SDCDNATCOM != GLB.ZEROS))
        {
            GECDPO5GR1 = move (format(SDCDNATCOM ,"99"), GECDPO5GR1,2);
            GECDPO5GR1_ITEM();
        }
        else
        {
            GECDPO5GR1 = move(GLB.SPACES, GECDPO5GR1, 2);
            GECDPO5GR1_ITEM();
        }
        F78_RLCDNATOGR = move(GRCDNATGR1, F78_RLCDNATOGR, 7);
    }
    else
    {
        GECDPO1GR2 = move (format(GECDPRIPOS ,"9"), GECDPO1GR2,1);
        GECDPO1GR2_ITEM();
        GECDPO3GR2 = move(GRCDNATTRA, GECDPO3GR2, 3);
        GECDPO3GR2_ITEM();
        F78_RLCDNATOGR = move(GRCDNATGR2, F78_RLCDNATOGR, 7);
    }
    F78_RLPCICMNOT = move (SDPCICMNOT, F78_RLPCICMNOT, 4, 2,"UNSIGNED");
    if (SDINCLIENT == GLB.ZEROS)
    {
        F78_RLINPESSOA = move("JUR", F78_RLINPESSOA, 3);
    }
    else
    if (SDINCLIENT == 1.0)
    {
        F78_RLINPESSOA = move("FIS", F78_RLINPESSOA, 3);
    }
    else
    if (SDINCLIENT == 2.0)
    {
        F78_RLINPESSOA = move("SMN", F78_RLINPESSOA, 3);
    }
    else
    if (SDINCLIENT == 3.0)
    {
        F78_RLINPESSOA = move("NCT", F78_RLINPESSOA, 3);
    }
    else
    if (SDINCLIENT == 9.0)
    {
        F78_RLINPESSOA = move(GLB.SPACES, F78_RLINPESSOA, 3);
    }
    F79_RLCDAPBICM = add(F78_RLCDAPBICM, F79_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F79_RLCDAPVICM = add(F78_RLCDAPVICM, F79_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F79_RLCDAPNICM = add(F78_RLCDAPNICM, F79_RLCDAPNICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F79_RLVLAPOICM = add(F78_RLVLAPOICM, F79_RLVLAPOICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F79_RLCDAPVDIO = add(F78_RLCDAPVDIO, F79_RLCDAPVDIO, 13, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_78();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_78");
    }
}
private void P_79 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F80_RLCDAPBICM = add(F79_RLCDAPBICM, F80_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F80_RLCDAPVICM = add(F79_RLCDAPVICM, F80_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F80_RLCDAPNICM = add(F79_RLCDAPNICM, F80_RLCDAPNICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F80_RLVLAPOICM = add(F79_RLVLAPOICM, F80_RLVLAPOICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F80_RLCDAPVDIO = add(F79_RLCDAPVDIO, F80_RLCDAPVDIO, 13, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_79();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_79");
    }
}
private void P_80 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_80();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_80");
    }
}
private void P_81 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F81_RLDTCABECA = move (GSDDTSISSEC, F81_RLDTCABECA, 8, 0,"UNSIGNED");
    F81_RLNRSOLICI = move (GSDNRSOLICI, F81_RLNRSOLICI, 6, 0,"UNSIGNED");
    F81_RLNRPAGINA = move (GLB.PAGECOUNTP, F81_RLNRPAGINA, 4, 0,"UNSIGNED");
    F81_RLHMCABECA = move(GSDTHHHMMED, F81_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F81_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F81_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F81_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F81_RLDTFINALX, 10);
    F81_RLNMABREMP = move(GSDNMABREMP, F81_RLNMABREMP, 16);
    F81_RLDSCONDEF = move(" - CONFERENCIA ", F81_RLDSCONDEF, 17);
    if( (AXINATUALI == 2.0))
    {
        F81_RLDSCONDEF = move(" - DEFINITIVA  ", F81_RLDSCONDEF, 17);
    }
    F81_RLDSTEX20A = move("PRODUTOS NAO TEXTIL", F81_RLDSTEX20A, 20);
    if( ((rTrim(SDINTEXCRE)).equals(rTrim("S"))==true))
    {
        F81_RLDSTEX20A = move("PRODUTOS TEXTIL", F81_RLDSTEX20A, 20);
    }
    if( (GSDCDEMPRES == 2.0))
    {
        F81_RLDSTEX20A = move("PRODUTOS NAO FABRICA", F81_RLDSTEX20A, 20);
        if( ((rTrim(SDINTEXCRE)).equals(rTrim("S"))==true))
        {
            F81_RLDSTEX20A = move("PRODUTOS FABRICA", F81_RLDSTEX20A, 20);
        }
    }
    F81_RLDSNOTFOP = move("CFOP", F81_RLDSNOTFOP, 4);
    F81_RLDSICMSXX = move(GLB.SPACES, F81_RLDSICMSXX, 5);
    if( (SDNRNOTCRE > GLB.ZEROS))
    {
        F81_RLDSNOTFOP = move("NOTA", F81_RLDSNOTFOP, 4);
        F81_RLDSICMSXX = move("%ICMS", F81_RLDSICMSXX, 5);
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_81();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_81");
    }
}
private void P_82 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F83_RLVLCONCRE = add(F82_RLVLCONCRE, F83_RLVLCONCRE, 14, 2, "UNSIGNED", "TRUNCATE");
    F83_RLVLBASCRE = add(F82_RLVLBASCRE, F83_RLVLBASCRE, 14, 2, "UNSIGNED", "TRUNCATE");
    F83_RLVLIMPCRE = add(F82_RLVLIMPCRE, F83_RLVLIMPCRE, 14, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_82();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_82");
    }
}
private void P_83 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F84_RLVLCONCRE = add(F83_RLVLCONCRE, F84_RLVLCONCRE, 14, 2, "UNSIGNED", "TRUNCATE");
    F84_RLVLBASCRE = add(F83_RLVLBASCRE, F84_RLVLBASCRE, 14, 2, "UNSIGNED", "TRUNCATE");
    F84_RLVLIMPCRE = add(F83_RLVLIMPCRE, F84_RLVLIMPCRE, 14, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_83();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_83");
    }
}
private void P_84 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_84();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_84");
    }
}
private void P_90 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_90();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_90");
    }
}
private void P_91 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_91();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_91");
    }
}
private void P_92 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_92();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_92");
    }
}
private void P_93 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_93();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_93");
    }
}
private void P_94 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_94();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_94");
    }
}
private void P_95 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F95_RLNMABREMP = move(GSDNMABREMP, F95_RLNMABREMP, 16);
    F95_RLDTCABECA = move (GSDDTSISSEC, F95_RLDTCABECA, 8, 0,"UNSIGNED");
    F95_RLHMCABECA = move(GSDTHHHMMED, F95_RLHMCABECA, 5);
    F95_RLNRSOLICI = move (GSDNRSOLICI, F95_RLNRSOLICI, 6, 0,"UNSIGNED");
    F95_RLNRPAGINA = move (GLB.PAGECOUNTZ, F95_RLNRPAGINA, 3, 0,"UNSIGNED");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_95();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_95");
    }
}
private void P_96 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_96();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_96");
    }
}
private void P_101 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
    F101_RLDTCABECA = move (GSDDTSISSEC, F101_RLDTCABECA, 8, 0,"UNSIGNED");
    F101_RLNRSOLICI = move (GSDNRSOLICI, F101_RLNRSOLICI, 6, 0,"UNSIGNED");
    F101_RLNRPAGINA = move (SDNRCONPAG, F101_RLNRPAGINA, 4, 0,"UNSIGNED");
    F101_RLHMCABECA = move(GSDTHHHMMED, F101_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F101_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F101_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F101_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F101_RLDTFINALX, 10);
    F101_RLNMABREMP = move(GSDNMABREMP, F101_RLNMABREMP, 16);
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_101();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_101");
    }
}
private void P_102 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GECDNATNUM = move (SDCDNATOPE, GECDNATNUM, 4, 0,"UNSIGNED");
    GECDNATNUM_ITEM();
    GRCDNATONU = move(GRCDNATALF, GRCDNATONU, 4);
    GRCDNATONU_GROUP();
    if( (SDCDNATOPE < 1000.0))
    {
        GECDPO1GR1 = move (format(GECDSEGPOS ,"9"), GECDPO1GR1,1);
        GECDPO1GR1_ITEM();
        GECDPO3GR1 = move (format(GECDULTPOS ,"99"), GECDPO3GR1,2);
        GECDPO3GR1_ITEM();
        GECDPO5GR1 = move (format(SDCDNATCOM ,"99"), GECDPO5GR1,2);
        GECDPO5GR1_ITEM();
        F102_RLCDNATOGR = move(GRCDNATGR1, F102_RLCDNATOGR, 7);
    }
    else
    {
        GECDPO1GR2 = move (format(GECDPRIPOS ,"9"), GECDPO1GR2,1);
        GECDPO1GR2_ITEM();
        GECDPO3GR2 = move(GRCDNATTRA, GECDPO3GR2, 3);
        GECDPO3GR2_ITEM();
        F102_RLCDNATOGR = move(GRCDNATGR2, F102_RLCDNATOGR, 7);
    }
    F103_RLVLBASDID = add(F102_RLVLBASDID, F103_RLVLBASDID, 12, 2, "UNSIGNED", "TRUNCATE");
    F103_RLVLICMDID = add(F102_RLVLICMDID, F103_RLVLICMDID, 12, 2, "UNSIGNED", "TRUNCATE");
    F103_RLVLICMDIO = add(F102_RLVLICMDIO, F103_RLVLICMDIO, 12, 2, "UNSIGNED", "TRUNCATE");
    F103_RLVLFCPDES = add(F102_RLVLFCPDES, F103_RLVLFCPDES, 12, 2, "UNSIGNED", "TRUNCATE");
    if( ((((F102_RLVLBASDID == GLB.ZEROS) && (F102_RLVLICMDID == GLB.ZEROS)) && (F102_RLVLICMDIO == GLB.ZEROS)) && (F102_RLVLFCPDES == GLB.ZEROS)))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_102();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_102");
    }
}
private void P_103 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F103_RLCDUFMUNI = move(SDCDUFMUNI, F103_RLCDUFMUNI, 2);
    if( ((((F103_RLVLBASDID == GLB.ZEROS) && (F103_RLVLICMDID == GLB.ZEROS)) && (F103_RLVLICMDIO == GLB.ZEROS)) && (F103_RLVLFCPDES == GLB.ZEROS)))
    {
    return;    //END.NO.PRINT
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_103();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_103");
    }
}
private void P_104 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_104();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_104");
    }
}
private void P_111 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    SDNRCONPAG = add(cDec("1"), SDNRCONPAG, 4, 0, "UNSIGNED", "TRUNCATE");
    F111_RLDTCABECA = move (GSDDTSISSEC, F111_RLDTCABECA, 8, 0,"UNSIGNED");
    F111_RLNRSOLICI = move (GSDNRSOLICI, F111_RLNRSOLICI, 6, 0,"UNSIGNED");
    F111_RLNRPAGINA = move (SDNRCONPAG, F111_RLNRPAGINA, 4, 0,"UNSIGNED");
    F111_RLHMCABECA = move(GSDTHHHMMED, F111_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F111_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F111_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F111_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F111_RLDTFINALX, 10);
    F111_RLNMABREMP = move(GSDNMABREMP, F111_RLNMABREMP, 16);
    F111_RLDSTEX20A = move("PRODUTOS TEXTIL", F111_RLDSTEX20A, 20);
    if( (GSDCDEMPRES == 2.0))
    {
        F111_RLDSTEX20A = move("PRODUTOS FABRICA", F111_RLDSTEX20A, 20);
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_111();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_111");
    }
}
private void P_112 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F113_RLVLBASCRE = add(F112_RLVLBASCRE, F113_RLVLBASCRE, 14, 2, "UNSIGNED", "TRUNCATE");
    F113_RLVLICMDIO = add(F112_RLVLICMDIO, F113_RLVLICMDIO, 12, 2, "UNSIGNED", "TRUNCATE");
    F113_RLVLICMDID = add(F112_RLVLICMDID, F113_RLVLICMDID, 12, 2, "UNSIGNED", "TRUNCATE");
    F113_RLVLFCPDES = add(F112_RLVLFCPDES, F113_RLVLFCPDES, 12, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_112();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_112");
    }
}
private void P_113 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    if( ((((AXINMESPER == 1.0) && (AXTPRELATO == 1.0)) && (AXCDFILIAL == GLB.ZEROS)) && (F113_RLVLICMDIO != GLB.ZEROS)))
    {
        SDTPIMPOST = move ("15", SDTPIMPOST, 2, 0,"UNSIGNED");
        SDCDFISCAL = move ("2", SDCDFISCAL, 4, 0,"UNSIGNED");
        SDINACHOUX = move (GLB.ZEROS, SDINACHOUX, 1, 0,"UNSIGNED");
        GLB.SECURE = true;
        GLB.STATUS = CG12402_DetermineGroupFrom (5, false, GSDCDEMPRES, AXCDFILIAL, AXAMREFERE, SDTPIMPOST, SDCDFISCAL, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS, GSDCDEMPRES, AXCDFILIAL, AXAMREFERE, SDTPIMPOST, SDCDFISCAL, GLB.ZEROS, GLB.ZEROS, GLB.ZEROS);
        while (CG124_XSEEDEOF == false)
        {
            CG12402_DetermineMoveNext ();
            if (CG124_XSEEDEOF == true)
            {    break;
            }
                GLB.STATUS = CG124_Lock ();
            if( (((((CG124_CDEMPRES != GSDCDEMPRES) || (CG124_CDFILIAL != AXCDFILIAL)) || (CG124_AMMOVTOX != AXAMREFERE)) || (CG124_TPIMPOST != SDTPIMPOST)) || (CG124_CDFISCAL != SDCDFISCAL)))
            {
                break;
            }
            CG124_VLOUTICM = flag (F113_RLVLICMDIO, CG124_VLOUTICM, 14, 2,"UNSIGNED");
            CG124_Modify ();
            SDINACHOUX = move ("1", SDINACHOUX, 1, 0,"UNSIGNED");
        }
        if( (SDINACHOUX == GLB.ZEROS))
        {
//: busca uma sequencia livre
            SDNRSEQIMP = move ("99", SDNRSEQIMP, 2, 0,"UNSIGNED");
            GLB.SECURE = false;
            GLB.STATUS = CG12401_DetermineLast (GSDCDEMPRES, AXCDFILIAL, AXAMREFERE, SDCDFISCAL, GLB.ZEROS, GLB.ZEROS, SDNRSEQIMP);
            if( (((((((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true) || (CG124_CDEMPRES != GSDCDEMPRES)) || (CG124_CDFILIAL != AXCDFILIAL)) || (CG124_AMMOVTOX != AXAMREFERE)) || (CG124_CDFISCAL != SDCDFISCAL)) || (CG124_CDNATCOM != GLB.ZEROS)))
            {
                CG124_NRSEQUEN = move (GLB.ZEROS, CG124_NRSEQUEN, 2, 0,"UNSIGNED");
                GLB.STATUS = move("*****", GLB.STATUS, 5);
            }
            SDNRSEQIMP = add(cDec("1"), CG124_NRSEQUEN, SDNRSEQIMP, 2, 0, "UNSIGNED", "TRUNCATE");
            CG124_InitAuto();
            AU_CG124_AMMOVTOX = auto (AXAMREFERE, AU_CG124_AMMOVTOX, 6, 0,"UNSIGNED");
            AU_CG124_CDEMPRES = auto (GSDCDEMPRES, AU_CG124_CDEMPRES, 2, 0,"UNSIGNED");
            AU_CG124_CDFILIAL = auto (AXCDFILIAL, AU_CG124_CDFILIAL, 2, 0,"UNSIGNED");
            AU_CG124_CDFISCAL = auto (SDCDFISCAL, AU_CG124_CDFISCAL, 4, 0,"UNSIGNED");
            AU_CG124_CDNATCOM = auto (GLB.ZEROS, AU_CG124_CDNATCOM, 2, 0,"UNSIGNED");
            AU_CG124_DSIMPOST = auto("DIFAL ORIGEM-SAIDA", AU_CG124_DSIMPOST, 60);
            AU_CG124_TPIMPOST = auto (SDTPIMPOST, AU_CG124_TPIMPOST, 2, 0,"UNSIGNED");
            AU_CG124_NRSEQUEN = auto (SDNRSEQIMP, AU_CG124_NRSEQUEN, 2, 0,"UNSIGNED");
            AU_CG124_VLIMPICM = auto (GLB.ZEROS, AU_CG124_VLIMPICM, 14, 2,"UNSIGNED");
            AU_CG124_VLOUTICM = auto (F113_RLVLICMDIO, AU_CG124_VLOUTICM, 14, 2,"UNSIGNED");
            if ((GLB.ERROR.trim()).equals("")==true)
            {
                CG124_AutoToFile();
                CG124_Insert ();
                CG124_InitAuto();
            }
            SDVLICMDIO = move (F113_RLVLICMDIO, SDVLICMDIO, 14, 2,"UNSIGNED");
            CREDITO_TEXTIL ();
            GLB.SHADOW = currentShadow;
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
        }
        if( (AXINATUALI == 2.0))
        {
            SDTPREGIST = move ("1", SDTPREGIST, 1, 0,"UNSIGNED");
            SDCDUFMUNI = move("SC", SDCDUFMUNI, 2);
            SDTPIMPOST = move ("8", SDTPIMPOST, 2, 0,"UNSIGNED");
            SDCDFISCAL = move ("7", SDCDFISCAL, 4, 0,"UNSIGNED");
            EXCLUIR_CG ();
            GLB.SHADOW = currentShadow;
            if (GLB.EXIT==true)
            {
               GLB.EXIT=false;
                return;
            }
            SDNRSEQIMP = move ("99", SDNRSEQIMP, 2, 0,"UNSIGNED");
            SDCDAJAPUR = move("SC239999", SDCDAJAPUR, 10);
            GLB.SECURE = false;
            GLB.STATUS = CG14001_DetermineLast (GSDCDEMPRES, SDTPREGIST, AXCDFILIAL, AXAMREFERE, SDCDUFMUNI, SDCDFISCAL, SDNRSEQIMP);
            if( ((((((((rTrim(GLB.STATUS)).equals(rTrim("*****"))==true) || (CG140_TPREGIST != SDTPREGIST)) || (CG140_CDEMPRES != GSDCDEMPRES)) || (CG140_CDFILIAL != AXCDFILIAL)) || (CG140_AMMOVTOX != AXAMREFERE)) || ((rTrim(CG140_CDUFMUNI)).equals(rTrim(SDCDUFMUNI))==false)) || (CG140_CDFISCAL != SDCDFISCAL)))
            {
                CG140_NRSEQUEN = move (GLB.ZEROS, CG140_NRSEQUEN, 2, 0,"UNSIGNED");
                GLB.STATUS = move("*****", GLB.STATUS, 5);
            }
            SDNRSEQIMP = add(cDec("1"), CG140_NRSEQUEN, SDNRSEQIMP, 2, 0, "UNSIGNED", "TRUNCATE");
            CG140_InitAuto();
            AU_CG140_CDFILIAL = auto (AXCDFILIAL, AU_CG140_CDFILIAL, 2, 0,"UNSIGNED");
            AU_CG140_AMMOVTOX = auto (AXAMREFERE, AU_CG140_AMMOVTOX, 6, 0,"UNSIGNED");
            AU_CG140_CDAJAPUR = auto(SDCDAJAPUR, AU_CG140_CDAJAPUR, 10);
            AU_CG140_CDEMPRES = auto (GSDCDEMPRES, AU_CG140_CDEMPRES, 2, 0,"UNSIGNED");
            AU_CG140_CDFISCAL = auto (SDCDFISCAL, AU_CG140_CDFISCAL, 4, 0,"UNSIGNED");
            AU_CG140_CDUFMUNI = auto(SDCDUFMUNI, AU_CG140_CDUFMUNI, 2);
            AU_CG140_DIIMPORT = auto (GLB.ZEROS, AU_CG140_DIIMPORT, 8, 0,"UNSIGNED");
            AU_CG140_DSIMPOST = auto("ESTORNO DEBITOS DIFAL TEXTIL", AU_CG140_DSIMPOST, 60);
            AU_CG140_TPIMPOST = auto (SDTPIMPOST, AU_CG140_TPIMPOST, 2, 0,"UNSIGNED");
            AU_CG140_TPREGIST = auto (SDTPREGIST, AU_CG140_TPREGIST, 1, 0,"UNSIGNED");
            AU_CG140_NRSEQUEN = auto (SDNRSEQIMP, AU_CG140_NRSEQUEN, 2, 0,"UNSIGNED");
            AU_CG140_VLICMSTR = auto (F113_RLVLICMDIO, AU_CG140_VLICMSTR, 14, 2,"UNSIGNED");
            AU_CG140_VLCONTAB = auto (GLB.ZEROS, AU_CG140_VLCONTAB, 14, 2,"UNSIGNED");
            AU_CG140_VLBASSTR = auto (GLB.ZEROS, AU_CG140_VLBASSTR, 14, 2,"UNSIGNED");
            if ((GLB.ERROR.trim()).equals("")==true)
            {
                CG140_AutoToFile();
                CG140_Insert ();
                CG140_InitAuto();
            }
        }
    }
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_113();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_113");
    }
}
private void P_121 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F121_RLDTCABECA = move (GSDDTSISSEC, F121_RLDTCABECA, 8, 0,"UNSIGNED");
    F121_RLNRSOLICI = move (GSDNRSOLICI, F121_RLNRSOLICI, 6, 0,"UNSIGNED");
    F121_RLNRPAGINA = move (GLB.PAGECOUNTS, F121_RLNRPAGINA, 4, 0,"UNSIGNED");
    F121_RLHMCABECA = move(GSDTHHHMMED, F121_RLHMCABECA, 5);
    GLB.DC_AUX = formatDC(AXDIINICIO, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F121_RLDTINICIO = move(GLB.DC_DD_MM_CCYY, F121_RLDTINICIO, 10);
    GLB.DC_AUX = formatDC(AXDIFINALX, "99999999");
    DCConvert (GLB.DC_AUX, "", 0, "CCYYMMDD");
    F121_RLDTFINALX = move(GLB.DC_DD_MM_CCYY, F121_RLDTFINALX, 10);
    F121_RLNMABREMP = move(GSDNMABREMP, F121_RLNMABREMP, 16);
    F121_RLDSCONDEF = move(" - CONFERENCIA ", F121_RLDSCONDEF, 17);
    if( (AXINATUALI == 2.0))
    {
        F121_RLDSCONDEF = move(" - DEFINITIVA  ", F121_RLDSCONDEF, 17);
    }
    F121_RLDSTEXAUX = move(SDDSTEXAUX, F121_RLDSTEXAUX, 65);
    F121_RLCDCLAFIS = move ("39241000", F121_RLCDCLAFIS, 10, 0,"UNSIGNED");
    F121_RLCDCLAFI1 = move ("39249000", F121_RLCDCLAFI1, 10, 0,"UNSIGNED");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_121();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_121");
    }
}
private void P_122 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    GECDNATNUM = move (SDCDNATANT, GECDNATNUM, 4, 0,"UNSIGNED");
    GECDNATNUM_ITEM();
    GRCDNATONU = move(GRCDNATALF, GRCDNATONU, 4);
    GRCDNATONU_GROUP();
    if( (SDCDNATANT < 1000.0))
    {
        GECDPO1GR1 = move (format(GECDSEGPOS ,"9"), GECDPO1GR1,1);
        GECDPO1GR1_ITEM();
        GECDPO3GR1 = move (format(GECDULTPOS ,"99"), GECDPO3GR1,2);
        GECDPO3GR1_ITEM();
        if( (SDCDNATCOM != GLB.ZEROS))
        {
            GECDPO5GR1 = move (format(SDCDNATCOM ,"99"), GECDPO5GR1,2);
            GECDPO5GR1_ITEM();
        }
        else
        {
            GECDPO5GR1 = move(GLB.SPACES, GECDPO5GR1, 2);
            GECDPO5GR1_ITEM();
        }
        F122_RLCDNATOGR = move(GRCDNATGR1, F122_RLCDNATOGR, 7);
    }
    else
    {
        GECDPO1GR2 = move (format(GECDPRIPOS ,"9"), GECDPO1GR2,1);
        GECDPO1GR2_ITEM();
        GECDPO3GR2 = move(GRCDNATTRA, GECDPO3GR2, 3);
        GECDPO3GR2_ITEM();
        F122_RLCDNATOGR = move(GRCDNATGR2, F122_RLCDNATOGR, 7);
    }
    F122_RLPCICMNOT = move (SDPCICMNOT, F122_RLPCICMNOT, 4, 2,"UNSIGNED");
    if( ((rTrim(SDDSTEXAUX)).equals(rTrim(GLB.SPACES))==false))
    {
//::Pessoa juridica
//::Pessoa fisica
//::Simples nacional
//::Não contribuinte
        if (SDINCLIANT == GLB.ZEROS)
        {
            F122_RLINPESSOA = move("JUR", F122_RLINPESSOA, 3);
        }
        else
        if (SDINCLIANT == 1.0)
        {
            F122_RLINPESSOA = move("FIS", F122_RLINPESSOA, 3);
        }
        else
        if (SDINCLIANT == 2.0)
        {
            F122_RLINPESSOA = move("SMN", F122_RLINPESSOA, 3);
        }
        else
        if (SDINCLIANT == 3.0)
        {
            F122_RLINPESSOA = move("NCT", F122_RLINPESSOA, 3);
        }
    }
    F123_RLCDAPBICM = add(F122_RLCDAPBICM, F123_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F123_RLCDAPVICM = add(F122_RLCDAPVICM, F123_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F123_RLCDAPNICM = add(F122_RLCDAPNICM, F123_RLCDAPNICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F123_RLVLAPOICM = add(F122_RLVLAPOICM, F123_RLVLAPOICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F123_RLCDAPVDIO = add(F122_RLCDAPVDIO, F123_RLCDAPVDIO, 13, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_122();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_122");
    }
}
private void P_123 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
    F124_RLCDAPBICM = add(F123_RLCDAPBICM, F124_RLCDAPBICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F124_RLCDAPVICM = add(F123_RLCDAPVICM, F124_RLCDAPVICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F124_RLCDAPNICM = add(F123_RLCDAPNICM, F124_RLCDAPNICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F124_RLVLAPOICM = add(F123_RLVLAPOICM, F124_RLVLAPOICM, 13, 2, "UNSIGNED", "TRUNCATE");
    F124_RLCDAPVDIO = add(F123_RLCDAPVDIO, F124_RLCDAPVDIO, 13, 2, "UNSIGNED", "TRUNCATE");
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_123();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_123");
    }
}
private void P_124 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_124();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_124");
    }
}
private void P_125 (String pXseedCmd)
    throws Exception
{   try
    {    String currentShadow;
         currentShadow = GLB.SHADOW;
        GLB.SHADOW = currentShadow;
        if (pXseedCmd.equals("PRINT.FRAME") == true)
        {   F_125();
        }
    }
    catch (Exception e)
    {    ShowErrorMsg (e,"P_125");
    }
}
private void F_1()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F1_1());
            P_CheckPage();
            GLB.LP.println(F1_2());
            P_CheckPage();
            GLB.LP.println(F1_3());
            P_CheckPage();
            GLB.LP.println(F1_4());
            P_CheckPage();
            GLB.LP.println(F1_5());
            P_CheckPage();
            GLB.LP.println(F1_6());
            P_CheckPage();
            GLB.LP.println(F1_7());
            P_CheckPage();
            GLB.LP.println(F1_8());
            P_CheckPage();
            GLB.LP.println(F1_9());
            P_CheckPage();
            GLB.LP.println(F1_10());
            P_CheckPage();
            GLB.LP.println(F1_11());
            P_CheckPage();
            GLB.LP.println(F1_12());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F1_1());
            P_CheckPageB();
            GLB.LPB.println (F1_2());
            P_CheckPageB();
            GLB.LPB.println (F1_3());
            P_CheckPageB();
            GLB.LPB.println (F1_4());
            P_CheckPageB();
            GLB.LPB.println (F1_5());
            P_CheckPageB();
            GLB.LPB.println (F1_6());
            P_CheckPageB();
            GLB.LPB.println (F1_7());
            P_CheckPageB();
            GLB.LPB.println (F1_8());
            P_CheckPageB();
            GLB.LPB.println (F1_9());
            P_CheckPageB();
            GLB.LPB.println (F1_10());
            P_CheckPageB();
            GLB.LPB.println (F1_11());
            P_CheckPageB();
            GLB.LPB.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F1_1());
            P_CheckPageC();
            GLB.LPC.println (F1_2());
            P_CheckPageC();
            GLB.LPC.println (F1_3());
            P_CheckPageC();
            GLB.LPC.println (F1_4());
            P_CheckPageC();
            GLB.LPC.println (F1_5());
            P_CheckPageC();
            GLB.LPC.println (F1_6());
            P_CheckPageC();
            GLB.LPC.println (F1_7());
            P_CheckPageC();
            GLB.LPC.println (F1_8());
            P_CheckPageC();
            GLB.LPC.println (F1_9());
            P_CheckPageC();
            GLB.LPC.println (F1_10());
            P_CheckPageC();
            GLB.LPC.println (F1_11());
            P_CheckPageC();
            GLB.LPC.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F1_1());
            P_CheckPageD();
            GLB.LPD.println (F1_2());
            P_CheckPageD();
            GLB.LPD.println (F1_3());
            P_CheckPageD();
            GLB.LPD.println (F1_4());
            P_CheckPageD();
            GLB.LPD.println (F1_5());
            P_CheckPageD();
            GLB.LPD.println (F1_6());
            P_CheckPageD();
            GLB.LPD.println (F1_7());
            P_CheckPageD();
            GLB.LPD.println (F1_8());
            P_CheckPageD();
            GLB.LPD.println (F1_9());
            P_CheckPageD();
            GLB.LPD.println (F1_10());
            P_CheckPageD();
            GLB.LPD.println (F1_11());
            P_CheckPageD();
            GLB.LPD.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F1_1());
            P_CheckPageE();
            GLB.LPE.println (F1_2());
            P_CheckPageE();
            GLB.LPE.println (F1_3());
            P_CheckPageE();
            GLB.LPE.println (F1_4());
            P_CheckPageE();
            GLB.LPE.println (F1_5());
            P_CheckPageE();
            GLB.LPE.println (F1_6());
            P_CheckPageE();
            GLB.LPE.println (F1_7());
            P_CheckPageE();
            GLB.LPE.println (F1_8());
            P_CheckPageE();
            GLB.LPE.println (F1_9());
            P_CheckPageE();
            GLB.LPE.println (F1_10());
            P_CheckPageE();
            GLB.LPE.println (F1_11());
            P_CheckPageE();
            GLB.LPE.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F1_1());
            P_CheckPageF();
            GLB.LPF.println (F1_2());
            P_CheckPageF();
            GLB.LPF.println (F1_3());
            P_CheckPageF();
            GLB.LPF.println (F1_4());
            P_CheckPageF();
            GLB.LPF.println (F1_5());
            P_CheckPageF();
            GLB.LPF.println (F1_6());
            P_CheckPageF();
            GLB.LPF.println (F1_7());
            P_CheckPageF();
            GLB.LPF.println (F1_8());
            P_CheckPageF();
            GLB.LPF.println (F1_9());
            P_CheckPageF();
            GLB.LPF.println (F1_10());
            P_CheckPageF();
            GLB.LPF.println (F1_11());
            P_CheckPageF();
            GLB.LPF.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F1_1());
            P_CheckPageG();
            GLB.LPG.println (F1_2());
            P_CheckPageG();
            GLB.LPG.println (F1_3());
            P_CheckPageG();
            GLB.LPG.println (F1_4());
            P_CheckPageG();
            GLB.LPG.println (F1_5());
            P_CheckPageG();
            GLB.LPG.println (F1_6());
            P_CheckPageG();
            GLB.LPG.println (F1_7());
            P_CheckPageG();
            GLB.LPG.println (F1_8());
            P_CheckPageG();
            GLB.LPG.println (F1_9());
            P_CheckPageG();
            GLB.LPG.println (F1_10());
            P_CheckPageG();
            GLB.LPG.println (F1_11());
            P_CheckPageG();
            GLB.LPG.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F1_1());
            P_CheckPageH();
            GLB.LPH.println (F1_2());
            P_CheckPageH();
            GLB.LPH.println (F1_3());
            P_CheckPageH();
            GLB.LPH.println (F1_4());
            P_CheckPageH();
            GLB.LPH.println (F1_5());
            P_CheckPageH();
            GLB.LPH.println (F1_6());
            P_CheckPageH();
            GLB.LPH.println (F1_7());
            P_CheckPageH();
            GLB.LPH.println (F1_8());
            P_CheckPageH();
            GLB.LPH.println (F1_9());
            P_CheckPageH();
            GLB.LPH.println (F1_10());
            P_CheckPageH();
            GLB.LPH.println (F1_11());
            P_CheckPageH();
            GLB.LPH.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F1_1());
            P_CheckPageI();
            GLB.LPI.println (F1_2());
            P_CheckPageI();
            GLB.LPI.println (F1_3());
            P_CheckPageI();
            GLB.LPI.println (F1_4());
            P_CheckPageI();
            GLB.LPI.println (F1_5());
            P_CheckPageI();
            GLB.LPI.println (F1_6());
            P_CheckPageI();
            GLB.LPI.println (F1_7());
            P_CheckPageI();
            GLB.LPI.println (F1_8());
            P_CheckPageI();
            GLB.LPI.println (F1_9());
            P_CheckPageI();
            GLB.LPI.println (F1_10());
            P_CheckPageI();
            GLB.LPI.println (F1_11());
            P_CheckPageI();
            GLB.LPI.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F1_1());
            P_CheckPageJ();
            GLB.LPJ.println (F1_2());
            P_CheckPageJ();
            GLB.LPJ.println (F1_3());
            P_CheckPageJ();
            GLB.LPJ.println (F1_4());
            P_CheckPageJ();
            GLB.LPJ.println (F1_5());
            P_CheckPageJ();
            GLB.LPJ.println (F1_6());
            P_CheckPageJ();
            GLB.LPJ.println (F1_7());
            P_CheckPageJ();
            GLB.LPJ.println (F1_8());
            P_CheckPageJ();
            GLB.LPJ.println (F1_9());
            P_CheckPageJ();
            GLB.LPJ.println (F1_10());
            P_CheckPageJ();
            GLB.LPJ.println (F1_11());
            P_CheckPageJ();
            GLB.LPJ.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F1_1());
            P_CheckPageL();
            GLB.LPL.println (F1_2());
            P_CheckPageL();
            GLB.LPL.println (F1_3());
            P_CheckPageL();
            GLB.LPL.println (F1_4());
            P_CheckPageL();
            GLB.LPL.println (F1_5());
            P_CheckPageL();
            GLB.LPL.println (F1_6());
            P_CheckPageL();
            GLB.LPL.println (F1_7());
            P_CheckPageL();
            GLB.LPL.println (F1_8());
            P_CheckPageL();
            GLB.LPL.println (F1_9());
            P_CheckPageL();
            GLB.LPL.println (F1_10());
            P_CheckPageL();
            GLB.LPL.println (F1_11());
            P_CheckPageL();
            GLB.LPL.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F1_1());
            P_CheckPageM();
            GLB.LPM.println (F1_2());
            P_CheckPageM();
            GLB.LPM.println (F1_3());
            P_CheckPageM();
            GLB.LPM.println (F1_4());
            P_CheckPageM();
            GLB.LPM.println (F1_5());
            P_CheckPageM();
            GLB.LPM.println (F1_6());
            P_CheckPageM();
            GLB.LPM.println (F1_7());
            P_CheckPageM();
            GLB.LPM.println (F1_8());
            P_CheckPageM();
            GLB.LPM.println (F1_9());
            P_CheckPageM();
            GLB.LPM.println (F1_10());
            P_CheckPageM();
            GLB.LPM.println (F1_11());
            P_CheckPageM();
            GLB.LPM.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F1_1());
            P_CheckPageN();
            GLB.LPN.println (F1_2());
            P_CheckPageN();
            GLB.LPN.println (F1_3());
            P_CheckPageN();
            GLB.LPN.println (F1_4());
            P_CheckPageN();
            GLB.LPN.println (F1_5());
            P_CheckPageN();
            GLB.LPN.println (F1_6());
            P_CheckPageN();
            GLB.LPN.println (F1_7());
            P_CheckPageN();
            GLB.LPN.println (F1_8());
            P_CheckPageN();
            GLB.LPN.println (F1_9());
            P_CheckPageN();
            GLB.LPN.println (F1_10());
            P_CheckPageN();
            GLB.LPN.println (F1_11());
            P_CheckPageN();
            GLB.LPN.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F1_1());
            P_CheckPageO();
            GLB.LPO.println (F1_2());
            P_CheckPageO();
            GLB.LPO.println (F1_3());
            P_CheckPageO();
            GLB.LPO.println (F1_4());
            P_CheckPageO();
            GLB.LPO.println (F1_5());
            P_CheckPageO();
            GLB.LPO.println (F1_6());
            P_CheckPageO();
            GLB.LPO.println (F1_7());
            P_CheckPageO();
            GLB.LPO.println (F1_8());
            P_CheckPageO();
            GLB.LPO.println (F1_9());
            P_CheckPageO();
            GLB.LPO.println (F1_10());
            P_CheckPageO();
            GLB.LPO.println (F1_11());
            P_CheckPageO();
            GLB.LPO.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F1_1());
            P_CheckPageP();
            GLB.LPP.println (F1_2());
            P_CheckPageP();
            GLB.LPP.println (F1_3());
            P_CheckPageP();
            GLB.LPP.println (F1_4());
            P_CheckPageP();
            GLB.LPP.println (F1_5());
            P_CheckPageP();
            GLB.LPP.println (F1_6());
            P_CheckPageP();
            GLB.LPP.println (F1_7());
            P_CheckPageP();
            GLB.LPP.println (F1_8());
            P_CheckPageP();
            GLB.LPP.println (F1_9());
            P_CheckPageP();
            GLB.LPP.println (F1_10());
            P_CheckPageP();
            GLB.LPP.println (F1_11());
            P_CheckPageP();
            GLB.LPP.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F1_1());
            P_CheckPageQ();
            GLB.LPQ.println (F1_2());
            P_CheckPageQ();
            GLB.LPQ.println (F1_3());
            P_CheckPageQ();
            GLB.LPQ.println (F1_4());
            P_CheckPageQ();
            GLB.LPQ.println (F1_5());
            P_CheckPageQ();
            GLB.LPQ.println (F1_6());
            P_CheckPageQ();
            GLB.LPQ.println (F1_7());
            P_CheckPageQ();
            GLB.LPQ.println (F1_8());
            P_CheckPageQ();
            GLB.LPQ.println (F1_9());
            P_CheckPageQ();
            GLB.LPQ.println (F1_10());
            P_CheckPageQ();
            GLB.LPQ.println (F1_11());
            P_CheckPageQ();
            GLB.LPQ.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F1_1());
            P_CheckPageR();
            GLB.LPR.println (F1_2());
            P_CheckPageR();
            GLB.LPR.println (F1_3());
            P_CheckPageR();
            GLB.LPR.println (F1_4());
            P_CheckPageR();
            GLB.LPR.println (F1_5());
            P_CheckPageR();
            GLB.LPR.println (F1_6());
            P_CheckPageR();
            GLB.LPR.println (F1_7());
            P_CheckPageR();
            GLB.LPR.println (F1_8());
            P_CheckPageR();
            GLB.LPR.println (F1_9());
            P_CheckPageR();
            GLB.LPR.println (F1_10());
            P_CheckPageR();
            GLB.LPR.println (F1_11());
            P_CheckPageR();
            GLB.LPR.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F1_1());
            P_CheckPageS();
            GLB.LPS.println (F1_2());
            P_CheckPageS();
            GLB.LPS.println (F1_3());
            P_CheckPageS();
            GLB.LPS.println (F1_4());
            P_CheckPageS();
            GLB.LPS.println (F1_5());
            P_CheckPageS();
            GLB.LPS.println (F1_6());
            P_CheckPageS();
            GLB.LPS.println (F1_7());
            P_CheckPageS();
            GLB.LPS.println (F1_8());
            P_CheckPageS();
            GLB.LPS.println (F1_9());
            P_CheckPageS();
            GLB.LPS.println (F1_10());
            P_CheckPageS();
            GLB.LPS.println (F1_11());
            P_CheckPageS();
            GLB.LPS.println (F1_12());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F1_1());
            P_CheckPageZ();
            GLB.LPZ.println (F1_2());
            P_CheckPageZ();
            GLB.LPZ.println (F1_3());
            P_CheckPageZ();
            GLB.LPZ.println (F1_4());
            P_CheckPageZ();
            GLB.LPZ.println (F1_5());
            P_CheckPageZ();
            GLB.LPZ.println (F1_6());
            P_CheckPageZ();
            GLB.LPZ.println (F1_7());
            P_CheckPageZ();
            GLB.LPZ.println (F1_8());
            P_CheckPageZ();
            GLB.LPZ.println (F1_9());
            P_CheckPageZ();
            GLB.LPZ.println (F1_10());
            P_CheckPageZ();
            GLB.LPZ.println (F1_11());
            P_CheckPageZ();
            GLB.LPZ.println (F1_12());
        }
    F1_RLDSLITOBS = fix("", 6);
    F1_RLDSTIPREL = fix("", 46);
    F1_RLDTFINALX = fix("", 10);
    F1_RLDTINICIA = fix("", 10);
    F1_RLNMEMPRES = fix("", 30);
    F1_RLNRCGCDIG = 0;
    F1_RLNRCGCFIL = 0;
    F1_RLNRCGCNUM = 0;
    F1_RLNRFOLHAS = 0;
    F1_RLNRIESEMP = fix("", 15);
    F1_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_1");

     }
 }
private void F_2()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F2_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F2_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F2_1());
        }
    F2_RLCDCONTAX = 0;
    F2_RLCDESPECI = fix("", 3);
    F2_RLCDNATOGR = fix("", 6);
    F2_RLCDUFMUNI = fix("", 2);
    F2_RLDSLETRAA = fix("", 1);
    F2_RLDSOBSERV = fix("", 4);
    F2_RLDTDIADOC = 0;
    F2_RLDTSAIDAX = fix("", 10);
    F2_RLNRBASCAL = 0;
    F2_RLNRNOTAFI = 0;
    F2_RLNRNOTFIN = 0;
    F2_RLNRSERIEX = fix("", 3);
    F2_RLVLCONTAB = 0;
    F2_RLVLIMPOST = 0;
    F2_RLVLISENTA = 0;
    F2_RLVLOUTRAS = 0;
    F2_RLVLPERCEN = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_2");

     }
 }
private void F_3()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F3_1());
            P_CheckPage();
            GLB.LP.println(F3_2());
            P_CheckPage();
            GLB.LP.println(F3_3());
            P_CheckPage();
            GLB.LP.println(F3_4());
            P_CheckPage();
            GLB.LP.println(F3_5());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F3_1());
            P_CheckPageB();
            GLB.LPB.println (F3_2());
            P_CheckPageB();
            GLB.LPB.println (F3_3());
            P_CheckPageB();
            GLB.LPB.println (F3_4());
            P_CheckPageB();
            GLB.LPB.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F3_1());
            P_CheckPageC();
            GLB.LPC.println (F3_2());
            P_CheckPageC();
            GLB.LPC.println (F3_3());
            P_CheckPageC();
            GLB.LPC.println (F3_4());
            P_CheckPageC();
            GLB.LPC.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F3_1());
            P_CheckPageD();
            GLB.LPD.println (F3_2());
            P_CheckPageD();
            GLB.LPD.println (F3_3());
            P_CheckPageD();
            GLB.LPD.println (F3_4());
            P_CheckPageD();
            GLB.LPD.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F3_1());
            P_CheckPageE();
            GLB.LPE.println (F3_2());
            P_CheckPageE();
            GLB.LPE.println (F3_3());
            P_CheckPageE();
            GLB.LPE.println (F3_4());
            P_CheckPageE();
            GLB.LPE.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F3_1());
            P_CheckPageF();
            GLB.LPF.println (F3_2());
            P_CheckPageF();
            GLB.LPF.println (F3_3());
            P_CheckPageF();
            GLB.LPF.println (F3_4());
            P_CheckPageF();
            GLB.LPF.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F3_1());
            P_CheckPageG();
            GLB.LPG.println (F3_2());
            P_CheckPageG();
            GLB.LPG.println (F3_3());
            P_CheckPageG();
            GLB.LPG.println (F3_4());
            P_CheckPageG();
            GLB.LPG.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F3_1());
            P_CheckPageH();
            GLB.LPH.println (F3_2());
            P_CheckPageH();
            GLB.LPH.println (F3_3());
            P_CheckPageH();
            GLB.LPH.println (F3_4());
            P_CheckPageH();
            GLB.LPH.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F3_1());
            P_CheckPageI();
            GLB.LPI.println (F3_2());
            P_CheckPageI();
            GLB.LPI.println (F3_3());
            P_CheckPageI();
            GLB.LPI.println (F3_4());
            P_CheckPageI();
            GLB.LPI.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F3_1());
            P_CheckPageJ();
            GLB.LPJ.println (F3_2());
            P_CheckPageJ();
            GLB.LPJ.println (F3_3());
            P_CheckPageJ();
            GLB.LPJ.println (F3_4());
            P_CheckPageJ();
            GLB.LPJ.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F3_1());
            P_CheckPageL();
            GLB.LPL.println (F3_2());
            P_CheckPageL();
            GLB.LPL.println (F3_3());
            P_CheckPageL();
            GLB.LPL.println (F3_4());
            P_CheckPageL();
            GLB.LPL.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F3_1());
            P_CheckPageM();
            GLB.LPM.println (F3_2());
            P_CheckPageM();
            GLB.LPM.println (F3_3());
            P_CheckPageM();
            GLB.LPM.println (F3_4());
            P_CheckPageM();
            GLB.LPM.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F3_1());
            P_CheckPageN();
            GLB.LPN.println (F3_2());
            P_CheckPageN();
            GLB.LPN.println (F3_3());
            P_CheckPageN();
            GLB.LPN.println (F3_4());
            P_CheckPageN();
            GLB.LPN.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F3_1());
            P_CheckPageO();
            GLB.LPO.println (F3_2());
            P_CheckPageO();
            GLB.LPO.println (F3_3());
            P_CheckPageO();
            GLB.LPO.println (F3_4());
            P_CheckPageO();
            GLB.LPO.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F3_1());
            P_CheckPageP();
            GLB.LPP.println (F3_2());
            P_CheckPageP();
            GLB.LPP.println (F3_3());
            P_CheckPageP();
            GLB.LPP.println (F3_4());
            P_CheckPageP();
            GLB.LPP.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F3_1());
            P_CheckPageQ();
            GLB.LPQ.println (F3_2());
            P_CheckPageQ();
            GLB.LPQ.println (F3_3());
            P_CheckPageQ();
            GLB.LPQ.println (F3_4());
            P_CheckPageQ();
            GLB.LPQ.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F3_1());
            P_CheckPageR();
            GLB.LPR.println (F3_2());
            P_CheckPageR();
            GLB.LPR.println (F3_3());
            P_CheckPageR();
            GLB.LPR.println (F3_4());
            P_CheckPageR();
            GLB.LPR.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F3_1());
            P_CheckPageS();
            GLB.LPS.println (F3_2());
            P_CheckPageS();
            GLB.LPS.println (F3_3());
            P_CheckPageS();
            GLB.LPS.println (F3_4());
            P_CheckPageS();
            GLB.LPS.println (F3_5());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F3_1());
            P_CheckPageZ();
            GLB.LPZ.println (F3_2());
            P_CheckPageZ();
            GLB.LPZ.println (F3_3());
            P_CheckPageZ();
            GLB.LPZ.println (F3_4());
            P_CheckPageZ();
            GLB.LPZ.println (F3_5());
        }
    F3_RLVLBASICM = 0;
    F3_RLVLBASIPI = 0;
    F3_RLVLIMPICM = 0;
    F3_RLVLIMPIPI = 0;
    F3_RLVLISEICM = 0;
    F3_RLVLISEIPI = 0;
    F3_RLVLOUTICM = 0;
    F3_RLVLOUTIPI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_3");

     }
 }
private void F_4()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F4_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F4_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F4_1());
        }
    F4_RLCDESPECI = fix("", 3);
    F4_RLDSCANCEL = fix("", 30);
    F4_RLDSLETRAA = fix("", 1);
    F4_RLDTDIADOC = 0;
    F4_RLNRNOTAFI = 0;
    F4_RLNRNOTFIN = 0;
    F4_RLNRSERIEX = fix("", 3);
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_4");

     }
 }
private void F_6()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F6_1());
            P_CheckPage();
            GLB.LP.println(F6_2());
            P_CheckPage();
            GLB.LP.println(F6_3());
            P_CheckPage();
            GLB.LP.println(F6_4());
            P_CheckPage();
            GLB.LP.println(F6_5());
            P_CheckPage();
            GLB.LP.println(F6_6());
            P_CheckPage();
            GLB.LP.println(F6_7());
            P_CheckPage();
            GLB.LP.println(F6_8());
            P_CheckPage();
            GLB.LP.println(F6_9());
            P_CheckPage();
            GLB.LP.println(F6_10());
            P_CheckPage();
            GLB.LP.println(F6_11());
            P_CheckPage();
            GLB.LP.println(F6_12());
            P_CheckPage();
            GLB.LP.println(F6_13());
            P_CheckPage();
            GLB.LP.println(F6_14());
            P_CheckPage();
            GLB.LP.println(F6_15());
            P_CheckPage();
            GLB.LP.println(F6_16());
            P_CheckPage();
            GLB.LP.println(F6_17());
            P_CheckPage();
            GLB.LP.println(F6_18());
            P_CheckPage();
            GLB.LP.println(F6_19());
            P_CheckPage();
            GLB.LP.println(F6_20());
            P_CheckPage();
            GLB.LP.println(F6_21());
            P_CheckPage();
            GLB.LP.println(F6_22());
            P_CheckPage();
            GLB.LP.println(F6_23());
            P_CheckPage();
            GLB.LP.println(F6_24());
            P_CheckPage();
            GLB.LP.println(F6_25());
            P_CheckPage();
            GLB.LP.println(F6_26());
            P_CheckPage();
            GLB.LP.println(F6_27());
            P_CheckPage();
            GLB.LP.println(F6_28());
            P_CheckPage();
            GLB.LP.println(F6_29());
            P_CheckPage();
            GLB.LP.println(F6_30());
            P_CheckPage();
            GLB.LP.println(F6_31());
            P_CheckPage();
            GLB.LP.println(F6_32());
            P_CheckPage();
            GLB.LP.println(F6_33());
            P_CheckPage();
            GLB.LP.println(F6_34());
            P_CheckPage();
            GLB.LP.println(F6_35());
            P_CheckPage();
            GLB.LP.println(F6_36());
            P_CheckPage();
            GLB.LP.println(F6_37());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F6_1());
            P_CheckPageB();
            GLB.LPB.println (F6_2());
            P_CheckPageB();
            GLB.LPB.println (F6_3());
            P_CheckPageB();
            GLB.LPB.println (F6_4());
            P_CheckPageB();
            GLB.LPB.println (F6_5());
            P_CheckPageB();
            GLB.LPB.println (F6_6());
            P_CheckPageB();
            GLB.LPB.println (F6_7());
            P_CheckPageB();
            GLB.LPB.println (F6_8());
            P_CheckPageB();
            GLB.LPB.println (F6_9());
            P_CheckPageB();
            GLB.LPB.println (F6_10());
            P_CheckPageB();
            GLB.LPB.println (F6_11());
            P_CheckPageB();
            GLB.LPB.println (F6_12());
            P_CheckPageB();
            GLB.LPB.println (F6_13());
            P_CheckPageB();
            GLB.LPB.println (F6_14());
            P_CheckPageB();
            GLB.LPB.println (F6_15());
            P_CheckPageB();
            GLB.LPB.println (F6_16());
            P_CheckPageB();
            GLB.LPB.println (F6_17());
            P_CheckPageB();
            GLB.LPB.println (F6_18());
            P_CheckPageB();
            GLB.LPB.println (F6_19());
            P_CheckPageB();
            GLB.LPB.println (F6_20());
            P_CheckPageB();
            GLB.LPB.println (F6_21());
            P_CheckPageB();
            GLB.LPB.println (F6_22());
            P_CheckPageB();
            GLB.LPB.println (F6_23());
            P_CheckPageB();
            GLB.LPB.println (F6_24());
            P_CheckPageB();
            GLB.LPB.println (F6_25());
            P_CheckPageB();
            GLB.LPB.println (F6_26());
            P_CheckPageB();
            GLB.LPB.println (F6_27());
            P_CheckPageB();
            GLB.LPB.println (F6_28());
            P_CheckPageB();
            GLB.LPB.println (F6_29());
            P_CheckPageB();
            GLB.LPB.println (F6_30());
            P_CheckPageB();
            GLB.LPB.println (F6_31());
            P_CheckPageB();
            GLB.LPB.println (F6_32());
            P_CheckPageB();
            GLB.LPB.println (F6_33());
            P_CheckPageB();
            GLB.LPB.println (F6_34());
            P_CheckPageB();
            GLB.LPB.println (F6_35());
            P_CheckPageB();
            GLB.LPB.println (F6_36());
            P_CheckPageB();
            GLB.LPB.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F6_1());
            P_CheckPageC();
            GLB.LPC.println (F6_2());
            P_CheckPageC();
            GLB.LPC.println (F6_3());
            P_CheckPageC();
            GLB.LPC.println (F6_4());
            P_CheckPageC();
            GLB.LPC.println (F6_5());
            P_CheckPageC();
            GLB.LPC.println (F6_6());
            P_CheckPageC();
            GLB.LPC.println (F6_7());
            P_CheckPageC();
            GLB.LPC.println (F6_8());
            P_CheckPageC();
            GLB.LPC.println (F6_9());
            P_CheckPageC();
            GLB.LPC.println (F6_10());
            P_CheckPageC();
            GLB.LPC.println (F6_11());
            P_CheckPageC();
            GLB.LPC.println (F6_12());
            P_CheckPageC();
            GLB.LPC.println (F6_13());
            P_CheckPageC();
            GLB.LPC.println (F6_14());
            P_CheckPageC();
            GLB.LPC.println (F6_15());
            P_CheckPageC();
            GLB.LPC.println (F6_16());
            P_CheckPageC();
            GLB.LPC.println (F6_17());
            P_CheckPageC();
            GLB.LPC.println (F6_18());
            P_CheckPageC();
            GLB.LPC.println (F6_19());
            P_CheckPageC();
            GLB.LPC.println (F6_20());
            P_CheckPageC();
            GLB.LPC.println (F6_21());
            P_CheckPageC();
            GLB.LPC.println (F6_22());
            P_CheckPageC();
            GLB.LPC.println (F6_23());
            P_CheckPageC();
            GLB.LPC.println (F6_24());
            P_CheckPageC();
            GLB.LPC.println (F6_25());
            P_CheckPageC();
            GLB.LPC.println (F6_26());
            P_CheckPageC();
            GLB.LPC.println (F6_27());
            P_CheckPageC();
            GLB.LPC.println (F6_28());
            P_CheckPageC();
            GLB.LPC.println (F6_29());
            P_CheckPageC();
            GLB.LPC.println (F6_30());
            P_CheckPageC();
            GLB.LPC.println (F6_31());
            P_CheckPageC();
            GLB.LPC.println (F6_32());
            P_CheckPageC();
            GLB.LPC.println (F6_33());
            P_CheckPageC();
            GLB.LPC.println (F6_34());
            P_CheckPageC();
            GLB.LPC.println (F6_35());
            P_CheckPageC();
            GLB.LPC.println (F6_36());
            P_CheckPageC();
            GLB.LPC.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F6_1());
            P_CheckPageD();
            GLB.LPD.println (F6_2());
            P_CheckPageD();
            GLB.LPD.println (F6_3());
            P_CheckPageD();
            GLB.LPD.println (F6_4());
            P_CheckPageD();
            GLB.LPD.println (F6_5());
            P_CheckPageD();
            GLB.LPD.println (F6_6());
            P_CheckPageD();
            GLB.LPD.println (F6_7());
            P_CheckPageD();
            GLB.LPD.println (F6_8());
            P_CheckPageD();
            GLB.LPD.println (F6_9());
            P_CheckPageD();
            GLB.LPD.println (F6_10());
            P_CheckPageD();
            GLB.LPD.println (F6_11());
            P_CheckPageD();
            GLB.LPD.println (F6_12());
            P_CheckPageD();
            GLB.LPD.println (F6_13());
            P_CheckPageD();
            GLB.LPD.println (F6_14());
            P_CheckPageD();
            GLB.LPD.println (F6_15());
            P_CheckPageD();
            GLB.LPD.println (F6_16());
            P_CheckPageD();
            GLB.LPD.println (F6_17());
            P_CheckPageD();
            GLB.LPD.println (F6_18());
            P_CheckPageD();
            GLB.LPD.println (F6_19());
            P_CheckPageD();
            GLB.LPD.println (F6_20());
            P_CheckPageD();
            GLB.LPD.println (F6_21());
            P_CheckPageD();
            GLB.LPD.println (F6_22());
            P_CheckPageD();
            GLB.LPD.println (F6_23());
            P_CheckPageD();
            GLB.LPD.println (F6_24());
            P_CheckPageD();
            GLB.LPD.println (F6_25());
            P_CheckPageD();
            GLB.LPD.println (F6_26());
            P_CheckPageD();
            GLB.LPD.println (F6_27());
            P_CheckPageD();
            GLB.LPD.println (F6_28());
            P_CheckPageD();
            GLB.LPD.println (F6_29());
            P_CheckPageD();
            GLB.LPD.println (F6_30());
            P_CheckPageD();
            GLB.LPD.println (F6_31());
            P_CheckPageD();
            GLB.LPD.println (F6_32());
            P_CheckPageD();
            GLB.LPD.println (F6_33());
            P_CheckPageD();
            GLB.LPD.println (F6_34());
            P_CheckPageD();
            GLB.LPD.println (F6_35());
            P_CheckPageD();
            GLB.LPD.println (F6_36());
            P_CheckPageD();
            GLB.LPD.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F6_1());
            P_CheckPageE();
            GLB.LPE.println (F6_2());
            P_CheckPageE();
            GLB.LPE.println (F6_3());
            P_CheckPageE();
            GLB.LPE.println (F6_4());
            P_CheckPageE();
            GLB.LPE.println (F6_5());
            P_CheckPageE();
            GLB.LPE.println (F6_6());
            P_CheckPageE();
            GLB.LPE.println (F6_7());
            P_CheckPageE();
            GLB.LPE.println (F6_8());
            P_CheckPageE();
            GLB.LPE.println (F6_9());
            P_CheckPageE();
            GLB.LPE.println (F6_10());
            P_CheckPageE();
            GLB.LPE.println (F6_11());
            P_CheckPageE();
            GLB.LPE.println (F6_12());
            P_CheckPageE();
            GLB.LPE.println (F6_13());
            P_CheckPageE();
            GLB.LPE.println (F6_14());
            P_CheckPageE();
            GLB.LPE.println (F6_15());
            P_CheckPageE();
            GLB.LPE.println (F6_16());
            P_CheckPageE();
            GLB.LPE.println (F6_17());
            P_CheckPageE();
            GLB.LPE.println (F6_18());
            P_CheckPageE();
            GLB.LPE.println (F6_19());
            P_CheckPageE();
            GLB.LPE.println (F6_20());
            P_CheckPageE();
            GLB.LPE.println (F6_21());
            P_CheckPageE();
            GLB.LPE.println (F6_22());
            P_CheckPageE();
            GLB.LPE.println (F6_23());
            P_CheckPageE();
            GLB.LPE.println (F6_24());
            P_CheckPageE();
            GLB.LPE.println (F6_25());
            P_CheckPageE();
            GLB.LPE.println (F6_26());
            P_CheckPageE();
            GLB.LPE.println (F6_27());
            P_CheckPageE();
            GLB.LPE.println (F6_28());
            P_CheckPageE();
            GLB.LPE.println (F6_29());
            P_CheckPageE();
            GLB.LPE.println (F6_30());
            P_CheckPageE();
            GLB.LPE.println (F6_31());
            P_CheckPageE();
            GLB.LPE.println (F6_32());
            P_CheckPageE();
            GLB.LPE.println (F6_33());
            P_CheckPageE();
            GLB.LPE.println (F6_34());
            P_CheckPageE();
            GLB.LPE.println (F6_35());
            P_CheckPageE();
            GLB.LPE.println (F6_36());
            P_CheckPageE();
            GLB.LPE.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F6_1());
            P_CheckPageF();
            GLB.LPF.println (F6_2());
            P_CheckPageF();
            GLB.LPF.println (F6_3());
            P_CheckPageF();
            GLB.LPF.println (F6_4());
            P_CheckPageF();
            GLB.LPF.println (F6_5());
            P_CheckPageF();
            GLB.LPF.println (F6_6());
            P_CheckPageF();
            GLB.LPF.println (F6_7());
            P_CheckPageF();
            GLB.LPF.println (F6_8());
            P_CheckPageF();
            GLB.LPF.println (F6_9());
            P_CheckPageF();
            GLB.LPF.println (F6_10());
            P_CheckPageF();
            GLB.LPF.println (F6_11());
            P_CheckPageF();
            GLB.LPF.println (F6_12());
            P_CheckPageF();
            GLB.LPF.println (F6_13());
            P_CheckPageF();
            GLB.LPF.println (F6_14());
            P_CheckPageF();
            GLB.LPF.println (F6_15());
            P_CheckPageF();
            GLB.LPF.println (F6_16());
            P_CheckPageF();
            GLB.LPF.println (F6_17());
            P_CheckPageF();
            GLB.LPF.println (F6_18());
            P_CheckPageF();
            GLB.LPF.println (F6_19());
            P_CheckPageF();
            GLB.LPF.println (F6_20());
            P_CheckPageF();
            GLB.LPF.println (F6_21());
            P_CheckPageF();
            GLB.LPF.println (F6_22());
            P_CheckPageF();
            GLB.LPF.println (F6_23());
            P_CheckPageF();
            GLB.LPF.println (F6_24());
            P_CheckPageF();
            GLB.LPF.println (F6_25());
            P_CheckPageF();
            GLB.LPF.println (F6_26());
            P_CheckPageF();
            GLB.LPF.println (F6_27());
            P_CheckPageF();
            GLB.LPF.println (F6_28());
            P_CheckPageF();
            GLB.LPF.println (F6_29());
            P_CheckPageF();
            GLB.LPF.println (F6_30());
            P_CheckPageF();
            GLB.LPF.println (F6_31());
            P_CheckPageF();
            GLB.LPF.println (F6_32());
            P_CheckPageF();
            GLB.LPF.println (F6_33());
            P_CheckPageF();
            GLB.LPF.println (F6_34());
            P_CheckPageF();
            GLB.LPF.println (F6_35());
            P_CheckPageF();
            GLB.LPF.println (F6_36());
            P_CheckPageF();
            GLB.LPF.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F6_1());
            P_CheckPageG();
            GLB.LPG.println (F6_2());
            P_CheckPageG();
            GLB.LPG.println (F6_3());
            P_CheckPageG();
            GLB.LPG.println (F6_4());
            P_CheckPageG();
            GLB.LPG.println (F6_5());
            P_CheckPageG();
            GLB.LPG.println (F6_6());
            P_CheckPageG();
            GLB.LPG.println (F6_7());
            P_CheckPageG();
            GLB.LPG.println (F6_8());
            P_CheckPageG();
            GLB.LPG.println (F6_9());
            P_CheckPageG();
            GLB.LPG.println (F6_10());
            P_CheckPageG();
            GLB.LPG.println (F6_11());
            P_CheckPageG();
            GLB.LPG.println (F6_12());
            P_CheckPageG();
            GLB.LPG.println (F6_13());
            P_CheckPageG();
            GLB.LPG.println (F6_14());
            P_CheckPageG();
            GLB.LPG.println (F6_15());
            P_CheckPageG();
            GLB.LPG.println (F6_16());
            P_CheckPageG();
            GLB.LPG.println (F6_17());
            P_CheckPageG();
            GLB.LPG.println (F6_18());
            P_CheckPageG();
            GLB.LPG.println (F6_19());
            P_CheckPageG();
            GLB.LPG.println (F6_20());
            P_CheckPageG();
            GLB.LPG.println (F6_21());
            P_CheckPageG();
            GLB.LPG.println (F6_22());
            P_CheckPageG();
            GLB.LPG.println (F6_23());
            P_CheckPageG();
            GLB.LPG.println (F6_24());
            P_CheckPageG();
            GLB.LPG.println (F6_25());
            P_CheckPageG();
            GLB.LPG.println (F6_26());
            P_CheckPageG();
            GLB.LPG.println (F6_27());
            P_CheckPageG();
            GLB.LPG.println (F6_28());
            P_CheckPageG();
            GLB.LPG.println (F6_29());
            P_CheckPageG();
            GLB.LPG.println (F6_30());
            P_CheckPageG();
            GLB.LPG.println (F6_31());
            P_CheckPageG();
            GLB.LPG.println (F6_32());
            P_CheckPageG();
            GLB.LPG.println (F6_33());
            P_CheckPageG();
            GLB.LPG.println (F6_34());
            P_CheckPageG();
            GLB.LPG.println (F6_35());
            P_CheckPageG();
            GLB.LPG.println (F6_36());
            P_CheckPageG();
            GLB.LPG.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F6_1());
            P_CheckPageH();
            GLB.LPH.println (F6_2());
            P_CheckPageH();
            GLB.LPH.println (F6_3());
            P_CheckPageH();
            GLB.LPH.println (F6_4());
            P_CheckPageH();
            GLB.LPH.println (F6_5());
            P_CheckPageH();
            GLB.LPH.println (F6_6());
            P_CheckPageH();
            GLB.LPH.println (F6_7());
            P_CheckPageH();
            GLB.LPH.println (F6_8());
            P_CheckPageH();
            GLB.LPH.println (F6_9());
            P_CheckPageH();
            GLB.LPH.println (F6_10());
            P_CheckPageH();
            GLB.LPH.println (F6_11());
            P_CheckPageH();
            GLB.LPH.println (F6_12());
            P_CheckPageH();
            GLB.LPH.println (F6_13());
            P_CheckPageH();
            GLB.LPH.println (F6_14());
            P_CheckPageH();
            GLB.LPH.println (F6_15());
            P_CheckPageH();
            GLB.LPH.println (F6_16());
            P_CheckPageH();
            GLB.LPH.println (F6_17());
            P_CheckPageH();
            GLB.LPH.println (F6_18());
            P_CheckPageH();
            GLB.LPH.println (F6_19());
            P_CheckPageH();
            GLB.LPH.println (F6_20());
            P_CheckPageH();
            GLB.LPH.println (F6_21());
            P_CheckPageH();
            GLB.LPH.println (F6_22());
            P_CheckPageH();
            GLB.LPH.println (F6_23());
            P_CheckPageH();
            GLB.LPH.println (F6_24());
            P_CheckPageH();
            GLB.LPH.println (F6_25());
            P_CheckPageH();
            GLB.LPH.println (F6_26());
            P_CheckPageH();
            GLB.LPH.println (F6_27());
            P_CheckPageH();
            GLB.LPH.println (F6_28());
            P_CheckPageH();
            GLB.LPH.println (F6_29());
            P_CheckPageH();
            GLB.LPH.println (F6_30());
            P_CheckPageH();
            GLB.LPH.println (F6_31());
            P_CheckPageH();
            GLB.LPH.println (F6_32());
            P_CheckPageH();
            GLB.LPH.println (F6_33());
            P_CheckPageH();
            GLB.LPH.println (F6_34());
            P_CheckPageH();
            GLB.LPH.println (F6_35());
            P_CheckPageH();
            GLB.LPH.println (F6_36());
            P_CheckPageH();
            GLB.LPH.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F6_1());
            P_CheckPageI();
            GLB.LPI.println (F6_2());
            P_CheckPageI();
            GLB.LPI.println (F6_3());
            P_CheckPageI();
            GLB.LPI.println (F6_4());
            P_CheckPageI();
            GLB.LPI.println (F6_5());
            P_CheckPageI();
            GLB.LPI.println (F6_6());
            P_CheckPageI();
            GLB.LPI.println (F6_7());
            P_CheckPageI();
            GLB.LPI.println (F6_8());
            P_CheckPageI();
            GLB.LPI.println (F6_9());
            P_CheckPageI();
            GLB.LPI.println (F6_10());
            P_CheckPageI();
            GLB.LPI.println (F6_11());
            P_CheckPageI();
            GLB.LPI.println (F6_12());
            P_CheckPageI();
            GLB.LPI.println (F6_13());
            P_CheckPageI();
            GLB.LPI.println (F6_14());
            P_CheckPageI();
            GLB.LPI.println (F6_15());
            P_CheckPageI();
            GLB.LPI.println (F6_16());
            P_CheckPageI();
            GLB.LPI.println (F6_17());
            P_CheckPageI();
            GLB.LPI.println (F6_18());
            P_CheckPageI();
            GLB.LPI.println (F6_19());
            P_CheckPageI();
            GLB.LPI.println (F6_20());
            P_CheckPageI();
            GLB.LPI.println (F6_21());
            P_CheckPageI();
            GLB.LPI.println (F6_22());
            P_CheckPageI();
            GLB.LPI.println (F6_23());
            P_CheckPageI();
            GLB.LPI.println (F6_24());
            P_CheckPageI();
            GLB.LPI.println (F6_25());
            P_CheckPageI();
            GLB.LPI.println (F6_26());
            P_CheckPageI();
            GLB.LPI.println (F6_27());
            P_CheckPageI();
            GLB.LPI.println (F6_28());
            P_CheckPageI();
            GLB.LPI.println (F6_29());
            P_CheckPageI();
            GLB.LPI.println (F6_30());
            P_CheckPageI();
            GLB.LPI.println (F6_31());
            P_CheckPageI();
            GLB.LPI.println (F6_32());
            P_CheckPageI();
            GLB.LPI.println (F6_33());
            P_CheckPageI();
            GLB.LPI.println (F6_34());
            P_CheckPageI();
            GLB.LPI.println (F6_35());
            P_CheckPageI();
            GLB.LPI.println (F6_36());
            P_CheckPageI();
            GLB.LPI.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F6_1());
            P_CheckPageJ();
            GLB.LPJ.println (F6_2());
            P_CheckPageJ();
            GLB.LPJ.println (F6_3());
            P_CheckPageJ();
            GLB.LPJ.println (F6_4());
            P_CheckPageJ();
            GLB.LPJ.println (F6_5());
            P_CheckPageJ();
            GLB.LPJ.println (F6_6());
            P_CheckPageJ();
            GLB.LPJ.println (F6_7());
            P_CheckPageJ();
            GLB.LPJ.println (F6_8());
            P_CheckPageJ();
            GLB.LPJ.println (F6_9());
            P_CheckPageJ();
            GLB.LPJ.println (F6_10());
            P_CheckPageJ();
            GLB.LPJ.println (F6_11());
            P_CheckPageJ();
            GLB.LPJ.println (F6_12());
            P_CheckPageJ();
            GLB.LPJ.println (F6_13());
            P_CheckPageJ();
            GLB.LPJ.println (F6_14());
            P_CheckPageJ();
            GLB.LPJ.println (F6_15());
            P_CheckPageJ();
            GLB.LPJ.println (F6_16());
            P_CheckPageJ();
            GLB.LPJ.println (F6_17());
            P_CheckPageJ();
            GLB.LPJ.println (F6_18());
            P_CheckPageJ();
            GLB.LPJ.println (F6_19());
            P_CheckPageJ();
            GLB.LPJ.println (F6_20());
            P_CheckPageJ();
            GLB.LPJ.println (F6_21());
            P_CheckPageJ();
            GLB.LPJ.println (F6_22());
            P_CheckPageJ();
            GLB.LPJ.println (F6_23());
            P_CheckPageJ();
            GLB.LPJ.println (F6_24());
            P_CheckPageJ();
            GLB.LPJ.println (F6_25());
            P_CheckPageJ();
            GLB.LPJ.println (F6_26());
            P_CheckPageJ();
            GLB.LPJ.println (F6_27());
            P_CheckPageJ();
            GLB.LPJ.println (F6_28());
            P_CheckPageJ();
            GLB.LPJ.println (F6_29());
            P_CheckPageJ();
            GLB.LPJ.println (F6_30());
            P_CheckPageJ();
            GLB.LPJ.println (F6_31());
            P_CheckPageJ();
            GLB.LPJ.println (F6_32());
            P_CheckPageJ();
            GLB.LPJ.println (F6_33());
            P_CheckPageJ();
            GLB.LPJ.println (F6_34());
            P_CheckPageJ();
            GLB.LPJ.println (F6_35());
            P_CheckPageJ();
            GLB.LPJ.println (F6_36());
            P_CheckPageJ();
            GLB.LPJ.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F6_1());
            P_CheckPageL();
            GLB.LPL.println (F6_2());
            P_CheckPageL();
            GLB.LPL.println (F6_3());
            P_CheckPageL();
            GLB.LPL.println (F6_4());
            P_CheckPageL();
            GLB.LPL.println (F6_5());
            P_CheckPageL();
            GLB.LPL.println (F6_6());
            P_CheckPageL();
            GLB.LPL.println (F6_7());
            P_CheckPageL();
            GLB.LPL.println (F6_8());
            P_CheckPageL();
            GLB.LPL.println (F6_9());
            P_CheckPageL();
            GLB.LPL.println (F6_10());
            P_CheckPageL();
            GLB.LPL.println (F6_11());
            P_CheckPageL();
            GLB.LPL.println (F6_12());
            P_CheckPageL();
            GLB.LPL.println (F6_13());
            P_CheckPageL();
            GLB.LPL.println (F6_14());
            P_CheckPageL();
            GLB.LPL.println (F6_15());
            P_CheckPageL();
            GLB.LPL.println (F6_16());
            P_CheckPageL();
            GLB.LPL.println (F6_17());
            P_CheckPageL();
            GLB.LPL.println (F6_18());
            P_CheckPageL();
            GLB.LPL.println (F6_19());
            P_CheckPageL();
            GLB.LPL.println (F6_20());
            P_CheckPageL();
            GLB.LPL.println (F6_21());
            P_CheckPageL();
            GLB.LPL.println (F6_22());
            P_CheckPageL();
            GLB.LPL.println (F6_23());
            P_CheckPageL();
            GLB.LPL.println (F6_24());
            P_CheckPageL();
            GLB.LPL.println (F6_25());
            P_CheckPageL();
            GLB.LPL.println (F6_26());
            P_CheckPageL();
            GLB.LPL.println (F6_27());
            P_CheckPageL();
            GLB.LPL.println (F6_28());
            P_CheckPageL();
            GLB.LPL.println (F6_29());
            P_CheckPageL();
            GLB.LPL.println (F6_30());
            P_CheckPageL();
            GLB.LPL.println (F6_31());
            P_CheckPageL();
            GLB.LPL.println (F6_32());
            P_CheckPageL();
            GLB.LPL.println (F6_33());
            P_CheckPageL();
            GLB.LPL.println (F6_34());
            P_CheckPageL();
            GLB.LPL.println (F6_35());
            P_CheckPageL();
            GLB.LPL.println (F6_36());
            P_CheckPageL();
            GLB.LPL.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F6_1());
            P_CheckPageM();
            GLB.LPM.println (F6_2());
            P_CheckPageM();
            GLB.LPM.println (F6_3());
            P_CheckPageM();
            GLB.LPM.println (F6_4());
            P_CheckPageM();
            GLB.LPM.println (F6_5());
            P_CheckPageM();
            GLB.LPM.println (F6_6());
            P_CheckPageM();
            GLB.LPM.println (F6_7());
            P_CheckPageM();
            GLB.LPM.println (F6_8());
            P_CheckPageM();
            GLB.LPM.println (F6_9());
            P_CheckPageM();
            GLB.LPM.println (F6_10());
            P_CheckPageM();
            GLB.LPM.println (F6_11());
            P_CheckPageM();
            GLB.LPM.println (F6_12());
            P_CheckPageM();
            GLB.LPM.println (F6_13());
            P_CheckPageM();
            GLB.LPM.println (F6_14());
            P_CheckPageM();
            GLB.LPM.println (F6_15());
            P_CheckPageM();
            GLB.LPM.println (F6_16());
            P_CheckPageM();
            GLB.LPM.println (F6_17());
            P_CheckPageM();
            GLB.LPM.println (F6_18());
            P_CheckPageM();
            GLB.LPM.println (F6_19());
            P_CheckPageM();
            GLB.LPM.println (F6_20());
            P_CheckPageM();
            GLB.LPM.println (F6_21());
            P_CheckPageM();
            GLB.LPM.println (F6_22());
            P_CheckPageM();
            GLB.LPM.println (F6_23());
            P_CheckPageM();
            GLB.LPM.println (F6_24());
            P_CheckPageM();
            GLB.LPM.println (F6_25());
            P_CheckPageM();
            GLB.LPM.println (F6_26());
            P_CheckPageM();
            GLB.LPM.println (F6_27());
            P_CheckPageM();
            GLB.LPM.println (F6_28());
            P_CheckPageM();
            GLB.LPM.println (F6_29());
            P_CheckPageM();
            GLB.LPM.println (F6_30());
            P_CheckPageM();
            GLB.LPM.println (F6_31());
            P_CheckPageM();
            GLB.LPM.println (F6_32());
            P_CheckPageM();
            GLB.LPM.println (F6_33());
            P_CheckPageM();
            GLB.LPM.println (F6_34());
            P_CheckPageM();
            GLB.LPM.println (F6_35());
            P_CheckPageM();
            GLB.LPM.println (F6_36());
            P_CheckPageM();
            GLB.LPM.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F6_1());
            P_CheckPageN();
            GLB.LPN.println (F6_2());
            P_CheckPageN();
            GLB.LPN.println (F6_3());
            P_CheckPageN();
            GLB.LPN.println (F6_4());
            P_CheckPageN();
            GLB.LPN.println (F6_5());
            P_CheckPageN();
            GLB.LPN.println (F6_6());
            P_CheckPageN();
            GLB.LPN.println (F6_7());
            P_CheckPageN();
            GLB.LPN.println (F6_8());
            P_CheckPageN();
            GLB.LPN.println (F6_9());
            P_CheckPageN();
            GLB.LPN.println (F6_10());
            P_CheckPageN();
            GLB.LPN.println (F6_11());
            P_CheckPageN();
            GLB.LPN.println (F6_12());
            P_CheckPageN();
            GLB.LPN.println (F6_13());
            P_CheckPageN();
            GLB.LPN.println (F6_14());
            P_CheckPageN();
            GLB.LPN.println (F6_15());
            P_CheckPageN();
            GLB.LPN.println (F6_16());
            P_CheckPageN();
            GLB.LPN.println (F6_17());
            P_CheckPageN();
            GLB.LPN.println (F6_18());
            P_CheckPageN();
            GLB.LPN.println (F6_19());
            P_CheckPageN();
            GLB.LPN.println (F6_20());
            P_CheckPageN();
            GLB.LPN.println (F6_21());
            P_CheckPageN();
            GLB.LPN.println (F6_22());
            P_CheckPageN();
            GLB.LPN.println (F6_23());
            P_CheckPageN();
            GLB.LPN.println (F6_24());
            P_CheckPageN();
            GLB.LPN.println (F6_25());
            P_CheckPageN();
            GLB.LPN.println (F6_26());
            P_CheckPageN();
            GLB.LPN.println (F6_27());
            P_CheckPageN();
            GLB.LPN.println (F6_28());
            P_CheckPageN();
            GLB.LPN.println (F6_29());
            P_CheckPageN();
            GLB.LPN.println (F6_30());
            P_CheckPageN();
            GLB.LPN.println (F6_31());
            P_CheckPageN();
            GLB.LPN.println (F6_32());
            P_CheckPageN();
            GLB.LPN.println (F6_33());
            P_CheckPageN();
            GLB.LPN.println (F6_34());
            P_CheckPageN();
            GLB.LPN.println (F6_35());
            P_CheckPageN();
            GLB.LPN.println (F6_36());
            P_CheckPageN();
            GLB.LPN.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F6_1());
            P_CheckPageO();
            GLB.LPO.println (F6_2());
            P_CheckPageO();
            GLB.LPO.println (F6_3());
            P_CheckPageO();
            GLB.LPO.println (F6_4());
            P_CheckPageO();
            GLB.LPO.println (F6_5());
            P_CheckPageO();
            GLB.LPO.println (F6_6());
            P_CheckPageO();
            GLB.LPO.println (F6_7());
            P_CheckPageO();
            GLB.LPO.println (F6_8());
            P_CheckPageO();
            GLB.LPO.println (F6_9());
            P_CheckPageO();
            GLB.LPO.println (F6_10());
            P_CheckPageO();
            GLB.LPO.println (F6_11());
            P_CheckPageO();
            GLB.LPO.println (F6_12());
            P_CheckPageO();
            GLB.LPO.println (F6_13());
            P_CheckPageO();
            GLB.LPO.println (F6_14());
            P_CheckPageO();
            GLB.LPO.println (F6_15());
            P_CheckPageO();
            GLB.LPO.println (F6_16());
            P_CheckPageO();
            GLB.LPO.println (F6_17());
            P_CheckPageO();
            GLB.LPO.println (F6_18());
            P_CheckPageO();
            GLB.LPO.println (F6_19());
            P_CheckPageO();
            GLB.LPO.println (F6_20());
            P_CheckPageO();
            GLB.LPO.println (F6_21());
            P_CheckPageO();
            GLB.LPO.println (F6_22());
            P_CheckPageO();
            GLB.LPO.println (F6_23());
            P_CheckPageO();
            GLB.LPO.println (F6_24());
            P_CheckPageO();
            GLB.LPO.println (F6_25());
            P_CheckPageO();
            GLB.LPO.println (F6_26());
            P_CheckPageO();
            GLB.LPO.println (F6_27());
            P_CheckPageO();
            GLB.LPO.println (F6_28());
            P_CheckPageO();
            GLB.LPO.println (F6_29());
            P_CheckPageO();
            GLB.LPO.println (F6_30());
            P_CheckPageO();
            GLB.LPO.println (F6_31());
            P_CheckPageO();
            GLB.LPO.println (F6_32());
            P_CheckPageO();
            GLB.LPO.println (F6_33());
            P_CheckPageO();
            GLB.LPO.println (F6_34());
            P_CheckPageO();
            GLB.LPO.println (F6_35());
            P_CheckPageO();
            GLB.LPO.println (F6_36());
            P_CheckPageO();
            GLB.LPO.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F6_1());
            P_CheckPageP();
            GLB.LPP.println (F6_2());
            P_CheckPageP();
            GLB.LPP.println (F6_3());
            P_CheckPageP();
            GLB.LPP.println (F6_4());
            P_CheckPageP();
            GLB.LPP.println (F6_5());
            P_CheckPageP();
            GLB.LPP.println (F6_6());
            P_CheckPageP();
            GLB.LPP.println (F6_7());
            P_CheckPageP();
            GLB.LPP.println (F6_8());
            P_CheckPageP();
            GLB.LPP.println (F6_9());
            P_CheckPageP();
            GLB.LPP.println (F6_10());
            P_CheckPageP();
            GLB.LPP.println (F6_11());
            P_CheckPageP();
            GLB.LPP.println (F6_12());
            P_CheckPageP();
            GLB.LPP.println (F6_13());
            P_CheckPageP();
            GLB.LPP.println (F6_14());
            P_CheckPageP();
            GLB.LPP.println (F6_15());
            P_CheckPageP();
            GLB.LPP.println (F6_16());
            P_CheckPageP();
            GLB.LPP.println (F6_17());
            P_CheckPageP();
            GLB.LPP.println (F6_18());
            P_CheckPageP();
            GLB.LPP.println (F6_19());
            P_CheckPageP();
            GLB.LPP.println (F6_20());
            P_CheckPageP();
            GLB.LPP.println (F6_21());
            P_CheckPageP();
            GLB.LPP.println (F6_22());
            P_CheckPageP();
            GLB.LPP.println (F6_23());
            P_CheckPageP();
            GLB.LPP.println (F6_24());
            P_CheckPageP();
            GLB.LPP.println (F6_25());
            P_CheckPageP();
            GLB.LPP.println (F6_26());
            P_CheckPageP();
            GLB.LPP.println (F6_27());
            P_CheckPageP();
            GLB.LPP.println (F6_28());
            P_CheckPageP();
            GLB.LPP.println (F6_29());
            P_CheckPageP();
            GLB.LPP.println (F6_30());
            P_CheckPageP();
            GLB.LPP.println (F6_31());
            P_CheckPageP();
            GLB.LPP.println (F6_32());
            P_CheckPageP();
            GLB.LPP.println (F6_33());
            P_CheckPageP();
            GLB.LPP.println (F6_34());
            P_CheckPageP();
            GLB.LPP.println (F6_35());
            P_CheckPageP();
            GLB.LPP.println (F6_36());
            P_CheckPageP();
            GLB.LPP.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F6_1());
            P_CheckPageQ();
            GLB.LPQ.println (F6_2());
            P_CheckPageQ();
            GLB.LPQ.println (F6_3());
            P_CheckPageQ();
            GLB.LPQ.println (F6_4());
            P_CheckPageQ();
            GLB.LPQ.println (F6_5());
            P_CheckPageQ();
            GLB.LPQ.println (F6_6());
            P_CheckPageQ();
            GLB.LPQ.println (F6_7());
            P_CheckPageQ();
            GLB.LPQ.println (F6_8());
            P_CheckPageQ();
            GLB.LPQ.println (F6_9());
            P_CheckPageQ();
            GLB.LPQ.println (F6_10());
            P_CheckPageQ();
            GLB.LPQ.println (F6_11());
            P_CheckPageQ();
            GLB.LPQ.println (F6_12());
            P_CheckPageQ();
            GLB.LPQ.println (F6_13());
            P_CheckPageQ();
            GLB.LPQ.println (F6_14());
            P_CheckPageQ();
            GLB.LPQ.println (F6_15());
            P_CheckPageQ();
            GLB.LPQ.println (F6_16());
            P_CheckPageQ();
            GLB.LPQ.println (F6_17());
            P_CheckPageQ();
            GLB.LPQ.println (F6_18());
            P_CheckPageQ();
            GLB.LPQ.println (F6_19());
            P_CheckPageQ();
            GLB.LPQ.println (F6_20());
            P_CheckPageQ();
            GLB.LPQ.println (F6_21());
            P_CheckPageQ();
            GLB.LPQ.println (F6_22());
            P_CheckPageQ();
            GLB.LPQ.println (F6_23());
            P_CheckPageQ();
            GLB.LPQ.println (F6_24());
            P_CheckPageQ();
            GLB.LPQ.println (F6_25());
            P_CheckPageQ();
            GLB.LPQ.println (F6_26());
            P_CheckPageQ();
            GLB.LPQ.println (F6_27());
            P_CheckPageQ();
            GLB.LPQ.println (F6_28());
            P_CheckPageQ();
            GLB.LPQ.println (F6_29());
            P_CheckPageQ();
            GLB.LPQ.println (F6_30());
            P_CheckPageQ();
            GLB.LPQ.println (F6_31());
            P_CheckPageQ();
            GLB.LPQ.println (F6_32());
            P_CheckPageQ();
            GLB.LPQ.println (F6_33());
            P_CheckPageQ();
            GLB.LPQ.println (F6_34());
            P_CheckPageQ();
            GLB.LPQ.println (F6_35());
            P_CheckPageQ();
            GLB.LPQ.println (F6_36());
            P_CheckPageQ();
            GLB.LPQ.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F6_1());
            P_CheckPageR();
            GLB.LPR.println (F6_2());
            P_CheckPageR();
            GLB.LPR.println (F6_3());
            P_CheckPageR();
            GLB.LPR.println (F6_4());
            P_CheckPageR();
            GLB.LPR.println (F6_5());
            P_CheckPageR();
            GLB.LPR.println (F6_6());
            P_CheckPageR();
            GLB.LPR.println (F6_7());
            P_CheckPageR();
            GLB.LPR.println (F6_8());
            P_CheckPageR();
            GLB.LPR.println (F6_9());
            P_CheckPageR();
            GLB.LPR.println (F6_10());
            P_CheckPageR();
            GLB.LPR.println (F6_11());
            P_CheckPageR();
            GLB.LPR.println (F6_12());
            P_CheckPageR();
            GLB.LPR.println (F6_13());
            P_CheckPageR();
            GLB.LPR.println (F6_14());
            P_CheckPageR();
            GLB.LPR.println (F6_15());
            P_CheckPageR();
            GLB.LPR.println (F6_16());
            P_CheckPageR();
            GLB.LPR.println (F6_17());
            P_CheckPageR();
            GLB.LPR.println (F6_18());
            P_CheckPageR();
            GLB.LPR.println (F6_19());
            P_CheckPageR();
            GLB.LPR.println (F6_20());
            P_CheckPageR();
            GLB.LPR.println (F6_21());
            P_CheckPageR();
            GLB.LPR.println (F6_22());
            P_CheckPageR();
            GLB.LPR.println (F6_23());
            P_CheckPageR();
            GLB.LPR.println (F6_24());
            P_CheckPageR();
            GLB.LPR.println (F6_25());
            P_CheckPageR();
            GLB.LPR.println (F6_26());
            P_CheckPageR();
            GLB.LPR.println (F6_27());
            P_CheckPageR();
            GLB.LPR.println (F6_28());
            P_CheckPageR();
            GLB.LPR.println (F6_29());
            P_CheckPageR();
            GLB.LPR.println (F6_30());
            P_CheckPageR();
            GLB.LPR.println (F6_31());
            P_CheckPageR();
            GLB.LPR.println (F6_32());
            P_CheckPageR();
            GLB.LPR.println (F6_33());
            P_CheckPageR();
            GLB.LPR.println (F6_34());
            P_CheckPageR();
            GLB.LPR.println (F6_35());
            P_CheckPageR();
            GLB.LPR.println (F6_36());
            P_CheckPageR();
            GLB.LPR.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F6_1());
            P_CheckPageS();
            GLB.LPS.println (F6_2());
            P_CheckPageS();
            GLB.LPS.println (F6_3());
            P_CheckPageS();
            GLB.LPS.println (F6_4());
            P_CheckPageS();
            GLB.LPS.println (F6_5());
            P_CheckPageS();
            GLB.LPS.println (F6_6());
            P_CheckPageS();
            GLB.LPS.println (F6_7());
            P_CheckPageS();
            GLB.LPS.println (F6_8());
            P_CheckPageS();
            GLB.LPS.println (F6_9());
            P_CheckPageS();
            GLB.LPS.println (F6_10());
            P_CheckPageS();
            GLB.LPS.println (F6_11());
            P_CheckPageS();
            GLB.LPS.println (F6_12());
            P_CheckPageS();
            GLB.LPS.println (F6_13());
            P_CheckPageS();
            GLB.LPS.println (F6_14());
            P_CheckPageS();
            GLB.LPS.println (F6_15());
            P_CheckPageS();
            GLB.LPS.println (F6_16());
            P_CheckPageS();
            GLB.LPS.println (F6_17());
            P_CheckPageS();
            GLB.LPS.println (F6_18());
            P_CheckPageS();
            GLB.LPS.println (F6_19());
            P_CheckPageS();
            GLB.LPS.println (F6_20());
            P_CheckPageS();
            GLB.LPS.println (F6_21());
            P_CheckPageS();
            GLB.LPS.println (F6_22());
            P_CheckPageS();
            GLB.LPS.println (F6_23());
            P_CheckPageS();
            GLB.LPS.println (F6_24());
            P_CheckPageS();
            GLB.LPS.println (F6_25());
            P_CheckPageS();
            GLB.LPS.println (F6_26());
            P_CheckPageS();
            GLB.LPS.println (F6_27());
            P_CheckPageS();
            GLB.LPS.println (F6_28());
            P_CheckPageS();
            GLB.LPS.println (F6_29());
            P_CheckPageS();
            GLB.LPS.println (F6_30());
            P_CheckPageS();
            GLB.LPS.println (F6_31());
            P_CheckPageS();
            GLB.LPS.println (F6_32());
            P_CheckPageS();
            GLB.LPS.println (F6_33());
            P_CheckPageS();
            GLB.LPS.println (F6_34());
            P_CheckPageS();
            GLB.LPS.println (F6_35());
            P_CheckPageS();
            GLB.LPS.println (F6_36());
            P_CheckPageS();
            GLB.LPS.println (F6_37());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F6_1());
            P_CheckPageZ();
            GLB.LPZ.println (F6_2());
            P_CheckPageZ();
            GLB.LPZ.println (F6_3());
            P_CheckPageZ();
            GLB.LPZ.println (F6_4());
            P_CheckPageZ();
            GLB.LPZ.println (F6_5());
            P_CheckPageZ();
            GLB.LPZ.println (F6_6());
            P_CheckPageZ();
            GLB.LPZ.println (F6_7());
            P_CheckPageZ();
            GLB.LPZ.println (F6_8());
            P_CheckPageZ();
            GLB.LPZ.println (F6_9());
            P_CheckPageZ();
            GLB.LPZ.println (F6_10());
            P_CheckPageZ();
            GLB.LPZ.println (F6_11());
            P_CheckPageZ();
            GLB.LPZ.println (F6_12());
            P_CheckPageZ();
            GLB.LPZ.println (F6_13());
            P_CheckPageZ();
            GLB.LPZ.println (F6_14());
            P_CheckPageZ();
            GLB.LPZ.println (F6_15());
            P_CheckPageZ();
            GLB.LPZ.println (F6_16());
            P_CheckPageZ();
            GLB.LPZ.println (F6_17());
            P_CheckPageZ();
            GLB.LPZ.println (F6_18());
            P_CheckPageZ();
            GLB.LPZ.println (F6_19());
            P_CheckPageZ();
            GLB.LPZ.println (F6_20());
            P_CheckPageZ();
            GLB.LPZ.println (F6_21());
            P_CheckPageZ();
            GLB.LPZ.println (F6_22());
            P_CheckPageZ();
            GLB.LPZ.println (F6_23());
            P_CheckPageZ();
            GLB.LPZ.println (F6_24());
            P_CheckPageZ();
            GLB.LPZ.println (F6_25());
            P_CheckPageZ();
            GLB.LPZ.println (F6_26());
            P_CheckPageZ();
            GLB.LPZ.println (F6_27());
            P_CheckPageZ();
            GLB.LPZ.println (F6_28());
            P_CheckPageZ();
            GLB.LPZ.println (F6_29());
            P_CheckPageZ();
            GLB.LPZ.println (F6_30());
            P_CheckPageZ();
            GLB.LPZ.println (F6_31());
            P_CheckPageZ();
            GLB.LPZ.println (F6_32());
            P_CheckPageZ();
            GLB.LPZ.println (F6_33());
            P_CheckPageZ();
            GLB.LPZ.println (F6_34());
            P_CheckPageZ();
            GLB.LPZ.println (F6_35());
            P_CheckPageZ();
            GLB.LPZ.println (F6_36());
            P_CheckPageZ();
            GLB.LPZ.println (F6_37());
        }
    F6_RLAATERMOX = fix("", 4);
    F6_RLCDUFLEMP = fix("", 2);
    F6_RLDSABRENC = fix("", 23);
    F6_RLDSCARSRF = fix("", 30);
    F6_RLDSCIDADE = fix("", 20);
    F6_RLDSENDEMP = fix("", 67);
    F6_RLDSMESEXT = fix("", 9);
    F6_RLDSPAGINA = fix("", 36);
    F6_RLDTDIAATU = 0;
    F6_RLDTFINALX = fix("", 10);
    F6_RLDTINICIO = fix("", 10);
    F6_RLDTREGIST = fix("", 10);
    F6_RLNMCONTAD = fix("", 30);
    F6_RLNMEMPRES = fix("", 80);
    F6_RLNMRESSRF = fix("", 30);
    F6_RLNRCGCDIG = 0;
    F6_RLNRCGCFIL = 0;
    F6_RLNRCGCNUM = 0;
    F6_RLNRCPFSRF = fix("", 14);
    F6_RLNRCRCCON = fix("", 14);
    F6_RLNRFOLHAS = 0;
    F6_RLNRIESEMP = fix("", 15);
    F6_RLNRLIVROX = 0;
    F6_RLNRPAGFIM = 0;
    F6_RLNRPAGINA = 0;
    F6_RLNRREGJUN = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_6");

     }
 }
private void F_7()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_7");

     }
 }
private void F_9()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F9_1());
            P_CheckPage();
            GLB.LP.println(F9_2());
            P_CheckPage();
            GLB.LP.println(F9_3());
            P_CheckPage();
            GLB.LP.println(F9_4());
            P_CheckPage();
            GLB.LP.println(F9_5());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F9_1());
            P_CheckPageB();
            GLB.LPB.println (F9_2());
            P_CheckPageB();
            GLB.LPB.println (F9_3());
            P_CheckPageB();
            GLB.LPB.println (F9_4());
            P_CheckPageB();
            GLB.LPB.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F9_1());
            P_CheckPageC();
            GLB.LPC.println (F9_2());
            P_CheckPageC();
            GLB.LPC.println (F9_3());
            P_CheckPageC();
            GLB.LPC.println (F9_4());
            P_CheckPageC();
            GLB.LPC.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F9_1());
            P_CheckPageD();
            GLB.LPD.println (F9_2());
            P_CheckPageD();
            GLB.LPD.println (F9_3());
            P_CheckPageD();
            GLB.LPD.println (F9_4());
            P_CheckPageD();
            GLB.LPD.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F9_1());
            P_CheckPageE();
            GLB.LPE.println (F9_2());
            P_CheckPageE();
            GLB.LPE.println (F9_3());
            P_CheckPageE();
            GLB.LPE.println (F9_4());
            P_CheckPageE();
            GLB.LPE.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F9_1());
            P_CheckPageF();
            GLB.LPF.println (F9_2());
            P_CheckPageF();
            GLB.LPF.println (F9_3());
            P_CheckPageF();
            GLB.LPF.println (F9_4());
            P_CheckPageF();
            GLB.LPF.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F9_1());
            P_CheckPageG();
            GLB.LPG.println (F9_2());
            P_CheckPageG();
            GLB.LPG.println (F9_3());
            P_CheckPageG();
            GLB.LPG.println (F9_4());
            P_CheckPageG();
            GLB.LPG.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F9_1());
            P_CheckPageH();
            GLB.LPH.println (F9_2());
            P_CheckPageH();
            GLB.LPH.println (F9_3());
            P_CheckPageH();
            GLB.LPH.println (F9_4());
            P_CheckPageH();
            GLB.LPH.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F9_1());
            P_CheckPageI();
            GLB.LPI.println (F9_2());
            P_CheckPageI();
            GLB.LPI.println (F9_3());
            P_CheckPageI();
            GLB.LPI.println (F9_4());
            P_CheckPageI();
            GLB.LPI.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F9_1());
            P_CheckPageJ();
            GLB.LPJ.println (F9_2());
            P_CheckPageJ();
            GLB.LPJ.println (F9_3());
            P_CheckPageJ();
            GLB.LPJ.println (F9_4());
            P_CheckPageJ();
            GLB.LPJ.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F9_1());
            P_CheckPageL();
            GLB.LPL.println (F9_2());
            P_CheckPageL();
            GLB.LPL.println (F9_3());
            P_CheckPageL();
            GLB.LPL.println (F9_4());
            P_CheckPageL();
            GLB.LPL.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F9_1());
            P_CheckPageM();
            GLB.LPM.println (F9_2());
            P_CheckPageM();
            GLB.LPM.println (F9_3());
            P_CheckPageM();
            GLB.LPM.println (F9_4());
            P_CheckPageM();
            GLB.LPM.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F9_1());
            P_CheckPageN();
            GLB.LPN.println (F9_2());
            P_CheckPageN();
            GLB.LPN.println (F9_3());
            P_CheckPageN();
            GLB.LPN.println (F9_4());
            P_CheckPageN();
            GLB.LPN.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F9_1());
            P_CheckPageO();
            GLB.LPO.println (F9_2());
            P_CheckPageO();
            GLB.LPO.println (F9_3());
            P_CheckPageO();
            GLB.LPO.println (F9_4());
            P_CheckPageO();
            GLB.LPO.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F9_1());
            P_CheckPageP();
            GLB.LPP.println (F9_2());
            P_CheckPageP();
            GLB.LPP.println (F9_3());
            P_CheckPageP();
            GLB.LPP.println (F9_4());
            P_CheckPageP();
            GLB.LPP.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F9_1());
            P_CheckPageQ();
            GLB.LPQ.println (F9_2());
            P_CheckPageQ();
            GLB.LPQ.println (F9_3());
            P_CheckPageQ();
            GLB.LPQ.println (F9_4());
            P_CheckPageQ();
            GLB.LPQ.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F9_1());
            P_CheckPageR();
            GLB.LPR.println (F9_2());
            P_CheckPageR();
            GLB.LPR.println (F9_3());
            P_CheckPageR();
            GLB.LPR.println (F9_4());
            P_CheckPageR();
            GLB.LPR.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F9_1());
            P_CheckPageS();
            GLB.LPS.println (F9_2());
            P_CheckPageS();
            GLB.LPS.println (F9_3());
            P_CheckPageS();
            GLB.LPS.println (F9_4());
            P_CheckPageS();
            GLB.LPS.println (F9_5());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F9_1());
            P_CheckPageZ();
            GLB.LPZ.println (F9_2());
            P_CheckPageZ();
            GLB.LPZ.println (F9_3());
            P_CheckPageZ();
            GLB.LPZ.println (F9_4());
            P_CheckPageZ();
            GLB.LPZ.println (F9_5());
        }
    F9_RLVLBASTIN = 0;
    F9_RLVLBASTSC = 0;
    F9_RLVLICSTIN = 0;
    F9_RLVLICSTSC = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_9");

     }
 }
private void F_10()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F10_1());
            P_CheckPage();
            GLB.LP.println(F10_2());
            P_CheckPage();
            GLB.LP.println(F10_3());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F10_1());
            P_CheckPageB();
            GLB.LPB.println (F10_2());
            P_CheckPageB();
            GLB.LPB.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F10_1());
            P_CheckPageC();
            GLB.LPC.println (F10_2());
            P_CheckPageC();
            GLB.LPC.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F10_1());
            P_CheckPageD();
            GLB.LPD.println (F10_2());
            P_CheckPageD();
            GLB.LPD.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F10_1());
            P_CheckPageE();
            GLB.LPE.println (F10_2());
            P_CheckPageE();
            GLB.LPE.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F10_1());
            P_CheckPageF();
            GLB.LPF.println (F10_2());
            P_CheckPageF();
            GLB.LPF.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F10_1());
            P_CheckPageG();
            GLB.LPG.println (F10_2());
            P_CheckPageG();
            GLB.LPG.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F10_1());
            P_CheckPageH();
            GLB.LPH.println (F10_2());
            P_CheckPageH();
            GLB.LPH.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F10_1());
            P_CheckPageI();
            GLB.LPI.println (F10_2());
            P_CheckPageI();
            GLB.LPI.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F10_1());
            P_CheckPageJ();
            GLB.LPJ.println (F10_2());
            P_CheckPageJ();
            GLB.LPJ.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F10_1());
            P_CheckPageL();
            GLB.LPL.println (F10_2());
            P_CheckPageL();
            GLB.LPL.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F10_1());
            P_CheckPageM();
            GLB.LPM.println (F10_2());
            P_CheckPageM();
            GLB.LPM.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F10_1());
            P_CheckPageN();
            GLB.LPN.println (F10_2());
            P_CheckPageN();
            GLB.LPN.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F10_1());
            P_CheckPageO();
            GLB.LPO.println (F10_2());
            P_CheckPageO();
            GLB.LPO.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F10_1());
            P_CheckPageP();
            GLB.LPP.println (F10_2());
            P_CheckPageP();
            GLB.LPP.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F10_1());
            P_CheckPageQ();
            GLB.LPQ.println (F10_2());
            P_CheckPageQ();
            GLB.LPQ.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F10_1());
            P_CheckPageR();
            GLB.LPR.println (F10_2());
            P_CheckPageR();
            GLB.LPR.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F10_1());
            P_CheckPageS();
            GLB.LPS.println (F10_2());
            P_CheckPageS();
            GLB.LPS.println (F10_3());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F10_1());
            P_CheckPageZ();
            GLB.LPZ.println (F10_2());
            P_CheckPageZ();
            GLB.LPZ.println (F10_3());
        }
    F10_EXCDMODENF = 0;
    F10_EXCDNATCOM = 0;
    F10_EXCDNATOPE = 0;
    F10_EXCDUFMUNI = fix("", 2);
    F10_EXDIEMINOT = 0;
    F10_EXDISAINOT = 0;
    F10_EXINCONFIN = 0;
    F10_EXINDECEND = 0;
    F10_EXINORIGEM = 0;
    F10_EXNRCANCEL = 0;
    F10_EXNRCFICMP = 0;
    F10_EXNRCONTAX = 0;
    F10_EXNRNOTAFI = 0;
    F10_EXNRNOTFIN = 0;
    F10_EXNRSERIEX = fix("", 3);
    F10_EXPCICMNAT = 0;
    F10_EXPCICMPRO = 0;
    F10_EXTPREGIST = 0;
    F10_EXVLBASDID = 0;
    F10_EXVLBASICM = 0;
    F10_EXVLBASIPI = 0;
    F10_EXVLBASSTR = 0;
    F10_EXVLCONTAX = 0;
    F10_EXVLFCPDES = 0;
    F10_EXVLICMDID = 0;
    F10_EXVLICMDIO = 0;
    F10_EXVLICMPRO = 0;
    F10_EXVLICMSTR = 0;
    F10_EXVLIMPICM = 0;
    F10_EXVLIMPIPI = 0;
    F10_EXVLISEICM = 0;
    F10_EXVLISEIPI = 0;
    F10_EXVLLIQUID = 0;
    F10_EXVLOUTICM = 0;
    F10_EXVLOUTIPI = 0;
    F10_EXVLPERICM = 0;
    F10_EXVLPERIPI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_10");

     }
 }
private void F_13()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F13_1());
            P_CheckPage();
            GLB.LP.println(F13_2());
            P_CheckPage();
            GLB.LP.println(F13_3());
            P_CheckPage();
            GLB.LP.println(F13_4());
            P_CheckPage();
            GLB.LP.println(F13_5());
            P_CheckPage();
            GLB.LP.println(F13_6());
            P_CheckPage();
            GLB.LP.println(F13_7());
            P_CheckPage();
            GLB.LP.println(F13_8());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F13_1());
            P_CheckPageB();
            GLB.LPB.println (F13_2());
            P_CheckPageB();
            GLB.LPB.println (F13_3());
            P_CheckPageB();
            GLB.LPB.println (F13_4());
            P_CheckPageB();
            GLB.LPB.println (F13_5());
            P_CheckPageB();
            GLB.LPB.println (F13_6());
            P_CheckPageB();
            GLB.LPB.println (F13_7());
            P_CheckPageB();
            GLB.LPB.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F13_1());
            P_CheckPageC();
            GLB.LPC.println (F13_2());
            P_CheckPageC();
            GLB.LPC.println (F13_3());
            P_CheckPageC();
            GLB.LPC.println (F13_4());
            P_CheckPageC();
            GLB.LPC.println (F13_5());
            P_CheckPageC();
            GLB.LPC.println (F13_6());
            P_CheckPageC();
            GLB.LPC.println (F13_7());
            P_CheckPageC();
            GLB.LPC.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F13_1());
            P_CheckPageD();
            GLB.LPD.println (F13_2());
            P_CheckPageD();
            GLB.LPD.println (F13_3());
            P_CheckPageD();
            GLB.LPD.println (F13_4());
            P_CheckPageD();
            GLB.LPD.println (F13_5());
            P_CheckPageD();
            GLB.LPD.println (F13_6());
            P_CheckPageD();
            GLB.LPD.println (F13_7());
            P_CheckPageD();
            GLB.LPD.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F13_1());
            P_CheckPageE();
            GLB.LPE.println (F13_2());
            P_CheckPageE();
            GLB.LPE.println (F13_3());
            P_CheckPageE();
            GLB.LPE.println (F13_4());
            P_CheckPageE();
            GLB.LPE.println (F13_5());
            P_CheckPageE();
            GLB.LPE.println (F13_6());
            P_CheckPageE();
            GLB.LPE.println (F13_7());
            P_CheckPageE();
            GLB.LPE.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F13_1());
            P_CheckPageF();
            GLB.LPF.println (F13_2());
            P_CheckPageF();
            GLB.LPF.println (F13_3());
            P_CheckPageF();
            GLB.LPF.println (F13_4());
            P_CheckPageF();
            GLB.LPF.println (F13_5());
            P_CheckPageF();
            GLB.LPF.println (F13_6());
            P_CheckPageF();
            GLB.LPF.println (F13_7());
            P_CheckPageF();
            GLB.LPF.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F13_1());
            P_CheckPageG();
            GLB.LPG.println (F13_2());
            P_CheckPageG();
            GLB.LPG.println (F13_3());
            P_CheckPageG();
            GLB.LPG.println (F13_4());
            P_CheckPageG();
            GLB.LPG.println (F13_5());
            P_CheckPageG();
            GLB.LPG.println (F13_6());
            P_CheckPageG();
            GLB.LPG.println (F13_7());
            P_CheckPageG();
            GLB.LPG.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F13_1());
            P_CheckPageH();
            GLB.LPH.println (F13_2());
            P_CheckPageH();
            GLB.LPH.println (F13_3());
            P_CheckPageH();
            GLB.LPH.println (F13_4());
            P_CheckPageH();
            GLB.LPH.println (F13_5());
            P_CheckPageH();
            GLB.LPH.println (F13_6());
            P_CheckPageH();
            GLB.LPH.println (F13_7());
            P_CheckPageH();
            GLB.LPH.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F13_1());
            P_CheckPageI();
            GLB.LPI.println (F13_2());
            P_CheckPageI();
            GLB.LPI.println (F13_3());
            P_CheckPageI();
            GLB.LPI.println (F13_4());
            P_CheckPageI();
            GLB.LPI.println (F13_5());
            P_CheckPageI();
            GLB.LPI.println (F13_6());
            P_CheckPageI();
            GLB.LPI.println (F13_7());
            P_CheckPageI();
            GLB.LPI.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F13_1());
            P_CheckPageJ();
            GLB.LPJ.println (F13_2());
            P_CheckPageJ();
            GLB.LPJ.println (F13_3());
            P_CheckPageJ();
            GLB.LPJ.println (F13_4());
            P_CheckPageJ();
            GLB.LPJ.println (F13_5());
            P_CheckPageJ();
            GLB.LPJ.println (F13_6());
            P_CheckPageJ();
            GLB.LPJ.println (F13_7());
            P_CheckPageJ();
            GLB.LPJ.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F13_1());
            P_CheckPageL();
            GLB.LPL.println (F13_2());
            P_CheckPageL();
            GLB.LPL.println (F13_3());
            P_CheckPageL();
            GLB.LPL.println (F13_4());
            P_CheckPageL();
            GLB.LPL.println (F13_5());
            P_CheckPageL();
            GLB.LPL.println (F13_6());
            P_CheckPageL();
            GLB.LPL.println (F13_7());
            P_CheckPageL();
            GLB.LPL.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F13_1());
            P_CheckPageM();
            GLB.LPM.println (F13_2());
            P_CheckPageM();
            GLB.LPM.println (F13_3());
            P_CheckPageM();
            GLB.LPM.println (F13_4());
            P_CheckPageM();
            GLB.LPM.println (F13_5());
            P_CheckPageM();
            GLB.LPM.println (F13_6());
            P_CheckPageM();
            GLB.LPM.println (F13_7());
            P_CheckPageM();
            GLB.LPM.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F13_1());
            P_CheckPageN();
            GLB.LPN.println (F13_2());
            P_CheckPageN();
            GLB.LPN.println (F13_3());
            P_CheckPageN();
            GLB.LPN.println (F13_4());
            P_CheckPageN();
            GLB.LPN.println (F13_5());
            P_CheckPageN();
            GLB.LPN.println (F13_6());
            P_CheckPageN();
            GLB.LPN.println (F13_7());
            P_CheckPageN();
            GLB.LPN.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F13_1());
            P_CheckPageO();
            GLB.LPO.println (F13_2());
            P_CheckPageO();
            GLB.LPO.println (F13_3());
            P_CheckPageO();
            GLB.LPO.println (F13_4());
            P_CheckPageO();
            GLB.LPO.println (F13_5());
            P_CheckPageO();
            GLB.LPO.println (F13_6());
            P_CheckPageO();
            GLB.LPO.println (F13_7());
            P_CheckPageO();
            GLB.LPO.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F13_1());
            P_CheckPageP();
            GLB.LPP.println (F13_2());
            P_CheckPageP();
            GLB.LPP.println (F13_3());
            P_CheckPageP();
            GLB.LPP.println (F13_4());
            P_CheckPageP();
            GLB.LPP.println (F13_5());
            P_CheckPageP();
            GLB.LPP.println (F13_6());
            P_CheckPageP();
            GLB.LPP.println (F13_7());
            P_CheckPageP();
            GLB.LPP.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F13_1());
            P_CheckPageQ();
            GLB.LPQ.println (F13_2());
            P_CheckPageQ();
            GLB.LPQ.println (F13_3());
            P_CheckPageQ();
            GLB.LPQ.println (F13_4());
            P_CheckPageQ();
            GLB.LPQ.println (F13_5());
            P_CheckPageQ();
            GLB.LPQ.println (F13_6());
            P_CheckPageQ();
            GLB.LPQ.println (F13_7());
            P_CheckPageQ();
            GLB.LPQ.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F13_1());
            P_CheckPageR();
            GLB.LPR.println (F13_2());
            P_CheckPageR();
            GLB.LPR.println (F13_3());
            P_CheckPageR();
            GLB.LPR.println (F13_4());
            P_CheckPageR();
            GLB.LPR.println (F13_5());
            P_CheckPageR();
            GLB.LPR.println (F13_6());
            P_CheckPageR();
            GLB.LPR.println (F13_7());
            P_CheckPageR();
            GLB.LPR.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F13_1());
            P_CheckPageS();
            GLB.LPS.println (F13_2());
            P_CheckPageS();
            GLB.LPS.println (F13_3());
            P_CheckPageS();
            GLB.LPS.println (F13_4());
            P_CheckPageS();
            GLB.LPS.println (F13_5());
            P_CheckPageS();
            GLB.LPS.println (F13_6());
            P_CheckPageS();
            GLB.LPS.println (F13_7());
            P_CheckPageS();
            GLB.LPS.println (F13_8());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F13_1());
            P_CheckPageZ();
            GLB.LPZ.println (F13_2());
            P_CheckPageZ();
            GLB.LPZ.println (F13_3());
            P_CheckPageZ();
            GLB.LPZ.println (F13_4());
            P_CheckPageZ();
            GLB.LPZ.println (F13_5());
            P_CheckPageZ();
            GLB.LPZ.println (F13_6());
            P_CheckPageZ();
            GLB.LPZ.println (F13_7());
            P_CheckPageZ();
            GLB.LPZ.println (F13_8());
        }
    F13_EXCDCLIDEP = 0;
    F13_EXCDDEPNFI = 0;
    F13_EXCDTIPDEP = 0;
    F13_EXDIEMIDEP = 0;
    F13_EXINCLIDEP = 0;
    F13_EXNRNOTDEP = 0;
    F13_EXNRUSUNFI = 0;
    F13_EXVLTOICMN = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_13");

     }
 }
private void F_21()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F21_1());
            P_CheckPage();
            GLB.LP.println(F21_2());
            P_CheckPage();
            GLB.LP.println(F21_3());
            P_CheckPage();
            GLB.LP.println(F21_4());
            P_CheckPage();
            GLB.LP.println(F21_5());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F21_1());
            P_CheckPageB();
            GLB.LPB.println (F21_2());
            P_CheckPageB();
            GLB.LPB.println (F21_3());
            P_CheckPageB();
            GLB.LPB.println (F21_4());
            P_CheckPageB();
            GLB.LPB.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F21_1());
            P_CheckPageC();
            GLB.LPC.println (F21_2());
            P_CheckPageC();
            GLB.LPC.println (F21_3());
            P_CheckPageC();
            GLB.LPC.println (F21_4());
            P_CheckPageC();
            GLB.LPC.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F21_1());
            P_CheckPageD();
            GLB.LPD.println (F21_2());
            P_CheckPageD();
            GLB.LPD.println (F21_3());
            P_CheckPageD();
            GLB.LPD.println (F21_4());
            P_CheckPageD();
            GLB.LPD.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F21_1());
            P_CheckPageE();
            GLB.LPE.println (F21_2());
            P_CheckPageE();
            GLB.LPE.println (F21_3());
            P_CheckPageE();
            GLB.LPE.println (F21_4());
            P_CheckPageE();
            GLB.LPE.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F21_1());
            P_CheckPageF();
            GLB.LPF.println (F21_2());
            P_CheckPageF();
            GLB.LPF.println (F21_3());
            P_CheckPageF();
            GLB.LPF.println (F21_4());
            P_CheckPageF();
            GLB.LPF.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F21_1());
            P_CheckPageG();
            GLB.LPG.println (F21_2());
            P_CheckPageG();
            GLB.LPG.println (F21_3());
            P_CheckPageG();
            GLB.LPG.println (F21_4());
            P_CheckPageG();
            GLB.LPG.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F21_1());
            P_CheckPageH();
            GLB.LPH.println (F21_2());
            P_CheckPageH();
            GLB.LPH.println (F21_3());
            P_CheckPageH();
            GLB.LPH.println (F21_4());
            P_CheckPageH();
            GLB.LPH.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F21_1());
            P_CheckPageI();
            GLB.LPI.println (F21_2());
            P_CheckPageI();
            GLB.LPI.println (F21_3());
            P_CheckPageI();
            GLB.LPI.println (F21_4());
            P_CheckPageI();
            GLB.LPI.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F21_1());
            P_CheckPageJ();
            GLB.LPJ.println (F21_2());
            P_CheckPageJ();
            GLB.LPJ.println (F21_3());
            P_CheckPageJ();
            GLB.LPJ.println (F21_4());
            P_CheckPageJ();
            GLB.LPJ.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F21_1());
            P_CheckPageL();
            GLB.LPL.println (F21_2());
            P_CheckPageL();
            GLB.LPL.println (F21_3());
            P_CheckPageL();
            GLB.LPL.println (F21_4());
            P_CheckPageL();
            GLB.LPL.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F21_1());
            P_CheckPageM();
            GLB.LPM.println (F21_2());
            P_CheckPageM();
            GLB.LPM.println (F21_3());
            P_CheckPageM();
            GLB.LPM.println (F21_4());
            P_CheckPageM();
            GLB.LPM.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F21_1());
            P_CheckPageN();
            GLB.LPN.println (F21_2());
            P_CheckPageN();
            GLB.LPN.println (F21_3());
            P_CheckPageN();
            GLB.LPN.println (F21_4());
            P_CheckPageN();
            GLB.LPN.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F21_1());
            P_CheckPageO();
            GLB.LPO.println (F21_2());
            P_CheckPageO();
            GLB.LPO.println (F21_3());
            P_CheckPageO();
            GLB.LPO.println (F21_4());
            P_CheckPageO();
            GLB.LPO.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F21_1());
            P_CheckPageP();
            GLB.LPP.println (F21_2());
            P_CheckPageP();
            GLB.LPP.println (F21_3());
            P_CheckPageP();
            GLB.LPP.println (F21_4());
            P_CheckPageP();
            GLB.LPP.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F21_1());
            P_CheckPageQ();
            GLB.LPQ.println (F21_2());
            P_CheckPageQ();
            GLB.LPQ.println (F21_3());
            P_CheckPageQ();
            GLB.LPQ.println (F21_4());
            P_CheckPageQ();
            GLB.LPQ.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F21_1());
            P_CheckPageR();
            GLB.LPR.println (F21_2());
            P_CheckPageR();
            GLB.LPR.println (F21_3());
            P_CheckPageR();
            GLB.LPR.println (F21_4());
            P_CheckPageR();
            GLB.LPR.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F21_1());
            P_CheckPageS();
            GLB.LPS.println (F21_2());
            P_CheckPageS();
            GLB.LPS.println (F21_3());
            P_CheckPageS();
            GLB.LPS.println (F21_4());
            P_CheckPageS();
            GLB.LPS.println (F21_5());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F21_1());
            P_CheckPageZ();
            GLB.LPZ.println (F21_2());
            P_CheckPageZ();
            GLB.LPZ.println (F21_3());
            P_CheckPageZ();
            GLB.LPZ.println (F21_4());
            P_CheckPageZ();
            GLB.LPZ.println (F21_5());
        }
    F21_RLDTFINALX = fix("", 10);
    F21_RLDTINICIO = fix("", 10);
    F21_RLDTSISTEM = 0;
    F21_RLNMABREMP = fix("", 16);
    F21_RLNRPAGINA = 0;
    F21_RLNRSOLICI = 0;
    F21_RLTHHHMMED = fix("", 5);
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_21");

     }
 }
private void F_22()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F22_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F22_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F22_1());
        }
    F22_RLCDCONCRE = 0;
    F22_RLCDDEBICM = 0;
    F22_RLCDNATOPE = 0;
    F22_RLVLBASICM = 0;
    F22_RLVLCONTAB = 0;
    F22_RLVLIMPICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_22");

     }
 }
private void F_23()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F23_1());
            P_CheckPage();
            GLB.LP.println(F23_2());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F23_1());
            P_CheckPageB();
            GLB.LPB.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F23_1());
            P_CheckPageC();
            GLB.LPC.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F23_1());
            P_CheckPageD();
            GLB.LPD.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F23_1());
            P_CheckPageE();
            GLB.LPE.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F23_1());
            P_CheckPageF();
            GLB.LPF.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F23_1());
            P_CheckPageG();
            GLB.LPG.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F23_1());
            P_CheckPageH();
            GLB.LPH.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F23_1());
            P_CheckPageI();
            GLB.LPI.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F23_1());
            P_CheckPageJ();
            GLB.LPJ.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F23_1());
            P_CheckPageL();
            GLB.LPL.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F23_1());
            P_CheckPageM();
            GLB.LPM.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F23_1());
            P_CheckPageN();
            GLB.LPN.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F23_1());
            P_CheckPageO();
            GLB.LPO.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F23_1());
            P_CheckPageP();
            GLB.LPP.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F23_1());
            P_CheckPageQ();
            GLB.LPQ.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F23_1());
            P_CheckPageR();
            GLB.LPR.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F23_1());
            P_CheckPageS();
            GLB.LPS.println (F23_2());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F23_1());
            P_CheckPageZ();
            GLB.LPZ.println (F23_2());
        }
    F23_LABEL2 = fix("", 1);
    F23_RLVLBASICM = 0;
    F23_RLVLCONTAB = 0;
    F23_RLVLIMPICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_23");

     }
 }
private void F_24()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F24_1());
            P_CheckPage();
            GLB.LP.println(F24_2());
            P_CheckPage();
            GLB.LP.println(F24_3());
            P_CheckPage();
            GLB.LP.println(F24_4());
            P_CheckPage();
            GLB.LP.println(F24_5());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F24_1());
            P_CheckPageB();
            GLB.LPB.println (F24_2());
            P_CheckPageB();
            GLB.LPB.println (F24_3());
            P_CheckPageB();
            GLB.LPB.println (F24_4());
            P_CheckPageB();
            GLB.LPB.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F24_1());
            P_CheckPageC();
            GLB.LPC.println (F24_2());
            P_CheckPageC();
            GLB.LPC.println (F24_3());
            P_CheckPageC();
            GLB.LPC.println (F24_4());
            P_CheckPageC();
            GLB.LPC.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F24_1());
            P_CheckPageD();
            GLB.LPD.println (F24_2());
            P_CheckPageD();
            GLB.LPD.println (F24_3());
            P_CheckPageD();
            GLB.LPD.println (F24_4());
            P_CheckPageD();
            GLB.LPD.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F24_1());
            P_CheckPageE();
            GLB.LPE.println (F24_2());
            P_CheckPageE();
            GLB.LPE.println (F24_3());
            P_CheckPageE();
            GLB.LPE.println (F24_4());
            P_CheckPageE();
            GLB.LPE.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F24_1());
            P_CheckPageF();
            GLB.LPF.println (F24_2());
            P_CheckPageF();
            GLB.LPF.println (F24_3());
            P_CheckPageF();
            GLB.LPF.println (F24_4());
            P_CheckPageF();
            GLB.LPF.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F24_1());
            P_CheckPageG();
            GLB.LPG.println (F24_2());
            P_CheckPageG();
            GLB.LPG.println (F24_3());
            P_CheckPageG();
            GLB.LPG.println (F24_4());
            P_CheckPageG();
            GLB.LPG.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F24_1());
            P_CheckPageH();
            GLB.LPH.println (F24_2());
            P_CheckPageH();
            GLB.LPH.println (F24_3());
            P_CheckPageH();
            GLB.LPH.println (F24_4());
            P_CheckPageH();
            GLB.LPH.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F24_1());
            P_CheckPageI();
            GLB.LPI.println (F24_2());
            P_CheckPageI();
            GLB.LPI.println (F24_3());
            P_CheckPageI();
            GLB.LPI.println (F24_4());
            P_CheckPageI();
            GLB.LPI.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F24_1());
            P_CheckPageJ();
            GLB.LPJ.println (F24_2());
            P_CheckPageJ();
            GLB.LPJ.println (F24_3());
            P_CheckPageJ();
            GLB.LPJ.println (F24_4());
            P_CheckPageJ();
            GLB.LPJ.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F24_1());
            P_CheckPageL();
            GLB.LPL.println (F24_2());
            P_CheckPageL();
            GLB.LPL.println (F24_3());
            P_CheckPageL();
            GLB.LPL.println (F24_4());
            P_CheckPageL();
            GLB.LPL.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F24_1());
            P_CheckPageM();
            GLB.LPM.println (F24_2());
            P_CheckPageM();
            GLB.LPM.println (F24_3());
            P_CheckPageM();
            GLB.LPM.println (F24_4());
            P_CheckPageM();
            GLB.LPM.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F24_1());
            P_CheckPageN();
            GLB.LPN.println (F24_2());
            P_CheckPageN();
            GLB.LPN.println (F24_3());
            P_CheckPageN();
            GLB.LPN.println (F24_4());
            P_CheckPageN();
            GLB.LPN.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F24_1());
            P_CheckPageO();
            GLB.LPO.println (F24_2());
            P_CheckPageO();
            GLB.LPO.println (F24_3());
            P_CheckPageO();
            GLB.LPO.println (F24_4());
            P_CheckPageO();
            GLB.LPO.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F24_1());
            P_CheckPageP();
            GLB.LPP.println (F24_2());
            P_CheckPageP();
            GLB.LPP.println (F24_3());
            P_CheckPageP();
            GLB.LPP.println (F24_4());
            P_CheckPageP();
            GLB.LPP.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F24_1());
            P_CheckPageQ();
            GLB.LPQ.println (F24_2());
            P_CheckPageQ();
            GLB.LPQ.println (F24_3());
            P_CheckPageQ();
            GLB.LPQ.println (F24_4());
            P_CheckPageQ();
            GLB.LPQ.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F24_1());
            P_CheckPageR();
            GLB.LPR.println (F24_2());
            P_CheckPageR();
            GLB.LPR.println (F24_3());
            P_CheckPageR();
            GLB.LPR.println (F24_4());
            P_CheckPageR();
            GLB.LPR.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F24_1());
            P_CheckPageS();
            GLB.LPS.println (F24_2());
            P_CheckPageS();
            GLB.LPS.println (F24_3());
            P_CheckPageS();
            GLB.LPS.println (F24_4());
            P_CheckPageS();
            GLB.LPS.println (F24_5());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F24_1());
            P_CheckPageZ();
            GLB.LPZ.println (F24_2());
            P_CheckPageZ();
            GLB.LPZ.println (F24_3());
            P_CheckPageZ();
            GLB.LPZ.println (F24_4());
            P_CheckPageZ();
            GLB.LPZ.println (F24_5());
        }
    F24_RLDTFINALX = fix("", 10);
    F24_RLDTINICIO = fix("", 10);
    F24_RLDTSISTEM = 0;
    F24_RLNMABREMP = fix("", 16);
    F24_RLNRPAGINA = 0;
    F24_RLNRSOLICI = 0;
    F24_RLTHHHMMED = fix("", 5);
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_24");

     }
 }
private void F_25()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F25_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F25_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F25_1());
        }
    F25_RLCDCLAFIS = fix("", 14);
    F25_RLVLBASICM = 0;
    F25_RLVLCONTAB = 0;
    F25_RLVLIMPICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_25");

     }
 }
private void F_26()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F26_1());
            P_CheckPage();
            GLB.LP.println(F26_2());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F26_1());
            P_CheckPageB();
            GLB.LPB.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F26_1());
            P_CheckPageC();
            GLB.LPC.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F26_1());
            P_CheckPageD();
            GLB.LPD.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F26_1());
            P_CheckPageE();
            GLB.LPE.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F26_1());
            P_CheckPageF();
            GLB.LPF.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F26_1());
            P_CheckPageG();
            GLB.LPG.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F26_1());
            P_CheckPageH();
            GLB.LPH.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F26_1());
            P_CheckPageI();
            GLB.LPI.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F26_1());
            P_CheckPageJ();
            GLB.LPJ.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F26_1());
            P_CheckPageL();
            GLB.LPL.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F26_1());
            P_CheckPageM();
            GLB.LPM.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F26_1());
            P_CheckPageN();
            GLB.LPN.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F26_1());
            P_CheckPageO();
            GLB.LPO.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F26_1());
            P_CheckPageP();
            GLB.LPP.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F26_1());
            P_CheckPageQ();
            GLB.LPQ.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F26_1());
            P_CheckPageR();
            GLB.LPR.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F26_1());
            P_CheckPageS();
            GLB.LPS.println (F26_2());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F26_1());
            P_CheckPageZ();
            GLB.LPZ.println (F26_2());
        }
    F26_RLVLBASICM = 0;
    F26_RLVLCONTAB = 0;
    F26_RLVLIMPICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_26");

     }
 }
private void F_27()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F27_1());
            P_CheckPage();
            GLB.LP.println(F27_2());
            P_CheckPage();
            GLB.LP.println(F27_3());
            P_CheckPage();
            GLB.LP.println(F27_4());
            P_CheckPage();
            GLB.LP.println(F27_5());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F27_1());
            P_CheckPageB();
            GLB.LPB.println (F27_2());
            P_CheckPageB();
            GLB.LPB.println (F27_3());
            P_CheckPageB();
            GLB.LPB.println (F27_4());
            P_CheckPageB();
            GLB.LPB.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F27_1());
            P_CheckPageC();
            GLB.LPC.println (F27_2());
            P_CheckPageC();
            GLB.LPC.println (F27_3());
            P_CheckPageC();
            GLB.LPC.println (F27_4());
            P_CheckPageC();
            GLB.LPC.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F27_1());
            P_CheckPageD();
            GLB.LPD.println (F27_2());
            P_CheckPageD();
            GLB.LPD.println (F27_3());
            P_CheckPageD();
            GLB.LPD.println (F27_4());
            P_CheckPageD();
            GLB.LPD.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F27_1());
            P_CheckPageE();
            GLB.LPE.println (F27_2());
            P_CheckPageE();
            GLB.LPE.println (F27_3());
            P_CheckPageE();
            GLB.LPE.println (F27_4());
            P_CheckPageE();
            GLB.LPE.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F27_1());
            P_CheckPageF();
            GLB.LPF.println (F27_2());
            P_CheckPageF();
            GLB.LPF.println (F27_3());
            P_CheckPageF();
            GLB.LPF.println (F27_4());
            P_CheckPageF();
            GLB.LPF.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F27_1());
            P_CheckPageG();
            GLB.LPG.println (F27_2());
            P_CheckPageG();
            GLB.LPG.println (F27_3());
            P_CheckPageG();
            GLB.LPG.println (F27_4());
            P_CheckPageG();
            GLB.LPG.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F27_1());
            P_CheckPageH();
            GLB.LPH.println (F27_2());
            P_CheckPageH();
            GLB.LPH.println (F27_3());
            P_CheckPageH();
            GLB.LPH.println (F27_4());
            P_CheckPageH();
            GLB.LPH.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F27_1());
            P_CheckPageI();
            GLB.LPI.println (F27_2());
            P_CheckPageI();
            GLB.LPI.println (F27_3());
            P_CheckPageI();
            GLB.LPI.println (F27_4());
            P_CheckPageI();
            GLB.LPI.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F27_1());
            P_CheckPageJ();
            GLB.LPJ.println (F27_2());
            P_CheckPageJ();
            GLB.LPJ.println (F27_3());
            P_CheckPageJ();
            GLB.LPJ.println (F27_4());
            P_CheckPageJ();
            GLB.LPJ.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F27_1());
            P_CheckPageL();
            GLB.LPL.println (F27_2());
            P_CheckPageL();
            GLB.LPL.println (F27_3());
            P_CheckPageL();
            GLB.LPL.println (F27_4());
            P_CheckPageL();
            GLB.LPL.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F27_1());
            P_CheckPageM();
            GLB.LPM.println (F27_2());
            P_CheckPageM();
            GLB.LPM.println (F27_3());
            P_CheckPageM();
            GLB.LPM.println (F27_4());
            P_CheckPageM();
            GLB.LPM.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F27_1());
            P_CheckPageN();
            GLB.LPN.println (F27_2());
            P_CheckPageN();
            GLB.LPN.println (F27_3());
            P_CheckPageN();
            GLB.LPN.println (F27_4());
            P_CheckPageN();
            GLB.LPN.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F27_1());
            P_CheckPageO();
            GLB.LPO.println (F27_2());
            P_CheckPageO();
            GLB.LPO.println (F27_3());
            P_CheckPageO();
            GLB.LPO.println (F27_4());
            P_CheckPageO();
            GLB.LPO.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F27_1());
            P_CheckPageP();
            GLB.LPP.println (F27_2());
            P_CheckPageP();
            GLB.LPP.println (F27_3());
            P_CheckPageP();
            GLB.LPP.println (F27_4());
            P_CheckPageP();
            GLB.LPP.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F27_1());
            P_CheckPageQ();
            GLB.LPQ.println (F27_2());
            P_CheckPageQ();
            GLB.LPQ.println (F27_3());
            P_CheckPageQ();
            GLB.LPQ.println (F27_4());
            P_CheckPageQ();
            GLB.LPQ.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F27_1());
            P_CheckPageR();
            GLB.LPR.println (F27_2());
            P_CheckPageR();
            GLB.LPR.println (F27_3());
            P_CheckPageR();
            GLB.LPR.println (F27_4());
            P_CheckPageR();
            GLB.LPR.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F27_1());
            P_CheckPageS();
            GLB.LPS.println (F27_2());
            P_CheckPageS();
            GLB.LPS.println (F27_3());
            P_CheckPageS();
            GLB.LPS.println (F27_4());
            P_CheckPageS();
            GLB.LPS.println (F27_5());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F27_1());
            P_CheckPageZ();
            GLB.LPZ.println (F27_2());
            P_CheckPageZ();
            GLB.LPZ.println (F27_3());
            P_CheckPageZ();
            GLB.LPZ.println (F27_4());
            P_CheckPageZ();
            GLB.LPZ.println (F27_5());
        }
    F27_RLDTFINALX = fix("", 10);
    F27_RLDTINICIO = fix("", 10);
    F27_RLDTSISTEM = 0;
    F27_RLNMABREMP = fix("", 16);
    F27_RLNRPAGINA = 0;
    F27_RLNRSOLICI = 0;
    F27_RLTHHHMMED = fix("", 5);
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_27");

     }
 }
private void F_28()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F28_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F28_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F28_1());
        }
    F28_RLCDCLAFIS = 0;
    F28_RLCDCORPRO = 0;
    F28_RLCDPRODUT = 0;
    F28_RLDSPRODUT = fix("", 30);
    F28_RLNRNOTAFI = 0;
    F28_RLVLBASICM = 0;
    F28_RLVLICMPRO = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_28");

     }
 }
private void F_29()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F29_1());
            P_CheckPage();
            GLB.LP.println(F29_2());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F29_1());
            P_CheckPageB();
            GLB.LPB.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F29_1());
            P_CheckPageC();
            GLB.LPC.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F29_1());
            P_CheckPageD();
            GLB.LPD.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F29_1());
            P_CheckPageE();
            GLB.LPE.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F29_1());
            P_CheckPageF();
            GLB.LPF.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F29_1());
            P_CheckPageG();
            GLB.LPG.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F29_1());
            P_CheckPageH();
            GLB.LPH.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F29_1());
            P_CheckPageI();
            GLB.LPI.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F29_1());
            P_CheckPageJ();
            GLB.LPJ.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F29_1());
            P_CheckPageL();
            GLB.LPL.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F29_1());
            P_CheckPageM();
            GLB.LPM.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F29_1());
            P_CheckPageN();
            GLB.LPN.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F29_1());
            P_CheckPageO();
            GLB.LPO.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F29_1());
            P_CheckPageP();
            GLB.LPP.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F29_1());
            P_CheckPageQ();
            GLB.LPQ.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F29_1());
            P_CheckPageR();
            GLB.LPR.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F29_1());
            P_CheckPageS();
            GLB.LPS.println (F29_2());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F29_1());
            P_CheckPageZ();
            GLB.LPZ.println (F29_2());
        }
    F29_RLVLBASICM = 0;
    F29_RLVLICMPRO = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_29");

     }
 }
private void F_31()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_31");

     }
 }
private void F_36()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F36_1());
            P_CheckPage();
            GLB.LP.println(F36_2());
            P_CheckPage();
            GLB.LP.println(F36_3());
            P_CheckPage();
            GLB.LP.println(F36_4());
            P_CheckPage();
            GLB.LP.println(F36_5());
            P_CheckPage();
            GLB.LP.println(F36_6());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F36_1());
            P_CheckPageB();
            GLB.LPB.println (F36_2());
            P_CheckPageB();
            GLB.LPB.println (F36_3());
            P_CheckPageB();
            GLB.LPB.println (F36_4());
            P_CheckPageB();
            GLB.LPB.println (F36_5());
            P_CheckPageB();
            GLB.LPB.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F36_1());
            P_CheckPageC();
            GLB.LPC.println (F36_2());
            P_CheckPageC();
            GLB.LPC.println (F36_3());
            P_CheckPageC();
            GLB.LPC.println (F36_4());
            P_CheckPageC();
            GLB.LPC.println (F36_5());
            P_CheckPageC();
            GLB.LPC.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F36_1());
            P_CheckPageD();
            GLB.LPD.println (F36_2());
            P_CheckPageD();
            GLB.LPD.println (F36_3());
            P_CheckPageD();
            GLB.LPD.println (F36_4());
            P_CheckPageD();
            GLB.LPD.println (F36_5());
            P_CheckPageD();
            GLB.LPD.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F36_1());
            P_CheckPageE();
            GLB.LPE.println (F36_2());
            P_CheckPageE();
            GLB.LPE.println (F36_3());
            P_CheckPageE();
            GLB.LPE.println (F36_4());
            P_CheckPageE();
            GLB.LPE.println (F36_5());
            P_CheckPageE();
            GLB.LPE.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F36_1());
            P_CheckPageF();
            GLB.LPF.println (F36_2());
            P_CheckPageF();
            GLB.LPF.println (F36_3());
            P_CheckPageF();
            GLB.LPF.println (F36_4());
            P_CheckPageF();
            GLB.LPF.println (F36_5());
            P_CheckPageF();
            GLB.LPF.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F36_1());
            P_CheckPageG();
            GLB.LPG.println (F36_2());
            P_CheckPageG();
            GLB.LPG.println (F36_3());
            P_CheckPageG();
            GLB.LPG.println (F36_4());
            P_CheckPageG();
            GLB.LPG.println (F36_5());
            P_CheckPageG();
            GLB.LPG.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F36_1());
            P_CheckPageH();
            GLB.LPH.println (F36_2());
            P_CheckPageH();
            GLB.LPH.println (F36_3());
            P_CheckPageH();
            GLB.LPH.println (F36_4());
            P_CheckPageH();
            GLB.LPH.println (F36_5());
            P_CheckPageH();
            GLB.LPH.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F36_1());
            P_CheckPageI();
            GLB.LPI.println (F36_2());
            P_CheckPageI();
            GLB.LPI.println (F36_3());
            P_CheckPageI();
            GLB.LPI.println (F36_4());
            P_CheckPageI();
            GLB.LPI.println (F36_5());
            P_CheckPageI();
            GLB.LPI.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F36_1());
            P_CheckPageJ();
            GLB.LPJ.println (F36_2());
            P_CheckPageJ();
            GLB.LPJ.println (F36_3());
            P_CheckPageJ();
            GLB.LPJ.println (F36_4());
            P_CheckPageJ();
            GLB.LPJ.println (F36_5());
            P_CheckPageJ();
            GLB.LPJ.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F36_1());
            P_CheckPageL();
            GLB.LPL.println (F36_2());
            P_CheckPageL();
            GLB.LPL.println (F36_3());
            P_CheckPageL();
            GLB.LPL.println (F36_4());
            P_CheckPageL();
            GLB.LPL.println (F36_5());
            P_CheckPageL();
            GLB.LPL.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F36_1());
            P_CheckPageM();
            GLB.LPM.println (F36_2());
            P_CheckPageM();
            GLB.LPM.println (F36_3());
            P_CheckPageM();
            GLB.LPM.println (F36_4());
            P_CheckPageM();
            GLB.LPM.println (F36_5());
            P_CheckPageM();
            GLB.LPM.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F36_1());
            P_CheckPageN();
            GLB.LPN.println (F36_2());
            P_CheckPageN();
            GLB.LPN.println (F36_3());
            P_CheckPageN();
            GLB.LPN.println (F36_4());
            P_CheckPageN();
            GLB.LPN.println (F36_5());
            P_CheckPageN();
            GLB.LPN.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F36_1());
            P_CheckPageO();
            GLB.LPO.println (F36_2());
            P_CheckPageO();
            GLB.LPO.println (F36_3());
            P_CheckPageO();
            GLB.LPO.println (F36_4());
            P_CheckPageO();
            GLB.LPO.println (F36_5());
            P_CheckPageO();
            GLB.LPO.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F36_1());
            P_CheckPageP();
            GLB.LPP.println (F36_2());
            P_CheckPageP();
            GLB.LPP.println (F36_3());
            P_CheckPageP();
            GLB.LPP.println (F36_4());
            P_CheckPageP();
            GLB.LPP.println (F36_5());
            P_CheckPageP();
            GLB.LPP.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F36_1());
            P_CheckPageQ();
            GLB.LPQ.println (F36_2());
            P_CheckPageQ();
            GLB.LPQ.println (F36_3());
            P_CheckPageQ();
            GLB.LPQ.println (F36_4());
            P_CheckPageQ();
            GLB.LPQ.println (F36_5());
            P_CheckPageQ();
            GLB.LPQ.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F36_1());
            P_CheckPageR();
            GLB.LPR.println (F36_2());
            P_CheckPageR();
            GLB.LPR.println (F36_3());
            P_CheckPageR();
            GLB.LPR.println (F36_4());
            P_CheckPageR();
            GLB.LPR.println (F36_5());
            P_CheckPageR();
            GLB.LPR.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F36_1());
            P_CheckPageS();
            GLB.LPS.println (F36_2());
            P_CheckPageS();
            GLB.LPS.println (F36_3());
            P_CheckPageS();
            GLB.LPS.println (F36_4());
            P_CheckPageS();
            GLB.LPS.println (F36_5());
            P_CheckPageS();
            GLB.LPS.println (F36_6());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F36_1());
            P_CheckPageZ();
            GLB.LPZ.println (F36_2());
            P_CheckPageZ();
            GLB.LPZ.println (F36_3());
            P_CheckPageZ();
            GLB.LPZ.println (F36_4());
            P_CheckPageZ();
            GLB.LPZ.println (F36_5());
            P_CheckPageZ();
            GLB.LPZ.println (F36_6());
        }
    F36_LABEL1 = fix("", 1);
    F36_RLDTCABECA = 0;
    F36_RLDTFINALX = fix("", 10);
    F36_RLDTINICIO = fix("", 10);
    F36_RLHMCABECA = fix("", 5);
    F36_RLNMABREMP = fix("", 16);
    F36_RLNRPAGINA = 0;
    F36_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_36");

     }
 }
private void F_37()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F37_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F37_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F37_1());
        }
    F37_RLCDNATOGR = fix("", 7);
    F37_RLCDUFMUNI = fix("", 2);
    F37_RLVLBASSTR = 0;
    F37_RLVLICMSTR = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_37");

     }
 }
private void F_38()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F38_1());
            P_CheckPage();
            GLB.LP.println(F38_2());
            P_CheckPage();
            GLB.LP.println(F38_3());
            P_CheckPage();
            GLB.LP.println(F38_4());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F38_1());
            P_CheckPageB();
            GLB.LPB.println (F38_2());
            P_CheckPageB();
            GLB.LPB.println (F38_3());
            P_CheckPageB();
            GLB.LPB.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F38_1());
            P_CheckPageC();
            GLB.LPC.println (F38_2());
            P_CheckPageC();
            GLB.LPC.println (F38_3());
            P_CheckPageC();
            GLB.LPC.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F38_1());
            P_CheckPageD();
            GLB.LPD.println (F38_2());
            P_CheckPageD();
            GLB.LPD.println (F38_3());
            P_CheckPageD();
            GLB.LPD.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F38_1());
            P_CheckPageE();
            GLB.LPE.println (F38_2());
            P_CheckPageE();
            GLB.LPE.println (F38_3());
            P_CheckPageE();
            GLB.LPE.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F38_1());
            P_CheckPageF();
            GLB.LPF.println (F38_2());
            P_CheckPageF();
            GLB.LPF.println (F38_3());
            P_CheckPageF();
            GLB.LPF.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F38_1());
            P_CheckPageG();
            GLB.LPG.println (F38_2());
            P_CheckPageG();
            GLB.LPG.println (F38_3());
            P_CheckPageG();
            GLB.LPG.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F38_1());
            P_CheckPageH();
            GLB.LPH.println (F38_2());
            P_CheckPageH();
            GLB.LPH.println (F38_3());
            P_CheckPageH();
            GLB.LPH.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F38_1());
            P_CheckPageI();
            GLB.LPI.println (F38_2());
            P_CheckPageI();
            GLB.LPI.println (F38_3());
            P_CheckPageI();
            GLB.LPI.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F38_1());
            P_CheckPageJ();
            GLB.LPJ.println (F38_2());
            P_CheckPageJ();
            GLB.LPJ.println (F38_3());
            P_CheckPageJ();
            GLB.LPJ.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F38_1());
            P_CheckPageL();
            GLB.LPL.println (F38_2());
            P_CheckPageL();
            GLB.LPL.println (F38_3());
            P_CheckPageL();
            GLB.LPL.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F38_1());
            P_CheckPageM();
            GLB.LPM.println (F38_2());
            P_CheckPageM();
            GLB.LPM.println (F38_3());
            P_CheckPageM();
            GLB.LPM.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F38_1());
            P_CheckPageN();
            GLB.LPN.println (F38_2());
            P_CheckPageN();
            GLB.LPN.println (F38_3());
            P_CheckPageN();
            GLB.LPN.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F38_1());
            P_CheckPageO();
            GLB.LPO.println (F38_2());
            P_CheckPageO();
            GLB.LPO.println (F38_3());
            P_CheckPageO();
            GLB.LPO.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F38_1());
            P_CheckPageP();
            GLB.LPP.println (F38_2());
            P_CheckPageP();
            GLB.LPP.println (F38_3());
            P_CheckPageP();
            GLB.LPP.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F38_1());
            P_CheckPageQ();
            GLB.LPQ.println (F38_2());
            P_CheckPageQ();
            GLB.LPQ.println (F38_3());
            P_CheckPageQ();
            GLB.LPQ.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F38_1());
            P_CheckPageR();
            GLB.LPR.println (F38_2());
            P_CheckPageR();
            GLB.LPR.println (F38_3());
            P_CheckPageR();
            GLB.LPR.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F38_1());
            P_CheckPageS();
            GLB.LPS.println (F38_2());
            P_CheckPageS();
            GLB.LPS.println (F38_3());
            P_CheckPageS();
            GLB.LPS.println (F38_4());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F38_1());
            P_CheckPageZ();
            GLB.LPZ.println (F38_2());
            P_CheckPageZ();
            GLB.LPZ.println (F38_3());
            P_CheckPageZ();
            GLB.LPZ.println (F38_4());
        }
    F38_LABEL1 = fix("", 1);
    F38_RLCDUFMUNI = fix("", 2);
    F38_RLVLBASSTR = 0;
    F38_RLVLICMSTR = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_38");

     }
 }
private void F_41()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F41_1());
            P_CheckPage();
            GLB.LP.println(F41_2());
            P_CheckPage();
            GLB.LP.println(F41_3());
            P_CheckPage();
            GLB.LP.println(F41_4());
            P_CheckPage();
            GLB.LP.println(F41_5());
            P_CheckPage();
            GLB.LP.println(F41_6());
            P_CheckPage();
            GLB.LP.println(F41_7());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F41_1());
            P_CheckPageB();
            GLB.LPB.println (F41_2());
            P_CheckPageB();
            GLB.LPB.println (F41_3());
            P_CheckPageB();
            GLB.LPB.println (F41_4());
            P_CheckPageB();
            GLB.LPB.println (F41_5());
            P_CheckPageB();
            GLB.LPB.println (F41_6());
            P_CheckPageB();
            GLB.LPB.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F41_1());
            P_CheckPageC();
            GLB.LPC.println (F41_2());
            P_CheckPageC();
            GLB.LPC.println (F41_3());
            P_CheckPageC();
            GLB.LPC.println (F41_4());
            P_CheckPageC();
            GLB.LPC.println (F41_5());
            P_CheckPageC();
            GLB.LPC.println (F41_6());
            P_CheckPageC();
            GLB.LPC.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F41_1());
            P_CheckPageD();
            GLB.LPD.println (F41_2());
            P_CheckPageD();
            GLB.LPD.println (F41_3());
            P_CheckPageD();
            GLB.LPD.println (F41_4());
            P_CheckPageD();
            GLB.LPD.println (F41_5());
            P_CheckPageD();
            GLB.LPD.println (F41_6());
            P_CheckPageD();
            GLB.LPD.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F41_1());
            P_CheckPageE();
            GLB.LPE.println (F41_2());
            P_CheckPageE();
            GLB.LPE.println (F41_3());
            P_CheckPageE();
            GLB.LPE.println (F41_4());
            P_CheckPageE();
            GLB.LPE.println (F41_5());
            P_CheckPageE();
            GLB.LPE.println (F41_6());
            P_CheckPageE();
            GLB.LPE.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F41_1());
            P_CheckPageF();
            GLB.LPF.println (F41_2());
            P_CheckPageF();
            GLB.LPF.println (F41_3());
            P_CheckPageF();
            GLB.LPF.println (F41_4());
            P_CheckPageF();
            GLB.LPF.println (F41_5());
            P_CheckPageF();
            GLB.LPF.println (F41_6());
            P_CheckPageF();
            GLB.LPF.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F41_1());
            P_CheckPageG();
            GLB.LPG.println (F41_2());
            P_CheckPageG();
            GLB.LPG.println (F41_3());
            P_CheckPageG();
            GLB.LPG.println (F41_4());
            P_CheckPageG();
            GLB.LPG.println (F41_5());
            P_CheckPageG();
            GLB.LPG.println (F41_6());
            P_CheckPageG();
            GLB.LPG.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F41_1());
            P_CheckPageH();
            GLB.LPH.println (F41_2());
            P_CheckPageH();
            GLB.LPH.println (F41_3());
            P_CheckPageH();
            GLB.LPH.println (F41_4());
            P_CheckPageH();
            GLB.LPH.println (F41_5());
            P_CheckPageH();
            GLB.LPH.println (F41_6());
            P_CheckPageH();
            GLB.LPH.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F41_1());
            P_CheckPageI();
            GLB.LPI.println (F41_2());
            P_CheckPageI();
            GLB.LPI.println (F41_3());
            P_CheckPageI();
            GLB.LPI.println (F41_4());
            P_CheckPageI();
            GLB.LPI.println (F41_5());
            P_CheckPageI();
            GLB.LPI.println (F41_6());
            P_CheckPageI();
            GLB.LPI.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F41_1());
            P_CheckPageJ();
            GLB.LPJ.println (F41_2());
            P_CheckPageJ();
            GLB.LPJ.println (F41_3());
            P_CheckPageJ();
            GLB.LPJ.println (F41_4());
            P_CheckPageJ();
            GLB.LPJ.println (F41_5());
            P_CheckPageJ();
            GLB.LPJ.println (F41_6());
            P_CheckPageJ();
            GLB.LPJ.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F41_1());
            P_CheckPageL();
            GLB.LPL.println (F41_2());
            P_CheckPageL();
            GLB.LPL.println (F41_3());
            P_CheckPageL();
            GLB.LPL.println (F41_4());
            P_CheckPageL();
            GLB.LPL.println (F41_5());
            P_CheckPageL();
            GLB.LPL.println (F41_6());
            P_CheckPageL();
            GLB.LPL.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F41_1());
            P_CheckPageM();
            GLB.LPM.println (F41_2());
            P_CheckPageM();
            GLB.LPM.println (F41_3());
            P_CheckPageM();
            GLB.LPM.println (F41_4());
            P_CheckPageM();
            GLB.LPM.println (F41_5());
            P_CheckPageM();
            GLB.LPM.println (F41_6());
            P_CheckPageM();
            GLB.LPM.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F41_1());
            P_CheckPageN();
            GLB.LPN.println (F41_2());
            P_CheckPageN();
            GLB.LPN.println (F41_3());
            P_CheckPageN();
            GLB.LPN.println (F41_4());
            P_CheckPageN();
            GLB.LPN.println (F41_5());
            P_CheckPageN();
            GLB.LPN.println (F41_6());
            P_CheckPageN();
            GLB.LPN.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F41_1());
            P_CheckPageO();
            GLB.LPO.println (F41_2());
            P_CheckPageO();
            GLB.LPO.println (F41_3());
            P_CheckPageO();
            GLB.LPO.println (F41_4());
            P_CheckPageO();
            GLB.LPO.println (F41_5());
            P_CheckPageO();
            GLB.LPO.println (F41_6());
            P_CheckPageO();
            GLB.LPO.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F41_1());
            P_CheckPageP();
            GLB.LPP.println (F41_2());
            P_CheckPageP();
            GLB.LPP.println (F41_3());
            P_CheckPageP();
            GLB.LPP.println (F41_4());
            P_CheckPageP();
            GLB.LPP.println (F41_5());
            P_CheckPageP();
            GLB.LPP.println (F41_6());
            P_CheckPageP();
            GLB.LPP.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F41_1());
            P_CheckPageQ();
            GLB.LPQ.println (F41_2());
            P_CheckPageQ();
            GLB.LPQ.println (F41_3());
            P_CheckPageQ();
            GLB.LPQ.println (F41_4());
            P_CheckPageQ();
            GLB.LPQ.println (F41_5());
            P_CheckPageQ();
            GLB.LPQ.println (F41_6());
            P_CheckPageQ();
            GLB.LPQ.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F41_1());
            P_CheckPageR();
            GLB.LPR.println (F41_2());
            P_CheckPageR();
            GLB.LPR.println (F41_3());
            P_CheckPageR();
            GLB.LPR.println (F41_4());
            P_CheckPageR();
            GLB.LPR.println (F41_5());
            P_CheckPageR();
            GLB.LPR.println (F41_6());
            P_CheckPageR();
            GLB.LPR.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F41_1());
            P_CheckPageS();
            GLB.LPS.println (F41_2());
            P_CheckPageS();
            GLB.LPS.println (F41_3());
            P_CheckPageS();
            GLB.LPS.println (F41_4());
            P_CheckPageS();
            GLB.LPS.println (F41_5());
            P_CheckPageS();
            GLB.LPS.println (F41_6());
            P_CheckPageS();
            GLB.LPS.println (F41_7());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F41_1());
            P_CheckPageZ();
            GLB.LPZ.println (F41_2());
            P_CheckPageZ();
            GLB.LPZ.println (F41_3());
            P_CheckPageZ();
            GLB.LPZ.println (F41_4());
            P_CheckPageZ();
            GLB.LPZ.println (F41_5());
            P_CheckPageZ();
            GLB.LPZ.println (F41_6());
            P_CheckPageZ();
            GLB.LPZ.println (F41_7());
        }
    F41_LABEL1 = fix("", 1);
    F41_RLDSCONDEF = fix("", 17);
    F41_RLDTCABECA = 0;
    F41_RLDTFINALX = fix("", 10);
    F41_RLDTINICIO = fix("", 10);
    F41_RLHMCABECA = fix("", 5);
    F41_RLNMABREMP = fix("", 16);
    F41_RLNRPAGINA = 0;
    F41_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_41");

     }
 }
private void F_42()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F42_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F42_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F42_1());
        }
    F42_RLCDAPBICM = 0;
    F42_RLCDAPCONT = 0;
    F42_RLCDAPNICM = 0;
    F42_RLCDAPVICM = 0;
    F42_RLCDNATOGR = fix("", 7);
    F42_RLINORIGEM = fix("", 1);
    F42_RLVLAPOICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_42");

     }
 }
private void F_43()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F43_1());
            P_CheckPage();
            GLB.LP.println(F43_2());
            P_CheckPage();
            GLB.LP.println(F43_3());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F43_1());
            P_CheckPageB();
            GLB.LPB.println (F43_2());
            P_CheckPageB();
            GLB.LPB.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F43_1());
            P_CheckPageC();
            GLB.LPC.println (F43_2());
            P_CheckPageC();
            GLB.LPC.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F43_1());
            P_CheckPageD();
            GLB.LPD.println (F43_2());
            P_CheckPageD();
            GLB.LPD.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F43_1());
            P_CheckPageE();
            GLB.LPE.println (F43_2());
            P_CheckPageE();
            GLB.LPE.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F43_1());
            P_CheckPageF();
            GLB.LPF.println (F43_2());
            P_CheckPageF();
            GLB.LPF.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F43_1());
            P_CheckPageG();
            GLB.LPG.println (F43_2());
            P_CheckPageG();
            GLB.LPG.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F43_1());
            P_CheckPageH();
            GLB.LPH.println (F43_2());
            P_CheckPageH();
            GLB.LPH.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F43_1());
            P_CheckPageI();
            GLB.LPI.println (F43_2());
            P_CheckPageI();
            GLB.LPI.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F43_1());
            P_CheckPageJ();
            GLB.LPJ.println (F43_2());
            P_CheckPageJ();
            GLB.LPJ.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F43_1());
            P_CheckPageL();
            GLB.LPL.println (F43_2());
            P_CheckPageL();
            GLB.LPL.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F43_1());
            P_CheckPageM();
            GLB.LPM.println (F43_2());
            P_CheckPageM();
            GLB.LPM.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F43_1());
            P_CheckPageN();
            GLB.LPN.println (F43_2());
            P_CheckPageN();
            GLB.LPN.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F43_1());
            P_CheckPageO();
            GLB.LPO.println (F43_2());
            P_CheckPageO();
            GLB.LPO.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F43_1());
            P_CheckPageP();
            GLB.LPP.println (F43_2());
            P_CheckPageP();
            GLB.LPP.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F43_1());
            P_CheckPageQ();
            GLB.LPQ.println (F43_2());
            P_CheckPageQ();
            GLB.LPQ.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F43_1());
            P_CheckPageR();
            GLB.LPR.println (F43_2());
            P_CheckPageR();
            GLB.LPR.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F43_1());
            P_CheckPageS();
            GLB.LPS.println (F43_2());
            P_CheckPageS();
            GLB.LPS.println (F43_3());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F43_1());
            P_CheckPageZ();
            GLB.LPZ.println (F43_2());
            P_CheckPageZ();
            GLB.LPZ.println (F43_3());
        }
    F43_LABEL1 = fix("", 1);
    F43_RLVLSABICM = 0;
    F43_RLVLSACONT = 0;
    F43_RLVLSANICM = 0;
    F43_RLVLSAOICM = 0;
    F43_RLVLSAVICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_43");

     }
 }
private void F_44()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F44_1());
            P_CheckPage();
            GLB.LP.println(F44_2());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F44_1());
            P_CheckPageB();
            GLB.LPB.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F44_1());
            P_CheckPageC();
            GLB.LPC.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F44_1());
            P_CheckPageD();
            GLB.LPD.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F44_1());
            P_CheckPageE();
            GLB.LPE.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F44_1());
            P_CheckPageF();
            GLB.LPF.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F44_1());
            P_CheckPageG();
            GLB.LPG.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F44_1());
            P_CheckPageH();
            GLB.LPH.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F44_1());
            P_CheckPageI();
            GLB.LPI.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F44_1());
            P_CheckPageJ();
            GLB.LPJ.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F44_1());
            P_CheckPageL();
            GLB.LPL.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F44_1());
            P_CheckPageM();
            GLB.LPM.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F44_1());
            P_CheckPageN();
            GLB.LPN.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F44_1());
            P_CheckPageO();
            GLB.LPO.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F44_1());
            P_CheckPageP();
            GLB.LPP.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F44_1());
            P_CheckPageQ();
            GLB.LPQ.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F44_1());
            P_CheckPageR();
            GLB.LPR.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F44_1());
            P_CheckPageS();
            GLB.LPS.println (F44_2());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F44_1());
            P_CheckPageZ();
            GLB.LPZ.println (F44_2());
        }
    F44_RLVLTOTCON = 0;
    F44_RLVLTTBICM = 0;
    F44_RLVLTTNICM = 0;
    F44_RLVLTTOICM = 0;
    F44_RLVLTTVICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_44");

     }
 }
private void F_46()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F46_1());
            P_CheckPage();
            GLB.LP.println(F46_2());
            P_CheckPage();
            GLB.LP.println(F46_3());
            P_CheckPage();
            GLB.LP.println(F46_4());
            P_CheckPage();
            GLB.LP.println(F46_5());
            P_CheckPage();
            GLB.LP.println(F46_6());
            P_CheckPage();
            GLB.LP.println(F46_7());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F46_1());
            P_CheckPageB();
            GLB.LPB.println (F46_2());
            P_CheckPageB();
            GLB.LPB.println (F46_3());
            P_CheckPageB();
            GLB.LPB.println (F46_4());
            P_CheckPageB();
            GLB.LPB.println (F46_5());
            P_CheckPageB();
            GLB.LPB.println (F46_6());
            P_CheckPageB();
            GLB.LPB.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F46_1());
            P_CheckPageC();
            GLB.LPC.println (F46_2());
            P_CheckPageC();
            GLB.LPC.println (F46_3());
            P_CheckPageC();
            GLB.LPC.println (F46_4());
            P_CheckPageC();
            GLB.LPC.println (F46_5());
            P_CheckPageC();
            GLB.LPC.println (F46_6());
            P_CheckPageC();
            GLB.LPC.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F46_1());
            P_CheckPageD();
            GLB.LPD.println (F46_2());
            P_CheckPageD();
            GLB.LPD.println (F46_3());
            P_CheckPageD();
            GLB.LPD.println (F46_4());
            P_CheckPageD();
            GLB.LPD.println (F46_5());
            P_CheckPageD();
            GLB.LPD.println (F46_6());
            P_CheckPageD();
            GLB.LPD.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F46_1());
            P_CheckPageE();
            GLB.LPE.println (F46_2());
            P_CheckPageE();
            GLB.LPE.println (F46_3());
            P_CheckPageE();
            GLB.LPE.println (F46_4());
            P_CheckPageE();
            GLB.LPE.println (F46_5());
            P_CheckPageE();
            GLB.LPE.println (F46_6());
            P_CheckPageE();
            GLB.LPE.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F46_1());
            P_CheckPageF();
            GLB.LPF.println (F46_2());
            P_CheckPageF();
            GLB.LPF.println (F46_3());
            P_CheckPageF();
            GLB.LPF.println (F46_4());
            P_CheckPageF();
            GLB.LPF.println (F46_5());
            P_CheckPageF();
            GLB.LPF.println (F46_6());
            P_CheckPageF();
            GLB.LPF.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F46_1());
            P_CheckPageG();
            GLB.LPG.println (F46_2());
            P_CheckPageG();
            GLB.LPG.println (F46_3());
            P_CheckPageG();
            GLB.LPG.println (F46_4());
            P_CheckPageG();
            GLB.LPG.println (F46_5());
            P_CheckPageG();
            GLB.LPG.println (F46_6());
            P_CheckPageG();
            GLB.LPG.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F46_1());
            P_CheckPageH();
            GLB.LPH.println (F46_2());
            P_CheckPageH();
            GLB.LPH.println (F46_3());
            P_CheckPageH();
            GLB.LPH.println (F46_4());
            P_CheckPageH();
            GLB.LPH.println (F46_5());
            P_CheckPageH();
            GLB.LPH.println (F46_6());
            P_CheckPageH();
            GLB.LPH.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F46_1());
            P_CheckPageI();
            GLB.LPI.println (F46_2());
            P_CheckPageI();
            GLB.LPI.println (F46_3());
            P_CheckPageI();
            GLB.LPI.println (F46_4());
            P_CheckPageI();
            GLB.LPI.println (F46_5());
            P_CheckPageI();
            GLB.LPI.println (F46_6());
            P_CheckPageI();
            GLB.LPI.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F46_1());
            P_CheckPageJ();
            GLB.LPJ.println (F46_2());
            P_CheckPageJ();
            GLB.LPJ.println (F46_3());
            P_CheckPageJ();
            GLB.LPJ.println (F46_4());
            P_CheckPageJ();
            GLB.LPJ.println (F46_5());
            P_CheckPageJ();
            GLB.LPJ.println (F46_6());
            P_CheckPageJ();
            GLB.LPJ.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F46_1());
            P_CheckPageL();
            GLB.LPL.println (F46_2());
            P_CheckPageL();
            GLB.LPL.println (F46_3());
            P_CheckPageL();
            GLB.LPL.println (F46_4());
            P_CheckPageL();
            GLB.LPL.println (F46_5());
            P_CheckPageL();
            GLB.LPL.println (F46_6());
            P_CheckPageL();
            GLB.LPL.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F46_1());
            P_CheckPageM();
            GLB.LPM.println (F46_2());
            P_CheckPageM();
            GLB.LPM.println (F46_3());
            P_CheckPageM();
            GLB.LPM.println (F46_4());
            P_CheckPageM();
            GLB.LPM.println (F46_5());
            P_CheckPageM();
            GLB.LPM.println (F46_6());
            P_CheckPageM();
            GLB.LPM.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F46_1());
            P_CheckPageN();
            GLB.LPN.println (F46_2());
            P_CheckPageN();
            GLB.LPN.println (F46_3());
            P_CheckPageN();
            GLB.LPN.println (F46_4());
            P_CheckPageN();
            GLB.LPN.println (F46_5());
            P_CheckPageN();
            GLB.LPN.println (F46_6());
            P_CheckPageN();
            GLB.LPN.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F46_1());
            P_CheckPageO();
            GLB.LPO.println (F46_2());
            P_CheckPageO();
            GLB.LPO.println (F46_3());
            P_CheckPageO();
            GLB.LPO.println (F46_4());
            P_CheckPageO();
            GLB.LPO.println (F46_5());
            P_CheckPageO();
            GLB.LPO.println (F46_6());
            P_CheckPageO();
            GLB.LPO.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F46_1());
            P_CheckPageP();
            GLB.LPP.println (F46_2());
            P_CheckPageP();
            GLB.LPP.println (F46_3());
            P_CheckPageP();
            GLB.LPP.println (F46_4());
            P_CheckPageP();
            GLB.LPP.println (F46_5());
            P_CheckPageP();
            GLB.LPP.println (F46_6());
            P_CheckPageP();
            GLB.LPP.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F46_1());
            P_CheckPageQ();
            GLB.LPQ.println (F46_2());
            P_CheckPageQ();
            GLB.LPQ.println (F46_3());
            P_CheckPageQ();
            GLB.LPQ.println (F46_4());
            P_CheckPageQ();
            GLB.LPQ.println (F46_5());
            P_CheckPageQ();
            GLB.LPQ.println (F46_6());
            P_CheckPageQ();
            GLB.LPQ.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F46_1());
            P_CheckPageR();
            GLB.LPR.println (F46_2());
            P_CheckPageR();
            GLB.LPR.println (F46_3());
            P_CheckPageR();
            GLB.LPR.println (F46_4());
            P_CheckPageR();
            GLB.LPR.println (F46_5());
            P_CheckPageR();
            GLB.LPR.println (F46_6());
            P_CheckPageR();
            GLB.LPR.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F46_1());
            P_CheckPageS();
            GLB.LPS.println (F46_2());
            P_CheckPageS();
            GLB.LPS.println (F46_3());
            P_CheckPageS();
            GLB.LPS.println (F46_4());
            P_CheckPageS();
            GLB.LPS.println (F46_5());
            P_CheckPageS();
            GLB.LPS.println (F46_6());
            P_CheckPageS();
            GLB.LPS.println (F46_7());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F46_1());
            P_CheckPageZ();
            GLB.LPZ.println (F46_2());
            P_CheckPageZ();
            GLB.LPZ.println (F46_3());
            P_CheckPageZ();
            GLB.LPZ.println (F46_4());
            P_CheckPageZ();
            GLB.LPZ.println (F46_5());
            P_CheckPageZ();
            GLB.LPZ.println (F46_6());
            P_CheckPageZ();
            GLB.LPZ.println (F46_7());
        }
    F46_LABEL1 = fix("", 1);
    F46_RLDSCONDEF = fix("", 17);
    F46_RLDTCABECA = 0;
    F46_RLDTFINALX = fix("", 10);
    F46_RLDTINICIO = fix("", 10);
    F46_RLHMCABECA = fix("", 5);
    F46_RLNMABREMP = fix("", 16);
    F46_RLNRPAGINA = 0;
    F46_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_46");

     }
 }
private void F_47()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F47_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F47_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F47_1());
        }
    F47_RLCDNATOGR = fix("", 7);
    F47_RLCDUFMUNI = fix("", 2);
    F47_RLVLBASICM = 0;
    F47_RLVLCONTAB = 0;
    F47_RLVLIMPICM = 0;
    F47_RLVLINTICM = 0;
    F47_RLVLOUTICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_47");

     }
 }
private void F_48()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F48_1());
            P_CheckPage();
            GLB.LP.println(F48_2());
            P_CheckPage();
            GLB.LP.println(F48_3());
            P_CheckPage();
            GLB.LP.println(F48_4());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F48_1());
            P_CheckPageB();
            GLB.LPB.println (F48_2());
            P_CheckPageB();
            GLB.LPB.println (F48_3());
            P_CheckPageB();
            GLB.LPB.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F48_1());
            P_CheckPageC();
            GLB.LPC.println (F48_2());
            P_CheckPageC();
            GLB.LPC.println (F48_3());
            P_CheckPageC();
            GLB.LPC.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F48_1());
            P_CheckPageD();
            GLB.LPD.println (F48_2());
            P_CheckPageD();
            GLB.LPD.println (F48_3());
            P_CheckPageD();
            GLB.LPD.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F48_1());
            P_CheckPageE();
            GLB.LPE.println (F48_2());
            P_CheckPageE();
            GLB.LPE.println (F48_3());
            P_CheckPageE();
            GLB.LPE.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F48_1());
            P_CheckPageF();
            GLB.LPF.println (F48_2());
            P_CheckPageF();
            GLB.LPF.println (F48_3());
            P_CheckPageF();
            GLB.LPF.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F48_1());
            P_CheckPageG();
            GLB.LPG.println (F48_2());
            P_CheckPageG();
            GLB.LPG.println (F48_3());
            P_CheckPageG();
            GLB.LPG.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F48_1());
            P_CheckPageH();
            GLB.LPH.println (F48_2());
            P_CheckPageH();
            GLB.LPH.println (F48_3());
            P_CheckPageH();
            GLB.LPH.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F48_1());
            P_CheckPageI();
            GLB.LPI.println (F48_2());
            P_CheckPageI();
            GLB.LPI.println (F48_3());
            P_CheckPageI();
            GLB.LPI.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F48_1());
            P_CheckPageJ();
            GLB.LPJ.println (F48_2());
            P_CheckPageJ();
            GLB.LPJ.println (F48_3());
            P_CheckPageJ();
            GLB.LPJ.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F48_1());
            P_CheckPageL();
            GLB.LPL.println (F48_2());
            P_CheckPageL();
            GLB.LPL.println (F48_3());
            P_CheckPageL();
            GLB.LPL.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F48_1());
            P_CheckPageM();
            GLB.LPM.println (F48_2());
            P_CheckPageM();
            GLB.LPM.println (F48_3());
            P_CheckPageM();
            GLB.LPM.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F48_1());
            P_CheckPageN();
            GLB.LPN.println (F48_2());
            P_CheckPageN();
            GLB.LPN.println (F48_3());
            P_CheckPageN();
            GLB.LPN.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F48_1());
            P_CheckPageO();
            GLB.LPO.println (F48_2());
            P_CheckPageO();
            GLB.LPO.println (F48_3());
            P_CheckPageO();
            GLB.LPO.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F48_1());
            P_CheckPageP();
            GLB.LPP.println (F48_2());
            P_CheckPageP();
            GLB.LPP.println (F48_3());
            P_CheckPageP();
            GLB.LPP.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F48_1());
            P_CheckPageQ();
            GLB.LPQ.println (F48_2());
            P_CheckPageQ();
            GLB.LPQ.println (F48_3());
            P_CheckPageQ();
            GLB.LPQ.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F48_1());
            P_CheckPageR();
            GLB.LPR.println (F48_2());
            P_CheckPageR();
            GLB.LPR.println (F48_3());
            P_CheckPageR();
            GLB.LPR.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F48_1());
            P_CheckPageS();
            GLB.LPS.println (F48_2());
            P_CheckPageS();
            GLB.LPS.println (F48_3());
            P_CheckPageS();
            GLB.LPS.println (F48_4());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F48_1());
            P_CheckPageZ();
            GLB.LPZ.println (F48_2());
            P_CheckPageZ();
            GLB.LPZ.println (F48_3());
            P_CheckPageZ();
            GLB.LPZ.println (F48_4());
        }
    F48_LABEL1 = fix("", 1);
    F48_RLCDUFMUNI = fix("", 2);
    F48_RLVLBASICM = 0;
    F48_RLVLCONTAB = 0;
    F48_RLVLIMPICM = 0;
    F48_RLVLINTICM = 0;
    F48_RLVLOUTICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_48");

     }
 }
private void F_50()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_50");

     }
 }
private void F_51()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F51_1());
            P_CheckPage();
            GLB.LP.println(F51_2());
            P_CheckPage();
            GLB.LP.println(F51_3());
            P_CheckPage();
            GLB.LP.println(F51_4());
            P_CheckPage();
            GLB.LP.println(F51_5());
            P_CheckPage();
            GLB.LP.println(F51_6());
            P_CheckPage();
            GLB.LP.println(F51_7());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F51_1());
            P_CheckPageB();
            GLB.LPB.println (F51_2());
            P_CheckPageB();
            GLB.LPB.println (F51_3());
            P_CheckPageB();
            GLB.LPB.println (F51_4());
            P_CheckPageB();
            GLB.LPB.println (F51_5());
            P_CheckPageB();
            GLB.LPB.println (F51_6());
            P_CheckPageB();
            GLB.LPB.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F51_1());
            P_CheckPageC();
            GLB.LPC.println (F51_2());
            P_CheckPageC();
            GLB.LPC.println (F51_3());
            P_CheckPageC();
            GLB.LPC.println (F51_4());
            P_CheckPageC();
            GLB.LPC.println (F51_5());
            P_CheckPageC();
            GLB.LPC.println (F51_6());
            P_CheckPageC();
            GLB.LPC.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F51_1());
            P_CheckPageD();
            GLB.LPD.println (F51_2());
            P_CheckPageD();
            GLB.LPD.println (F51_3());
            P_CheckPageD();
            GLB.LPD.println (F51_4());
            P_CheckPageD();
            GLB.LPD.println (F51_5());
            P_CheckPageD();
            GLB.LPD.println (F51_6());
            P_CheckPageD();
            GLB.LPD.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F51_1());
            P_CheckPageE();
            GLB.LPE.println (F51_2());
            P_CheckPageE();
            GLB.LPE.println (F51_3());
            P_CheckPageE();
            GLB.LPE.println (F51_4());
            P_CheckPageE();
            GLB.LPE.println (F51_5());
            P_CheckPageE();
            GLB.LPE.println (F51_6());
            P_CheckPageE();
            GLB.LPE.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F51_1());
            P_CheckPageF();
            GLB.LPF.println (F51_2());
            P_CheckPageF();
            GLB.LPF.println (F51_3());
            P_CheckPageF();
            GLB.LPF.println (F51_4());
            P_CheckPageF();
            GLB.LPF.println (F51_5());
            P_CheckPageF();
            GLB.LPF.println (F51_6());
            P_CheckPageF();
            GLB.LPF.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F51_1());
            P_CheckPageG();
            GLB.LPG.println (F51_2());
            P_CheckPageG();
            GLB.LPG.println (F51_3());
            P_CheckPageG();
            GLB.LPG.println (F51_4());
            P_CheckPageG();
            GLB.LPG.println (F51_5());
            P_CheckPageG();
            GLB.LPG.println (F51_6());
            P_CheckPageG();
            GLB.LPG.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F51_1());
            P_CheckPageH();
            GLB.LPH.println (F51_2());
            P_CheckPageH();
            GLB.LPH.println (F51_3());
            P_CheckPageH();
            GLB.LPH.println (F51_4());
            P_CheckPageH();
            GLB.LPH.println (F51_5());
            P_CheckPageH();
            GLB.LPH.println (F51_6());
            P_CheckPageH();
            GLB.LPH.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F51_1());
            P_CheckPageI();
            GLB.LPI.println (F51_2());
            P_CheckPageI();
            GLB.LPI.println (F51_3());
            P_CheckPageI();
            GLB.LPI.println (F51_4());
            P_CheckPageI();
            GLB.LPI.println (F51_5());
            P_CheckPageI();
            GLB.LPI.println (F51_6());
            P_CheckPageI();
            GLB.LPI.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F51_1());
            P_CheckPageJ();
            GLB.LPJ.println (F51_2());
            P_CheckPageJ();
            GLB.LPJ.println (F51_3());
            P_CheckPageJ();
            GLB.LPJ.println (F51_4());
            P_CheckPageJ();
            GLB.LPJ.println (F51_5());
            P_CheckPageJ();
            GLB.LPJ.println (F51_6());
            P_CheckPageJ();
            GLB.LPJ.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F51_1());
            P_CheckPageL();
            GLB.LPL.println (F51_2());
            P_CheckPageL();
            GLB.LPL.println (F51_3());
            P_CheckPageL();
            GLB.LPL.println (F51_4());
            P_CheckPageL();
            GLB.LPL.println (F51_5());
            P_CheckPageL();
            GLB.LPL.println (F51_6());
            P_CheckPageL();
            GLB.LPL.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F51_1());
            P_CheckPageM();
            GLB.LPM.println (F51_2());
            P_CheckPageM();
            GLB.LPM.println (F51_3());
            P_CheckPageM();
            GLB.LPM.println (F51_4());
            P_CheckPageM();
            GLB.LPM.println (F51_5());
            P_CheckPageM();
            GLB.LPM.println (F51_6());
            P_CheckPageM();
            GLB.LPM.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F51_1());
            P_CheckPageN();
            GLB.LPN.println (F51_2());
            P_CheckPageN();
            GLB.LPN.println (F51_3());
            P_CheckPageN();
            GLB.LPN.println (F51_4());
            P_CheckPageN();
            GLB.LPN.println (F51_5());
            P_CheckPageN();
            GLB.LPN.println (F51_6());
            P_CheckPageN();
            GLB.LPN.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F51_1());
            P_CheckPageO();
            GLB.LPO.println (F51_2());
            P_CheckPageO();
            GLB.LPO.println (F51_3());
            P_CheckPageO();
            GLB.LPO.println (F51_4());
            P_CheckPageO();
            GLB.LPO.println (F51_5());
            P_CheckPageO();
            GLB.LPO.println (F51_6());
            P_CheckPageO();
            GLB.LPO.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F51_1());
            P_CheckPageP();
            GLB.LPP.println (F51_2());
            P_CheckPageP();
            GLB.LPP.println (F51_3());
            P_CheckPageP();
            GLB.LPP.println (F51_4());
            P_CheckPageP();
            GLB.LPP.println (F51_5());
            P_CheckPageP();
            GLB.LPP.println (F51_6());
            P_CheckPageP();
            GLB.LPP.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F51_1());
            P_CheckPageQ();
            GLB.LPQ.println (F51_2());
            P_CheckPageQ();
            GLB.LPQ.println (F51_3());
            P_CheckPageQ();
            GLB.LPQ.println (F51_4());
            P_CheckPageQ();
            GLB.LPQ.println (F51_5());
            P_CheckPageQ();
            GLB.LPQ.println (F51_6());
            P_CheckPageQ();
            GLB.LPQ.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F51_1());
            P_CheckPageR();
            GLB.LPR.println (F51_2());
            P_CheckPageR();
            GLB.LPR.println (F51_3());
            P_CheckPageR();
            GLB.LPR.println (F51_4());
            P_CheckPageR();
            GLB.LPR.println (F51_5());
            P_CheckPageR();
            GLB.LPR.println (F51_6());
            P_CheckPageR();
            GLB.LPR.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F51_1());
            P_CheckPageS();
            GLB.LPS.println (F51_2());
            P_CheckPageS();
            GLB.LPS.println (F51_3());
            P_CheckPageS();
            GLB.LPS.println (F51_4());
            P_CheckPageS();
            GLB.LPS.println (F51_5());
            P_CheckPageS();
            GLB.LPS.println (F51_6());
            P_CheckPageS();
            GLB.LPS.println (F51_7());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F51_1());
            P_CheckPageZ();
            GLB.LPZ.println (F51_2());
            P_CheckPageZ();
            GLB.LPZ.println (F51_3());
            P_CheckPageZ();
            GLB.LPZ.println (F51_4());
            P_CheckPageZ();
            GLB.LPZ.println (F51_5());
            P_CheckPageZ();
            GLB.LPZ.println (F51_6());
            P_CheckPageZ();
            GLB.LPZ.println (F51_7());
        }
    F51_LABEL1 = fix("", 1);
    F51_RLDSCONDEF = fix("", 17);
    F51_RLDTCABECA = 0;
    F51_RLDTFINALX = fix("", 10);
    F51_RLDTINICIO = fix("", 10);
    F51_RLHMCABECA = fix("", 5);
    F51_RLNMABREMP = fix("", 16);
    F51_RLNRPAGINA = 0;
    F51_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_51");

     }
 }
private void F_52()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F52_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F52_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F52_1());
        }
    F52_RLCDNATOGR = fix("", 7);
    F52_RLVLAPBIPI = 0;
    F52_RLVLAPCIPI = 0;
    F52_RLVLAPMIPI = 0;
    F52_RLVLAPOIPI = 0;
    F52_RLVLAPVIPI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_52");

     }
 }
private void F_53()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F53_1());
            P_CheckPage();
            GLB.LP.println(F53_2());
            P_CheckPage();
            GLB.LP.println(F53_3());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F53_1());
            P_CheckPageB();
            GLB.LPB.println (F53_2());
            P_CheckPageB();
            GLB.LPB.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F53_1());
            P_CheckPageC();
            GLB.LPC.println (F53_2());
            P_CheckPageC();
            GLB.LPC.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F53_1());
            P_CheckPageD();
            GLB.LPD.println (F53_2());
            P_CheckPageD();
            GLB.LPD.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F53_1());
            P_CheckPageE();
            GLB.LPE.println (F53_2());
            P_CheckPageE();
            GLB.LPE.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F53_1());
            P_CheckPageF();
            GLB.LPF.println (F53_2());
            P_CheckPageF();
            GLB.LPF.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F53_1());
            P_CheckPageG();
            GLB.LPG.println (F53_2());
            P_CheckPageG();
            GLB.LPG.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F53_1());
            P_CheckPageH();
            GLB.LPH.println (F53_2());
            P_CheckPageH();
            GLB.LPH.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F53_1());
            P_CheckPageI();
            GLB.LPI.println (F53_2());
            P_CheckPageI();
            GLB.LPI.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F53_1());
            P_CheckPageJ();
            GLB.LPJ.println (F53_2());
            P_CheckPageJ();
            GLB.LPJ.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F53_1());
            P_CheckPageL();
            GLB.LPL.println (F53_2());
            P_CheckPageL();
            GLB.LPL.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F53_1());
            P_CheckPageM();
            GLB.LPM.println (F53_2());
            P_CheckPageM();
            GLB.LPM.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F53_1());
            P_CheckPageN();
            GLB.LPN.println (F53_2());
            P_CheckPageN();
            GLB.LPN.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F53_1());
            P_CheckPageO();
            GLB.LPO.println (F53_2());
            P_CheckPageO();
            GLB.LPO.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F53_1());
            P_CheckPageP();
            GLB.LPP.println (F53_2());
            P_CheckPageP();
            GLB.LPP.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F53_1());
            P_CheckPageQ();
            GLB.LPQ.println (F53_2());
            P_CheckPageQ();
            GLB.LPQ.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F53_1());
            P_CheckPageR();
            GLB.LPR.println (F53_2());
            P_CheckPageR();
            GLB.LPR.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F53_1());
            P_CheckPageS();
            GLB.LPS.println (F53_2());
            P_CheckPageS();
            GLB.LPS.println (F53_3());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F53_1());
            P_CheckPageZ();
            GLB.LPZ.println (F53_2());
            P_CheckPageZ();
            GLB.LPZ.println (F53_3());
        }
    F53_LABEL1 = fix("", 1);
    F53_RLVLSABIPI = 0;
    F53_RLVLSACIPI = 0;
    F53_RLVLSANIPI = 0;
    F53_RLVLSAOIPI = 0;
    F53_RLVLSAVIPI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_53");

     }
 }
private void F_54()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F54_1());
            P_CheckPage();
            GLB.LP.println(F54_2());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F54_1());
            P_CheckPageB();
            GLB.LPB.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F54_1());
            P_CheckPageC();
            GLB.LPC.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F54_1());
            P_CheckPageD();
            GLB.LPD.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F54_1());
            P_CheckPageE();
            GLB.LPE.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F54_1());
            P_CheckPageF();
            GLB.LPF.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F54_1());
            P_CheckPageG();
            GLB.LPG.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F54_1());
            P_CheckPageH();
            GLB.LPH.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F54_1());
            P_CheckPageI();
            GLB.LPI.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F54_1());
            P_CheckPageJ();
            GLB.LPJ.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F54_1());
            P_CheckPageL();
            GLB.LPL.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F54_1());
            P_CheckPageM();
            GLB.LPM.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F54_1());
            P_CheckPageN();
            GLB.LPN.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F54_1());
            P_CheckPageO();
            GLB.LPO.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F54_1());
            P_CheckPageP();
            GLB.LPP.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F54_1());
            P_CheckPageQ();
            GLB.LPQ.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F54_1());
            P_CheckPageR();
            GLB.LPR.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F54_1());
            P_CheckPageS();
            GLB.LPS.println (F54_2());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F54_1());
            P_CheckPageZ();
            GLB.LPZ.println (F54_2());
        }
    F54_RLTOTABIPI = 0;
    F54_RLTOTACIPI = 0;
    F54_RLTOTANIPI = 0;
    F54_RLTOTAOIPI = 0;
    F54_RLTOTAVIPI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_54");

     }
 }
private void F_55()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F55_1());
            P_CheckPage();
            GLB.LP.println(F55_2());
            P_CheckPage();
            GLB.LP.println(F55_3());
            P_CheckPage();
            GLB.LP.println(F55_4());
            P_CheckPage();
            GLB.LP.println(F55_5());
            P_CheckPage();
            GLB.LP.println(F55_6());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F55_1());
            P_CheckPageB();
            GLB.LPB.println (F55_2());
            P_CheckPageB();
            GLB.LPB.println (F55_3());
            P_CheckPageB();
            GLB.LPB.println (F55_4());
            P_CheckPageB();
            GLB.LPB.println (F55_5());
            P_CheckPageB();
            GLB.LPB.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F55_1());
            P_CheckPageC();
            GLB.LPC.println (F55_2());
            P_CheckPageC();
            GLB.LPC.println (F55_3());
            P_CheckPageC();
            GLB.LPC.println (F55_4());
            P_CheckPageC();
            GLB.LPC.println (F55_5());
            P_CheckPageC();
            GLB.LPC.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F55_1());
            P_CheckPageD();
            GLB.LPD.println (F55_2());
            P_CheckPageD();
            GLB.LPD.println (F55_3());
            P_CheckPageD();
            GLB.LPD.println (F55_4());
            P_CheckPageD();
            GLB.LPD.println (F55_5());
            P_CheckPageD();
            GLB.LPD.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F55_1());
            P_CheckPageE();
            GLB.LPE.println (F55_2());
            P_CheckPageE();
            GLB.LPE.println (F55_3());
            P_CheckPageE();
            GLB.LPE.println (F55_4());
            P_CheckPageE();
            GLB.LPE.println (F55_5());
            P_CheckPageE();
            GLB.LPE.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F55_1());
            P_CheckPageF();
            GLB.LPF.println (F55_2());
            P_CheckPageF();
            GLB.LPF.println (F55_3());
            P_CheckPageF();
            GLB.LPF.println (F55_4());
            P_CheckPageF();
            GLB.LPF.println (F55_5());
            P_CheckPageF();
            GLB.LPF.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F55_1());
            P_CheckPageG();
            GLB.LPG.println (F55_2());
            P_CheckPageG();
            GLB.LPG.println (F55_3());
            P_CheckPageG();
            GLB.LPG.println (F55_4());
            P_CheckPageG();
            GLB.LPG.println (F55_5());
            P_CheckPageG();
            GLB.LPG.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F55_1());
            P_CheckPageH();
            GLB.LPH.println (F55_2());
            P_CheckPageH();
            GLB.LPH.println (F55_3());
            P_CheckPageH();
            GLB.LPH.println (F55_4());
            P_CheckPageH();
            GLB.LPH.println (F55_5());
            P_CheckPageH();
            GLB.LPH.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F55_1());
            P_CheckPageI();
            GLB.LPI.println (F55_2());
            P_CheckPageI();
            GLB.LPI.println (F55_3());
            P_CheckPageI();
            GLB.LPI.println (F55_4());
            P_CheckPageI();
            GLB.LPI.println (F55_5());
            P_CheckPageI();
            GLB.LPI.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F55_1());
            P_CheckPageJ();
            GLB.LPJ.println (F55_2());
            P_CheckPageJ();
            GLB.LPJ.println (F55_3());
            P_CheckPageJ();
            GLB.LPJ.println (F55_4());
            P_CheckPageJ();
            GLB.LPJ.println (F55_5());
            P_CheckPageJ();
            GLB.LPJ.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F55_1());
            P_CheckPageL();
            GLB.LPL.println (F55_2());
            P_CheckPageL();
            GLB.LPL.println (F55_3());
            P_CheckPageL();
            GLB.LPL.println (F55_4());
            P_CheckPageL();
            GLB.LPL.println (F55_5());
            P_CheckPageL();
            GLB.LPL.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F55_1());
            P_CheckPageM();
            GLB.LPM.println (F55_2());
            P_CheckPageM();
            GLB.LPM.println (F55_3());
            P_CheckPageM();
            GLB.LPM.println (F55_4());
            P_CheckPageM();
            GLB.LPM.println (F55_5());
            P_CheckPageM();
            GLB.LPM.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F55_1());
            P_CheckPageN();
            GLB.LPN.println (F55_2());
            P_CheckPageN();
            GLB.LPN.println (F55_3());
            P_CheckPageN();
            GLB.LPN.println (F55_4());
            P_CheckPageN();
            GLB.LPN.println (F55_5());
            P_CheckPageN();
            GLB.LPN.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F55_1());
            P_CheckPageO();
            GLB.LPO.println (F55_2());
            P_CheckPageO();
            GLB.LPO.println (F55_3());
            P_CheckPageO();
            GLB.LPO.println (F55_4());
            P_CheckPageO();
            GLB.LPO.println (F55_5());
            P_CheckPageO();
            GLB.LPO.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F55_1());
            P_CheckPageP();
            GLB.LPP.println (F55_2());
            P_CheckPageP();
            GLB.LPP.println (F55_3());
            P_CheckPageP();
            GLB.LPP.println (F55_4());
            P_CheckPageP();
            GLB.LPP.println (F55_5());
            P_CheckPageP();
            GLB.LPP.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F55_1());
            P_CheckPageQ();
            GLB.LPQ.println (F55_2());
            P_CheckPageQ();
            GLB.LPQ.println (F55_3());
            P_CheckPageQ();
            GLB.LPQ.println (F55_4());
            P_CheckPageQ();
            GLB.LPQ.println (F55_5());
            P_CheckPageQ();
            GLB.LPQ.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F55_1());
            P_CheckPageR();
            GLB.LPR.println (F55_2());
            P_CheckPageR();
            GLB.LPR.println (F55_3());
            P_CheckPageR();
            GLB.LPR.println (F55_4());
            P_CheckPageR();
            GLB.LPR.println (F55_5());
            P_CheckPageR();
            GLB.LPR.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F55_1());
            P_CheckPageS();
            GLB.LPS.println (F55_2());
            P_CheckPageS();
            GLB.LPS.println (F55_3());
            P_CheckPageS();
            GLB.LPS.println (F55_4());
            P_CheckPageS();
            GLB.LPS.println (F55_5());
            P_CheckPageS();
            GLB.LPS.println (F55_6());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F55_1());
            P_CheckPageZ();
            GLB.LPZ.println (F55_2());
            P_CheckPageZ();
            GLB.LPZ.println (F55_3());
            P_CheckPageZ();
            GLB.LPZ.println (F55_4());
            P_CheckPageZ();
            GLB.LPZ.println (F55_5());
            P_CheckPageZ();
            GLB.LPZ.println (F55_6());
        }
    F55_LABEL1 = fix("", 1);
    F55_RLCDDEPNFI = 0;
    F55_RLDSDEPNFI = fix("", 20);
    F55_RLDTFINALX = fix("", 10);
    F55_RLDTINICIO = fix("", 10);
    F55_RLDTSOLICI = 0;
    F55_RLHMCABECA = fix("", 5);
    F55_RLNMABREMP = fix("", 16);
    F55_RLNRPAGINA = 0;
    F55_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_55");

     }
 }
private void F_56()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F56_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F56_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F56_1());
        }
    F56_LABEL2 = fix("", 3);
    F56_RLCDCLIDEP = 0;
    F56_RLCDTIPDEP = 0;
    F56_RLCDUSUARI = fix("", 25);
    F56_RLDIEMIDEP = fix("", 10);
    F56_RLNMCLIENT = fix("", 60);
    F56_RLNRNOTDEP = 0;
    F56_RLVLTOICMN = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_56");

     }
 }
private void F_57()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_57");

     }
 }
private void F_60()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_60");

     }
 }
private void F_62()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_62");

     }
 }
private void F_63()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_63");

     }
 }
private void F_64()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F64_1());
            P_CheckPage();
            GLB.LP.println(F64_2());
            P_CheckPage();
            GLB.LP.println(F64_3());
            P_CheckPage();
            GLB.LP.println(F64_4());
            P_CheckPage();
            GLB.LP.println(F64_5());
            P_CheckPage();
            GLB.LP.println(F64_6());
            P_CheckPage();
            GLB.LP.println(F64_7());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F64_1());
            P_CheckPageB();
            GLB.LPB.println (F64_2());
            P_CheckPageB();
            GLB.LPB.println (F64_3());
            P_CheckPageB();
            GLB.LPB.println (F64_4());
            P_CheckPageB();
            GLB.LPB.println (F64_5());
            P_CheckPageB();
            GLB.LPB.println (F64_6());
            P_CheckPageB();
            GLB.LPB.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F64_1());
            P_CheckPageC();
            GLB.LPC.println (F64_2());
            P_CheckPageC();
            GLB.LPC.println (F64_3());
            P_CheckPageC();
            GLB.LPC.println (F64_4());
            P_CheckPageC();
            GLB.LPC.println (F64_5());
            P_CheckPageC();
            GLB.LPC.println (F64_6());
            P_CheckPageC();
            GLB.LPC.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F64_1());
            P_CheckPageD();
            GLB.LPD.println (F64_2());
            P_CheckPageD();
            GLB.LPD.println (F64_3());
            P_CheckPageD();
            GLB.LPD.println (F64_4());
            P_CheckPageD();
            GLB.LPD.println (F64_5());
            P_CheckPageD();
            GLB.LPD.println (F64_6());
            P_CheckPageD();
            GLB.LPD.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F64_1());
            P_CheckPageE();
            GLB.LPE.println (F64_2());
            P_CheckPageE();
            GLB.LPE.println (F64_3());
            P_CheckPageE();
            GLB.LPE.println (F64_4());
            P_CheckPageE();
            GLB.LPE.println (F64_5());
            P_CheckPageE();
            GLB.LPE.println (F64_6());
            P_CheckPageE();
            GLB.LPE.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F64_1());
            P_CheckPageF();
            GLB.LPF.println (F64_2());
            P_CheckPageF();
            GLB.LPF.println (F64_3());
            P_CheckPageF();
            GLB.LPF.println (F64_4());
            P_CheckPageF();
            GLB.LPF.println (F64_5());
            P_CheckPageF();
            GLB.LPF.println (F64_6());
            P_CheckPageF();
            GLB.LPF.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F64_1());
            P_CheckPageG();
            GLB.LPG.println (F64_2());
            P_CheckPageG();
            GLB.LPG.println (F64_3());
            P_CheckPageG();
            GLB.LPG.println (F64_4());
            P_CheckPageG();
            GLB.LPG.println (F64_5());
            P_CheckPageG();
            GLB.LPG.println (F64_6());
            P_CheckPageG();
            GLB.LPG.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F64_1());
            P_CheckPageH();
            GLB.LPH.println (F64_2());
            P_CheckPageH();
            GLB.LPH.println (F64_3());
            P_CheckPageH();
            GLB.LPH.println (F64_4());
            P_CheckPageH();
            GLB.LPH.println (F64_5());
            P_CheckPageH();
            GLB.LPH.println (F64_6());
            P_CheckPageH();
            GLB.LPH.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F64_1());
            P_CheckPageI();
            GLB.LPI.println (F64_2());
            P_CheckPageI();
            GLB.LPI.println (F64_3());
            P_CheckPageI();
            GLB.LPI.println (F64_4());
            P_CheckPageI();
            GLB.LPI.println (F64_5());
            P_CheckPageI();
            GLB.LPI.println (F64_6());
            P_CheckPageI();
            GLB.LPI.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F64_1());
            P_CheckPageJ();
            GLB.LPJ.println (F64_2());
            P_CheckPageJ();
            GLB.LPJ.println (F64_3());
            P_CheckPageJ();
            GLB.LPJ.println (F64_4());
            P_CheckPageJ();
            GLB.LPJ.println (F64_5());
            P_CheckPageJ();
            GLB.LPJ.println (F64_6());
            P_CheckPageJ();
            GLB.LPJ.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F64_1());
            P_CheckPageL();
            GLB.LPL.println (F64_2());
            P_CheckPageL();
            GLB.LPL.println (F64_3());
            P_CheckPageL();
            GLB.LPL.println (F64_4());
            P_CheckPageL();
            GLB.LPL.println (F64_5());
            P_CheckPageL();
            GLB.LPL.println (F64_6());
            P_CheckPageL();
            GLB.LPL.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F64_1());
            P_CheckPageM();
            GLB.LPM.println (F64_2());
            P_CheckPageM();
            GLB.LPM.println (F64_3());
            P_CheckPageM();
            GLB.LPM.println (F64_4());
            P_CheckPageM();
            GLB.LPM.println (F64_5());
            P_CheckPageM();
            GLB.LPM.println (F64_6());
            P_CheckPageM();
            GLB.LPM.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F64_1());
            P_CheckPageN();
            GLB.LPN.println (F64_2());
            P_CheckPageN();
            GLB.LPN.println (F64_3());
            P_CheckPageN();
            GLB.LPN.println (F64_4());
            P_CheckPageN();
            GLB.LPN.println (F64_5());
            P_CheckPageN();
            GLB.LPN.println (F64_6());
            P_CheckPageN();
            GLB.LPN.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F64_1());
            P_CheckPageO();
            GLB.LPO.println (F64_2());
            P_CheckPageO();
            GLB.LPO.println (F64_3());
            P_CheckPageO();
            GLB.LPO.println (F64_4());
            P_CheckPageO();
            GLB.LPO.println (F64_5());
            P_CheckPageO();
            GLB.LPO.println (F64_6());
            P_CheckPageO();
            GLB.LPO.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F64_1());
            P_CheckPageP();
            GLB.LPP.println (F64_2());
            P_CheckPageP();
            GLB.LPP.println (F64_3());
            P_CheckPageP();
            GLB.LPP.println (F64_4());
            P_CheckPageP();
            GLB.LPP.println (F64_5());
            P_CheckPageP();
            GLB.LPP.println (F64_6());
            P_CheckPageP();
            GLB.LPP.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F64_1());
            P_CheckPageQ();
            GLB.LPQ.println (F64_2());
            P_CheckPageQ();
            GLB.LPQ.println (F64_3());
            P_CheckPageQ();
            GLB.LPQ.println (F64_4());
            P_CheckPageQ();
            GLB.LPQ.println (F64_5());
            P_CheckPageQ();
            GLB.LPQ.println (F64_6());
            P_CheckPageQ();
            GLB.LPQ.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F64_1());
            P_CheckPageR();
            GLB.LPR.println (F64_2());
            P_CheckPageR();
            GLB.LPR.println (F64_3());
            P_CheckPageR();
            GLB.LPR.println (F64_4());
            P_CheckPageR();
            GLB.LPR.println (F64_5());
            P_CheckPageR();
            GLB.LPR.println (F64_6());
            P_CheckPageR();
            GLB.LPR.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F64_1());
            P_CheckPageS();
            GLB.LPS.println (F64_2());
            P_CheckPageS();
            GLB.LPS.println (F64_3());
            P_CheckPageS();
            GLB.LPS.println (F64_4());
            P_CheckPageS();
            GLB.LPS.println (F64_5());
            P_CheckPageS();
            GLB.LPS.println (F64_6());
            P_CheckPageS();
            GLB.LPS.println (F64_7());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F64_1());
            P_CheckPageZ();
            GLB.LPZ.println (F64_2());
            P_CheckPageZ();
            GLB.LPZ.println (F64_3());
            P_CheckPageZ();
            GLB.LPZ.println (F64_4());
            P_CheckPageZ();
            GLB.LPZ.println (F64_5());
            P_CheckPageZ();
            GLB.LPZ.println (F64_6());
            P_CheckPageZ();
            GLB.LPZ.println (F64_7());
        }
    F64_LABEL25 = fix("", 1);
    F64_RLDSCONDEF = fix("", 17);
    F64_RLDTCABECA = 0;
    F64_RLDTFINALX = fix("", 10);
    F64_RLDTINICIO = fix("", 10);
    F64_RLHMCABECA = fix("", 5);
    F64_RLNMABREMP = fix("", 16);
    F64_RLNRPAGINA = 0;
    F64_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_64");

     }
 }
private void F_65()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F65_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F65_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F65_1());
        }
    F65_RLCDAPBICM = 0;
    F65_RLCDAPCONT = 0;
    F65_RLCDAPNICM = 0;
    F65_RLCDAPVICM = 0;
    F65_RLCDNATOGR = fix("", 7);
    F65_RLVLAPOICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_65");

     }
 }
private void F_66()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F66_1());
            P_CheckPage();
            GLB.LP.println(F66_2());
            P_CheckPage();
            GLB.LP.println(F66_3());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F66_1());
            P_CheckPageB();
            GLB.LPB.println (F66_2());
            P_CheckPageB();
            GLB.LPB.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F66_1());
            P_CheckPageC();
            GLB.LPC.println (F66_2());
            P_CheckPageC();
            GLB.LPC.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F66_1());
            P_CheckPageD();
            GLB.LPD.println (F66_2());
            P_CheckPageD();
            GLB.LPD.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F66_1());
            P_CheckPageE();
            GLB.LPE.println (F66_2());
            P_CheckPageE();
            GLB.LPE.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F66_1());
            P_CheckPageF();
            GLB.LPF.println (F66_2());
            P_CheckPageF();
            GLB.LPF.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F66_1());
            P_CheckPageG();
            GLB.LPG.println (F66_2());
            P_CheckPageG();
            GLB.LPG.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F66_1());
            P_CheckPageH();
            GLB.LPH.println (F66_2());
            P_CheckPageH();
            GLB.LPH.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F66_1());
            P_CheckPageI();
            GLB.LPI.println (F66_2());
            P_CheckPageI();
            GLB.LPI.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F66_1());
            P_CheckPageJ();
            GLB.LPJ.println (F66_2());
            P_CheckPageJ();
            GLB.LPJ.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F66_1());
            P_CheckPageL();
            GLB.LPL.println (F66_2());
            P_CheckPageL();
            GLB.LPL.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F66_1());
            P_CheckPageM();
            GLB.LPM.println (F66_2());
            P_CheckPageM();
            GLB.LPM.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F66_1());
            P_CheckPageN();
            GLB.LPN.println (F66_2());
            P_CheckPageN();
            GLB.LPN.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F66_1());
            P_CheckPageO();
            GLB.LPO.println (F66_2());
            P_CheckPageO();
            GLB.LPO.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F66_1());
            P_CheckPageP();
            GLB.LPP.println (F66_2());
            P_CheckPageP();
            GLB.LPP.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F66_1());
            P_CheckPageQ();
            GLB.LPQ.println (F66_2());
            P_CheckPageQ();
            GLB.LPQ.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F66_1());
            P_CheckPageR();
            GLB.LPR.println (F66_2());
            P_CheckPageR();
            GLB.LPR.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F66_1());
            P_CheckPageS();
            GLB.LPS.println (F66_2());
            P_CheckPageS();
            GLB.LPS.println (F66_3());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F66_1());
            P_CheckPageZ();
            GLB.LPZ.println (F66_2());
            P_CheckPageZ();
            GLB.LPZ.println (F66_3());
        }
    F66_LABEL1 = fix("", 1);
    F66_RLVLSABICM = 0;
    F66_RLVLSACONT = 0;
    F66_RLVLSANICM = 0;
    F66_RLVLSAOICM = 0;
    F66_RLVLSAVICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_66");

     }
 }
private void F_67()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F67_1());
            P_CheckPage();
            GLB.LP.println(F67_2());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F67_1());
            P_CheckPageB();
            GLB.LPB.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F67_1());
            P_CheckPageC();
            GLB.LPC.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F67_1());
            P_CheckPageD();
            GLB.LPD.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F67_1());
            P_CheckPageE();
            GLB.LPE.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F67_1());
            P_CheckPageF();
            GLB.LPF.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F67_1());
            P_CheckPageG();
            GLB.LPG.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F67_1());
            P_CheckPageH();
            GLB.LPH.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F67_1());
            P_CheckPageI();
            GLB.LPI.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F67_1());
            P_CheckPageJ();
            GLB.LPJ.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F67_1());
            P_CheckPageL();
            GLB.LPL.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F67_1());
            P_CheckPageM();
            GLB.LPM.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F67_1());
            P_CheckPageN();
            GLB.LPN.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F67_1());
            P_CheckPageO();
            GLB.LPO.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F67_1());
            P_CheckPageP();
            GLB.LPP.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F67_1());
            P_CheckPageQ();
            GLB.LPQ.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F67_1());
            P_CheckPageR();
            GLB.LPR.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F67_1());
            P_CheckPageS();
            GLB.LPS.println (F67_2());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F67_1());
            P_CheckPageZ();
            GLB.LPZ.println (F67_2());
        }
    F67_RLVLTOTCON = 0;
    F67_RLVLTTBICM = 0;
    F67_RLVLTTNICM = 0;
    F67_RLVLTTOICM = 0;
    F67_RLVLTTVICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_67");

     }
 }
private void F_69()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_69");

     }
 }
private void F_70()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_70");

     }
 }
private void F_71()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F71_1());
            P_CheckPage();
            GLB.LP.println(F71_2());
            P_CheckPage();
            GLB.LP.println(F71_3());
            P_CheckPage();
            GLB.LP.println(F71_4());
            P_CheckPage();
            GLB.LP.println(F71_5());
            P_CheckPage();
            GLB.LP.println(F71_6());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F71_1());
            P_CheckPageB();
            GLB.LPB.println (F71_2());
            P_CheckPageB();
            GLB.LPB.println (F71_3());
            P_CheckPageB();
            GLB.LPB.println (F71_4());
            P_CheckPageB();
            GLB.LPB.println (F71_5());
            P_CheckPageB();
            GLB.LPB.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F71_1());
            P_CheckPageC();
            GLB.LPC.println (F71_2());
            P_CheckPageC();
            GLB.LPC.println (F71_3());
            P_CheckPageC();
            GLB.LPC.println (F71_4());
            P_CheckPageC();
            GLB.LPC.println (F71_5());
            P_CheckPageC();
            GLB.LPC.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F71_1());
            P_CheckPageD();
            GLB.LPD.println (F71_2());
            P_CheckPageD();
            GLB.LPD.println (F71_3());
            P_CheckPageD();
            GLB.LPD.println (F71_4());
            P_CheckPageD();
            GLB.LPD.println (F71_5());
            P_CheckPageD();
            GLB.LPD.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F71_1());
            P_CheckPageE();
            GLB.LPE.println (F71_2());
            P_CheckPageE();
            GLB.LPE.println (F71_3());
            P_CheckPageE();
            GLB.LPE.println (F71_4());
            P_CheckPageE();
            GLB.LPE.println (F71_5());
            P_CheckPageE();
            GLB.LPE.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F71_1());
            P_CheckPageF();
            GLB.LPF.println (F71_2());
            P_CheckPageF();
            GLB.LPF.println (F71_3());
            P_CheckPageF();
            GLB.LPF.println (F71_4());
            P_CheckPageF();
            GLB.LPF.println (F71_5());
            P_CheckPageF();
            GLB.LPF.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F71_1());
            P_CheckPageG();
            GLB.LPG.println (F71_2());
            P_CheckPageG();
            GLB.LPG.println (F71_3());
            P_CheckPageG();
            GLB.LPG.println (F71_4());
            P_CheckPageG();
            GLB.LPG.println (F71_5());
            P_CheckPageG();
            GLB.LPG.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F71_1());
            P_CheckPageH();
            GLB.LPH.println (F71_2());
            P_CheckPageH();
            GLB.LPH.println (F71_3());
            P_CheckPageH();
            GLB.LPH.println (F71_4());
            P_CheckPageH();
            GLB.LPH.println (F71_5());
            P_CheckPageH();
            GLB.LPH.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F71_1());
            P_CheckPageI();
            GLB.LPI.println (F71_2());
            P_CheckPageI();
            GLB.LPI.println (F71_3());
            P_CheckPageI();
            GLB.LPI.println (F71_4());
            P_CheckPageI();
            GLB.LPI.println (F71_5());
            P_CheckPageI();
            GLB.LPI.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F71_1());
            P_CheckPageJ();
            GLB.LPJ.println (F71_2());
            P_CheckPageJ();
            GLB.LPJ.println (F71_3());
            P_CheckPageJ();
            GLB.LPJ.println (F71_4());
            P_CheckPageJ();
            GLB.LPJ.println (F71_5());
            P_CheckPageJ();
            GLB.LPJ.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F71_1());
            P_CheckPageL();
            GLB.LPL.println (F71_2());
            P_CheckPageL();
            GLB.LPL.println (F71_3());
            P_CheckPageL();
            GLB.LPL.println (F71_4());
            P_CheckPageL();
            GLB.LPL.println (F71_5());
            P_CheckPageL();
            GLB.LPL.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F71_1());
            P_CheckPageM();
            GLB.LPM.println (F71_2());
            P_CheckPageM();
            GLB.LPM.println (F71_3());
            P_CheckPageM();
            GLB.LPM.println (F71_4());
            P_CheckPageM();
            GLB.LPM.println (F71_5());
            P_CheckPageM();
            GLB.LPM.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F71_1());
            P_CheckPageN();
            GLB.LPN.println (F71_2());
            P_CheckPageN();
            GLB.LPN.println (F71_3());
            P_CheckPageN();
            GLB.LPN.println (F71_4());
            P_CheckPageN();
            GLB.LPN.println (F71_5());
            P_CheckPageN();
            GLB.LPN.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F71_1());
            P_CheckPageO();
            GLB.LPO.println (F71_2());
            P_CheckPageO();
            GLB.LPO.println (F71_3());
            P_CheckPageO();
            GLB.LPO.println (F71_4());
            P_CheckPageO();
            GLB.LPO.println (F71_5());
            P_CheckPageO();
            GLB.LPO.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F71_1());
            P_CheckPageP();
            GLB.LPP.println (F71_2());
            P_CheckPageP();
            GLB.LPP.println (F71_3());
            P_CheckPageP();
            GLB.LPP.println (F71_4());
            P_CheckPageP();
            GLB.LPP.println (F71_5());
            P_CheckPageP();
            GLB.LPP.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F71_1());
            P_CheckPageQ();
            GLB.LPQ.println (F71_2());
            P_CheckPageQ();
            GLB.LPQ.println (F71_3());
            P_CheckPageQ();
            GLB.LPQ.println (F71_4());
            P_CheckPageQ();
            GLB.LPQ.println (F71_5());
            P_CheckPageQ();
            GLB.LPQ.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F71_1());
            P_CheckPageR();
            GLB.LPR.println (F71_2());
            P_CheckPageR();
            GLB.LPR.println (F71_3());
            P_CheckPageR();
            GLB.LPR.println (F71_4());
            P_CheckPageR();
            GLB.LPR.println (F71_5());
            P_CheckPageR();
            GLB.LPR.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F71_1());
            P_CheckPageS();
            GLB.LPS.println (F71_2());
            P_CheckPageS();
            GLB.LPS.println (F71_3());
            P_CheckPageS();
            GLB.LPS.println (F71_4());
            P_CheckPageS();
            GLB.LPS.println (F71_5());
            P_CheckPageS();
            GLB.LPS.println (F71_6());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F71_1());
            P_CheckPageZ();
            GLB.LPZ.println (F71_2());
            P_CheckPageZ();
            GLB.LPZ.println (F71_3());
            P_CheckPageZ();
            GLB.LPZ.println (F71_4());
            P_CheckPageZ();
            GLB.LPZ.println (F71_5());
            P_CheckPageZ();
            GLB.LPZ.println (F71_6());
        }
    F71_LABEL1 = fix("", 2);
    F71_RLDTCABECA = 0;
    F71_RLHMCABECA = fix("", 5);
    F71_RLNMABREMP = fix("", 16);
    F71_RLNRPAGINA = 0;
    F71_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_71");

     }
 }
private void F_72()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F72_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F72_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F72_1());
        }
    F72_RLDTEMIRES = 0;
    F72_RLVLICMRES = 0;
    F72_RLVLIPIRES = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_72");

     }
 }
private void F_73()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F73_1());
            P_CheckPage();
            GLB.LP.println(F73_2());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F73_1());
            P_CheckPageB();
            GLB.LPB.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F73_1());
            P_CheckPageC();
            GLB.LPC.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F73_1());
            P_CheckPageD();
            GLB.LPD.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F73_1());
            P_CheckPageE();
            GLB.LPE.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F73_1());
            P_CheckPageF();
            GLB.LPF.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F73_1());
            P_CheckPageG();
            GLB.LPG.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F73_1());
            P_CheckPageH();
            GLB.LPH.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F73_1());
            P_CheckPageI();
            GLB.LPI.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F73_1());
            P_CheckPageJ();
            GLB.LPJ.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F73_1());
            P_CheckPageL();
            GLB.LPL.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F73_1());
            P_CheckPageM();
            GLB.LPM.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F73_1());
            P_CheckPageN();
            GLB.LPN.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F73_1());
            P_CheckPageO();
            GLB.LPO.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F73_1());
            P_CheckPageP();
            GLB.LPP.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F73_1());
            P_CheckPageQ();
            GLB.LPQ.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F73_1());
            P_CheckPageR();
            GLB.LPR.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F73_1());
            P_CheckPageS();
            GLB.LPS.println (F73_2());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F73_1());
            P_CheckPageZ();
            GLB.LPZ.println (F73_2());
        }
    F73_RLVLICMRES = 0;
    F73_RLVLIPIRES = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_73");

     }
 }
private void F_74()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F74_1());
            P_CheckPage();
            GLB.LP.println(F74_2());
            P_CheckPage();
            GLB.LP.println(F74_3());
            P_CheckPage();
            GLB.LP.println(F74_4());
            P_CheckPage();
            GLB.LP.println(F74_5());
            P_CheckPage();
            GLB.LP.println(F74_6());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F74_1());
            P_CheckPageB();
            GLB.LPB.println (F74_2());
            P_CheckPageB();
            GLB.LPB.println (F74_3());
            P_CheckPageB();
            GLB.LPB.println (F74_4());
            P_CheckPageB();
            GLB.LPB.println (F74_5());
            P_CheckPageB();
            GLB.LPB.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F74_1());
            P_CheckPageC();
            GLB.LPC.println (F74_2());
            P_CheckPageC();
            GLB.LPC.println (F74_3());
            P_CheckPageC();
            GLB.LPC.println (F74_4());
            P_CheckPageC();
            GLB.LPC.println (F74_5());
            P_CheckPageC();
            GLB.LPC.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F74_1());
            P_CheckPageD();
            GLB.LPD.println (F74_2());
            P_CheckPageD();
            GLB.LPD.println (F74_3());
            P_CheckPageD();
            GLB.LPD.println (F74_4());
            P_CheckPageD();
            GLB.LPD.println (F74_5());
            P_CheckPageD();
            GLB.LPD.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F74_1());
            P_CheckPageE();
            GLB.LPE.println (F74_2());
            P_CheckPageE();
            GLB.LPE.println (F74_3());
            P_CheckPageE();
            GLB.LPE.println (F74_4());
            P_CheckPageE();
            GLB.LPE.println (F74_5());
            P_CheckPageE();
            GLB.LPE.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F74_1());
            P_CheckPageF();
            GLB.LPF.println (F74_2());
            P_CheckPageF();
            GLB.LPF.println (F74_3());
            P_CheckPageF();
            GLB.LPF.println (F74_4());
            P_CheckPageF();
            GLB.LPF.println (F74_5());
            P_CheckPageF();
            GLB.LPF.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F74_1());
            P_CheckPageG();
            GLB.LPG.println (F74_2());
            P_CheckPageG();
            GLB.LPG.println (F74_3());
            P_CheckPageG();
            GLB.LPG.println (F74_4());
            P_CheckPageG();
            GLB.LPG.println (F74_5());
            P_CheckPageG();
            GLB.LPG.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F74_1());
            P_CheckPageH();
            GLB.LPH.println (F74_2());
            P_CheckPageH();
            GLB.LPH.println (F74_3());
            P_CheckPageH();
            GLB.LPH.println (F74_4());
            P_CheckPageH();
            GLB.LPH.println (F74_5());
            P_CheckPageH();
            GLB.LPH.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F74_1());
            P_CheckPageI();
            GLB.LPI.println (F74_2());
            P_CheckPageI();
            GLB.LPI.println (F74_3());
            P_CheckPageI();
            GLB.LPI.println (F74_4());
            P_CheckPageI();
            GLB.LPI.println (F74_5());
            P_CheckPageI();
            GLB.LPI.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F74_1());
            P_CheckPageJ();
            GLB.LPJ.println (F74_2());
            P_CheckPageJ();
            GLB.LPJ.println (F74_3());
            P_CheckPageJ();
            GLB.LPJ.println (F74_4());
            P_CheckPageJ();
            GLB.LPJ.println (F74_5());
            P_CheckPageJ();
            GLB.LPJ.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F74_1());
            P_CheckPageL();
            GLB.LPL.println (F74_2());
            P_CheckPageL();
            GLB.LPL.println (F74_3());
            P_CheckPageL();
            GLB.LPL.println (F74_4());
            P_CheckPageL();
            GLB.LPL.println (F74_5());
            P_CheckPageL();
            GLB.LPL.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F74_1());
            P_CheckPageM();
            GLB.LPM.println (F74_2());
            P_CheckPageM();
            GLB.LPM.println (F74_3());
            P_CheckPageM();
            GLB.LPM.println (F74_4());
            P_CheckPageM();
            GLB.LPM.println (F74_5());
            P_CheckPageM();
            GLB.LPM.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F74_1());
            P_CheckPageN();
            GLB.LPN.println (F74_2());
            P_CheckPageN();
            GLB.LPN.println (F74_3());
            P_CheckPageN();
            GLB.LPN.println (F74_4());
            P_CheckPageN();
            GLB.LPN.println (F74_5());
            P_CheckPageN();
            GLB.LPN.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F74_1());
            P_CheckPageO();
            GLB.LPO.println (F74_2());
            P_CheckPageO();
            GLB.LPO.println (F74_3());
            P_CheckPageO();
            GLB.LPO.println (F74_4());
            P_CheckPageO();
            GLB.LPO.println (F74_5());
            P_CheckPageO();
            GLB.LPO.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F74_1());
            P_CheckPageP();
            GLB.LPP.println (F74_2());
            P_CheckPageP();
            GLB.LPP.println (F74_3());
            P_CheckPageP();
            GLB.LPP.println (F74_4());
            P_CheckPageP();
            GLB.LPP.println (F74_5());
            P_CheckPageP();
            GLB.LPP.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F74_1());
            P_CheckPageQ();
            GLB.LPQ.println (F74_2());
            P_CheckPageQ();
            GLB.LPQ.println (F74_3());
            P_CheckPageQ();
            GLB.LPQ.println (F74_4());
            P_CheckPageQ();
            GLB.LPQ.println (F74_5());
            P_CheckPageQ();
            GLB.LPQ.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F74_1());
            P_CheckPageR();
            GLB.LPR.println (F74_2());
            P_CheckPageR();
            GLB.LPR.println (F74_3());
            P_CheckPageR();
            GLB.LPR.println (F74_4());
            P_CheckPageR();
            GLB.LPR.println (F74_5());
            P_CheckPageR();
            GLB.LPR.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F74_1());
            P_CheckPageS();
            GLB.LPS.println (F74_2());
            P_CheckPageS();
            GLB.LPS.println (F74_3());
            P_CheckPageS();
            GLB.LPS.println (F74_4());
            P_CheckPageS();
            GLB.LPS.println (F74_5());
            P_CheckPageS();
            GLB.LPS.println (F74_6());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F74_1());
            P_CheckPageZ();
            GLB.LPZ.println (F74_2());
            P_CheckPageZ();
            GLB.LPZ.println (F74_3());
            P_CheckPageZ();
            GLB.LPZ.println (F74_4());
            P_CheckPageZ();
            GLB.LPZ.println (F74_5());
            P_CheckPageZ();
            GLB.LPZ.println (F74_6());
        }
    F74_RLDSCONDEF = fix("", 17);
    F74_RLDTCABECA = 0;
    F74_RLDTFINALX = fix("", 10);
    F74_RLDTINICIO = fix("", 10);
    F74_RLHMCABECA = fix("", 5);
    F74_RLNMABREMP = fix("", 16);
    F74_RLNRPAGINA = 0;
    F74_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_74");

     }
 }
private void F_75()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F75_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F75_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F75_1());
        }
    F75_RLCDAPBICM = 0;
    F75_RLCDAPNICM = 0;
    F75_RLCDAPVICM = 0;
    F75_RLCDNATOGR = fix("", 7);
    F75_RLPCICMNOT = 0;
    F75_RLVLAPOICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_75");

     }
 }
private void F_76()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F76_1());
            P_CheckPage();
            GLB.LP.println(F76_2());
            P_CheckPage();
            GLB.LP.println(F76_3());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F76_1());
            P_CheckPageB();
            GLB.LPB.println (F76_2());
            P_CheckPageB();
            GLB.LPB.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F76_1());
            P_CheckPageC();
            GLB.LPC.println (F76_2());
            P_CheckPageC();
            GLB.LPC.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F76_1());
            P_CheckPageD();
            GLB.LPD.println (F76_2());
            P_CheckPageD();
            GLB.LPD.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F76_1());
            P_CheckPageE();
            GLB.LPE.println (F76_2());
            P_CheckPageE();
            GLB.LPE.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F76_1());
            P_CheckPageF();
            GLB.LPF.println (F76_2());
            P_CheckPageF();
            GLB.LPF.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F76_1());
            P_CheckPageG();
            GLB.LPG.println (F76_2());
            P_CheckPageG();
            GLB.LPG.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F76_1());
            P_CheckPageH();
            GLB.LPH.println (F76_2());
            P_CheckPageH();
            GLB.LPH.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F76_1());
            P_CheckPageI();
            GLB.LPI.println (F76_2());
            P_CheckPageI();
            GLB.LPI.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F76_1());
            P_CheckPageJ();
            GLB.LPJ.println (F76_2());
            P_CheckPageJ();
            GLB.LPJ.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F76_1());
            P_CheckPageL();
            GLB.LPL.println (F76_2());
            P_CheckPageL();
            GLB.LPL.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F76_1());
            P_CheckPageM();
            GLB.LPM.println (F76_2());
            P_CheckPageM();
            GLB.LPM.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F76_1());
            P_CheckPageN();
            GLB.LPN.println (F76_2());
            P_CheckPageN();
            GLB.LPN.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F76_1());
            P_CheckPageO();
            GLB.LPO.println (F76_2());
            P_CheckPageO();
            GLB.LPO.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F76_1());
            P_CheckPageP();
            GLB.LPP.println (F76_2());
            P_CheckPageP();
            GLB.LPP.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F76_1());
            P_CheckPageQ();
            GLB.LPQ.println (F76_2());
            P_CheckPageQ();
            GLB.LPQ.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F76_1());
            P_CheckPageR();
            GLB.LPR.println (F76_2());
            P_CheckPageR();
            GLB.LPR.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F76_1());
            P_CheckPageS();
            GLB.LPS.println (F76_2());
            P_CheckPageS();
            GLB.LPS.println (F76_3());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F76_1());
            P_CheckPageZ();
            GLB.LPZ.println (F76_2());
            P_CheckPageZ();
            GLB.LPZ.println (F76_3());
        }
    F76_LABEL2 = fix("", 1);
    F76_RLCDAPBICM = 0;
    F76_RLCDAPNICM = 0;
    F76_RLCDAPVICM = 0;
    F76_RLVLAPOICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_76");

     }
 }
private void F_77()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F77_1());
            P_CheckPage();
            GLB.LP.println(F77_2());
            P_CheckPage();
            GLB.LP.println(F77_3());
            P_CheckPage();
            GLB.LP.println(F77_4());
            P_CheckPage();
            GLB.LP.println(F77_5());
            P_CheckPage();
            GLB.LP.println(F77_6());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F77_1());
            P_CheckPageB();
            GLB.LPB.println (F77_2());
            P_CheckPageB();
            GLB.LPB.println (F77_3());
            P_CheckPageB();
            GLB.LPB.println (F77_4());
            P_CheckPageB();
            GLB.LPB.println (F77_5());
            P_CheckPageB();
            GLB.LPB.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F77_1());
            P_CheckPageC();
            GLB.LPC.println (F77_2());
            P_CheckPageC();
            GLB.LPC.println (F77_3());
            P_CheckPageC();
            GLB.LPC.println (F77_4());
            P_CheckPageC();
            GLB.LPC.println (F77_5());
            P_CheckPageC();
            GLB.LPC.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F77_1());
            P_CheckPageD();
            GLB.LPD.println (F77_2());
            P_CheckPageD();
            GLB.LPD.println (F77_3());
            P_CheckPageD();
            GLB.LPD.println (F77_4());
            P_CheckPageD();
            GLB.LPD.println (F77_5());
            P_CheckPageD();
            GLB.LPD.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F77_1());
            P_CheckPageE();
            GLB.LPE.println (F77_2());
            P_CheckPageE();
            GLB.LPE.println (F77_3());
            P_CheckPageE();
            GLB.LPE.println (F77_4());
            P_CheckPageE();
            GLB.LPE.println (F77_5());
            P_CheckPageE();
            GLB.LPE.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F77_1());
            P_CheckPageF();
            GLB.LPF.println (F77_2());
            P_CheckPageF();
            GLB.LPF.println (F77_3());
            P_CheckPageF();
            GLB.LPF.println (F77_4());
            P_CheckPageF();
            GLB.LPF.println (F77_5());
            P_CheckPageF();
            GLB.LPF.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F77_1());
            P_CheckPageG();
            GLB.LPG.println (F77_2());
            P_CheckPageG();
            GLB.LPG.println (F77_3());
            P_CheckPageG();
            GLB.LPG.println (F77_4());
            P_CheckPageG();
            GLB.LPG.println (F77_5());
            P_CheckPageG();
            GLB.LPG.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F77_1());
            P_CheckPageH();
            GLB.LPH.println (F77_2());
            P_CheckPageH();
            GLB.LPH.println (F77_3());
            P_CheckPageH();
            GLB.LPH.println (F77_4());
            P_CheckPageH();
            GLB.LPH.println (F77_5());
            P_CheckPageH();
            GLB.LPH.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F77_1());
            P_CheckPageI();
            GLB.LPI.println (F77_2());
            P_CheckPageI();
            GLB.LPI.println (F77_3());
            P_CheckPageI();
            GLB.LPI.println (F77_4());
            P_CheckPageI();
            GLB.LPI.println (F77_5());
            P_CheckPageI();
            GLB.LPI.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F77_1());
            P_CheckPageJ();
            GLB.LPJ.println (F77_2());
            P_CheckPageJ();
            GLB.LPJ.println (F77_3());
            P_CheckPageJ();
            GLB.LPJ.println (F77_4());
            P_CheckPageJ();
            GLB.LPJ.println (F77_5());
            P_CheckPageJ();
            GLB.LPJ.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F77_1());
            P_CheckPageL();
            GLB.LPL.println (F77_2());
            P_CheckPageL();
            GLB.LPL.println (F77_3());
            P_CheckPageL();
            GLB.LPL.println (F77_4());
            P_CheckPageL();
            GLB.LPL.println (F77_5());
            P_CheckPageL();
            GLB.LPL.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F77_1());
            P_CheckPageM();
            GLB.LPM.println (F77_2());
            P_CheckPageM();
            GLB.LPM.println (F77_3());
            P_CheckPageM();
            GLB.LPM.println (F77_4());
            P_CheckPageM();
            GLB.LPM.println (F77_5());
            P_CheckPageM();
            GLB.LPM.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F77_1());
            P_CheckPageN();
            GLB.LPN.println (F77_2());
            P_CheckPageN();
            GLB.LPN.println (F77_3());
            P_CheckPageN();
            GLB.LPN.println (F77_4());
            P_CheckPageN();
            GLB.LPN.println (F77_5());
            P_CheckPageN();
            GLB.LPN.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F77_1());
            P_CheckPageO();
            GLB.LPO.println (F77_2());
            P_CheckPageO();
            GLB.LPO.println (F77_3());
            P_CheckPageO();
            GLB.LPO.println (F77_4());
            P_CheckPageO();
            GLB.LPO.println (F77_5());
            P_CheckPageO();
            GLB.LPO.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F77_1());
            P_CheckPageP();
            GLB.LPP.println (F77_2());
            P_CheckPageP();
            GLB.LPP.println (F77_3());
            P_CheckPageP();
            GLB.LPP.println (F77_4());
            P_CheckPageP();
            GLB.LPP.println (F77_5());
            P_CheckPageP();
            GLB.LPP.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F77_1());
            P_CheckPageQ();
            GLB.LPQ.println (F77_2());
            P_CheckPageQ();
            GLB.LPQ.println (F77_3());
            P_CheckPageQ();
            GLB.LPQ.println (F77_4());
            P_CheckPageQ();
            GLB.LPQ.println (F77_5());
            P_CheckPageQ();
            GLB.LPQ.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F77_1());
            P_CheckPageR();
            GLB.LPR.println (F77_2());
            P_CheckPageR();
            GLB.LPR.println (F77_3());
            P_CheckPageR();
            GLB.LPR.println (F77_4());
            P_CheckPageR();
            GLB.LPR.println (F77_5());
            P_CheckPageR();
            GLB.LPR.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F77_1());
            P_CheckPageS();
            GLB.LPS.println (F77_2());
            P_CheckPageS();
            GLB.LPS.println (F77_3());
            P_CheckPageS();
            GLB.LPS.println (F77_4());
            P_CheckPageS();
            GLB.LPS.println (F77_5());
            P_CheckPageS();
            GLB.LPS.println (F77_6());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F77_1());
            P_CheckPageZ();
            GLB.LPZ.println (F77_2());
            P_CheckPageZ();
            GLB.LPZ.println (F77_3());
            P_CheckPageZ();
            GLB.LPZ.println (F77_4());
            P_CheckPageZ();
            GLB.LPZ.println (F77_5());
            P_CheckPageZ();
            GLB.LPZ.println (F77_6());
        }
    F77_RLDSCONDEF = fix("", 17);
    F77_RLDTCABECA = 0;
    F77_RLDTFINALX = fix("", 10);
    F77_RLDTINICIO = fix("", 10);
    F77_RLHMCABECA = fix("", 5);
    F77_RLNMABREMP = fix("", 16);
    F77_RLNRPAGINA = 0;
    F77_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_77");

     }
 }
private void F_78()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F78_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F78_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F78_1());
        }
    F78_RLCDAPBICM = 0;
    F78_RLCDAPNICM = 0;
    F78_RLCDAPVDIO = 0;
    F78_RLCDAPVICM = 0;
    F78_RLCDNATOGR = fix("", 7);
    F78_RLINPESSOA = fix("", 3);
    F78_RLPCICMNOT = 0;
    F78_RLVLAPOICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_78");

     }
 }
private void F_79()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F79_1());
            P_CheckPage();
            GLB.LP.println(F79_2());
            P_CheckPage();
            GLB.LP.println(F79_3());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F79_1());
            P_CheckPageB();
            GLB.LPB.println (F79_2());
            P_CheckPageB();
            GLB.LPB.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F79_1());
            P_CheckPageC();
            GLB.LPC.println (F79_2());
            P_CheckPageC();
            GLB.LPC.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F79_1());
            P_CheckPageD();
            GLB.LPD.println (F79_2());
            P_CheckPageD();
            GLB.LPD.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F79_1());
            P_CheckPageE();
            GLB.LPE.println (F79_2());
            P_CheckPageE();
            GLB.LPE.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F79_1());
            P_CheckPageF();
            GLB.LPF.println (F79_2());
            P_CheckPageF();
            GLB.LPF.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F79_1());
            P_CheckPageG();
            GLB.LPG.println (F79_2());
            P_CheckPageG();
            GLB.LPG.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F79_1());
            P_CheckPageH();
            GLB.LPH.println (F79_2());
            P_CheckPageH();
            GLB.LPH.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F79_1());
            P_CheckPageI();
            GLB.LPI.println (F79_2());
            P_CheckPageI();
            GLB.LPI.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F79_1());
            P_CheckPageJ();
            GLB.LPJ.println (F79_2());
            P_CheckPageJ();
            GLB.LPJ.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F79_1());
            P_CheckPageL();
            GLB.LPL.println (F79_2());
            P_CheckPageL();
            GLB.LPL.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F79_1());
            P_CheckPageM();
            GLB.LPM.println (F79_2());
            P_CheckPageM();
            GLB.LPM.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F79_1());
            P_CheckPageN();
            GLB.LPN.println (F79_2());
            P_CheckPageN();
            GLB.LPN.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F79_1());
            P_CheckPageO();
            GLB.LPO.println (F79_2());
            P_CheckPageO();
            GLB.LPO.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F79_1());
            P_CheckPageP();
            GLB.LPP.println (F79_2());
            P_CheckPageP();
            GLB.LPP.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F79_1());
            P_CheckPageQ();
            GLB.LPQ.println (F79_2());
            P_CheckPageQ();
            GLB.LPQ.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F79_1());
            P_CheckPageR();
            GLB.LPR.println (F79_2());
            P_CheckPageR();
            GLB.LPR.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F79_1());
            P_CheckPageS();
            GLB.LPS.println (F79_2());
            P_CheckPageS();
            GLB.LPS.println (F79_3());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F79_1());
            P_CheckPageZ();
            GLB.LPZ.println (F79_2());
            P_CheckPageZ();
            GLB.LPZ.println (F79_3());
        }
    F79_LABEL2 = fix("", 1);
    F79_RLCDAPBICM = 0;
    F79_RLCDAPNICM = 0;
    F79_RLCDAPVDIO = 0;
    F79_RLCDAPVICM = 0;
    F79_RLVLAPOICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_79");

     }
 }
private void F_80()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F80_1());
            P_CheckPage();
            GLB.LP.println(F80_2());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F80_1());
            P_CheckPageB();
            GLB.LPB.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F80_1());
            P_CheckPageC();
            GLB.LPC.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F80_1());
            P_CheckPageD();
            GLB.LPD.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F80_1());
            P_CheckPageE();
            GLB.LPE.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F80_1());
            P_CheckPageF();
            GLB.LPF.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F80_1());
            P_CheckPageG();
            GLB.LPG.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F80_1());
            P_CheckPageH();
            GLB.LPH.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F80_1());
            P_CheckPageI();
            GLB.LPI.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F80_1());
            P_CheckPageJ();
            GLB.LPJ.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F80_1());
            P_CheckPageL();
            GLB.LPL.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F80_1());
            P_CheckPageM();
            GLB.LPM.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F80_1());
            P_CheckPageN();
            GLB.LPN.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F80_1());
            P_CheckPageO();
            GLB.LPO.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F80_1());
            P_CheckPageP();
            GLB.LPP.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F80_1());
            P_CheckPageQ();
            GLB.LPQ.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F80_1());
            P_CheckPageR();
            GLB.LPR.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F80_1());
            P_CheckPageS();
            GLB.LPS.println (F80_2());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F80_1());
            P_CheckPageZ();
            GLB.LPZ.println (F80_2());
        }
    F80_RLCDAPBICM = 0;
    F80_RLCDAPNICM = 0;
    F80_RLCDAPVDIO = 0;
    F80_RLCDAPVICM = 0;
    F80_RLVLAPOICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_80");

     }
 }
private void F_81()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F81_1());
            P_CheckPage();
            GLB.LP.println(F81_2());
            P_CheckPage();
            GLB.LP.println(F81_3());
            P_CheckPage();
            GLB.LP.println(F81_4());
            P_CheckPage();
            GLB.LP.println(F81_5());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F81_1());
            P_CheckPageB();
            GLB.LPB.println (F81_2());
            P_CheckPageB();
            GLB.LPB.println (F81_3());
            P_CheckPageB();
            GLB.LPB.println (F81_4());
            P_CheckPageB();
            GLB.LPB.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F81_1());
            P_CheckPageC();
            GLB.LPC.println (F81_2());
            P_CheckPageC();
            GLB.LPC.println (F81_3());
            P_CheckPageC();
            GLB.LPC.println (F81_4());
            P_CheckPageC();
            GLB.LPC.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F81_1());
            P_CheckPageD();
            GLB.LPD.println (F81_2());
            P_CheckPageD();
            GLB.LPD.println (F81_3());
            P_CheckPageD();
            GLB.LPD.println (F81_4());
            P_CheckPageD();
            GLB.LPD.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F81_1());
            P_CheckPageE();
            GLB.LPE.println (F81_2());
            P_CheckPageE();
            GLB.LPE.println (F81_3());
            P_CheckPageE();
            GLB.LPE.println (F81_4());
            P_CheckPageE();
            GLB.LPE.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F81_1());
            P_CheckPageF();
            GLB.LPF.println (F81_2());
            P_CheckPageF();
            GLB.LPF.println (F81_3());
            P_CheckPageF();
            GLB.LPF.println (F81_4());
            P_CheckPageF();
            GLB.LPF.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F81_1());
            P_CheckPageG();
            GLB.LPG.println (F81_2());
            P_CheckPageG();
            GLB.LPG.println (F81_3());
            P_CheckPageG();
            GLB.LPG.println (F81_4());
            P_CheckPageG();
            GLB.LPG.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F81_1());
            P_CheckPageH();
            GLB.LPH.println (F81_2());
            P_CheckPageH();
            GLB.LPH.println (F81_3());
            P_CheckPageH();
            GLB.LPH.println (F81_4());
            P_CheckPageH();
            GLB.LPH.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F81_1());
            P_CheckPageI();
            GLB.LPI.println (F81_2());
            P_CheckPageI();
            GLB.LPI.println (F81_3());
            P_CheckPageI();
            GLB.LPI.println (F81_4());
            P_CheckPageI();
            GLB.LPI.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F81_1());
            P_CheckPageJ();
            GLB.LPJ.println (F81_2());
            P_CheckPageJ();
            GLB.LPJ.println (F81_3());
            P_CheckPageJ();
            GLB.LPJ.println (F81_4());
            P_CheckPageJ();
            GLB.LPJ.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F81_1());
            P_CheckPageL();
            GLB.LPL.println (F81_2());
            P_CheckPageL();
            GLB.LPL.println (F81_3());
            P_CheckPageL();
            GLB.LPL.println (F81_4());
            P_CheckPageL();
            GLB.LPL.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F81_1());
            P_CheckPageM();
            GLB.LPM.println (F81_2());
            P_CheckPageM();
            GLB.LPM.println (F81_3());
            P_CheckPageM();
            GLB.LPM.println (F81_4());
            P_CheckPageM();
            GLB.LPM.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F81_1());
            P_CheckPageN();
            GLB.LPN.println (F81_2());
            P_CheckPageN();
            GLB.LPN.println (F81_3());
            P_CheckPageN();
            GLB.LPN.println (F81_4());
            P_CheckPageN();
            GLB.LPN.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F81_1());
            P_CheckPageO();
            GLB.LPO.println (F81_2());
            P_CheckPageO();
            GLB.LPO.println (F81_3());
            P_CheckPageO();
            GLB.LPO.println (F81_4());
            P_CheckPageO();
            GLB.LPO.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F81_1());
            P_CheckPageP();
            GLB.LPP.println (F81_2());
            P_CheckPageP();
            GLB.LPP.println (F81_3());
            P_CheckPageP();
            GLB.LPP.println (F81_4());
            P_CheckPageP();
            GLB.LPP.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F81_1());
            P_CheckPageQ();
            GLB.LPQ.println (F81_2());
            P_CheckPageQ();
            GLB.LPQ.println (F81_3());
            P_CheckPageQ();
            GLB.LPQ.println (F81_4());
            P_CheckPageQ();
            GLB.LPQ.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F81_1());
            P_CheckPageR();
            GLB.LPR.println (F81_2());
            P_CheckPageR();
            GLB.LPR.println (F81_3());
            P_CheckPageR();
            GLB.LPR.println (F81_4());
            P_CheckPageR();
            GLB.LPR.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F81_1());
            P_CheckPageS();
            GLB.LPS.println (F81_2());
            P_CheckPageS();
            GLB.LPS.println (F81_3());
            P_CheckPageS();
            GLB.LPS.println (F81_4());
            P_CheckPageS();
            GLB.LPS.println (F81_5());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F81_1());
            P_CheckPageZ();
            GLB.LPZ.println (F81_2());
            P_CheckPageZ();
            GLB.LPZ.println (F81_3());
            P_CheckPageZ();
            GLB.LPZ.println (F81_4());
            P_CheckPageZ();
            GLB.LPZ.println (F81_5());
        }
    F81_RLDSCONDEF = fix("", 17);
    F81_RLDSICMSXX = fix("", 5);
    F81_RLDSNOTFOP = fix("", 4);
    F81_RLDSTEX20A = fix("", 20);
    F81_RLDTCABECA = 0;
    F81_RLDTFINALX = fix("", 10);
    F81_RLDTINICIO = fix("", 10);
    F81_RLHMCABECA = fix("", 5);
    F81_RLNMABREMP = fix("", 16);
    F81_RLNRPAGINA = 0;
    F81_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_81");

     }
 }
private void F_82()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F82_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F82_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F82_1());
        }
    F82_RLNRNOTCRE = 0;
    F82_RLPCICMCRE = 0;
    F82_RLVLBASCRE = 0;
    F82_RLVLCONCRE = 0;
    F82_RLVLIMPCRE = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_82");

     }
 }
private void F_83()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F83_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F83_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F83_1());
        }
    F83_RLVLBASCRE = 0;
    F83_RLVLCONCRE = 0;
    F83_RLVLIMPCRE = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_83");

     }
 }
private void F_84()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F84_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F84_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F84_1());
        }
    F84_RLVLBASCRE = 0;
    F84_RLVLCONCRE = 0;
    F84_RLVLIMPCRE = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_84");

     }
 }
private void F_90()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F90_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F90_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F90_1());
        }
    F90_EXCDCLIFOR = 0;
    F90_EXINCLIFOR = 0;
    F90_EXVLMOVIME = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_90");

     }
 }
private void F_91()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F91_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F91_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F91_1());
        }
    F91_EXCDCLAFIS = 0;
    F91_EXVLMOVIME = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_91");

     }
 }
private void F_92()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F92_1());
            P_CheckPage();
            GLB.LP.println(F92_2());
            P_CheckPage();
            GLB.LP.println(F92_3());
            P_CheckPage();
            GLB.LP.println(F92_4());
            P_CheckPage();
            GLB.LP.println(F92_5());
            P_CheckPage();
            GLB.LP.println(F92_6());
            P_CheckPage();
            GLB.LP.println(F92_7());
            P_CheckPage();
            GLB.LP.println(F92_8());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F92_1());
            P_CheckPageB();
            GLB.LPB.println (F92_2());
            P_CheckPageB();
            GLB.LPB.println (F92_3());
            P_CheckPageB();
            GLB.LPB.println (F92_4());
            P_CheckPageB();
            GLB.LPB.println (F92_5());
            P_CheckPageB();
            GLB.LPB.println (F92_6());
            P_CheckPageB();
            GLB.LPB.println (F92_7());
            P_CheckPageB();
            GLB.LPB.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F92_1());
            P_CheckPageC();
            GLB.LPC.println (F92_2());
            P_CheckPageC();
            GLB.LPC.println (F92_3());
            P_CheckPageC();
            GLB.LPC.println (F92_4());
            P_CheckPageC();
            GLB.LPC.println (F92_5());
            P_CheckPageC();
            GLB.LPC.println (F92_6());
            P_CheckPageC();
            GLB.LPC.println (F92_7());
            P_CheckPageC();
            GLB.LPC.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F92_1());
            P_CheckPageD();
            GLB.LPD.println (F92_2());
            P_CheckPageD();
            GLB.LPD.println (F92_3());
            P_CheckPageD();
            GLB.LPD.println (F92_4());
            P_CheckPageD();
            GLB.LPD.println (F92_5());
            P_CheckPageD();
            GLB.LPD.println (F92_6());
            P_CheckPageD();
            GLB.LPD.println (F92_7());
            P_CheckPageD();
            GLB.LPD.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F92_1());
            P_CheckPageE();
            GLB.LPE.println (F92_2());
            P_CheckPageE();
            GLB.LPE.println (F92_3());
            P_CheckPageE();
            GLB.LPE.println (F92_4());
            P_CheckPageE();
            GLB.LPE.println (F92_5());
            P_CheckPageE();
            GLB.LPE.println (F92_6());
            P_CheckPageE();
            GLB.LPE.println (F92_7());
            P_CheckPageE();
            GLB.LPE.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F92_1());
            P_CheckPageF();
            GLB.LPF.println (F92_2());
            P_CheckPageF();
            GLB.LPF.println (F92_3());
            P_CheckPageF();
            GLB.LPF.println (F92_4());
            P_CheckPageF();
            GLB.LPF.println (F92_5());
            P_CheckPageF();
            GLB.LPF.println (F92_6());
            P_CheckPageF();
            GLB.LPF.println (F92_7());
            P_CheckPageF();
            GLB.LPF.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F92_1());
            P_CheckPageG();
            GLB.LPG.println (F92_2());
            P_CheckPageG();
            GLB.LPG.println (F92_3());
            P_CheckPageG();
            GLB.LPG.println (F92_4());
            P_CheckPageG();
            GLB.LPG.println (F92_5());
            P_CheckPageG();
            GLB.LPG.println (F92_6());
            P_CheckPageG();
            GLB.LPG.println (F92_7());
            P_CheckPageG();
            GLB.LPG.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F92_1());
            P_CheckPageH();
            GLB.LPH.println (F92_2());
            P_CheckPageH();
            GLB.LPH.println (F92_3());
            P_CheckPageH();
            GLB.LPH.println (F92_4());
            P_CheckPageH();
            GLB.LPH.println (F92_5());
            P_CheckPageH();
            GLB.LPH.println (F92_6());
            P_CheckPageH();
            GLB.LPH.println (F92_7());
            P_CheckPageH();
            GLB.LPH.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F92_1());
            P_CheckPageI();
            GLB.LPI.println (F92_2());
            P_CheckPageI();
            GLB.LPI.println (F92_3());
            P_CheckPageI();
            GLB.LPI.println (F92_4());
            P_CheckPageI();
            GLB.LPI.println (F92_5());
            P_CheckPageI();
            GLB.LPI.println (F92_6());
            P_CheckPageI();
            GLB.LPI.println (F92_7());
            P_CheckPageI();
            GLB.LPI.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F92_1());
            P_CheckPageJ();
            GLB.LPJ.println (F92_2());
            P_CheckPageJ();
            GLB.LPJ.println (F92_3());
            P_CheckPageJ();
            GLB.LPJ.println (F92_4());
            P_CheckPageJ();
            GLB.LPJ.println (F92_5());
            P_CheckPageJ();
            GLB.LPJ.println (F92_6());
            P_CheckPageJ();
            GLB.LPJ.println (F92_7());
            P_CheckPageJ();
            GLB.LPJ.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F92_1());
            P_CheckPageL();
            GLB.LPL.println (F92_2());
            P_CheckPageL();
            GLB.LPL.println (F92_3());
            P_CheckPageL();
            GLB.LPL.println (F92_4());
            P_CheckPageL();
            GLB.LPL.println (F92_5());
            P_CheckPageL();
            GLB.LPL.println (F92_6());
            P_CheckPageL();
            GLB.LPL.println (F92_7());
            P_CheckPageL();
            GLB.LPL.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F92_1());
            P_CheckPageM();
            GLB.LPM.println (F92_2());
            P_CheckPageM();
            GLB.LPM.println (F92_3());
            P_CheckPageM();
            GLB.LPM.println (F92_4());
            P_CheckPageM();
            GLB.LPM.println (F92_5());
            P_CheckPageM();
            GLB.LPM.println (F92_6());
            P_CheckPageM();
            GLB.LPM.println (F92_7());
            P_CheckPageM();
            GLB.LPM.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F92_1());
            P_CheckPageN();
            GLB.LPN.println (F92_2());
            P_CheckPageN();
            GLB.LPN.println (F92_3());
            P_CheckPageN();
            GLB.LPN.println (F92_4());
            P_CheckPageN();
            GLB.LPN.println (F92_5());
            P_CheckPageN();
            GLB.LPN.println (F92_6());
            P_CheckPageN();
            GLB.LPN.println (F92_7());
            P_CheckPageN();
            GLB.LPN.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F92_1());
            P_CheckPageO();
            GLB.LPO.println (F92_2());
            P_CheckPageO();
            GLB.LPO.println (F92_3());
            P_CheckPageO();
            GLB.LPO.println (F92_4());
            P_CheckPageO();
            GLB.LPO.println (F92_5());
            P_CheckPageO();
            GLB.LPO.println (F92_6());
            P_CheckPageO();
            GLB.LPO.println (F92_7());
            P_CheckPageO();
            GLB.LPO.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F92_1());
            P_CheckPageP();
            GLB.LPP.println (F92_2());
            P_CheckPageP();
            GLB.LPP.println (F92_3());
            P_CheckPageP();
            GLB.LPP.println (F92_4());
            P_CheckPageP();
            GLB.LPP.println (F92_5());
            P_CheckPageP();
            GLB.LPP.println (F92_6());
            P_CheckPageP();
            GLB.LPP.println (F92_7());
            P_CheckPageP();
            GLB.LPP.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F92_1());
            P_CheckPageQ();
            GLB.LPQ.println (F92_2());
            P_CheckPageQ();
            GLB.LPQ.println (F92_3());
            P_CheckPageQ();
            GLB.LPQ.println (F92_4());
            P_CheckPageQ();
            GLB.LPQ.println (F92_5());
            P_CheckPageQ();
            GLB.LPQ.println (F92_6());
            P_CheckPageQ();
            GLB.LPQ.println (F92_7());
            P_CheckPageQ();
            GLB.LPQ.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F92_1());
            P_CheckPageR();
            GLB.LPR.println (F92_2());
            P_CheckPageR();
            GLB.LPR.println (F92_3());
            P_CheckPageR();
            GLB.LPR.println (F92_4());
            P_CheckPageR();
            GLB.LPR.println (F92_5());
            P_CheckPageR();
            GLB.LPR.println (F92_6());
            P_CheckPageR();
            GLB.LPR.println (F92_7());
            P_CheckPageR();
            GLB.LPR.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F92_1());
            P_CheckPageS();
            GLB.LPS.println (F92_2());
            P_CheckPageS();
            GLB.LPS.println (F92_3());
            P_CheckPageS();
            GLB.LPS.println (F92_4());
            P_CheckPageS();
            GLB.LPS.println (F92_5());
            P_CheckPageS();
            GLB.LPS.println (F92_6());
            P_CheckPageS();
            GLB.LPS.println (F92_7());
            P_CheckPageS();
            GLB.LPS.println (F92_8());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F92_1());
            P_CheckPageZ();
            GLB.LPZ.println (F92_2());
            P_CheckPageZ();
            GLB.LPZ.println (F92_3());
            P_CheckPageZ();
            GLB.LPZ.println (F92_4());
            P_CheckPageZ();
            GLB.LPZ.println (F92_5());
            P_CheckPageZ();
            GLB.LPZ.println (F92_6());
            P_CheckPageZ();
            GLB.LPZ.println (F92_7());
            P_CheckPageZ();
            GLB.LPZ.println (F92_8());
        }
    F92_EXCDCLAFIS = 0;
    F92_EXCDCONCRE = 0;
    F92_EXCDDEBICM = 0;
    F92_EXCDNATOPE = 0;
    F92_EXCDUFMUNI = fix("", 2);
    F92_EXVLBASICM = 0;
    F92_EXVLCONTAB = 0;
    F92_EXVLIMPICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_92");

     }
 }
private void F_93()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F93_1());
            P_CheckPage();
            GLB.LP.println(F93_2());
            P_CheckPage();
            GLB.LP.println(F93_3());
            P_CheckPage();
            GLB.LP.println(F93_4());
            P_CheckPage();
            GLB.LP.println(F93_5());
            P_CheckPage();
            GLB.LP.println(F93_6());
            P_CheckPage();
            GLB.LP.println(F93_7());
            P_CheckPage();
            GLB.LP.println(F93_8());
            P_CheckPage();
            GLB.LP.println(F93_9());
            P_CheckPage();
            GLB.LP.println(F93_10());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F93_1());
            P_CheckPageB();
            GLB.LPB.println (F93_2());
            P_CheckPageB();
            GLB.LPB.println (F93_3());
            P_CheckPageB();
            GLB.LPB.println (F93_4());
            P_CheckPageB();
            GLB.LPB.println (F93_5());
            P_CheckPageB();
            GLB.LPB.println (F93_6());
            P_CheckPageB();
            GLB.LPB.println (F93_7());
            P_CheckPageB();
            GLB.LPB.println (F93_8());
            P_CheckPageB();
            GLB.LPB.println (F93_9());
            P_CheckPageB();
            GLB.LPB.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F93_1());
            P_CheckPageC();
            GLB.LPC.println (F93_2());
            P_CheckPageC();
            GLB.LPC.println (F93_3());
            P_CheckPageC();
            GLB.LPC.println (F93_4());
            P_CheckPageC();
            GLB.LPC.println (F93_5());
            P_CheckPageC();
            GLB.LPC.println (F93_6());
            P_CheckPageC();
            GLB.LPC.println (F93_7());
            P_CheckPageC();
            GLB.LPC.println (F93_8());
            P_CheckPageC();
            GLB.LPC.println (F93_9());
            P_CheckPageC();
            GLB.LPC.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F93_1());
            P_CheckPageD();
            GLB.LPD.println (F93_2());
            P_CheckPageD();
            GLB.LPD.println (F93_3());
            P_CheckPageD();
            GLB.LPD.println (F93_4());
            P_CheckPageD();
            GLB.LPD.println (F93_5());
            P_CheckPageD();
            GLB.LPD.println (F93_6());
            P_CheckPageD();
            GLB.LPD.println (F93_7());
            P_CheckPageD();
            GLB.LPD.println (F93_8());
            P_CheckPageD();
            GLB.LPD.println (F93_9());
            P_CheckPageD();
            GLB.LPD.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F93_1());
            P_CheckPageE();
            GLB.LPE.println (F93_2());
            P_CheckPageE();
            GLB.LPE.println (F93_3());
            P_CheckPageE();
            GLB.LPE.println (F93_4());
            P_CheckPageE();
            GLB.LPE.println (F93_5());
            P_CheckPageE();
            GLB.LPE.println (F93_6());
            P_CheckPageE();
            GLB.LPE.println (F93_7());
            P_CheckPageE();
            GLB.LPE.println (F93_8());
            P_CheckPageE();
            GLB.LPE.println (F93_9());
            P_CheckPageE();
            GLB.LPE.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F93_1());
            P_CheckPageF();
            GLB.LPF.println (F93_2());
            P_CheckPageF();
            GLB.LPF.println (F93_3());
            P_CheckPageF();
            GLB.LPF.println (F93_4());
            P_CheckPageF();
            GLB.LPF.println (F93_5());
            P_CheckPageF();
            GLB.LPF.println (F93_6());
            P_CheckPageF();
            GLB.LPF.println (F93_7());
            P_CheckPageF();
            GLB.LPF.println (F93_8());
            P_CheckPageF();
            GLB.LPF.println (F93_9());
            P_CheckPageF();
            GLB.LPF.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F93_1());
            P_CheckPageG();
            GLB.LPG.println (F93_2());
            P_CheckPageG();
            GLB.LPG.println (F93_3());
            P_CheckPageG();
            GLB.LPG.println (F93_4());
            P_CheckPageG();
            GLB.LPG.println (F93_5());
            P_CheckPageG();
            GLB.LPG.println (F93_6());
            P_CheckPageG();
            GLB.LPG.println (F93_7());
            P_CheckPageG();
            GLB.LPG.println (F93_8());
            P_CheckPageG();
            GLB.LPG.println (F93_9());
            P_CheckPageG();
            GLB.LPG.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F93_1());
            P_CheckPageH();
            GLB.LPH.println (F93_2());
            P_CheckPageH();
            GLB.LPH.println (F93_3());
            P_CheckPageH();
            GLB.LPH.println (F93_4());
            P_CheckPageH();
            GLB.LPH.println (F93_5());
            P_CheckPageH();
            GLB.LPH.println (F93_6());
            P_CheckPageH();
            GLB.LPH.println (F93_7());
            P_CheckPageH();
            GLB.LPH.println (F93_8());
            P_CheckPageH();
            GLB.LPH.println (F93_9());
            P_CheckPageH();
            GLB.LPH.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F93_1());
            P_CheckPageI();
            GLB.LPI.println (F93_2());
            P_CheckPageI();
            GLB.LPI.println (F93_3());
            P_CheckPageI();
            GLB.LPI.println (F93_4());
            P_CheckPageI();
            GLB.LPI.println (F93_5());
            P_CheckPageI();
            GLB.LPI.println (F93_6());
            P_CheckPageI();
            GLB.LPI.println (F93_7());
            P_CheckPageI();
            GLB.LPI.println (F93_8());
            P_CheckPageI();
            GLB.LPI.println (F93_9());
            P_CheckPageI();
            GLB.LPI.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F93_1());
            P_CheckPageJ();
            GLB.LPJ.println (F93_2());
            P_CheckPageJ();
            GLB.LPJ.println (F93_3());
            P_CheckPageJ();
            GLB.LPJ.println (F93_4());
            P_CheckPageJ();
            GLB.LPJ.println (F93_5());
            P_CheckPageJ();
            GLB.LPJ.println (F93_6());
            P_CheckPageJ();
            GLB.LPJ.println (F93_7());
            P_CheckPageJ();
            GLB.LPJ.println (F93_8());
            P_CheckPageJ();
            GLB.LPJ.println (F93_9());
            P_CheckPageJ();
            GLB.LPJ.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F93_1());
            P_CheckPageL();
            GLB.LPL.println (F93_2());
            P_CheckPageL();
            GLB.LPL.println (F93_3());
            P_CheckPageL();
            GLB.LPL.println (F93_4());
            P_CheckPageL();
            GLB.LPL.println (F93_5());
            P_CheckPageL();
            GLB.LPL.println (F93_6());
            P_CheckPageL();
            GLB.LPL.println (F93_7());
            P_CheckPageL();
            GLB.LPL.println (F93_8());
            P_CheckPageL();
            GLB.LPL.println (F93_9());
            P_CheckPageL();
            GLB.LPL.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F93_1());
            P_CheckPageM();
            GLB.LPM.println (F93_2());
            P_CheckPageM();
            GLB.LPM.println (F93_3());
            P_CheckPageM();
            GLB.LPM.println (F93_4());
            P_CheckPageM();
            GLB.LPM.println (F93_5());
            P_CheckPageM();
            GLB.LPM.println (F93_6());
            P_CheckPageM();
            GLB.LPM.println (F93_7());
            P_CheckPageM();
            GLB.LPM.println (F93_8());
            P_CheckPageM();
            GLB.LPM.println (F93_9());
            P_CheckPageM();
            GLB.LPM.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F93_1());
            P_CheckPageN();
            GLB.LPN.println (F93_2());
            P_CheckPageN();
            GLB.LPN.println (F93_3());
            P_CheckPageN();
            GLB.LPN.println (F93_4());
            P_CheckPageN();
            GLB.LPN.println (F93_5());
            P_CheckPageN();
            GLB.LPN.println (F93_6());
            P_CheckPageN();
            GLB.LPN.println (F93_7());
            P_CheckPageN();
            GLB.LPN.println (F93_8());
            P_CheckPageN();
            GLB.LPN.println (F93_9());
            P_CheckPageN();
            GLB.LPN.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F93_1());
            P_CheckPageO();
            GLB.LPO.println (F93_2());
            P_CheckPageO();
            GLB.LPO.println (F93_3());
            P_CheckPageO();
            GLB.LPO.println (F93_4());
            P_CheckPageO();
            GLB.LPO.println (F93_5());
            P_CheckPageO();
            GLB.LPO.println (F93_6());
            P_CheckPageO();
            GLB.LPO.println (F93_7());
            P_CheckPageO();
            GLB.LPO.println (F93_8());
            P_CheckPageO();
            GLB.LPO.println (F93_9());
            P_CheckPageO();
            GLB.LPO.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F93_1());
            P_CheckPageP();
            GLB.LPP.println (F93_2());
            P_CheckPageP();
            GLB.LPP.println (F93_3());
            P_CheckPageP();
            GLB.LPP.println (F93_4());
            P_CheckPageP();
            GLB.LPP.println (F93_5());
            P_CheckPageP();
            GLB.LPP.println (F93_6());
            P_CheckPageP();
            GLB.LPP.println (F93_7());
            P_CheckPageP();
            GLB.LPP.println (F93_8());
            P_CheckPageP();
            GLB.LPP.println (F93_9());
            P_CheckPageP();
            GLB.LPP.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F93_1());
            P_CheckPageQ();
            GLB.LPQ.println (F93_2());
            P_CheckPageQ();
            GLB.LPQ.println (F93_3());
            P_CheckPageQ();
            GLB.LPQ.println (F93_4());
            P_CheckPageQ();
            GLB.LPQ.println (F93_5());
            P_CheckPageQ();
            GLB.LPQ.println (F93_6());
            P_CheckPageQ();
            GLB.LPQ.println (F93_7());
            P_CheckPageQ();
            GLB.LPQ.println (F93_8());
            P_CheckPageQ();
            GLB.LPQ.println (F93_9());
            P_CheckPageQ();
            GLB.LPQ.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F93_1());
            P_CheckPageR();
            GLB.LPR.println (F93_2());
            P_CheckPageR();
            GLB.LPR.println (F93_3());
            P_CheckPageR();
            GLB.LPR.println (F93_4());
            P_CheckPageR();
            GLB.LPR.println (F93_5());
            P_CheckPageR();
            GLB.LPR.println (F93_6());
            P_CheckPageR();
            GLB.LPR.println (F93_7());
            P_CheckPageR();
            GLB.LPR.println (F93_8());
            P_CheckPageR();
            GLB.LPR.println (F93_9());
            P_CheckPageR();
            GLB.LPR.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F93_1());
            P_CheckPageS();
            GLB.LPS.println (F93_2());
            P_CheckPageS();
            GLB.LPS.println (F93_3());
            P_CheckPageS();
            GLB.LPS.println (F93_4());
            P_CheckPageS();
            GLB.LPS.println (F93_5());
            P_CheckPageS();
            GLB.LPS.println (F93_6());
            P_CheckPageS();
            GLB.LPS.println (F93_7());
            P_CheckPageS();
            GLB.LPS.println (F93_8());
            P_CheckPageS();
            GLB.LPS.println (F93_9());
            P_CheckPageS();
            GLB.LPS.println (F93_10());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F93_1());
            P_CheckPageZ();
            GLB.LPZ.println (F93_2());
            P_CheckPageZ();
            GLB.LPZ.println (F93_3());
            P_CheckPageZ();
            GLB.LPZ.println (F93_4());
            P_CheckPageZ();
            GLB.LPZ.println (F93_5());
            P_CheckPageZ();
            GLB.LPZ.println (F93_6());
            P_CheckPageZ();
            GLB.LPZ.println (F93_7());
            P_CheckPageZ();
            GLB.LPZ.println (F93_8());
            P_CheckPageZ();
            GLB.LPZ.println (F93_9());
            P_CheckPageZ();
            GLB.LPZ.println (F93_10());
        }
    F93_EXCDNATDIA = 0;
    F93_EXCDPRODUT = 0;
    F93_EXCDUFMUNI = fix("", 2);
    F93_EXINBRINDE = 0;
    F93_EXINCLIENT = 0;
    F93_EXNRNOTDIA = 0;
    F93_EXPCICMDIA = 0;
    F93_EXVLBASDIA = 0;
    F93_EXVLCONDIA = 0;
    F93_EXVLICMDIA = 0;
    F93_EXVLIMPDIA = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_93");

     }
 }
private void F_94()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F94_1());
            P_CheckPage();
            GLB.LP.println(F94_2());
            P_CheckPage();
            GLB.LP.println(F94_3());
            P_CheckPage();
            GLB.LP.println(F94_4());
            P_CheckPage();
            GLB.LP.println(F94_5());
            P_CheckPage();
            GLB.LP.println(F94_6());
            P_CheckPage();
            GLB.LP.println(F94_7());
            P_CheckPage();
            GLB.LP.println(F94_8());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F94_1());
            P_CheckPageB();
            GLB.LPB.println (F94_2());
            P_CheckPageB();
            GLB.LPB.println (F94_3());
            P_CheckPageB();
            GLB.LPB.println (F94_4());
            P_CheckPageB();
            GLB.LPB.println (F94_5());
            P_CheckPageB();
            GLB.LPB.println (F94_6());
            P_CheckPageB();
            GLB.LPB.println (F94_7());
            P_CheckPageB();
            GLB.LPB.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F94_1());
            P_CheckPageC();
            GLB.LPC.println (F94_2());
            P_CheckPageC();
            GLB.LPC.println (F94_3());
            P_CheckPageC();
            GLB.LPC.println (F94_4());
            P_CheckPageC();
            GLB.LPC.println (F94_5());
            P_CheckPageC();
            GLB.LPC.println (F94_6());
            P_CheckPageC();
            GLB.LPC.println (F94_7());
            P_CheckPageC();
            GLB.LPC.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F94_1());
            P_CheckPageD();
            GLB.LPD.println (F94_2());
            P_CheckPageD();
            GLB.LPD.println (F94_3());
            P_CheckPageD();
            GLB.LPD.println (F94_4());
            P_CheckPageD();
            GLB.LPD.println (F94_5());
            P_CheckPageD();
            GLB.LPD.println (F94_6());
            P_CheckPageD();
            GLB.LPD.println (F94_7());
            P_CheckPageD();
            GLB.LPD.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F94_1());
            P_CheckPageE();
            GLB.LPE.println (F94_2());
            P_CheckPageE();
            GLB.LPE.println (F94_3());
            P_CheckPageE();
            GLB.LPE.println (F94_4());
            P_CheckPageE();
            GLB.LPE.println (F94_5());
            P_CheckPageE();
            GLB.LPE.println (F94_6());
            P_CheckPageE();
            GLB.LPE.println (F94_7());
            P_CheckPageE();
            GLB.LPE.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F94_1());
            P_CheckPageF();
            GLB.LPF.println (F94_2());
            P_CheckPageF();
            GLB.LPF.println (F94_3());
            P_CheckPageF();
            GLB.LPF.println (F94_4());
            P_CheckPageF();
            GLB.LPF.println (F94_5());
            P_CheckPageF();
            GLB.LPF.println (F94_6());
            P_CheckPageF();
            GLB.LPF.println (F94_7());
            P_CheckPageF();
            GLB.LPF.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F94_1());
            P_CheckPageG();
            GLB.LPG.println (F94_2());
            P_CheckPageG();
            GLB.LPG.println (F94_3());
            P_CheckPageG();
            GLB.LPG.println (F94_4());
            P_CheckPageG();
            GLB.LPG.println (F94_5());
            P_CheckPageG();
            GLB.LPG.println (F94_6());
            P_CheckPageG();
            GLB.LPG.println (F94_7());
            P_CheckPageG();
            GLB.LPG.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F94_1());
            P_CheckPageH();
            GLB.LPH.println (F94_2());
            P_CheckPageH();
            GLB.LPH.println (F94_3());
            P_CheckPageH();
            GLB.LPH.println (F94_4());
            P_CheckPageH();
            GLB.LPH.println (F94_5());
            P_CheckPageH();
            GLB.LPH.println (F94_6());
            P_CheckPageH();
            GLB.LPH.println (F94_7());
            P_CheckPageH();
            GLB.LPH.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F94_1());
            P_CheckPageI();
            GLB.LPI.println (F94_2());
            P_CheckPageI();
            GLB.LPI.println (F94_3());
            P_CheckPageI();
            GLB.LPI.println (F94_4());
            P_CheckPageI();
            GLB.LPI.println (F94_5());
            P_CheckPageI();
            GLB.LPI.println (F94_6());
            P_CheckPageI();
            GLB.LPI.println (F94_7());
            P_CheckPageI();
            GLB.LPI.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F94_1());
            P_CheckPageJ();
            GLB.LPJ.println (F94_2());
            P_CheckPageJ();
            GLB.LPJ.println (F94_3());
            P_CheckPageJ();
            GLB.LPJ.println (F94_4());
            P_CheckPageJ();
            GLB.LPJ.println (F94_5());
            P_CheckPageJ();
            GLB.LPJ.println (F94_6());
            P_CheckPageJ();
            GLB.LPJ.println (F94_7());
            P_CheckPageJ();
            GLB.LPJ.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F94_1());
            P_CheckPageL();
            GLB.LPL.println (F94_2());
            P_CheckPageL();
            GLB.LPL.println (F94_3());
            P_CheckPageL();
            GLB.LPL.println (F94_4());
            P_CheckPageL();
            GLB.LPL.println (F94_5());
            P_CheckPageL();
            GLB.LPL.println (F94_6());
            P_CheckPageL();
            GLB.LPL.println (F94_7());
            P_CheckPageL();
            GLB.LPL.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F94_1());
            P_CheckPageM();
            GLB.LPM.println (F94_2());
            P_CheckPageM();
            GLB.LPM.println (F94_3());
            P_CheckPageM();
            GLB.LPM.println (F94_4());
            P_CheckPageM();
            GLB.LPM.println (F94_5());
            P_CheckPageM();
            GLB.LPM.println (F94_6());
            P_CheckPageM();
            GLB.LPM.println (F94_7());
            P_CheckPageM();
            GLB.LPM.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F94_1());
            P_CheckPageN();
            GLB.LPN.println (F94_2());
            P_CheckPageN();
            GLB.LPN.println (F94_3());
            P_CheckPageN();
            GLB.LPN.println (F94_4());
            P_CheckPageN();
            GLB.LPN.println (F94_5());
            P_CheckPageN();
            GLB.LPN.println (F94_6());
            P_CheckPageN();
            GLB.LPN.println (F94_7());
            P_CheckPageN();
            GLB.LPN.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F94_1());
            P_CheckPageO();
            GLB.LPO.println (F94_2());
            P_CheckPageO();
            GLB.LPO.println (F94_3());
            P_CheckPageO();
            GLB.LPO.println (F94_4());
            P_CheckPageO();
            GLB.LPO.println (F94_5());
            P_CheckPageO();
            GLB.LPO.println (F94_6());
            P_CheckPageO();
            GLB.LPO.println (F94_7());
            P_CheckPageO();
            GLB.LPO.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F94_1());
            P_CheckPageP();
            GLB.LPP.println (F94_2());
            P_CheckPageP();
            GLB.LPP.println (F94_3());
            P_CheckPageP();
            GLB.LPP.println (F94_4());
            P_CheckPageP();
            GLB.LPP.println (F94_5());
            P_CheckPageP();
            GLB.LPP.println (F94_6());
            P_CheckPageP();
            GLB.LPP.println (F94_7());
            P_CheckPageP();
            GLB.LPP.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F94_1());
            P_CheckPageQ();
            GLB.LPQ.println (F94_2());
            P_CheckPageQ();
            GLB.LPQ.println (F94_3());
            P_CheckPageQ();
            GLB.LPQ.println (F94_4());
            P_CheckPageQ();
            GLB.LPQ.println (F94_5());
            P_CheckPageQ();
            GLB.LPQ.println (F94_6());
            P_CheckPageQ();
            GLB.LPQ.println (F94_7());
            P_CheckPageQ();
            GLB.LPQ.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F94_1());
            P_CheckPageR();
            GLB.LPR.println (F94_2());
            P_CheckPageR();
            GLB.LPR.println (F94_3());
            P_CheckPageR();
            GLB.LPR.println (F94_4());
            P_CheckPageR();
            GLB.LPR.println (F94_5());
            P_CheckPageR();
            GLB.LPR.println (F94_6());
            P_CheckPageR();
            GLB.LPR.println (F94_7());
            P_CheckPageR();
            GLB.LPR.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F94_1());
            P_CheckPageS();
            GLB.LPS.println (F94_2());
            P_CheckPageS();
            GLB.LPS.println (F94_3());
            P_CheckPageS();
            GLB.LPS.println (F94_4());
            P_CheckPageS();
            GLB.LPS.println (F94_5());
            P_CheckPageS();
            GLB.LPS.println (F94_6());
            P_CheckPageS();
            GLB.LPS.println (F94_7());
            P_CheckPageS();
            GLB.LPS.println (F94_8());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F94_1());
            P_CheckPageZ();
            GLB.LPZ.println (F94_2());
            P_CheckPageZ();
            GLB.LPZ.println (F94_3());
            P_CheckPageZ();
            GLB.LPZ.println (F94_4());
            P_CheckPageZ();
            GLB.LPZ.println (F94_5());
            P_CheckPageZ();
            GLB.LPZ.println (F94_6());
            P_CheckPageZ();
            GLB.LPZ.println (F94_7());
            P_CheckPageZ();
            GLB.LPZ.println (F94_8());
        }
    F94_EXCDLINCRE = 0;
    F94_EXCDNATCRE = 0;
    F94_EXINTEXCRE = fix("", 1);
    F94_EXNRNOTCRE = 0;
    F94_EXPCICMCRE = 0;
    F94_EXVLBASCRE = 0;
    F94_EXVLCONCRE = 0;
    F94_EXVLIMPCRE = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_94");

     }
 }
private void F_95()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F95_1());
            P_CheckPage();
            GLB.LP.println(F95_2());
            P_CheckPage();
            GLB.LP.println(F95_3());
            P_CheckPage();
            GLB.LP.println(F95_4());
            P_CheckPage();
            GLB.LP.println(F95_5());
            P_CheckPage();
            GLB.LP.println(F95_6());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F95_1());
            P_CheckPageB();
            GLB.LPB.println (F95_2());
            P_CheckPageB();
            GLB.LPB.println (F95_3());
            P_CheckPageB();
            GLB.LPB.println (F95_4());
            P_CheckPageB();
            GLB.LPB.println (F95_5());
            P_CheckPageB();
            GLB.LPB.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F95_1());
            P_CheckPageC();
            GLB.LPC.println (F95_2());
            P_CheckPageC();
            GLB.LPC.println (F95_3());
            P_CheckPageC();
            GLB.LPC.println (F95_4());
            P_CheckPageC();
            GLB.LPC.println (F95_5());
            P_CheckPageC();
            GLB.LPC.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F95_1());
            P_CheckPageD();
            GLB.LPD.println (F95_2());
            P_CheckPageD();
            GLB.LPD.println (F95_3());
            P_CheckPageD();
            GLB.LPD.println (F95_4());
            P_CheckPageD();
            GLB.LPD.println (F95_5());
            P_CheckPageD();
            GLB.LPD.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F95_1());
            P_CheckPageE();
            GLB.LPE.println (F95_2());
            P_CheckPageE();
            GLB.LPE.println (F95_3());
            P_CheckPageE();
            GLB.LPE.println (F95_4());
            P_CheckPageE();
            GLB.LPE.println (F95_5());
            P_CheckPageE();
            GLB.LPE.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F95_1());
            P_CheckPageF();
            GLB.LPF.println (F95_2());
            P_CheckPageF();
            GLB.LPF.println (F95_3());
            P_CheckPageF();
            GLB.LPF.println (F95_4());
            P_CheckPageF();
            GLB.LPF.println (F95_5());
            P_CheckPageF();
            GLB.LPF.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F95_1());
            P_CheckPageG();
            GLB.LPG.println (F95_2());
            P_CheckPageG();
            GLB.LPG.println (F95_3());
            P_CheckPageG();
            GLB.LPG.println (F95_4());
            P_CheckPageG();
            GLB.LPG.println (F95_5());
            P_CheckPageG();
            GLB.LPG.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F95_1());
            P_CheckPageH();
            GLB.LPH.println (F95_2());
            P_CheckPageH();
            GLB.LPH.println (F95_3());
            P_CheckPageH();
            GLB.LPH.println (F95_4());
            P_CheckPageH();
            GLB.LPH.println (F95_5());
            P_CheckPageH();
            GLB.LPH.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F95_1());
            P_CheckPageI();
            GLB.LPI.println (F95_2());
            P_CheckPageI();
            GLB.LPI.println (F95_3());
            P_CheckPageI();
            GLB.LPI.println (F95_4());
            P_CheckPageI();
            GLB.LPI.println (F95_5());
            P_CheckPageI();
            GLB.LPI.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F95_1());
            P_CheckPageJ();
            GLB.LPJ.println (F95_2());
            P_CheckPageJ();
            GLB.LPJ.println (F95_3());
            P_CheckPageJ();
            GLB.LPJ.println (F95_4());
            P_CheckPageJ();
            GLB.LPJ.println (F95_5());
            P_CheckPageJ();
            GLB.LPJ.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F95_1());
            P_CheckPageL();
            GLB.LPL.println (F95_2());
            P_CheckPageL();
            GLB.LPL.println (F95_3());
            P_CheckPageL();
            GLB.LPL.println (F95_4());
            P_CheckPageL();
            GLB.LPL.println (F95_5());
            P_CheckPageL();
            GLB.LPL.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F95_1());
            P_CheckPageM();
            GLB.LPM.println (F95_2());
            P_CheckPageM();
            GLB.LPM.println (F95_3());
            P_CheckPageM();
            GLB.LPM.println (F95_4());
            P_CheckPageM();
            GLB.LPM.println (F95_5());
            P_CheckPageM();
            GLB.LPM.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F95_1());
            P_CheckPageN();
            GLB.LPN.println (F95_2());
            P_CheckPageN();
            GLB.LPN.println (F95_3());
            P_CheckPageN();
            GLB.LPN.println (F95_4());
            P_CheckPageN();
            GLB.LPN.println (F95_5());
            P_CheckPageN();
            GLB.LPN.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F95_1());
            P_CheckPageO();
            GLB.LPO.println (F95_2());
            P_CheckPageO();
            GLB.LPO.println (F95_3());
            P_CheckPageO();
            GLB.LPO.println (F95_4());
            P_CheckPageO();
            GLB.LPO.println (F95_5());
            P_CheckPageO();
            GLB.LPO.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F95_1());
            P_CheckPageP();
            GLB.LPP.println (F95_2());
            P_CheckPageP();
            GLB.LPP.println (F95_3());
            P_CheckPageP();
            GLB.LPP.println (F95_4());
            P_CheckPageP();
            GLB.LPP.println (F95_5());
            P_CheckPageP();
            GLB.LPP.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F95_1());
            P_CheckPageQ();
            GLB.LPQ.println (F95_2());
            P_CheckPageQ();
            GLB.LPQ.println (F95_3());
            P_CheckPageQ();
            GLB.LPQ.println (F95_4());
            P_CheckPageQ();
            GLB.LPQ.println (F95_5());
            P_CheckPageQ();
            GLB.LPQ.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F95_1());
            P_CheckPageR();
            GLB.LPR.println (F95_2());
            P_CheckPageR();
            GLB.LPR.println (F95_3());
            P_CheckPageR();
            GLB.LPR.println (F95_4());
            P_CheckPageR();
            GLB.LPR.println (F95_5());
            P_CheckPageR();
            GLB.LPR.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F95_1());
            P_CheckPageS();
            GLB.LPS.println (F95_2());
            P_CheckPageS();
            GLB.LPS.println (F95_3());
            P_CheckPageS();
            GLB.LPS.println (F95_4());
            P_CheckPageS();
            GLB.LPS.println (F95_5());
            P_CheckPageS();
            GLB.LPS.println (F95_6());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F95_1());
            P_CheckPageZ();
            GLB.LPZ.println (F95_2());
            P_CheckPageZ();
            GLB.LPZ.println (F95_3());
            P_CheckPageZ();
            GLB.LPZ.println (F95_4());
            P_CheckPageZ();
            GLB.LPZ.println (F95_5());
            P_CheckPageZ();
            GLB.LPZ.println (F95_6());
        }
    F95_LABEL1 = fix("", 1);
    F95_RLDTCABECA = 0;
    F95_RLHMCABECA = fix("", 5);
    F95_RLNMABREMP = fix("", 16);
    F95_RLNRPAGINA = 0;
    F95_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_95");

     }
 }
private void F_96()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F96_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F96_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F96_1());
        }
    F96_RLCDOCORRE = fix("", 10);
    F96_RLDSOCORRE = fix("", 45);
    F96_RLINOCORRE = fix("", 20);
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_96");

     }
 }
private void F_101()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F101_1());
            P_CheckPage();
            GLB.LP.println(F101_2());
            P_CheckPage();
            GLB.LP.println(F101_3());
            P_CheckPage();
            GLB.LP.println(F101_4());
            P_CheckPage();
            GLB.LP.println(F101_5());
            P_CheckPage();
            GLB.LP.println(F101_6());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F101_1());
            P_CheckPageB();
            GLB.LPB.println (F101_2());
            P_CheckPageB();
            GLB.LPB.println (F101_3());
            P_CheckPageB();
            GLB.LPB.println (F101_4());
            P_CheckPageB();
            GLB.LPB.println (F101_5());
            P_CheckPageB();
            GLB.LPB.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F101_1());
            P_CheckPageC();
            GLB.LPC.println (F101_2());
            P_CheckPageC();
            GLB.LPC.println (F101_3());
            P_CheckPageC();
            GLB.LPC.println (F101_4());
            P_CheckPageC();
            GLB.LPC.println (F101_5());
            P_CheckPageC();
            GLB.LPC.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F101_1());
            P_CheckPageD();
            GLB.LPD.println (F101_2());
            P_CheckPageD();
            GLB.LPD.println (F101_3());
            P_CheckPageD();
            GLB.LPD.println (F101_4());
            P_CheckPageD();
            GLB.LPD.println (F101_5());
            P_CheckPageD();
            GLB.LPD.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F101_1());
            P_CheckPageE();
            GLB.LPE.println (F101_2());
            P_CheckPageE();
            GLB.LPE.println (F101_3());
            P_CheckPageE();
            GLB.LPE.println (F101_4());
            P_CheckPageE();
            GLB.LPE.println (F101_5());
            P_CheckPageE();
            GLB.LPE.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F101_1());
            P_CheckPageF();
            GLB.LPF.println (F101_2());
            P_CheckPageF();
            GLB.LPF.println (F101_3());
            P_CheckPageF();
            GLB.LPF.println (F101_4());
            P_CheckPageF();
            GLB.LPF.println (F101_5());
            P_CheckPageF();
            GLB.LPF.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F101_1());
            P_CheckPageG();
            GLB.LPG.println (F101_2());
            P_CheckPageG();
            GLB.LPG.println (F101_3());
            P_CheckPageG();
            GLB.LPG.println (F101_4());
            P_CheckPageG();
            GLB.LPG.println (F101_5());
            P_CheckPageG();
            GLB.LPG.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F101_1());
            P_CheckPageH();
            GLB.LPH.println (F101_2());
            P_CheckPageH();
            GLB.LPH.println (F101_3());
            P_CheckPageH();
            GLB.LPH.println (F101_4());
            P_CheckPageH();
            GLB.LPH.println (F101_5());
            P_CheckPageH();
            GLB.LPH.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F101_1());
            P_CheckPageI();
            GLB.LPI.println (F101_2());
            P_CheckPageI();
            GLB.LPI.println (F101_3());
            P_CheckPageI();
            GLB.LPI.println (F101_4());
            P_CheckPageI();
            GLB.LPI.println (F101_5());
            P_CheckPageI();
            GLB.LPI.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F101_1());
            P_CheckPageJ();
            GLB.LPJ.println (F101_2());
            P_CheckPageJ();
            GLB.LPJ.println (F101_3());
            P_CheckPageJ();
            GLB.LPJ.println (F101_4());
            P_CheckPageJ();
            GLB.LPJ.println (F101_5());
            P_CheckPageJ();
            GLB.LPJ.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F101_1());
            P_CheckPageL();
            GLB.LPL.println (F101_2());
            P_CheckPageL();
            GLB.LPL.println (F101_3());
            P_CheckPageL();
            GLB.LPL.println (F101_4());
            P_CheckPageL();
            GLB.LPL.println (F101_5());
            P_CheckPageL();
            GLB.LPL.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F101_1());
            P_CheckPageM();
            GLB.LPM.println (F101_2());
            P_CheckPageM();
            GLB.LPM.println (F101_3());
            P_CheckPageM();
            GLB.LPM.println (F101_4());
            P_CheckPageM();
            GLB.LPM.println (F101_5());
            P_CheckPageM();
            GLB.LPM.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F101_1());
            P_CheckPageN();
            GLB.LPN.println (F101_2());
            P_CheckPageN();
            GLB.LPN.println (F101_3());
            P_CheckPageN();
            GLB.LPN.println (F101_4());
            P_CheckPageN();
            GLB.LPN.println (F101_5());
            P_CheckPageN();
            GLB.LPN.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F101_1());
            P_CheckPageO();
            GLB.LPO.println (F101_2());
            P_CheckPageO();
            GLB.LPO.println (F101_3());
            P_CheckPageO();
            GLB.LPO.println (F101_4());
            P_CheckPageO();
            GLB.LPO.println (F101_5());
            P_CheckPageO();
            GLB.LPO.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F101_1());
            P_CheckPageP();
            GLB.LPP.println (F101_2());
            P_CheckPageP();
            GLB.LPP.println (F101_3());
            P_CheckPageP();
            GLB.LPP.println (F101_4());
            P_CheckPageP();
            GLB.LPP.println (F101_5());
            P_CheckPageP();
            GLB.LPP.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F101_1());
            P_CheckPageQ();
            GLB.LPQ.println (F101_2());
            P_CheckPageQ();
            GLB.LPQ.println (F101_3());
            P_CheckPageQ();
            GLB.LPQ.println (F101_4());
            P_CheckPageQ();
            GLB.LPQ.println (F101_5());
            P_CheckPageQ();
            GLB.LPQ.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F101_1());
            P_CheckPageR();
            GLB.LPR.println (F101_2());
            P_CheckPageR();
            GLB.LPR.println (F101_3());
            P_CheckPageR();
            GLB.LPR.println (F101_4());
            P_CheckPageR();
            GLB.LPR.println (F101_5());
            P_CheckPageR();
            GLB.LPR.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F101_1());
            P_CheckPageS();
            GLB.LPS.println (F101_2());
            P_CheckPageS();
            GLB.LPS.println (F101_3());
            P_CheckPageS();
            GLB.LPS.println (F101_4());
            P_CheckPageS();
            GLB.LPS.println (F101_5());
            P_CheckPageS();
            GLB.LPS.println (F101_6());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F101_1());
            P_CheckPageZ();
            GLB.LPZ.println (F101_2());
            P_CheckPageZ();
            GLB.LPZ.println (F101_3());
            P_CheckPageZ();
            GLB.LPZ.println (F101_4());
            P_CheckPageZ();
            GLB.LPZ.println (F101_5());
            P_CheckPageZ();
            GLB.LPZ.println (F101_6());
        }
    F101_LABEL1 = fix("", 1);
    F101_RLDTCABECA = 0;
    F101_RLDTFINALX = fix("", 10);
    F101_RLDTINICIO = fix("", 10);
    F101_RLHMCABECA = fix("", 5);
    F101_RLNMABREMP = fix("", 16);
    F101_RLNRPAGINA = 0;
    F101_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_101");

     }
 }
private void F_102()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F102_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F102_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F102_1());
        }
    F102_RLCDNATOGR = fix("", 7);
    F102_RLCDUFMUNI = fix("", 2);
    F102_RLVLBASDID = 0;
    F102_RLVLFCPDES = 0;
    F102_RLVLICMDID = 0;
    F102_RLVLICMDIO = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_102");

     }
 }
private void F_103()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F103_1());
            P_CheckPage();
            GLB.LP.println(F103_2());
            P_CheckPage();
            GLB.LP.println(F103_3());
            P_CheckPage();
            GLB.LP.println(F103_4());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F103_1());
            P_CheckPageB();
            GLB.LPB.println (F103_2());
            P_CheckPageB();
            GLB.LPB.println (F103_3());
            P_CheckPageB();
            GLB.LPB.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F103_1());
            P_CheckPageC();
            GLB.LPC.println (F103_2());
            P_CheckPageC();
            GLB.LPC.println (F103_3());
            P_CheckPageC();
            GLB.LPC.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F103_1());
            P_CheckPageD();
            GLB.LPD.println (F103_2());
            P_CheckPageD();
            GLB.LPD.println (F103_3());
            P_CheckPageD();
            GLB.LPD.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F103_1());
            P_CheckPageE();
            GLB.LPE.println (F103_2());
            P_CheckPageE();
            GLB.LPE.println (F103_3());
            P_CheckPageE();
            GLB.LPE.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F103_1());
            P_CheckPageF();
            GLB.LPF.println (F103_2());
            P_CheckPageF();
            GLB.LPF.println (F103_3());
            P_CheckPageF();
            GLB.LPF.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F103_1());
            P_CheckPageG();
            GLB.LPG.println (F103_2());
            P_CheckPageG();
            GLB.LPG.println (F103_3());
            P_CheckPageG();
            GLB.LPG.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F103_1());
            P_CheckPageH();
            GLB.LPH.println (F103_2());
            P_CheckPageH();
            GLB.LPH.println (F103_3());
            P_CheckPageH();
            GLB.LPH.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F103_1());
            P_CheckPageI();
            GLB.LPI.println (F103_2());
            P_CheckPageI();
            GLB.LPI.println (F103_3());
            P_CheckPageI();
            GLB.LPI.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F103_1());
            P_CheckPageJ();
            GLB.LPJ.println (F103_2());
            P_CheckPageJ();
            GLB.LPJ.println (F103_3());
            P_CheckPageJ();
            GLB.LPJ.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F103_1());
            P_CheckPageL();
            GLB.LPL.println (F103_2());
            P_CheckPageL();
            GLB.LPL.println (F103_3());
            P_CheckPageL();
            GLB.LPL.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F103_1());
            P_CheckPageM();
            GLB.LPM.println (F103_2());
            P_CheckPageM();
            GLB.LPM.println (F103_3());
            P_CheckPageM();
            GLB.LPM.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F103_1());
            P_CheckPageN();
            GLB.LPN.println (F103_2());
            P_CheckPageN();
            GLB.LPN.println (F103_3());
            P_CheckPageN();
            GLB.LPN.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F103_1());
            P_CheckPageO();
            GLB.LPO.println (F103_2());
            P_CheckPageO();
            GLB.LPO.println (F103_3());
            P_CheckPageO();
            GLB.LPO.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F103_1());
            P_CheckPageP();
            GLB.LPP.println (F103_2());
            P_CheckPageP();
            GLB.LPP.println (F103_3());
            P_CheckPageP();
            GLB.LPP.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F103_1());
            P_CheckPageQ();
            GLB.LPQ.println (F103_2());
            P_CheckPageQ();
            GLB.LPQ.println (F103_3());
            P_CheckPageQ();
            GLB.LPQ.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F103_1());
            P_CheckPageR();
            GLB.LPR.println (F103_2());
            P_CheckPageR();
            GLB.LPR.println (F103_3());
            P_CheckPageR();
            GLB.LPR.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F103_1());
            P_CheckPageS();
            GLB.LPS.println (F103_2());
            P_CheckPageS();
            GLB.LPS.println (F103_3());
            P_CheckPageS();
            GLB.LPS.println (F103_4());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F103_1());
            P_CheckPageZ();
            GLB.LPZ.println (F103_2());
            P_CheckPageZ();
            GLB.LPZ.println (F103_3());
            P_CheckPageZ();
            GLB.LPZ.println (F103_4());
        }
    F103_LABEL1 = fix("", 1);
    F103_RLCDUFMUNI = fix("", 2);
    F103_RLVLBASDID = 0;
    F103_RLVLFCPDES = 0;
    F103_RLVLICMDID = 0;
    F103_RLVLICMDIO = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_103");

     }
 }
private void F_104()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F104_1());
            P_CheckPage();
            GLB.LP.println(F104_2());
            P_CheckPage();
            GLB.LP.println(F104_3());
            P_CheckPage();
            GLB.LP.println(F104_4());
            P_CheckPage();
            GLB.LP.println(F104_5());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F104_1());
            P_CheckPageB();
            GLB.LPB.println (F104_2());
            P_CheckPageB();
            GLB.LPB.println (F104_3());
            P_CheckPageB();
            GLB.LPB.println (F104_4());
            P_CheckPageB();
            GLB.LPB.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F104_1());
            P_CheckPageC();
            GLB.LPC.println (F104_2());
            P_CheckPageC();
            GLB.LPC.println (F104_3());
            P_CheckPageC();
            GLB.LPC.println (F104_4());
            P_CheckPageC();
            GLB.LPC.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F104_1());
            P_CheckPageD();
            GLB.LPD.println (F104_2());
            P_CheckPageD();
            GLB.LPD.println (F104_3());
            P_CheckPageD();
            GLB.LPD.println (F104_4());
            P_CheckPageD();
            GLB.LPD.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F104_1());
            P_CheckPageE();
            GLB.LPE.println (F104_2());
            P_CheckPageE();
            GLB.LPE.println (F104_3());
            P_CheckPageE();
            GLB.LPE.println (F104_4());
            P_CheckPageE();
            GLB.LPE.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F104_1());
            P_CheckPageF();
            GLB.LPF.println (F104_2());
            P_CheckPageF();
            GLB.LPF.println (F104_3());
            P_CheckPageF();
            GLB.LPF.println (F104_4());
            P_CheckPageF();
            GLB.LPF.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F104_1());
            P_CheckPageG();
            GLB.LPG.println (F104_2());
            P_CheckPageG();
            GLB.LPG.println (F104_3());
            P_CheckPageG();
            GLB.LPG.println (F104_4());
            P_CheckPageG();
            GLB.LPG.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F104_1());
            P_CheckPageH();
            GLB.LPH.println (F104_2());
            P_CheckPageH();
            GLB.LPH.println (F104_3());
            P_CheckPageH();
            GLB.LPH.println (F104_4());
            P_CheckPageH();
            GLB.LPH.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F104_1());
            P_CheckPageI();
            GLB.LPI.println (F104_2());
            P_CheckPageI();
            GLB.LPI.println (F104_3());
            P_CheckPageI();
            GLB.LPI.println (F104_4());
            P_CheckPageI();
            GLB.LPI.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F104_1());
            P_CheckPageJ();
            GLB.LPJ.println (F104_2());
            P_CheckPageJ();
            GLB.LPJ.println (F104_3());
            P_CheckPageJ();
            GLB.LPJ.println (F104_4());
            P_CheckPageJ();
            GLB.LPJ.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F104_1());
            P_CheckPageL();
            GLB.LPL.println (F104_2());
            P_CheckPageL();
            GLB.LPL.println (F104_3());
            P_CheckPageL();
            GLB.LPL.println (F104_4());
            P_CheckPageL();
            GLB.LPL.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F104_1());
            P_CheckPageM();
            GLB.LPM.println (F104_2());
            P_CheckPageM();
            GLB.LPM.println (F104_3());
            P_CheckPageM();
            GLB.LPM.println (F104_4());
            P_CheckPageM();
            GLB.LPM.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F104_1());
            P_CheckPageN();
            GLB.LPN.println (F104_2());
            P_CheckPageN();
            GLB.LPN.println (F104_3());
            P_CheckPageN();
            GLB.LPN.println (F104_4());
            P_CheckPageN();
            GLB.LPN.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F104_1());
            P_CheckPageO();
            GLB.LPO.println (F104_2());
            P_CheckPageO();
            GLB.LPO.println (F104_3());
            P_CheckPageO();
            GLB.LPO.println (F104_4());
            P_CheckPageO();
            GLB.LPO.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F104_1());
            P_CheckPageP();
            GLB.LPP.println (F104_2());
            P_CheckPageP();
            GLB.LPP.println (F104_3());
            P_CheckPageP();
            GLB.LPP.println (F104_4());
            P_CheckPageP();
            GLB.LPP.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F104_1());
            P_CheckPageQ();
            GLB.LPQ.println (F104_2());
            P_CheckPageQ();
            GLB.LPQ.println (F104_3());
            P_CheckPageQ();
            GLB.LPQ.println (F104_4());
            P_CheckPageQ();
            GLB.LPQ.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F104_1());
            P_CheckPageR();
            GLB.LPR.println (F104_2());
            P_CheckPageR();
            GLB.LPR.println (F104_3());
            P_CheckPageR();
            GLB.LPR.println (F104_4());
            P_CheckPageR();
            GLB.LPR.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F104_1());
            P_CheckPageS();
            GLB.LPS.println (F104_2());
            P_CheckPageS();
            GLB.LPS.println (F104_3());
            P_CheckPageS();
            GLB.LPS.println (F104_4());
            P_CheckPageS();
            GLB.LPS.println (F104_5());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F104_1());
            P_CheckPageZ();
            GLB.LPZ.println (F104_2());
            P_CheckPageZ();
            GLB.LPZ.println (F104_3());
            P_CheckPageZ();
            GLB.LPZ.println (F104_4());
            P_CheckPageZ();
            GLB.LPZ.println (F104_5());
        }
    F104_EXNRNOTCRE = 0;
    F104_EXVLBASCRE = 0;
    F104_EXVLFCPDES = 0;
    F104_EXVLICMDID = 0;
    F104_EXVLICMDIO = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_104");

     }
 }
private void F_111()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F111_1());
            P_CheckPage();
            GLB.LP.println(F111_2());
            P_CheckPage();
            GLB.LP.println(F111_3());
            P_CheckPage();
            GLB.LP.println(F111_4());
            P_CheckPage();
            GLB.LP.println(F111_5());
            P_CheckPage();
            GLB.LP.println(F111_6());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F111_1());
            P_CheckPageB();
            GLB.LPB.println (F111_2());
            P_CheckPageB();
            GLB.LPB.println (F111_3());
            P_CheckPageB();
            GLB.LPB.println (F111_4());
            P_CheckPageB();
            GLB.LPB.println (F111_5());
            P_CheckPageB();
            GLB.LPB.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F111_1());
            P_CheckPageC();
            GLB.LPC.println (F111_2());
            P_CheckPageC();
            GLB.LPC.println (F111_3());
            P_CheckPageC();
            GLB.LPC.println (F111_4());
            P_CheckPageC();
            GLB.LPC.println (F111_5());
            P_CheckPageC();
            GLB.LPC.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F111_1());
            P_CheckPageD();
            GLB.LPD.println (F111_2());
            P_CheckPageD();
            GLB.LPD.println (F111_3());
            P_CheckPageD();
            GLB.LPD.println (F111_4());
            P_CheckPageD();
            GLB.LPD.println (F111_5());
            P_CheckPageD();
            GLB.LPD.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F111_1());
            P_CheckPageE();
            GLB.LPE.println (F111_2());
            P_CheckPageE();
            GLB.LPE.println (F111_3());
            P_CheckPageE();
            GLB.LPE.println (F111_4());
            P_CheckPageE();
            GLB.LPE.println (F111_5());
            P_CheckPageE();
            GLB.LPE.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F111_1());
            P_CheckPageF();
            GLB.LPF.println (F111_2());
            P_CheckPageF();
            GLB.LPF.println (F111_3());
            P_CheckPageF();
            GLB.LPF.println (F111_4());
            P_CheckPageF();
            GLB.LPF.println (F111_5());
            P_CheckPageF();
            GLB.LPF.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F111_1());
            P_CheckPageG();
            GLB.LPG.println (F111_2());
            P_CheckPageG();
            GLB.LPG.println (F111_3());
            P_CheckPageG();
            GLB.LPG.println (F111_4());
            P_CheckPageG();
            GLB.LPG.println (F111_5());
            P_CheckPageG();
            GLB.LPG.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F111_1());
            P_CheckPageH();
            GLB.LPH.println (F111_2());
            P_CheckPageH();
            GLB.LPH.println (F111_3());
            P_CheckPageH();
            GLB.LPH.println (F111_4());
            P_CheckPageH();
            GLB.LPH.println (F111_5());
            P_CheckPageH();
            GLB.LPH.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F111_1());
            P_CheckPageI();
            GLB.LPI.println (F111_2());
            P_CheckPageI();
            GLB.LPI.println (F111_3());
            P_CheckPageI();
            GLB.LPI.println (F111_4());
            P_CheckPageI();
            GLB.LPI.println (F111_5());
            P_CheckPageI();
            GLB.LPI.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F111_1());
            P_CheckPageJ();
            GLB.LPJ.println (F111_2());
            P_CheckPageJ();
            GLB.LPJ.println (F111_3());
            P_CheckPageJ();
            GLB.LPJ.println (F111_4());
            P_CheckPageJ();
            GLB.LPJ.println (F111_5());
            P_CheckPageJ();
            GLB.LPJ.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F111_1());
            P_CheckPageL();
            GLB.LPL.println (F111_2());
            P_CheckPageL();
            GLB.LPL.println (F111_3());
            P_CheckPageL();
            GLB.LPL.println (F111_4());
            P_CheckPageL();
            GLB.LPL.println (F111_5());
            P_CheckPageL();
            GLB.LPL.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F111_1());
            P_CheckPageM();
            GLB.LPM.println (F111_2());
            P_CheckPageM();
            GLB.LPM.println (F111_3());
            P_CheckPageM();
            GLB.LPM.println (F111_4());
            P_CheckPageM();
            GLB.LPM.println (F111_5());
            P_CheckPageM();
            GLB.LPM.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F111_1());
            P_CheckPageN();
            GLB.LPN.println (F111_2());
            P_CheckPageN();
            GLB.LPN.println (F111_3());
            P_CheckPageN();
            GLB.LPN.println (F111_4());
            P_CheckPageN();
            GLB.LPN.println (F111_5());
            P_CheckPageN();
            GLB.LPN.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F111_1());
            P_CheckPageO();
            GLB.LPO.println (F111_2());
            P_CheckPageO();
            GLB.LPO.println (F111_3());
            P_CheckPageO();
            GLB.LPO.println (F111_4());
            P_CheckPageO();
            GLB.LPO.println (F111_5());
            P_CheckPageO();
            GLB.LPO.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F111_1());
            P_CheckPageP();
            GLB.LPP.println (F111_2());
            P_CheckPageP();
            GLB.LPP.println (F111_3());
            P_CheckPageP();
            GLB.LPP.println (F111_4());
            P_CheckPageP();
            GLB.LPP.println (F111_5());
            P_CheckPageP();
            GLB.LPP.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F111_1());
            P_CheckPageQ();
            GLB.LPQ.println (F111_2());
            P_CheckPageQ();
            GLB.LPQ.println (F111_3());
            P_CheckPageQ();
            GLB.LPQ.println (F111_4());
            P_CheckPageQ();
            GLB.LPQ.println (F111_5());
            P_CheckPageQ();
            GLB.LPQ.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F111_1());
            P_CheckPageR();
            GLB.LPR.println (F111_2());
            P_CheckPageR();
            GLB.LPR.println (F111_3());
            P_CheckPageR();
            GLB.LPR.println (F111_4());
            P_CheckPageR();
            GLB.LPR.println (F111_5());
            P_CheckPageR();
            GLB.LPR.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F111_1());
            P_CheckPageS();
            GLB.LPS.println (F111_2());
            P_CheckPageS();
            GLB.LPS.println (F111_3());
            P_CheckPageS();
            GLB.LPS.println (F111_4());
            P_CheckPageS();
            GLB.LPS.println (F111_5());
            P_CheckPageS();
            GLB.LPS.println (F111_6());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F111_1());
            P_CheckPageZ();
            GLB.LPZ.println (F111_2());
            P_CheckPageZ();
            GLB.LPZ.println (F111_3());
            P_CheckPageZ();
            GLB.LPZ.println (F111_4());
            P_CheckPageZ();
            GLB.LPZ.println (F111_5());
            P_CheckPageZ();
            GLB.LPZ.println (F111_6());
        }
    F111_LABEL1 = fix("", 1);
    F111_RLDSTEX20A = fix("", 20);
    F111_RLDTCABECA = 0;
    F111_RLDTFINALX = fix("", 10);
    F111_RLDTINICIO = fix("", 10);
    F111_RLHMCABECA = fix("", 5);
    F111_RLNMABREMP = fix("", 16);
    F111_RLNRPAGINA = 0;
    F111_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_111");

     }
 }
private void F_112()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F112_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F112_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F112_1());
        }
    F112_RLNRNOTCRE = 0;
    F112_RLVLBASCRE = 0;
    F112_RLVLFCPDES = 0;
    F112_RLVLICMDID = 0;
    F112_RLVLICMDIO = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_112");

     }
 }
private void F_113()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F113_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F113_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F113_1());
        }
    F113_RLVLBASCRE = 0;
    F113_RLVLFCPDES = 0;
    F113_RLVLICMDID = 0;
    F113_RLVLICMDIO = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_113");

     }
 }
private void F_121()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F121_1());
            P_CheckPage();
            GLB.LP.println(F121_2());
            P_CheckPage();
            GLB.LP.println(F121_3());
            P_CheckPage();
            GLB.LP.println(F121_4());
            P_CheckPage();
            GLB.LP.println(F121_5());
            P_CheckPage();
            GLB.LP.println(F121_6());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F121_1());
            P_CheckPageB();
            GLB.LPB.println (F121_2());
            P_CheckPageB();
            GLB.LPB.println (F121_3());
            P_CheckPageB();
            GLB.LPB.println (F121_4());
            P_CheckPageB();
            GLB.LPB.println (F121_5());
            P_CheckPageB();
            GLB.LPB.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F121_1());
            P_CheckPageC();
            GLB.LPC.println (F121_2());
            P_CheckPageC();
            GLB.LPC.println (F121_3());
            P_CheckPageC();
            GLB.LPC.println (F121_4());
            P_CheckPageC();
            GLB.LPC.println (F121_5());
            P_CheckPageC();
            GLB.LPC.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F121_1());
            P_CheckPageD();
            GLB.LPD.println (F121_2());
            P_CheckPageD();
            GLB.LPD.println (F121_3());
            P_CheckPageD();
            GLB.LPD.println (F121_4());
            P_CheckPageD();
            GLB.LPD.println (F121_5());
            P_CheckPageD();
            GLB.LPD.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F121_1());
            P_CheckPageE();
            GLB.LPE.println (F121_2());
            P_CheckPageE();
            GLB.LPE.println (F121_3());
            P_CheckPageE();
            GLB.LPE.println (F121_4());
            P_CheckPageE();
            GLB.LPE.println (F121_5());
            P_CheckPageE();
            GLB.LPE.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F121_1());
            P_CheckPageF();
            GLB.LPF.println (F121_2());
            P_CheckPageF();
            GLB.LPF.println (F121_3());
            P_CheckPageF();
            GLB.LPF.println (F121_4());
            P_CheckPageF();
            GLB.LPF.println (F121_5());
            P_CheckPageF();
            GLB.LPF.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F121_1());
            P_CheckPageG();
            GLB.LPG.println (F121_2());
            P_CheckPageG();
            GLB.LPG.println (F121_3());
            P_CheckPageG();
            GLB.LPG.println (F121_4());
            P_CheckPageG();
            GLB.LPG.println (F121_5());
            P_CheckPageG();
            GLB.LPG.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F121_1());
            P_CheckPageH();
            GLB.LPH.println (F121_2());
            P_CheckPageH();
            GLB.LPH.println (F121_3());
            P_CheckPageH();
            GLB.LPH.println (F121_4());
            P_CheckPageH();
            GLB.LPH.println (F121_5());
            P_CheckPageH();
            GLB.LPH.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F121_1());
            P_CheckPageI();
            GLB.LPI.println (F121_2());
            P_CheckPageI();
            GLB.LPI.println (F121_3());
            P_CheckPageI();
            GLB.LPI.println (F121_4());
            P_CheckPageI();
            GLB.LPI.println (F121_5());
            P_CheckPageI();
            GLB.LPI.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F121_1());
            P_CheckPageJ();
            GLB.LPJ.println (F121_2());
            P_CheckPageJ();
            GLB.LPJ.println (F121_3());
            P_CheckPageJ();
            GLB.LPJ.println (F121_4());
            P_CheckPageJ();
            GLB.LPJ.println (F121_5());
            P_CheckPageJ();
            GLB.LPJ.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F121_1());
            P_CheckPageL();
            GLB.LPL.println (F121_2());
            P_CheckPageL();
            GLB.LPL.println (F121_3());
            P_CheckPageL();
            GLB.LPL.println (F121_4());
            P_CheckPageL();
            GLB.LPL.println (F121_5());
            P_CheckPageL();
            GLB.LPL.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F121_1());
            P_CheckPageM();
            GLB.LPM.println (F121_2());
            P_CheckPageM();
            GLB.LPM.println (F121_3());
            P_CheckPageM();
            GLB.LPM.println (F121_4());
            P_CheckPageM();
            GLB.LPM.println (F121_5());
            P_CheckPageM();
            GLB.LPM.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F121_1());
            P_CheckPageN();
            GLB.LPN.println (F121_2());
            P_CheckPageN();
            GLB.LPN.println (F121_3());
            P_CheckPageN();
            GLB.LPN.println (F121_4());
            P_CheckPageN();
            GLB.LPN.println (F121_5());
            P_CheckPageN();
            GLB.LPN.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F121_1());
            P_CheckPageO();
            GLB.LPO.println (F121_2());
            P_CheckPageO();
            GLB.LPO.println (F121_3());
            P_CheckPageO();
            GLB.LPO.println (F121_4());
            P_CheckPageO();
            GLB.LPO.println (F121_5());
            P_CheckPageO();
            GLB.LPO.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F121_1());
            P_CheckPageP();
            GLB.LPP.println (F121_2());
            P_CheckPageP();
            GLB.LPP.println (F121_3());
            P_CheckPageP();
            GLB.LPP.println (F121_4());
            P_CheckPageP();
            GLB.LPP.println (F121_5());
            P_CheckPageP();
            GLB.LPP.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F121_1());
            P_CheckPageQ();
            GLB.LPQ.println (F121_2());
            P_CheckPageQ();
            GLB.LPQ.println (F121_3());
            P_CheckPageQ();
            GLB.LPQ.println (F121_4());
            P_CheckPageQ();
            GLB.LPQ.println (F121_5());
            P_CheckPageQ();
            GLB.LPQ.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F121_1());
            P_CheckPageR();
            GLB.LPR.println (F121_2());
            P_CheckPageR();
            GLB.LPR.println (F121_3());
            P_CheckPageR();
            GLB.LPR.println (F121_4());
            P_CheckPageR();
            GLB.LPR.println (F121_5());
            P_CheckPageR();
            GLB.LPR.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F121_1());
            P_CheckPageS();
            GLB.LPS.println (F121_2());
            P_CheckPageS();
            GLB.LPS.println (F121_3());
            P_CheckPageS();
            GLB.LPS.println (F121_4());
            P_CheckPageS();
            GLB.LPS.println (F121_5());
            P_CheckPageS();
            GLB.LPS.println (F121_6());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F121_1());
            P_CheckPageZ();
            GLB.LPZ.println (F121_2());
            P_CheckPageZ();
            GLB.LPZ.println (F121_3());
            P_CheckPageZ();
            GLB.LPZ.println (F121_4());
            P_CheckPageZ();
            GLB.LPZ.println (F121_5());
            P_CheckPageZ();
            GLB.LPZ.println (F121_6());
        }
    F121_RLCDCLAFI1 = 0;
    F121_RLCDCLAFIS = 0;
    F121_RLDSCONDEF = fix("", 17);
    F121_RLDSTEXAUX = fix("", 65);
    F121_RLDTCABECA = 0;
    F121_RLDTFINALX = fix("", 10);
    F121_RLDTINICIO = fix("", 10);
    F121_RLHMCABECA = fix("", 5);
    F121_RLNMABREMP = fix("", 16);
    F121_RLNRPAGINA = 0;
    F121_RLNRSOLICI = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_121");

     }
 }
private void F_122()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F122_1());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F122_1());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F122_1());
        }
    F122_RLCDAPBICM = 0;
    F122_RLCDAPNICM = 0;
    F122_RLCDAPVDIO = 0;
    F122_RLCDAPVICM = 0;
    F122_RLCDNATOGR = fix("", 7);
    F122_RLINPESSOA = fix("", 3);
    F122_RLPCICMNOT = 0;
    F122_RLVLAPOICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_122");

     }
 }
private void F_123()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F123_1());
            P_CheckPage();
            GLB.LP.println(F123_2());
            P_CheckPage();
            GLB.LP.println(F123_3());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F123_1());
            P_CheckPageB();
            GLB.LPB.println (F123_2());
            P_CheckPageB();
            GLB.LPB.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F123_1());
            P_CheckPageC();
            GLB.LPC.println (F123_2());
            P_CheckPageC();
            GLB.LPC.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F123_1());
            P_CheckPageD();
            GLB.LPD.println (F123_2());
            P_CheckPageD();
            GLB.LPD.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F123_1());
            P_CheckPageE();
            GLB.LPE.println (F123_2());
            P_CheckPageE();
            GLB.LPE.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F123_1());
            P_CheckPageF();
            GLB.LPF.println (F123_2());
            P_CheckPageF();
            GLB.LPF.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F123_1());
            P_CheckPageG();
            GLB.LPG.println (F123_2());
            P_CheckPageG();
            GLB.LPG.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F123_1());
            P_CheckPageH();
            GLB.LPH.println (F123_2());
            P_CheckPageH();
            GLB.LPH.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F123_1());
            P_CheckPageI();
            GLB.LPI.println (F123_2());
            P_CheckPageI();
            GLB.LPI.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F123_1());
            P_CheckPageJ();
            GLB.LPJ.println (F123_2());
            P_CheckPageJ();
            GLB.LPJ.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F123_1());
            P_CheckPageL();
            GLB.LPL.println (F123_2());
            P_CheckPageL();
            GLB.LPL.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F123_1());
            P_CheckPageM();
            GLB.LPM.println (F123_2());
            P_CheckPageM();
            GLB.LPM.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F123_1());
            P_CheckPageN();
            GLB.LPN.println (F123_2());
            P_CheckPageN();
            GLB.LPN.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F123_1());
            P_CheckPageO();
            GLB.LPO.println (F123_2());
            P_CheckPageO();
            GLB.LPO.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F123_1());
            P_CheckPageP();
            GLB.LPP.println (F123_2());
            P_CheckPageP();
            GLB.LPP.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F123_1());
            P_CheckPageQ();
            GLB.LPQ.println (F123_2());
            P_CheckPageQ();
            GLB.LPQ.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F123_1());
            P_CheckPageR();
            GLB.LPR.println (F123_2());
            P_CheckPageR();
            GLB.LPR.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F123_1());
            P_CheckPageS();
            GLB.LPS.println (F123_2());
            P_CheckPageS();
            GLB.LPS.println (F123_3());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F123_1());
            P_CheckPageZ();
            GLB.LPZ.println (F123_2());
            P_CheckPageZ();
            GLB.LPZ.println (F123_3());
        }
    F123_LABEL2 = fix("", 1);
    F123_RLCDAPBICM = 0;
    F123_RLCDAPNICM = 0;
    F123_RLCDAPVDIO = 0;
    F123_RLCDAPVICM = 0;
    F123_RLVLAPOICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_123");

     }
 }
private void F_124()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F124_1());
            P_CheckPage();
            GLB.LP.println(F124_2());
            P_CheckPage();
            GLB.LP.println(F124_3());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F124_1());
            P_CheckPageB();
            GLB.LPB.println (F124_2());
            P_CheckPageB();
            GLB.LPB.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F124_1());
            P_CheckPageC();
            GLB.LPC.println (F124_2());
            P_CheckPageC();
            GLB.LPC.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F124_1());
            P_CheckPageD();
            GLB.LPD.println (F124_2());
            P_CheckPageD();
            GLB.LPD.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F124_1());
            P_CheckPageE();
            GLB.LPE.println (F124_2());
            P_CheckPageE();
            GLB.LPE.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F124_1());
            P_CheckPageF();
            GLB.LPF.println (F124_2());
            P_CheckPageF();
            GLB.LPF.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F124_1());
            P_CheckPageG();
            GLB.LPG.println (F124_2());
            P_CheckPageG();
            GLB.LPG.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F124_1());
            P_CheckPageH();
            GLB.LPH.println (F124_2());
            P_CheckPageH();
            GLB.LPH.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F124_1());
            P_CheckPageI();
            GLB.LPI.println (F124_2());
            P_CheckPageI();
            GLB.LPI.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F124_1());
            P_CheckPageJ();
            GLB.LPJ.println (F124_2());
            P_CheckPageJ();
            GLB.LPJ.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F124_1());
            P_CheckPageL();
            GLB.LPL.println (F124_2());
            P_CheckPageL();
            GLB.LPL.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F124_1());
            P_CheckPageM();
            GLB.LPM.println (F124_2());
            P_CheckPageM();
            GLB.LPM.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F124_1());
            P_CheckPageN();
            GLB.LPN.println (F124_2());
            P_CheckPageN();
            GLB.LPN.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F124_1());
            P_CheckPageO();
            GLB.LPO.println (F124_2());
            P_CheckPageO();
            GLB.LPO.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F124_1());
            P_CheckPageP();
            GLB.LPP.println (F124_2());
            P_CheckPageP();
            GLB.LPP.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F124_1());
            P_CheckPageQ();
            GLB.LPQ.println (F124_2());
            P_CheckPageQ();
            GLB.LPQ.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F124_1());
            P_CheckPageR();
            GLB.LPR.println (F124_2());
            P_CheckPageR();
            GLB.LPR.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F124_1());
            P_CheckPageS();
            GLB.LPS.println (F124_2());
            P_CheckPageS();
            GLB.LPS.println (F124_3());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F124_1());
            P_CheckPageZ();
            GLB.LPZ.println (F124_2());
            P_CheckPageZ();
            GLB.LPZ.println (F124_3());
        }
    F124_LABEL2 = fix("", 1);
    F124_RLCDAPBICM = 0;
    F124_RLCDAPNICM = 0;
    F124_RLCDAPVDIO = 0;
    F124_RLCDAPVICM = 0;
    F124_RLVLAPOICM = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_124");

     }
 }
private void F_125()
 throws Exception
 {   try
     {   if (GLB.EXTRACT == true)
        {  return;
        }
        if (GLB.SHADOW.trim().equals("")== true)
        {
            P_CheckPage();
            GLB.LP.println(F125_1());
            P_CheckPage();
            GLB.LP.println(F125_2());
            P_CheckPage();
            GLB.LP.println(F125_3());
            P_CheckPage();
            GLB.LP.println(F125_4());
            P_CheckPage();
            GLB.LP.println(F125_5());
            P_CheckPage();
            GLB.LP.println(F125_6());
            P_CheckPage();
            GLB.LP.println(F125_7());
        }
        if (GLB.SHADOW.trim().equals("B")== true)
        {
            P_CheckPageB();
            GLB.LPB.println (F125_1());
            P_CheckPageB();
            GLB.LPB.println (F125_2());
            P_CheckPageB();
            GLB.LPB.println (F125_3());
            P_CheckPageB();
            GLB.LPB.println (F125_4());
            P_CheckPageB();
            GLB.LPB.println (F125_5());
            P_CheckPageB();
            GLB.LPB.println (F125_6());
            P_CheckPageB();
            GLB.LPB.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("C")== true)
        {
            P_CheckPageC();
            GLB.LPC.println (F125_1());
            P_CheckPageC();
            GLB.LPC.println (F125_2());
            P_CheckPageC();
            GLB.LPC.println (F125_3());
            P_CheckPageC();
            GLB.LPC.println (F125_4());
            P_CheckPageC();
            GLB.LPC.println (F125_5());
            P_CheckPageC();
            GLB.LPC.println (F125_6());
            P_CheckPageC();
            GLB.LPC.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("D")== true)
        {
            P_CheckPageD();
            GLB.LPD.println (F125_1());
            P_CheckPageD();
            GLB.LPD.println (F125_2());
            P_CheckPageD();
            GLB.LPD.println (F125_3());
            P_CheckPageD();
            GLB.LPD.println (F125_4());
            P_CheckPageD();
            GLB.LPD.println (F125_5());
            P_CheckPageD();
            GLB.LPD.println (F125_6());
            P_CheckPageD();
            GLB.LPD.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("E")== true)
        {
            P_CheckPageE();
            GLB.LPE.println (F125_1());
            P_CheckPageE();
            GLB.LPE.println (F125_2());
            P_CheckPageE();
            GLB.LPE.println (F125_3());
            P_CheckPageE();
            GLB.LPE.println (F125_4());
            P_CheckPageE();
            GLB.LPE.println (F125_5());
            P_CheckPageE();
            GLB.LPE.println (F125_6());
            P_CheckPageE();
            GLB.LPE.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("F")== true)
        {
            P_CheckPageF();
            GLB.LPF.println (F125_1());
            P_CheckPageF();
            GLB.LPF.println (F125_2());
            P_CheckPageF();
            GLB.LPF.println (F125_3());
            P_CheckPageF();
            GLB.LPF.println (F125_4());
            P_CheckPageF();
            GLB.LPF.println (F125_5());
            P_CheckPageF();
            GLB.LPF.println (F125_6());
            P_CheckPageF();
            GLB.LPF.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("G")== true)
        {
            P_CheckPageG();
            GLB.LPG.println (F125_1());
            P_CheckPageG();
            GLB.LPG.println (F125_2());
            P_CheckPageG();
            GLB.LPG.println (F125_3());
            P_CheckPageG();
            GLB.LPG.println (F125_4());
            P_CheckPageG();
            GLB.LPG.println (F125_5());
            P_CheckPageG();
            GLB.LPG.println (F125_6());
            P_CheckPageG();
            GLB.LPG.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("H")== true)
        {
            P_CheckPageH();
            GLB.LPH.println (F125_1());
            P_CheckPageH();
            GLB.LPH.println (F125_2());
            P_CheckPageH();
            GLB.LPH.println (F125_3());
            P_CheckPageH();
            GLB.LPH.println (F125_4());
            P_CheckPageH();
            GLB.LPH.println (F125_5());
            P_CheckPageH();
            GLB.LPH.println (F125_6());
            P_CheckPageH();
            GLB.LPH.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("I")== true)
        {
            P_CheckPageI();
            GLB.LPI.println (F125_1());
            P_CheckPageI();
            GLB.LPI.println (F125_2());
            P_CheckPageI();
            GLB.LPI.println (F125_3());
            P_CheckPageI();
            GLB.LPI.println (F125_4());
            P_CheckPageI();
            GLB.LPI.println (F125_5());
            P_CheckPageI();
            GLB.LPI.println (F125_6());
            P_CheckPageI();
            GLB.LPI.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("J")== true)
        {
            P_CheckPageJ();
            GLB.LPJ.println (F125_1());
            P_CheckPageJ();
            GLB.LPJ.println (F125_2());
            P_CheckPageJ();
            GLB.LPJ.println (F125_3());
            P_CheckPageJ();
            GLB.LPJ.println (F125_4());
            P_CheckPageJ();
            GLB.LPJ.println (F125_5());
            P_CheckPageJ();
            GLB.LPJ.println (F125_6());
            P_CheckPageJ();
            GLB.LPJ.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("L")== true)
        {
            P_CheckPageL();
            GLB.LPL.println (F125_1());
            P_CheckPageL();
            GLB.LPL.println (F125_2());
            P_CheckPageL();
            GLB.LPL.println (F125_3());
            P_CheckPageL();
            GLB.LPL.println (F125_4());
            P_CheckPageL();
            GLB.LPL.println (F125_5());
            P_CheckPageL();
            GLB.LPL.println (F125_6());
            P_CheckPageL();
            GLB.LPL.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("M")== true)
        {
            P_CheckPageM();
            GLB.LPM.println (F125_1());
            P_CheckPageM();
            GLB.LPM.println (F125_2());
            P_CheckPageM();
            GLB.LPM.println (F125_3());
            P_CheckPageM();
            GLB.LPM.println (F125_4());
            P_CheckPageM();
            GLB.LPM.println (F125_5());
            P_CheckPageM();
            GLB.LPM.println (F125_6());
            P_CheckPageM();
            GLB.LPM.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("N")== true)
        {
            P_CheckPageN();
            GLB.LPN.println (F125_1());
            P_CheckPageN();
            GLB.LPN.println (F125_2());
            P_CheckPageN();
            GLB.LPN.println (F125_3());
            P_CheckPageN();
            GLB.LPN.println (F125_4());
            P_CheckPageN();
            GLB.LPN.println (F125_5());
            P_CheckPageN();
            GLB.LPN.println (F125_6());
            P_CheckPageN();
            GLB.LPN.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("O")== true)
        {
            P_CheckPageO();
            GLB.LPO.println (F125_1());
            P_CheckPageO();
            GLB.LPO.println (F125_2());
            P_CheckPageO();
            GLB.LPO.println (F125_3());
            P_CheckPageO();
            GLB.LPO.println (F125_4());
            P_CheckPageO();
            GLB.LPO.println (F125_5());
            P_CheckPageO();
            GLB.LPO.println (F125_6());
            P_CheckPageO();
            GLB.LPO.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("P")== true)
        {
            P_CheckPageP();
            GLB.LPP.println (F125_1());
            P_CheckPageP();
            GLB.LPP.println (F125_2());
            P_CheckPageP();
            GLB.LPP.println (F125_3());
            P_CheckPageP();
            GLB.LPP.println (F125_4());
            P_CheckPageP();
            GLB.LPP.println (F125_5());
            P_CheckPageP();
            GLB.LPP.println (F125_6());
            P_CheckPageP();
            GLB.LPP.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("Q")== true)
        {
            P_CheckPageQ();
            GLB.LPQ.println (F125_1());
            P_CheckPageQ();
            GLB.LPQ.println (F125_2());
            P_CheckPageQ();
            GLB.LPQ.println (F125_3());
            P_CheckPageQ();
            GLB.LPQ.println (F125_4());
            P_CheckPageQ();
            GLB.LPQ.println (F125_5());
            P_CheckPageQ();
            GLB.LPQ.println (F125_6());
            P_CheckPageQ();
            GLB.LPQ.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("R")== true)
        {
            P_CheckPageR();
            GLB.LPR.println (F125_1());
            P_CheckPageR();
            GLB.LPR.println (F125_2());
            P_CheckPageR();
            GLB.LPR.println (F125_3());
            P_CheckPageR();
            GLB.LPR.println (F125_4());
            P_CheckPageR();
            GLB.LPR.println (F125_5());
            P_CheckPageR();
            GLB.LPR.println (F125_6());
            P_CheckPageR();
            GLB.LPR.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("S")== true)
        {
            P_CheckPageS();
            GLB.LPS.println (F125_1());
            P_CheckPageS();
            GLB.LPS.println (F125_2());
            P_CheckPageS();
            GLB.LPS.println (F125_3());
            P_CheckPageS();
            GLB.LPS.println (F125_4());
            P_CheckPageS();
            GLB.LPS.println (F125_5());
            P_CheckPageS();
            GLB.LPS.println (F125_6());
            P_CheckPageS();
            GLB.LPS.println (F125_7());
        }
        if (GLB.SHADOW.trim().equals("Z")== true)
        {
            P_CheckPageZ();
            GLB.LPZ.println (F125_1());
            P_CheckPageZ();
            GLB.LPZ.println (F125_2());
            P_CheckPageZ();
            GLB.LPZ.println (F125_3());
            P_CheckPageZ();
            GLB.LPZ.println (F125_4());
            P_CheckPageZ();
            GLB.LPZ.println (F125_5());
            P_CheckPageZ();
            GLB.LPZ.println (F125_6());
            P_CheckPageZ();
            GLB.LPZ.println (F125_7());
        }
    F125_EXCDNATDIA = 0;
    F125_EXCDUFMUNI = fix("", 2);
    F125_EXINCLIENT = 0;
    F125_EXPCICMDIA = 0;
    F125_EXVLBASDIA = 0;
    F125_EXVLCONDIA = 0;
    F125_EXVLICMDIA = 0;
    F125_EXVLIMPDIA = 0;
     }
     catch (Exception e)
     {    ShowErrorMsg (e, "F_125");

     }
 }
private void P_EXTRACTD ()
   throws Exception
{
    try
    {
       GLBEXD.command = "EXTRACT";
       if ((rTrim(GLB.EXD_STATUS)).equals("INPUT") == true)
       {   if (GLBEXD != null)
           {
               if (GLB.EXD_XSEEDCOUNT != 0)
               {   GLBEXD.write(GLB.EXD_XSEEDBUFFER.toString());
                   GLB.EXD_XSEEDCOUNT = 0;
               }
               if ( (GLBEXD.out!=null) && (GLBEXD.out.checkError()) )
               {    GLB.TASK=53;
                    abort("Error on File : " + GLBEXD_XSEEDTITLE);
               }
               GLBEXD.close();
               AuditMSG("Close D (" + GLBEXD_XSEEDTITLE + "), Reads: " + cStr(GLB.EXD_XSEEDREADS) + " Writes: " + cStr(GLB.EXD_XSEEDWRITES));
               GLB.EXD_XSEEDREADS = 0;
               GLB.EXD_XSEEDWRITES = 0;
           }
       }
       if ((rTrim(GLB.EXD_STATUS)).equals("OUTPUT") == false)
       {
          if ((rTrim(GLBEXD_EXTEND)).equals("Y") == true)
          {
              GLBEXD.open(GLBEXD_XSEEDTITLE, "APPEND");
              if (GLBEXD.openStatus.equals("")==true)
              {   AuditMSG("Open APPEND D (" + GLBEXD_XSEEDTITLE + ")" );
                  GLB.EXD_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile D (" + GLBEXD_XSEEDTITLE + ")");
              }
          }
          else
          {
              GLBEXD.open(GLBEXD_XSEEDTITLE, "OUTPUT");
              if (GLBEXD.openStatus.equals("")==true)
              {   AuditMSG("Open OUTPUT D (" + GLBEXD_XSEEDTITLE + ")" );
                  GLBEXD_EXTEND = "Y";
                  GLB.EXD_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile D (" + GLBEXD_XSEEDTITLE + ")");
              }
          }
       }
        GLBEXD_XSEEDREG = "";
        GLB.EXTRACT = true;
        P_93("EXTRACT");
        GLB.EXTRACT = false;
        D_EXCDNATDIA = F93_EXCDNATDIA;
        D_EXCDPRODUT = F93_EXCDPRODUT;
        D_EXCDUFMUNI = F93_EXCDUFMUNI;
        D_EXINBRINDE = F93_EXINBRINDE;
        D_EXINCLIENT = F93_EXINCLIENT;
        D_EXNRNOTDIA = F93_EXNRNOTDIA;
        D_EXPCICMDIA = multiply(100.0, F93_EXPCICMDIA, 5,0,"UNSIGNED","TRUNCATE");
        D_EXVLBASDIA = multiply(100.0, F93_EXVLBASDIA, 12,0,"UNSIGNED","TRUNCATE");
        D_EXVLCONDIA = multiply(100.0, F93_EXVLCONDIA, 12,0,"UNSIGNED","TRUNCATE");
        D_EXVLICMDIA = multiply(100.0, F93_EXVLICMDIA, 12,0,"UNSIGNED","TRUNCATE");
        D_EXVLIMPDIA = multiply(100.0, F93_EXVLIMPDIA, 12,0,"UNSIGNED","TRUNCATE");
        P_WriteGLBEXD();
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_EXTRACTD");
    }
}
private void P_EXTRACTE ()
   throws Exception
{
    try
    {
       GLBEXE.command = "EXTRACT";
       if ((rTrim(GLB.EXE_STATUS)).equals("INPUT") == true)
       {   if (GLBEXE != null)
           {
               if (GLB.EXE_XSEEDCOUNT != 0)
               {   GLBEXE.write(GLB.EXE_XSEEDBUFFER.toString());
                   GLB.EXE_XSEEDCOUNT = 0;
               }
               if ( (GLBEXE.out!=null) && (GLBEXE.out.checkError()) )
               {    GLB.TASK=53;
                    abort("Error on File : " + GLBEXE_XSEEDTITLE);
               }
               GLBEXE.close();
               AuditMSG("Close E (" + GLBEXE_XSEEDTITLE + "), Reads: " + cStr(GLB.EXE_XSEEDREADS) + " Writes: " + cStr(GLB.EXE_XSEEDWRITES));
               GLB.EXE_XSEEDREADS = 0;
               GLB.EXE_XSEEDWRITES = 0;
           }
       }
       if ((rTrim(GLB.EXE_STATUS)).equals("OUTPUT") == false)
       {
          if ((rTrim(GLBEXE_EXTEND)).equals("Y") == true)
          {
              GLBEXE.open(GLBEXE_XSEEDTITLE, "APPEND");
              if (GLBEXE.openStatus.equals("")==true)
              {   AuditMSG("Open APPEND E (" + GLBEXE_XSEEDTITLE + ")" );
                  GLB.EXE_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile E (" + GLBEXE_XSEEDTITLE + ")");
              }
          }
          else
          {
              GLBEXE.open(GLBEXE_XSEEDTITLE, "OUTPUT");
              if (GLBEXE.openStatus.equals("")==true)
              {   AuditMSG("Open OUTPUT E (" + GLBEXE_XSEEDTITLE + ")" );
                  GLBEXE_EXTEND = "Y";
                  GLB.EXE_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile E (" + GLBEXE_XSEEDTITLE + ")");
              }
          }
       }
        GLBEXE_XSEEDREG = "";
        GLB.EXTRACT = true;
        P_13("EXTRACT");
        GLB.EXTRACT = false;
        E_EXCDCLIDEP = F13_EXCDCLIDEP;
        E_EXCDDEPNFI = F13_EXCDDEPNFI;
        E_EXCDTIPDEP = F13_EXCDTIPDEP;
        E_EXDIEMIDEP = F13_EXDIEMIDEP;
        E_EXINCLIDEP = F13_EXINCLIDEP;
        E_EXNRNOTDEP = F13_EXNRNOTDEP;
        E_EXNRUSUNFI = F13_EXNRUSUNFI;
        E_EXVLTOICMN = multiply(100.0, F13_EXVLTOICMN, 12,0,"UNSIGNED","TRUNCATE");
        P_WriteGLBEXE();
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_EXTRACTE");
    }
}
private void P_EXTRACTH ()
   throws Exception
{
    try
    {
       GLBEXH.command = "EXTRACT";
       if ((rTrim(GLB.EXH_STATUS)).equals("INPUT") == true)
       {   if (GLBEXH != null)
           {
               if (GLB.EXH_XSEEDCOUNT != 0)
               {   GLBEXH.write(GLB.EXH_XSEEDBUFFER.toString());
                   GLB.EXH_XSEEDCOUNT = 0;
               }
               if ( (GLBEXH.out!=null) && (GLBEXH.out.checkError()) )
               {    GLB.TASK=53;
                    abort("Error on File : " + GLBEXH_XSEEDTITLE);
               }
               GLBEXH.close();
               AuditMSG("Close H (" + GLBEXH_XSEEDTITLE + "), Reads: " + cStr(GLB.EXH_XSEEDREADS) + " Writes: " + cStr(GLB.EXH_XSEEDWRITES));
               GLB.EXH_XSEEDREADS = 0;
               GLB.EXH_XSEEDWRITES = 0;
           }
       }
       if ((rTrim(GLB.EXH_STATUS)).equals("OUTPUT") == false)
       {
          if ((rTrim(GLBEXH_EXTEND)).equals("Y") == true)
          {
              GLBEXH.open(GLBEXH_XSEEDTITLE, "APPEND");
              if (GLBEXH.openStatus.equals("")==true)
              {   AuditMSG("Open APPEND H (" + GLBEXH_XSEEDTITLE + ")" );
                  GLB.EXH_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile H (" + GLBEXH_XSEEDTITLE + ")");
              }
          }
          else
          {
              GLBEXH.open(GLBEXH_XSEEDTITLE, "OUTPUT");
              if (GLBEXH.openStatus.equals("")==true)
              {   AuditMSG("Open OUTPUT H (" + GLBEXH_XSEEDTITLE + ")" );
                  GLBEXH_EXTEND = "Y";
                  GLB.EXH_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile H (" + GLBEXH_XSEEDTITLE + ")");
              }
          }
       }
        GLBEXH_XSEEDREG = "";
        GLB.EXTRACT = true;
        P_90("EXTRACT");
        GLB.EXTRACT = false;
        H_EXCDCLIFOR = F90_EXCDCLIFOR;
        H_EXINCLIFOR = F90_EXINCLIFOR;
        H_EXVLMOVIME = multiply(100.0, F90_EXVLMOVIME, 14,0,"UNSIGNED","TRUNCATE");
        P_WriteGLBEXH();
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_EXTRACTH");
    }
}
private void P_EXTRACTI ()
   throws Exception
{
    try
    {
       GLBEXI.command = "EXTRACT";
       if ((rTrim(GLB.EXI_STATUS)).equals("INPUT") == true)
       {   if (GLBEXI != null)
           {
               if (GLB.EXI_XSEEDCOUNT != 0)
               {   GLBEXI.write(GLB.EXI_XSEEDBUFFER.toString());
                   GLB.EXI_XSEEDCOUNT = 0;
               }
               if ( (GLBEXI.out!=null) && (GLBEXI.out.checkError()) )
               {    GLB.TASK=53;
                    abort("Error on File : " + GLBEXI_XSEEDTITLE);
               }
               GLBEXI.close();
               AuditMSG("Close I (" + GLBEXI_XSEEDTITLE + "), Reads: " + cStr(GLB.EXI_XSEEDREADS) + " Writes: " + cStr(GLB.EXI_XSEEDWRITES));
               GLB.EXI_XSEEDREADS = 0;
               GLB.EXI_XSEEDWRITES = 0;
           }
       }
       if ((rTrim(GLB.EXI_STATUS)).equals("OUTPUT") == false)
       {
          if ((rTrim(GLBEXI_EXTEND)).equals("Y") == true)
          {
              GLBEXI.open(GLBEXI_XSEEDTITLE, "APPEND");
              if (GLBEXI.openStatus.equals("")==true)
              {   AuditMSG("Open APPEND I (" + GLBEXI_XSEEDTITLE + ")" );
                  GLB.EXI_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile I (" + GLBEXI_XSEEDTITLE + ")");
              }
          }
          else
          {
              GLBEXI.open(GLBEXI_XSEEDTITLE, "OUTPUT");
              if (GLBEXI.openStatus.equals("")==true)
              {   AuditMSG("Open OUTPUT I (" + GLBEXI_XSEEDTITLE + ")" );
                  GLBEXI_EXTEND = "Y";
                  GLB.EXI_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile I (" + GLBEXI_XSEEDTITLE + ")");
              }
          }
       }
        GLBEXI_XSEEDREG = "";
        GLB.EXTRACT = true;
        P_10("EXTRACT");
        GLB.EXTRACT = false;
        I_EXCDMODENF = F10_EXCDMODENF;
        I_EXCDNATCOM = F10_EXCDNATCOM;
        I_EXCDNATOPE = F10_EXCDNATOPE;
        I_EXCDUFMUNI = F10_EXCDUFMUNI;
        I_EXDIEMINOT = F10_EXDIEMINOT;
        I_EXDISAINOT = F10_EXDISAINOT;
        I_EXINCONFIN = F10_EXINCONFIN;
        I_EXINDECEND = F10_EXINDECEND;
        I_EXINORIGEM = F10_EXINORIGEM;
        I_EXNRCANCEL = F10_EXNRCANCEL;
        I_EXNRCFICMP = F10_EXNRCFICMP;
        I_EXNRCONTAX = F10_EXNRCONTAX;
        I_EXNRNOTAFI = F10_EXNRNOTAFI;
        I_EXNRNOTFIN = F10_EXNRNOTFIN;
        I_EXNRSERIEX = F10_EXNRSERIEX;
        I_EXPCICMNAT = multiply(100.0, F10_EXPCICMNAT, 5,0,"UNSIGNED","TRUNCATE");
        I_EXPCICMPRO = multiply(100.0, F10_EXPCICMPRO, 4,0,"UNSIGNED","TRUNCATE");
        I_EXTPREGIST = F10_EXTPREGIST;
        I_EXVLBASDID = multiply(100.0, F10_EXVLBASDID, 14,0,"UNSIGNED","TRUNCATE");
        I_EXVLBASICM = multiply(100.0, F10_EXVLBASICM, 13,0,"UNSIGNED","TRUNCATE");
        I_EXVLBASIPI = multiply(100.0, F10_EXVLBASIPI, 13,0,"UNSIGNED","TRUNCATE");
        I_EXVLBASSTR = multiply(100.0, F10_EXVLBASSTR, 14,0,"UNSIGNED","TRUNCATE");
        I_EXVLCONTAX = multiply(100.0, F10_EXVLCONTAX, 13,0,"UNSIGNED","TRUNCATE");
        I_EXVLFCPDES = multiply(100.0, F10_EXVLFCPDES, 12,0,"UNSIGNED","TRUNCATE");
        I_EXVLICMDID = multiply(100.0, F10_EXVLICMDID, 12,0,"UNSIGNED","TRUNCATE");
        I_EXVLICMDIO = multiply(100.0, F10_EXVLICMDIO, 12,0,"UNSIGNED","TRUNCATE");
        I_EXVLICMPRO = multiply(100.0, F10_EXVLICMPRO, 14,0,"UNSIGNED","TRUNCATE");
        I_EXVLICMSTR = multiply(100.0, F10_EXVLICMSTR, 14,0,"UNSIGNED","TRUNCATE");
        I_EXVLIMPICM = multiply(100.0, F10_EXVLIMPICM, 13,0,"UNSIGNED","TRUNCATE");
        I_EXVLIMPIPI = multiply(100.0, F10_EXVLIMPIPI, 13,0,"UNSIGNED","TRUNCATE");
        I_EXVLISEICM = multiply(100.0, F10_EXVLISEICM, 13,0,"UNSIGNED","TRUNCATE");
        I_EXVLISEIPI = multiply(100.0, F10_EXVLISEIPI, 13,0,"UNSIGNED","TRUNCATE");
        I_EXVLLIQUID = multiply(100.0, F10_EXVLLIQUID, 14,0,"UNSIGNED","TRUNCATE");
        I_EXVLOUTICM = multiply(100.0, F10_EXVLOUTICM, 13,0,"UNSIGNED","TRUNCATE");
        I_EXVLOUTIPI = multiply(100.0, F10_EXVLOUTIPI, 13,0,"UNSIGNED","TRUNCATE");
        I_EXVLPERICM = multiply(100.0, F10_EXVLPERICM, 5,0,"UNSIGNED","TRUNCATE");
        I_EXVLPERIPI = multiply(100.0, F10_EXVLPERIPI, 5,0,"UNSIGNED","TRUNCATE");
        P_WriteGLBEXI();
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_EXTRACTI");
    }
}
private void P_EXTRACTP ()
   throws Exception
{
    try
    {
       GLBEXP.command = "EXTRACT";
       if ((rTrim(GLB.EXP_STATUS)).equals("INPUT") == true)
       {   if (GLBEXP != null)
           {
               if (GLB.EXP_XSEEDCOUNT != 0)
               {   GLBEXP.write(GLB.EXP_XSEEDBUFFER.toString());
                   GLB.EXP_XSEEDCOUNT = 0;
               }
               if ( (GLBEXP.out!=null) && (GLBEXP.out.checkError()) )
               {    GLB.TASK=53;
                    abort("Error on File : " + GLBEXP_XSEEDTITLE);
               }
               GLBEXP.close();
               AuditMSG("Close P (" + GLBEXP_XSEEDTITLE + "), Reads: " + cStr(GLB.EXP_XSEEDREADS) + " Writes: " + cStr(GLB.EXP_XSEEDWRITES));
               GLB.EXP_XSEEDREADS = 0;
               GLB.EXP_XSEEDWRITES = 0;
           }
       }
       if ((rTrim(GLB.EXP_STATUS)).equals("OUTPUT") == false)
       {
          if ((rTrim(GLBEXP_EXTEND)).equals("Y") == true)
          {
              GLBEXP.open(GLBEXP_XSEEDTITLE, "APPEND");
              if (GLBEXP.openStatus.equals("")==true)
              {   AuditMSG("Open APPEND P (" + GLBEXP_XSEEDTITLE + ")" );
                  GLB.EXP_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile P (" + GLBEXP_XSEEDTITLE + ")");
              }
          }
          else
          {
              GLBEXP.open(GLBEXP_XSEEDTITLE, "OUTPUT");
              if (GLBEXP.openStatus.equals("")==true)
              {   AuditMSG("Open OUTPUT P (" + GLBEXP_XSEEDTITLE + ")" );
                  GLBEXP_EXTEND = "Y";
                  GLB.EXP_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile P (" + GLBEXP_XSEEDTITLE + ")");
              }
          }
       }
        GLBEXP_XSEEDREG = "";
        GLB.EXTRACT = true;
        P_92("EXTRACT");
        GLB.EXTRACT = false;
        P_EXCDCLAFIS = F92_EXCDCLAFIS;
        P_EXCDCONCRE = F92_EXCDCONCRE;
        P_EXCDDEBICM = F92_EXCDDEBICM;
        P_EXCDNATOPE = F92_EXCDNATOPE;
        P_EXCDUFMUNI = F92_EXCDUFMUNI;
        P_EXVLBASICM = multiply(100.0, F92_EXVLBASICM, 12,0,"UNSIGNED","TRUNCATE");
        P_EXVLCONTAB = multiply(100.0, F92_EXVLCONTAB, 12,0,"UNSIGNED","TRUNCATE");
        P_EXVLIMPICM = multiply(100.0, F92_EXVLIMPICM, 12,0,"UNSIGNED","TRUNCATE");
        P_WriteGLBEXP();
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_EXTRACTP");
    }
}
private void P_EXTRACTS ()
   throws Exception
{
    try
    {
       GLBEXS.command = "EXTRACT";
       if ((rTrim(GLB.EXS_STATUS)).equals("INPUT") == true)
       {   if (GLBEXS != null)
           {
               if (GLB.EXS_XSEEDCOUNT != 0)
               {   GLBEXS.write(GLB.EXS_XSEEDBUFFER.toString());
                   GLB.EXS_XSEEDCOUNT = 0;
               }
               if ( (GLBEXS.out!=null) && (GLBEXS.out.checkError()) )
               {    GLB.TASK=53;
                    abort("Error on File : " + GLBEXS_XSEEDTITLE);
               }
               GLBEXS.close();
               AuditMSG("Close S (" + GLBEXS_XSEEDTITLE + "), Reads: " + cStr(GLB.EXS_XSEEDREADS) + " Writes: " + cStr(GLB.EXS_XSEEDWRITES));
               GLB.EXS_XSEEDREADS = 0;
               GLB.EXS_XSEEDWRITES = 0;
           }
       }
       if ((rTrim(GLB.EXS_STATUS)).equals("OUTPUT") == false)
       {
          if ((rTrim(GLBEXS_EXTEND)).equals("Y") == true)
          {
              GLBEXS.open(GLBEXS_XSEEDTITLE, "APPEND");
              if (GLBEXS.openStatus.equals("")==true)
              {   AuditMSG("Open APPEND S (" + GLBEXS_XSEEDTITLE + ")" );
                  GLB.EXS_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile S (" + GLBEXS_XSEEDTITLE + ")");
              }
          }
          else
          {
              GLBEXS.open(GLBEXS_XSEEDTITLE, "OUTPUT");
              if (GLBEXS.openStatus.equals("")==true)
              {   AuditMSG("Open OUTPUT S (" + GLBEXS_XSEEDTITLE + ")" );
                  GLBEXS_EXTEND = "Y";
                  GLB.EXS_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile S (" + GLBEXS_XSEEDTITLE + ")");
              }
          }
       }
        GLBEXS_XSEEDREG = "";
        GLB.EXTRACT = true;
        P_125("EXTRACT");
        GLB.EXTRACT = false;
        S_EXCDNATDIA = F125_EXCDNATDIA;
        S_EXCDUFMUNI = F125_EXCDUFMUNI;
        S_EXINCLIENT = F125_EXINCLIENT;
        S_EXPCICMDIA = multiply(100.0, F125_EXPCICMDIA, 5,0,"UNSIGNED","TRUNCATE");
        S_EXVLBASDIA = multiply(100.0, F125_EXVLBASDIA, 12,0,"UNSIGNED","TRUNCATE");
        S_EXVLCONDIA = multiply(100.0, F125_EXVLCONDIA, 12,0,"UNSIGNED","TRUNCATE");
        S_EXVLICMDIA = multiply(100.0, F125_EXVLICMDIA, 12,0,"UNSIGNED","TRUNCATE");
        S_EXVLIMPDIA = multiply(100.0, F125_EXVLIMPDIA, 12,0,"UNSIGNED","TRUNCATE");
        P_WriteGLBEXS();
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_EXTRACTS");
    }
}
private void P_EXTRACTU ()
   throws Exception
{
    try
    {
       GLBEXU.command = "EXTRACT";
       if ((rTrim(GLB.EXU_STATUS)).equals("INPUT") == true)
       {   if (GLBEXU != null)
           {
               if (GLB.EXU_XSEEDCOUNT != 0)
               {   GLBEXU.write(GLB.EXU_XSEEDBUFFER.toString());
                   GLB.EXU_XSEEDCOUNT = 0;
               }
               if ( (GLBEXU.out!=null) && (GLBEXU.out.checkError()) )
               {    GLB.TASK=53;
                    abort("Error on File : " + GLBEXU_XSEEDTITLE);
               }
               GLBEXU.close();
               AuditMSG("Close U (" + GLBEXU_XSEEDTITLE + "), Reads: " + cStr(GLB.EXU_XSEEDREADS) + " Writes: " + cStr(GLB.EXU_XSEEDWRITES));
               GLB.EXU_XSEEDREADS = 0;
               GLB.EXU_XSEEDWRITES = 0;
           }
       }
       if ((rTrim(GLB.EXU_STATUS)).equals("OUTPUT") == false)
       {
          if ((rTrim(GLBEXU_EXTEND)).equals("Y") == true)
          {
              GLBEXU.open(GLBEXU_XSEEDTITLE, "APPEND");
              if (GLBEXU.openStatus.equals("")==true)
              {   AuditMSG("Open APPEND U (" + GLBEXU_XSEEDTITLE + ")" );
                  GLB.EXU_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile U (" + GLBEXU_XSEEDTITLE + ")");
              }
          }
          else
          {
              GLBEXU.open(GLBEXU_XSEEDTITLE, "OUTPUT");
              if (GLBEXU.openStatus.equals("")==true)
              {   AuditMSG("Open OUTPUT U (" + GLBEXU_XSEEDTITLE + ")" );
                  GLBEXU_EXTEND = "Y";
                  GLB.EXU_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile U (" + GLBEXU_XSEEDTITLE + ")");
              }
          }
       }
        GLBEXU_XSEEDREG = "";
        GLB.EXTRACT = true;
        P_125("EXTRACT");
        GLB.EXTRACT = false;
        U_EXCDNATDIA = F125_EXCDNATDIA;
        U_EXCDUFMUNI = F125_EXCDUFMUNI;
        U_EXINCLIENT = F125_EXINCLIENT;
        U_EXPCICMDIA = multiply(100.0, F125_EXPCICMDIA, 5,0,"UNSIGNED","TRUNCATE");
        U_EXVLBASDIA = multiply(100.0, F125_EXVLBASDIA, 12,0,"UNSIGNED","TRUNCATE");
        U_EXVLCONDIA = multiply(100.0, F125_EXVLCONDIA, 12,0,"UNSIGNED","TRUNCATE");
        U_EXVLICMDIA = multiply(100.0, F125_EXVLICMDIA, 12,0,"UNSIGNED","TRUNCATE");
        U_EXVLIMPDIA = multiply(100.0, F125_EXVLIMPDIA, 12,0,"UNSIGNED","TRUNCATE");
        P_WriteGLBEXU();
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_EXTRACTU");
    }
}
private void P_EXTRACTW ()
   throws Exception
{
    try
    {
       GLBEXW.command = "EXTRACT";
       if ((rTrim(GLB.EXW_STATUS)).equals("INPUT") == true)
       {   if (GLBEXW != null)
           {
               if (GLB.EXW_XSEEDCOUNT != 0)
               {   GLBEXW.write(GLB.EXW_XSEEDBUFFER.toString());
                   GLB.EXW_XSEEDCOUNT = 0;
               }
               if ( (GLBEXW.out!=null) && (GLBEXW.out.checkError()) )
               {    GLB.TASK=53;
                    abort("Error on File : " + GLBEXW_XSEEDTITLE);
               }
               GLBEXW.close();
               AuditMSG("Close W (" + GLBEXW_XSEEDTITLE + "), Reads: " + cStr(GLB.EXW_XSEEDREADS) + " Writes: " + cStr(GLB.EXW_XSEEDWRITES));
               GLB.EXW_XSEEDREADS = 0;
               GLB.EXW_XSEEDWRITES = 0;
           }
       }
       if ((rTrim(GLB.EXW_STATUS)).equals("OUTPUT") == false)
       {
          if ((rTrim(GLBEXW_EXTEND)).equals("Y") == true)
          {
              GLBEXW.open(GLBEXW_XSEEDTITLE, "APPEND");
              if (GLBEXW.openStatus.equals("")==true)
              {   AuditMSG("Open APPEND W (" + GLBEXW_XSEEDTITLE + ")" );
                  GLB.EXW_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile W (" + GLBEXW_XSEEDTITLE + ")");
              }
          }
          else
          {
              GLBEXW.open(GLBEXW_XSEEDTITLE, "OUTPUT");
              if (GLBEXW.openStatus.equals("")==true)
              {   AuditMSG("Open OUTPUT W (" + GLBEXW_XSEEDTITLE + ")" );
                  GLBEXW_EXTEND = "Y";
                  GLB.EXW_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile W (" + GLBEXW_XSEEDTITLE + ")");
              }
          }
       }
        GLBEXW_XSEEDREG = "";
        GLB.EXTRACT = true;
        P_104("EXTRACT");
        GLB.EXTRACT = false;
        W_EXNRNOTCRE = F104_EXNRNOTCRE;
        W_EXVLBASCRE = multiply(100.0, F104_EXVLBASCRE, 12,0,"UNSIGNED","TRUNCATE");
        W_EXVLFCPDES = multiply(100.0, F104_EXVLFCPDES, 12,0,"UNSIGNED","TRUNCATE");
        W_EXVLICMDID = multiply(100.0, F104_EXVLICMDID, 12,0,"UNSIGNED","TRUNCATE");
        W_EXVLICMDIO = multiply(100.0, F104_EXVLICMDIO, 12,0,"UNSIGNED","TRUNCATE");
        P_WriteGLBEXW();
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_EXTRACTW");
    }
}
private void P_EXTRACTY ()
   throws Exception
{
    try
    {
       GLBEXY.command = "EXTRACT";
       if ((rTrim(GLB.EXY_STATUS)).equals("INPUT") == true)
       {   if (GLBEXY != null)
           {
               if (GLB.EXY_XSEEDCOUNT != 0)
               {   GLBEXY.write(GLB.EXY_XSEEDBUFFER.toString());
                   GLB.EXY_XSEEDCOUNT = 0;
               }
               if ( (GLBEXY.out!=null) && (GLBEXY.out.checkError()) )
               {    GLB.TASK=53;
                    abort("Error on File : " + GLBEXY_XSEEDTITLE);
               }
               GLBEXY.close();
               AuditMSG("Close Y (" + GLBEXY_XSEEDTITLE + "), Reads: " + cStr(GLB.EXY_XSEEDREADS) + " Writes: " + cStr(GLB.EXY_XSEEDWRITES));
               GLB.EXY_XSEEDREADS = 0;
               GLB.EXY_XSEEDWRITES = 0;
           }
       }
       if ((rTrim(GLB.EXY_STATUS)).equals("OUTPUT") == false)
       {
          if ((rTrim(GLBEXY_EXTEND)).equals("Y") == true)
          {
              GLBEXY.open(GLBEXY_XSEEDTITLE, "APPEND");
              if (GLBEXY.openStatus.equals("")==true)
              {   AuditMSG("Open APPEND Y (" + GLBEXY_XSEEDTITLE + ")" );
                  GLB.EXY_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile Y (" + GLBEXY_XSEEDTITLE + ")");
              }
          }
          else
          {
              GLBEXY.open(GLBEXY_XSEEDTITLE, "OUTPUT");
              if (GLBEXY.openStatus.equals("")==true)
              {   AuditMSG("Open OUTPUT Y (" + GLBEXY_XSEEDTITLE + ")" );
                  GLBEXY_EXTEND = "Y";
                  GLB.EXY_STATUS = "OUTPUT";
              }
              else
              {   abort("Can't OpenFile Y (" + GLBEXY_XSEEDTITLE + ")");
              }
          }
       }
        GLBEXY_XSEEDREG = "";
        GLB.EXTRACT = true;
        P_94("EXTRACT");
        GLB.EXTRACT = false;
        Y_EXCDLINCRE = F94_EXCDLINCRE;
        Y_EXCDNATCRE = F94_EXCDNATCRE;
        Y_EXINTEXCRE = F94_EXINTEXCRE;
        Y_EXNRNOTCRE = F94_EXNRNOTCRE;
        Y_EXPCICMCRE = multiply(100.0, F94_EXPCICMCRE, 5,0,"UNSIGNED","TRUNCATE");
        Y_EXVLBASCRE = multiply(100.0, F94_EXVLBASCRE, 12,0,"UNSIGNED","TRUNCATE");
        Y_EXVLCONCRE = multiply(100.0, F94_EXVLCONCRE, 12,0,"UNSIGNED","TRUNCATE");
        Y_EXVLIMPCRE = multiply(100.0, F94_EXVLIMPCRE, 12,0,"UNSIGNED","TRUNCATE");
        P_WriteGLBEXY();
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_EXTRACTY");
    }
}
private void P_SORT1()
 throws Exception
{
    try
    {
        GLBEXH.command = "SORT";
        String  sortOrdinate[];
        int     sortPosition[];
        int     sortLength[];
        boolean sortDescend[];
        String  sortEdit[];
        String  sortStatus;
        File sortFile;
        GLB.EXH = GLBEXH;
		trace("#Xseed***** - SORT 1 FILE -->",GLBEXH_XSEEDTITLE);
        GLB.EXH_FILENAME = GLBEXH_XSEEDTITLE;

        AuditMSG("Begin Sort H (" + GLBEXH_XSEEDTITLE + ")");
        if ((GLB.EXH_STATUS.trim()).equals("") == false)
        {
            if (GLB.EXH_XSEEDCOUNT != 0)
            {   GLBEXH.write(GLB.EXH_XSEEDBUFFER.toString());
                GLB.EXH_XSEEDCOUNT = 0;
            }
            if ((GLBEXH.out!=null) && (GLBEXH.out.checkError()) )
            {   GLB.TASK=53;
                abort("Error on File : " + GLBEXH_XSEEDTITLE);
            }
            GLBEXH.close();
            AuditMSG("Close H ("+ GLBEXH_XSEEDTITLE + "), Reads: " + cStr(GLB.EXH_XSEEDREADS) + " Writes: " + cStr(GLB.EXH_XSEEDWRITES));
            GLB.EXH_XSEEDREADS = 0;
            GLB.EXH_XSEEDWRITES = 0;
            GLB.EXH_STATUS = "";
        }
        sortFile = new File(GLBEXH_XSEEDTITLE);
        if (sortFile.exists() == false)
        {    return;
        }
        sortOrdinate = new String [2];
        sortPosition = new int [2];
        sortLength = new int [2];
        sortDescend = new boolean[2];
        sortEdit = new String[2];
        sortOrdinate[0] = "EXCDCLIFOR";
        sortPosition[0] = 1;
        sortLength[0] = 6;
        sortEdit[0] = "N";
        sortDescend[0] = false;
        sortOrdinate[1] = "EXINCLIFOR";
        sortPosition[1] = 0;
        sortLength[1] = 1;
        sortEdit[1] = "N";
        sortDescend[1] = false;
        sortStatus = sort(GLBEXH_XSEEDTITLE, sortPosition, sortLength,sortDescend,sortEdit);
        if (sortStatus.equals("*****") == true)
        {
            AuditMSG("Error on Sort.");
        }
        AuditMSG("End Sort H (" + GLBEXH_XSEEDTITLE + ")");
			trace("#Xseed***** - SORT 1 FILE END -->",GLBEXH_XSEEDTITLE);
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_SORT1");
    }
}
private void P_SORT2()
 throws Exception
{
    try
    {
        GLBEXD.command = "SORT";
        String  sortOrdinate[];
        int     sortPosition[];
        int     sortLength[];
        boolean sortDescend[];
        String  sortEdit[];
        String  sortStatus;
        File sortFile;
        GLB.EXD = GLBEXD;
			trace("#Xseed***** - SORT 2 FILE -->",GLBEXD_XSEEDTITLE);
        GLB.EXD_FILENAME = GLBEXD_XSEEDTITLE;

        AuditMSG("Begin Sort D (" + GLBEXD_XSEEDTITLE + ")");
        if ((GLB.EXD_STATUS.trim()).equals("") == false)
        {
            if (GLB.EXD_XSEEDCOUNT != 0)
            {   GLBEXD.write(GLB.EXD_XSEEDBUFFER.toString());
                GLB.EXD_XSEEDCOUNT = 0;
            }
            if ((GLBEXD.out!=null) && (GLBEXD.out.checkError()) )
            {   GLB.TASK=53;
                abort("Error on File : " + GLBEXD_XSEEDTITLE);
            }
            GLBEXD.close();
            AuditMSG("Close D ("+ GLBEXD_XSEEDTITLE + "), Reads: " + cStr(GLB.EXD_XSEEDREADS) + " Writes: " + cStr(GLB.EXD_XSEEDWRITES));
            GLB.EXD_XSEEDREADS = 0;
            GLB.EXD_XSEEDWRITES = 0;
            GLB.EXD_STATUS = "";
        }
        sortFile = new File(GLBEXD_XSEEDTITLE);
        if (sortFile.exists() == false)
        {    return;
        }
        sortOrdinate = new String [2];
        sortPosition = new int [2];
        sortLength = new int [2];
        sortDescend = new boolean[2];
        sortEdit = new String[2];
        sortOrdinate[0] = "EXCDNATDIA";
        sortPosition[0] = 17;
        sortLength[0] = 4;
        sortEdit[0] = "N";
        sortDescend[0] = false;
        sortOrdinate[1] = "EXPCICMDIA";
        sortPosition[1] = 69;
        sortLength[1] = 5;
        sortEdit[1] = "N";
        sortDescend[1] = false;
        sortStatus = sort(GLBEXD_XSEEDTITLE, sortPosition, sortLength,sortDescend,sortEdit);
        if (sortStatus.equals("*****") == true)
        {
            AuditMSG("Error on Sort.");
        }
        AuditMSG("End Sort D (" + GLBEXD_XSEEDTITLE + ")");
		trace("#Xseed***** - SORT 2 END FILE -->",GLBEXD_XSEEDTITLE);
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_SORT2");
    }
}
private void P_SORT3()
 throws Exception
{
    try
    {
        GLBEXD.command = "SORT";
        String  sortOrdinate[];
        int     sortPosition[];
        int     sortLength[];
        boolean sortDescend[];
        String  sortEdit[];
        String  sortStatus;
        File sortFile;
        GLB.EXD = GLBEXD;
		trace("#Xseed***** - SORT 3  FILE -->",GLBEXD_XSEEDTITLE);
        GLB.EXD_FILENAME = GLBEXD_XSEEDTITLE;

        AuditMSG("Begin Sort D (" + GLBEXD_XSEEDTITLE + ")");
        if ((GLB.EXD_STATUS.trim()).equals("") == false)
        {
            if (GLB.EXD_XSEEDCOUNT != 0)
            {   GLBEXD.write(GLB.EXD_XSEEDBUFFER.toString());
                GLB.EXD_XSEEDCOUNT = 0;
            }
            if ((GLBEXD.out!=null) && (GLBEXD.out.checkError()) )
            {   GLB.TASK=53;
                abort("Error on File : " + GLBEXD_XSEEDTITLE);
            }
            GLBEXD.close();
            AuditMSG("Close D ("+ GLBEXD_XSEEDTITLE + "), Reads: " + cStr(GLB.EXD_XSEEDREADS) + " Writes: " + cStr(GLB.EXD_XSEEDWRITES));
            GLB.EXD_XSEEDREADS = 0;
            GLB.EXD_XSEEDWRITES = 0;
            GLB.EXD_STATUS = "";
        }
        sortFile = new File(GLBEXD_XSEEDTITLE);
        if (sortFile.exists() == false)
        {    return;
        }
        sortOrdinate = new String [4];
        sortPosition = new int [4];
        sortLength = new int [4];
        sortDescend = new boolean[4];
        sortEdit = new String[4];
        sortOrdinate[0] = "EXCDUFMUNI";
        sortPosition[0] = 74;
        sortLength[0] = 2;
        sortEdit[0] = "A";
        sortDescend[0] = false;
        sortOrdinate[1] = "EXCDNATDIA";
        sortPosition[1] = 17;
        sortLength[1] = 4;
        sortEdit[1] = "N";
        sortDescend[1] = false;
        sortOrdinate[2] = "EXPCICMDIA";
        sortPosition[2] = 69;
        sortLength[2] = 5;
        sortEdit[2] = "N";
        sortDescend[2] = false;
        sortOrdinate[3] = "EXINCLIENT";
        sortPosition[3] = 76;
        sortLength[3] = 1;
        sortEdit[3] = "N";
        sortDescend[3] = false;
        sortStatus = sort(GLBEXD_XSEEDTITLE, sortPosition, sortLength,sortDescend,sortEdit);
        if (sortStatus.equals("*****") == true)
        {
            AuditMSG("Error on Sort.");
        }
        AuditMSG("End Sort D (" + GLBEXD_XSEEDTITLE + ")");
		trace("#Xseed***** - SORT 3 END FILE -->",GLBEXD_XSEEDTITLE);
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_SORT3");
    }
}
private void P_SORT4()
 throws Exception
{
    try
    {
        GLBEXY.command = "SORT";
        String  sortOrdinate[];
        int     sortPosition[];
        int     sortLength[];
        boolean sortDescend[];
        String  sortEdit[];
        String  sortStatus;
        File sortFile;
        GLB.EXY = GLBEXY;
		trace("#Xseed***** - SORT 4FILE -->",GLBEXY_XSEEDTITLE);
        GLB.EXY_FILENAME = GLBEXY_XSEEDTITLE;

        AuditMSG("Begin Sort Y (" + GLBEXY_XSEEDTITLE + ")");
        if ((GLB.EXY_STATUS.trim()).equals("") == false)
        {
            if (GLB.EXY_XSEEDCOUNT != 0)
            {   GLBEXY.write(GLB.EXY_XSEEDBUFFER.toString());
                GLB.EXY_XSEEDCOUNT = 0;
            }
            if ((GLBEXY.out!=null) && (GLBEXY.out.checkError()) )
            {   GLB.TASK=53;
                abort("Error on File : " + GLBEXY_XSEEDTITLE);
            }
            GLBEXY.close();
            AuditMSG("Close Y ("+ GLBEXY_XSEEDTITLE + "), Reads: " + cStr(GLB.EXY_XSEEDREADS) + " Writes: " + cStr(GLB.EXY_XSEEDWRITES));
            GLB.EXY_XSEEDREADS = 0;
            GLB.EXY_XSEEDWRITES = 0;
            GLB.EXY_STATUS = "";
        }
        sortFile = new File(GLBEXY_XSEEDTITLE);
        if (sortFile.exists() == false)
        {    return;
        }
        sortOrdinate = new String [3];
        sortPosition = new int [3];
        sortLength = new int [3];
        sortDescend = new boolean[3];
        sortEdit = new String[3];
        sortOrdinate[0] = "EXINTEXCRE";
        sortPosition[0] = 57;
        sortLength[0] = 1;
        sortEdit[0] = "A";
        sortDescend[0] = false;
        sortOrdinate[1] = "EXNRNOTCRE";
        sortPosition[1] = 0;
        sortLength[1] = 9;
        sortEdit[1] = "N";
        sortDescend[1] = false;
        sortOrdinate[2] = "EXCDNATCRE";
        sortPosition[2] = 9;
        sortLength[2] = 4;
        sortEdit[2] = "N";
        sortDescend[2] = false;
        sortStatus = sort(GLBEXY_XSEEDTITLE, sortPosition, sortLength,sortDescend,sortEdit);
        if (sortStatus.equals("*****") == true)
        {
            AuditMSG("Error on Sort.");
        }
        AuditMSG("End Sort Y (" + GLBEXY_XSEEDTITLE + ")");
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_SORT4");
		trace("#Xseed***** - SORT 4 END FILE -->",GLBEXY_XSEEDTITLE);
    }
}
private void P_SORT5()
 throws Exception
{
    try
    {
        GLBEXY.command = "SORT";
        String  sortOrdinate[];
        int     sortPosition[];
        int     sortLength[];
        boolean sortDescend[];
        String  sortEdit[];
        String  sortStatus;
        File sortFile;
        GLB.EXY = GLBEXY;
        GLB.EXY_FILENAME = GLBEXY_XSEEDTITLE;
trace("#Xseed***** - SORT  5 FILE -->",GLBEXY_XSEEDTITLE);
        AuditMSG("Begin Sort Y (" + GLBEXY_XSEEDTITLE + ")");
        if ((GLB.EXY_STATUS.trim()).equals("") == false)
        {
            if (GLB.EXY_XSEEDCOUNT != 0)
            {   GLBEXY.write(GLB.EXY_XSEEDBUFFER.toString());
                GLB.EXY_XSEEDCOUNT = 0;
            }
            if ((GLBEXY.out!=null) && (GLBEXY.out.checkError()) )
            {   GLB.TASK=53;
                abort("Error on File : " + GLBEXY_XSEEDTITLE);
            }
            GLBEXY.close();
            AuditMSG("Close Y ("+ GLBEXY_XSEEDTITLE + "), Reads: " + cStr(GLB.EXY_XSEEDREADS) + " Writes: " + cStr(GLB.EXY_XSEEDWRITES));
            GLB.EXY_XSEEDREADS = 0;
            GLB.EXY_XSEEDWRITES = 0;
            GLB.EXY_STATUS = "";
        }
        sortFile = new File(GLBEXY_XSEEDTITLE);
        if (sortFile.exists() == false)
        {    return;
        }
        sortOrdinate = new String [2];
        sortPosition = new int [2];
        sortLength = new int [2];
        sortDescend = new boolean[2];
        sortEdit = new String[2];
        sortOrdinate[0] = "EXINTEXCRE";
        sortPosition[0] = 57;
        sortLength[0] = 1;
        sortEdit[0] = "A";
        sortDescend[0] = false;
        sortOrdinate[1] = "EXCDNATCRE";
        sortPosition[1] = 9;
        sortLength[1] = 4;
        sortEdit[1] = "N";
        sortDescend[1] = false;
        sortStatus = sort(GLBEXY_XSEEDTITLE, sortPosition, sortLength,sortDescend,sortEdit);
        if (sortStatus.equals("*****") == true)
        {
            AuditMSG("Error on Sort.");
        }
        AuditMSG("End Sort Y (" + GLBEXY_XSEEDTITLE + ")");
		trace("#Xseed***** - SORT  5 END FILE -->",GLBEXY_XSEEDTITLE);
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_SORT5");
    }
}
private void P_SORT6()
 throws Exception
{
    try
    {
        GLBEXW.command = "SORT";
        String  sortOrdinate[];
        int     sortPosition[];
        int     sortLength[];
        boolean sortDescend[];
        String  sortEdit[];
        String  sortStatus;
        File sortFile;
        GLB.EXW = GLBEXW;
        GLB.EXW_FILENAME = GLBEXW_XSEEDTITLE;
		trace("#Xseed***** - SORT  6 FILE -->",GLBEXW_XSEEDTITLE);

        AuditMSG("Begin Sort W (" + GLBEXW_XSEEDTITLE + ")");
        if ((GLB.EXW_STATUS.trim()).equals("") == false)
        {
            if (GLB.EXW_XSEEDCOUNT != 0)
            {   GLBEXW.write(GLB.EXW_XSEEDBUFFER.toString());
                GLB.EXW_XSEEDCOUNT = 0;
            }
            if ((GLBEXW.out!=null) && (GLBEXW.out.checkError()) )
            {   GLB.TASK=53;
                abort("Error on File : " + GLBEXW_XSEEDTITLE);
            }
            GLBEXW.close();
            AuditMSG("Close W ("+ GLBEXW_XSEEDTITLE + "), Reads: " + cStr(GLB.EXW_XSEEDREADS) + " Writes: " + cStr(GLB.EXW_XSEEDWRITES));
            GLB.EXW_XSEEDREADS = 0;
            GLB.EXW_XSEEDWRITES = 0;
            GLB.EXW_STATUS = "";
        }
        sortFile = new File(GLBEXW_XSEEDTITLE);
        if (sortFile.exists() == false)
        {    return;
        }
        sortOrdinate = new String [1];
        sortPosition = new int [1];
        sortLength = new int [1];
        sortDescend = new boolean[1];
        sortEdit = new String[1];
        sortOrdinate[0] = "EXNRNOTCRE";
        sortPosition[0] = 0;
        sortLength[0] = 9;
        sortEdit[0] = "N";
        sortDescend[0] = false;
        sortStatus = sort(GLBEXW_XSEEDTITLE, sortPosition, sortLength,sortDescend,sortEdit);
        if (sortStatus.equals("*****") == true)
        {
            AuditMSG("Error on Sort.");
        }
        AuditMSG("End Sort W (" + GLBEXW_XSEEDTITLE + ")");
			trace("#Xseed***** - SORT  6 END FILE -->",GLBEXW_XSEEDTITLE);

    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_SORT6");
    }
}
private void P_SORT7()
 throws Exception
{
    try
    {
        GLBEXS.command = "SORT";
        String  sortOrdinate[];
        int     sortPosition[];
        int     sortLength[];
        boolean sortDescend[];
        String  sortEdit[];
        String  sortStatus;
        File sortFile;
        GLB.EXS = GLBEXS;
        GLB.EXS_FILENAME = GLBEXS_XSEEDTITLE;
			trace("#Xseed***** - SORT  7 FILE -->",GLBEXS_XSEEDTITLE);


        AuditMSG("Begin Sort S (" + GLBEXS_XSEEDTITLE + ")");
        if ((GLB.EXS_STATUS.trim()).equals("") == false)
        {
            if (GLB.EXS_XSEEDCOUNT != 0)
            {   GLBEXS.write(GLB.EXS_XSEEDBUFFER.toString());
                GLB.EXS_XSEEDCOUNT = 0;
            }
            if ((GLBEXS.out!=null) && (GLBEXS.out.checkError()) )
            {   GLB.TASK=53;
                abort("Error on File : " + GLBEXS_XSEEDTITLE);
            }
            GLBEXS.close();
            AuditMSG("Close S ("+ GLBEXS_XSEEDTITLE + "), Reads: " + cStr(GLB.EXS_XSEEDREADS) + " Writes: " + cStr(GLB.EXS_XSEEDWRITES));
            GLB.EXS_XSEEDREADS = 0;
            GLB.EXS_XSEEDWRITES = 0;
            GLB.EXS_STATUS = "";
        }
        sortFile = new File(GLBEXS_XSEEDTITLE);
        if (sortFile.exists() == false)
        {    return;
        }
        sortOrdinate = new String [2];
        sortPosition = new int [2];
        sortLength = new int [2];
        sortDescend = new boolean[2];
        sortEdit = new String[2];
        sortOrdinate[0] = "EXCDNATDIA";
        sortPosition[0] = 0;
        sortLength[0] = 4;
        sortEdit[0] = "N";
        sortDescend[0] = false;
        sortOrdinate[1] = "EXPCICMDIA";
        sortPosition[1] = 53;
        sortLength[1] = 5;
        sortEdit[1] = "N";
        sortDescend[1] = false;
        sortStatus = sort(GLBEXS_XSEEDTITLE, sortPosition, sortLength,sortDescend,sortEdit);
        if (sortStatus.equals("*****") == true)
        {
            AuditMSG("Error on Sort.");
        }
        AuditMSG("End Sort S (" + GLBEXS_XSEEDTITLE + ")");
		trace("#Xseed***** - SORT  7 END FILE -->",GLBEXS_XSEEDTITLE);

    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_SORT7");
    }
}
private void P_SORT8()
 throws Exception
{
    try
    {
        GLBEXU.command = "SORT";
        String  sortOrdinate[];
        int     sortPosition[];
        int     sortLength[];
        boolean sortDescend[];
        String  sortEdit[];
        String  sortStatus;
        File sortFile;
        GLB.EXU = GLBEXU;
        GLB.EXU_FILENAME = GLBEXU_XSEEDTITLE;
		trace("#Xseed***** - SORT  8  FILE -->",GLBEXU_XSEEDTITLE);

    

        AuditMSG("Begin Sort U (" + GLBEXU_XSEEDTITLE + ")");
        if ((GLB.EXU_STATUS.trim()).equals("") == false)
        {
            if (GLB.EXU_XSEEDCOUNT != 0)
            {   GLBEXU.write(GLB.EXU_XSEEDBUFFER.toString());
                GLB.EXU_XSEEDCOUNT = 0;
            }
            if ((GLBEXU.out!=null) && (GLBEXU.out.checkError()) )
            {   GLB.TASK=53;
                abort("Error on File : " + GLBEXU_XSEEDTITLE);
            }
            GLBEXU.close();
            AuditMSG("Close U ("+ GLBEXU_XSEEDTITLE + "), Reads: " + cStr(GLB.EXU_XSEEDREADS) + " Writes: " + cStr(GLB.EXU_XSEEDWRITES));
            GLB.EXU_XSEEDREADS = 0;
            GLB.EXU_XSEEDWRITES = 0;
            GLB.EXU_STATUS = "";
        }
        sortFile = new File(GLBEXU_XSEEDTITLE);
        if (sortFile.exists() == false)
        {    return;
        }
        sortOrdinate = new String [3];
        sortPosition = new int [3];
        sortLength = new int [3];
        sortDescend = new boolean[3];
        sortEdit = new String[3];
        sortOrdinate[0] = "EXCDNATDIA";
        sortPosition[0] = 0;
        sortLength[0] = 4;
        sortEdit[0] = "N";
        sortDescend[0] = false;
        sortOrdinate[1] = "EXPCICMDIA";
        sortPosition[1] = 53;
        sortLength[1] = 5;
        sortEdit[1] = "N";
        sortDescend[1] = false;
        sortOrdinate[2] = "EXINCLIENT";
        sortPosition[2] = 4;
        sortLength[2] = 1;
        sortEdit[2] = "N";
        sortDescend[2] = false;
        sortStatus = sort(GLBEXU_XSEEDTITLE, sortPosition, sortLength,sortDescend,sortEdit);
        if (sortStatus.equals("*****") == true)
        {
            AuditMSG("Error on Sort.");
        }
        AuditMSG("End Sort U (" + GLBEXU_XSEEDTITLE + ")");
				trace("#Xseed***** - SORT  8 END FILE -->",GLBEXU_XSEEDTITLE);
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_SORT8");
    }
}
private void P_SORT9()
 throws Exception
{
    try
    {
        GLBEXP.command = "SORT";
        String  sortOrdinate[];
        int     sortPosition[];
        int     sortLength[];
        boolean sortDescend[];
        String  sortEdit[];
        String  sortStatus;
        File sortFile;
        GLB.EXP = GLBEXP;
        GLB.EXP_FILENAME = GLBEXP_XSEEDTITLE;
				trace("#Xseed***** - SORT  9  FILE -->",GLBEXP_XSEEDTITLE);

        AuditMSG("Begin Sort P (" + GLBEXP_XSEEDTITLE + ")");
        if ((GLB.EXP_STATUS.trim()).equals("") == false)
        {
            if (GLB.EXP_XSEEDCOUNT != 0)
            {   GLBEXP.write(GLB.EXP_XSEEDBUFFER.toString());
                GLB.EXP_XSEEDCOUNT = 0;
            }
            if ((GLBEXP.out!=null) && (GLBEXP.out.checkError()) )
            {   GLB.TASK=53;
                abort("Error on File : " + GLBEXP_XSEEDTITLE);
            }
            GLBEXP.close();
            AuditMSG("Close P ("+ GLBEXP_XSEEDTITLE + "), Reads: " + cStr(GLB.EXP_XSEEDREADS) + " Writes: " + cStr(GLB.EXP_XSEEDWRITES));
            GLB.EXP_XSEEDREADS = 0;
            GLB.EXP_XSEEDWRITES = 0;
            GLB.EXP_STATUS = "";
        }
        sortFile = new File(GLBEXP_XSEEDTITLE);
        if (sortFile.exists() == false)
        {    return;
        }
        sortOrdinate = new String [3];
        sortPosition = new int [3];
        sortLength = new int [3];
        sortDescend = new boolean[3];
        sortEdit = new String[3];
        sortOrdinate[0] = "EXCDDEBICM";
        sortPosition[0] = 0;
        sortLength[0] = 6;
        sortEdit[0] = "N";
        sortDescend[0] = false;
        sortOrdinate[1] = "EXCDCONCRE";
        sortPosition[1] = 6;
        sortLength[1] = 6;
        sortEdit[1] = "N";
        sortDescend[1] = false;
        sortOrdinate[2] = "EXCDNATOPE";
        sortPosition[2] = 12;
        sortLength[2] = 4;
        sortEdit[2] = "N";
        sortDescend[2] = false;
        sortStatus = sort(GLBEXP_XSEEDTITLE, sortPosition, sortLength,sortDescend,sortEdit);
        if (sortStatus.equals("*****") == true)
        {
            AuditMSG("Error on Sort.");
        }
        AuditMSG("End Sort P (" + GLBEXP_XSEEDTITLE + ")");
				trace("#Xseed***** - SORT  9END FILE -->",GLBEXU_XSEEDTITLE);
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_SORT9");
    }
}
private void P_SORT10()
 throws Exception
{
    try
    {
        GLBEXP.command = "SORT";
        String  sortOrdinate[];
        int     sortPosition[];
        int     sortLength[];
        boolean sortDescend[];
        String  sortEdit[];
        String  sortStatus;
        File sortFile;
        GLB.EXP = GLBEXP;
        GLB.EXP_FILENAME = GLBEXP_XSEEDTITLE;
				trace("#Xseed***** - SORT  8 10 FILE -->",GLBEXP_XSEEDTITLE);

        AuditMSG("Begin Sort P (" + GLBEXP_XSEEDTITLE + ")");
        if ((GLB.EXP_STATUS.trim()).equals("") == false)
        {
            if (GLB.EXP_XSEEDCOUNT != 0)
            {   GLBEXP.write(GLB.EXP_XSEEDBUFFER.toString());
                GLB.EXP_XSEEDCOUNT = 0;
            }
            if ((GLBEXP.out!=null) && (GLBEXP.out.checkError()) )
            {   GLB.TASK=53;
                abort("Error on File : " + GLBEXP_XSEEDTITLE);
            }
            GLBEXP.close();
            AuditMSG("Close P ("+ GLBEXP_XSEEDTITLE + "), Reads: " + cStr(GLB.EXP_XSEEDREADS) + " Writes: " + cStr(GLB.EXP_XSEEDWRITES));
            GLB.EXP_XSEEDREADS = 0;
            GLB.EXP_XSEEDWRITES = 0;
            GLB.EXP_STATUS = "";
        }
        sortFile = new File(GLBEXP_XSEEDTITLE);
        if (sortFile.exists() == false)
        {    return;
        }
        sortOrdinate = new String [1];
        sortPosition = new int [1];
        sortLength = new int [1];
        sortDescend = new boolean[1];
        sortEdit = new String[1];
        sortOrdinate[0] = "EXCDCLAFIS";
        sortPosition[0] = 16;
        sortLength[0] = 10;
        sortEdit[0] = "N";
        sortDescend[0] = false;
        sortStatus = sort(GLBEXP_XSEEDTITLE, sortPosition, sortLength,sortDescend,sortEdit);
        if (sortStatus.equals("*****") == true)
        {
            AuditMSG("Error on Sort.");
        }
        AuditMSG("End Sort P (" + GLBEXP_XSEEDTITLE + ")");
				trace("#Xseed***** - SORT  10 END FILE -->",GLBEXP_XSEEDTITLE);
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_SORT10");
    }
}
private void P_SORT11()
 throws Exception
{
    try
    {
        GLBEXE.command = "SORT";
        String  sortOrdinate[];
        int     sortPosition[];
        int     sortLength[];
        boolean sortDescend[];
        String  sortEdit[];
        String  sortStatus;
        File sortFile;
        GLB.EXE = GLBEXE;
        GLB.EXE_FILENAME = GLBEXE_XSEEDTITLE;
				trace("#Xseed***** - SORT  11  FILE -->",GLBEXE_XSEEDTITLE);

        AuditMSG("Begin Sort E (" + GLBEXE_XSEEDTITLE + ")");
        if ((GLB.EXE_STATUS.trim()).equals("") == false)
        {
            if (GLB.EXE_XSEEDCOUNT != 0)
            {   GLBEXE.write(GLB.EXE_XSEEDBUFFER.toString());
                GLB.EXE_XSEEDCOUNT = 0;
            }
            if ((GLBEXE.out!=null) && (GLBEXE.out.checkError()) )
            {   GLB.TASK=53;
                abort("Error on File : " + GLBEXE_XSEEDTITLE);
            }
            GLBEXE.close();
            AuditMSG("Close E ("+ GLBEXE_XSEEDTITLE + "), Reads: " + cStr(GLB.EXE_XSEEDREADS) + " Writes: " + cStr(GLB.EXE_XSEEDWRITES));
            GLB.EXE_XSEEDREADS = 0;
            GLB.EXE_XSEEDWRITES = 0;
            GLB.EXE_STATUS = "";
        }
        sortFile = new File(GLBEXE_XSEEDTITLE);
        if (sortFile.exists() == false)
        {    return;
        }
        sortOrdinate = new String [3];
        sortPosition = new int [3];
        sortLength = new int [3];
        sortDescend = new boolean[3];
        sortEdit = new String[3];
        sortOrdinate[0] = "EXCDDEPNFI";
        sortPosition[0] = 0;
        sortLength[0] = 2;
        sortEdit[0] = "N";
        sortDescend[0] = false;
        sortOrdinate[1] = "EXNRUSUNFI";
        sortPosition[1] = 40;
        sortLength[1] = 4;
        sortEdit[1] = "N";
        sortDescend[1] = false;
        sortOrdinate[2] = "EXNRNOTDEP";
        sortPosition[2] = 2;
        sortLength[2] = 9;
        sortEdit[2] = "N";
        sortDescend[2] = false;
        sortStatus = sort(GLBEXE_XSEEDTITLE, sortPosition, sortLength,sortDescend,sortEdit);
        if (sortStatus.equals("*****") == true)
        {
            AuditMSG("Error on Sort.");
        }
        AuditMSG("End Sort E (" + GLBEXE_XSEEDTITLE + ")");
		trace("#Xseed***** - SORT  11  END FILE -->",GLBEXE_XSEEDTITLE);
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_SORT11");
    }
}

private void P_BEGINPAGE ()
    throws Exception
{
    try
    {
    if (GLB.SHADOW.trim().equals("") == true)
    {   if (GLB.INITREPORT == true)
        {   if (GLB.INITHEADER.equals("TRUE") == true)
            {   printPageMark(GLB.LP, GLB.PAGEMARK);
                GLB.PRINT_XSEEDWRITES = GLB.PRINT_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORT = true;
        }
        GLB.INITHEADER = "TRUE";
        GLB.PAGECOUNT = GLB.PAGECOUNT + 1;
        GLB.LINECOUNT = 0;
        GLB.ADVANCE = false;
    }
    if (GLB.SHADOW.trim().equals("B") == true)
    {   if (GLB.INITREPORTB == true)
        {   if (GLB.INITHEADERB.equals("TRUE") == true)
            {   printPageMark(GLB.LPB, GLB.PAGEMARK);
                GLB.PRINTB_XSEEDWRITES = GLB.PRINTB_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTB = true;
        }
        GLB.INITHEADERB = "TRUE";
        GLB.PAGECOUNTB = GLB.PAGECOUNTB + 1;
        GLB.LINECOUNTB = 0;
        GLB.ADVANCEB = false;
    }
    if (GLB.SHADOW.trim().equals("C") == true)
    {   if (GLB.INITREPORTC == true)
        {   if (GLB.INITHEADERC.equals("TRUE") == true)
            {   printPageMark(GLB.LPC, GLB.PAGEMARK);
                GLB.PRINTC_XSEEDWRITES = GLB.PRINTC_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTC = true;
        }
        GLB.INITHEADERC = "TRUE";
        GLB.PAGECOUNTC = GLB.PAGECOUNTC + 1;
        GLB.LINECOUNTC = 0;
        GLB.ADVANCEC = false;
    }
    if (GLB.SHADOW.trim().equals("D") == true)
    {   if (GLB.INITREPORTD == true)
        {   if (GLB.INITHEADERD.equals("TRUE") == true)
            {   printPageMark(GLB.LPD, GLB.PAGEMARK);
                GLB.PRINTD_XSEEDWRITES = GLB.PRINTD_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTD = true;
        }
        GLB.INITHEADERD = "TRUE";
        GLB.PAGECOUNTD = GLB.PAGECOUNTD + 1;
        GLB.LINECOUNTD = 0;
        GLB.ADVANCED = false;
    }
    if (GLB.SHADOW.trim().equals("E") == true)
    {   if (GLB.INITREPORTE == true)
        {   if (GLB.INITHEADERE.equals("TRUE") == true)
            {   printPageMark(GLB.LPE, GLB.PAGEMARK);
                GLB.PRINTE_XSEEDWRITES = GLB.PRINTE_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTE = true;
        }
        GLB.INITHEADERE = "TRUE";
        GLB.PAGECOUNTE = GLB.PAGECOUNTE + 1;
        GLB.LINECOUNTE = 0;
        GLB.ADVANCEE = false;
    }
    if (GLB.SHADOW.trim().equals("F") == true)
    {   if (GLB.INITREPORTF == true)
        {   if (GLB.INITHEADERF.equals("TRUE") == true)
            {   printPageMark(GLB.LPF, GLB.PAGEMARK);
                GLB.PRINTF_XSEEDWRITES = GLB.PRINTF_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTF = true;
        }
        GLB.INITHEADERF = "TRUE";
        GLB.PAGECOUNTF = GLB.PAGECOUNTF + 1;
        GLB.LINECOUNTF = 0;
        GLB.ADVANCEF = false;
    }
    if (GLB.SHADOW.trim().equals("G") == true)
    {   if (GLB.INITREPORTG == true)
        {   if (GLB.INITHEADERG.equals("TRUE") == true)
            {   printPageMark(GLB.LPG, GLB.PAGEMARK);
                GLB.PRINTG_XSEEDWRITES = GLB.PRINTG_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTG = true;
        }
        GLB.INITHEADERG = "TRUE";
        GLB.PAGECOUNTG = GLB.PAGECOUNTG + 1;
        GLB.LINECOUNTG = 0;
        GLB.ADVANCEG = false;
    }
    if (GLB.SHADOW.trim().equals("H") == true)
    {   if (GLB.INITREPORTH == true)
        {   if (GLB.INITHEADERH.equals("TRUE") == true)
            {   printPageMark(GLB.LPH, GLB.PAGEMARK);
                GLB.PRINTH_XSEEDWRITES = GLB.PRINTH_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTH = true;
        }
        GLB.INITHEADERH = "TRUE";
        GLB.PAGECOUNTH = GLB.PAGECOUNTH + 1;
        GLB.LINECOUNTH = 0;
        GLB.ADVANCEH = false;
    }
    if (GLB.SHADOW.trim().equals("I") == true)
    {   if (GLB.INITREPORTI == true)
        {   if (GLB.INITHEADERI.equals("TRUE") == true)
            {   printPageMark(GLB.LPI, GLB.PAGEMARK);
                GLB.PRINTI_XSEEDWRITES = GLB.PRINTI_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTI = true;
        }
        GLB.INITHEADERI = "TRUE";
        GLB.PAGECOUNTI = GLB.PAGECOUNTI + 1;
        GLB.LINECOUNTI = 0;
        GLB.ADVANCEI = false;
    }
    if (GLB.SHADOW.trim().equals("J") == true)
    {   if (GLB.INITREPORTJ == true)
        {   if (GLB.INITHEADERJ.equals("TRUE") == true)
            {   printPageMark(GLB.LPJ, GLB.PAGEMARK);
                GLB.PRINTJ_XSEEDWRITES = GLB.PRINTJ_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTJ = true;
        }
        GLB.INITHEADERJ = "TRUE";
        GLB.PAGECOUNTJ = GLB.PAGECOUNTJ + 1;
        GLB.LINECOUNTJ = 0;
        GLB.ADVANCEJ = false;
    }
    if (GLB.SHADOW.trim().equals("L") == true)
    {   if (GLB.INITREPORTL == true)
        {   if (GLB.INITHEADERL.equals("TRUE") == true)
            {   printPageMark(GLB.LPL, GLB.PAGEMARK);
                GLB.PRINTL_XSEEDWRITES = GLB.PRINTL_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTL = true;
        }
        GLB.INITHEADERL = "TRUE";
        GLB.PAGECOUNTL = GLB.PAGECOUNTL + 1;
        GLB.LINECOUNTL = 0;
        GLB.ADVANCEL = false;
    }
    if (GLB.SHADOW.trim().equals("M") == true)
    {   if (GLB.INITREPORTM == true)
        {   if (GLB.INITHEADERM.equals("TRUE") == true)
            {   printPageMark(GLB.LPM, GLB.PAGEMARK);
                GLB.PRINTM_XSEEDWRITES = GLB.PRINTM_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTM = true;
        }
        GLB.INITHEADERM = "TRUE";
        GLB.PAGECOUNTM = GLB.PAGECOUNTM + 1;
        GLB.LINECOUNTM = 0;
        GLB.ADVANCEM = false;
    }
    if (GLB.SHADOW.trim().equals("N") == true)
    {   if (GLB.INITREPORTN == true)
        {   if (GLB.INITHEADERN.equals("TRUE") == true)
            {   printPageMark(GLB.LPN, GLB.PAGEMARK);
                GLB.PRINTN_XSEEDWRITES = GLB.PRINTN_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTN = true;
        }
        GLB.INITHEADERN = "TRUE";
        GLB.PAGECOUNTN = GLB.PAGECOUNTN + 1;
        GLB.LINECOUNTN = 0;
        GLB.ADVANCEN = false;
    }
    if (GLB.SHADOW.trim().equals("O") == true)
    {   if (GLB.INITREPORTO == true)
        {   if (GLB.INITHEADERO.equals("TRUE") == true)
            {   printPageMark(GLB.LPO, GLB.PAGEMARK);
                GLB.PRINTO_XSEEDWRITES = GLB.PRINTO_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTO = true;
        }
        GLB.INITHEADERO = "TRUE";
        GLB.PAGECOUNTO = GLB.PAGECOUNTO + 1;
        GLB.LINECOUNTO = 0;
        GLB.ADVANCEO = false;
    }
    if (GLB.SHADOW.trim().equals("P") == true)
    {   if (GLB.INITREPORTP == true)
        {   if (GLB.INITHEADERP.equals("TRUE") == true)
            {   printPageMark(GLB.LPP, GLB.PAGEMARK);
                GLB.PRINTP_XSEEDWRITES = GLB.PRINTP_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTP = true;
        }
        GLB.INITHEADERP = "TRUE";
        GLB.PAGECOUNTP = GLB.PAGECOUNTP + 1;
        GLB.LINECOUNTP = 0;
        GLB.ADVANCEP = false;
    }
    if (GLB.SHADOW.trim().equals("Q") == true)
    {   if (GLB.INITREPORTQ == true)
        {   if (GLB.INITHEADERQ.equals("TRUE") == true)
            {   printPageMark(GLB.LPQ, GLB.PAGEMARK);
                GLB.PRINTQ_XSEEDWRITES = GLB.PRINTQ_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTQ = true;
        }
        GLB.INITHEADERQ = "TRUE";
        GLB.PAGECOUNTQ = GLB.PAGECOUNTQ + 1;
        GLB.LINECOUNTQ = 0;
        GLB.ADVANCEQ = false;
    }
    if (GLB.SHADOW.trim().equals("R") == true)
    {   if (GLB.INITREPORTR == true)
        {   if (GLB.INITHEADERR.equals("TRUE") == true)
            {   printPageMark(GLB.LPR, GLB.PAGEMARK);
                GLB.PRINTR_XSEEDWRITES = GLB.PRINTR_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTR = true;
        }
        GLB.INITHEADERR = "TRUE";
        GLB.PAGECOUNTR = GLB.PAGECOUNTR + 1;
        GLB.LINECOUNTR = 0;
        GLB.ADVANCER = false;
    }
    if (GLB.SHADOW.trim().equals("S") == true)
    {   if (GLB.INITREPORTS == true)
        {   if (GLB.INITHEADERS.equals("TRUE") == true)
            {   printPageMark(GLB.LPS, GLB.PAGEMARK);
                GLB.PRINTS_XSEEDWRITES = GLB.PRINTS_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTS = true;
        }
        GLB.INITHEADERS = "TRUE";
        GLB.PAGECOUNTS = GLB.PAGECOUNTS + 1;
        GLB.LINECOUNTS = 0;
        GLB.ADVANCES = false;
    }
    if (GLB.SHADOW.trim().equals("Z") == true)
    {   if (GLB.INITREPORTZ == true)
        {   if (GLB.INITHEADERZ.equals("TRUE") == true)
            {   printPageMark(GLB.LPZ, GLB.PAGEMARK);
                GLB.PRINTZ_XSEEDWRITES = GLB.PRINTZ_XSEEDWRITES + 1;
            }
        }
        else
        {   GLB.INITREPORTZ = true;
        }
        GLB.INITHEADERZ = "TRUE";
        GLB.PAGECOUNTZ = GLB.PAGECOUNTZ + 1;
        GLB.LINECOUNTZ = 0;
        GLB.ADVANCEZ = false;
    }
         if (GLB.BP_INDEX != 0)
         {
            for (int I = 1; I <= GLB.BP_INDEX; I++)
            {
	            if (GLB.BP[I][SHADOW].equals(GLB.SHADOW) == true)
	            {
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("1") == true)
    {    P_1("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("2") == true)
    {    P_2("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("3") == true)
    {    P_3("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("4") == true)
    {    P_4("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("6") == true)
    {    P_6("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("7") == true)
    {    P_7("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("9") == true)
    {    P_9("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("10") == true)
    {    P_10("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("13") == true)
    {    P_13("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("21") == true)
    {    P_21("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("22") == true)
    {    P_22("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("23") == true)
    {    P_23("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("24") == true)
    {    P_24("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("25") == true)
    {    P_25("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("26") == true)
    {    P_26("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("27") == true)
    {    P_27("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("28") == true)
    {    P_28("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("29") == true)
    {    P_29("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("31") == true)
    {    P_31("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("36") == true)
    {    P_36("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("37") == true)
    {    P_37("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("38") == true)
    {    P_38("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("41") == true)
    {    P_41("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("42") == true)
    {    P_42("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("43") == true)
    {    P_43("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("44") == true)
    {    P_44("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("46") == true)
    {    P_46("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("47") == true)
    {    P_47("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("48") == true)
    {    P_48("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("50") == true)
    {    P_50("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("51") == true)
    {    P_51("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("52") == true)
    {    P_52("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("53") == true)
    {    P_53("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("54") == true)
    {    P_54("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("55") == true)
    {    P_55("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("56") == true)
    {    P_56("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("57") == true)
    {    P_57("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("60") == true)
    {    P_60("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("62") == true)
    {    P_62("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("63") == true)
    {    P_63("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("64") == true)
    {    P_64("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("65") == true)
    {    P_65("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("66") == true)
    {    P_66("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("67") == true)
    {    P_67("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("69") == true)
    {    P_69("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("70") == true)
    {    P_70("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("71") == true)
    {    P_71("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("72") == true)
    {    P_72("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("73") == true)
    {    P_73("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("74") == true)
    {    P_74("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("75") == true)
    {    P_75("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("76") == true)
    {    P_76("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("77") == true)
    {    P_77("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("78") == true)
    {    P_78("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("79") == true)
    {    P_79("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("80") == true)
    {    P_80("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("81") == true)
    {    P_81("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("82") == true)
    {    P_82("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("83") == true)
    {    P_83("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("84") == true)
    {    P_84("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("90") == true)
    {    P_90("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("91") == true)
    {    P_91("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("92") == true)
    {    P_92("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("93") == true)
    {    P_93("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("94") == true)
    {    P_94("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("95") == true)
    {    P_95("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("96") == true)
    {    P_96("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("101") == true)
    {    P_101("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("102") == true)
    {    P_102("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("103") == true)
    {    P_103("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("104") == true)
    {    P_104("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("111") == true)
    {    P_111("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("112") == true)
    {    P_112("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("113") == true)
    {    P_113("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("121") == true)
    {    P_121("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("122") == true)
    {    P_122("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("123") == true)
    {    P_123("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("124") == true)
    {    P_124("PRINT.FRAME");
    }
    if (GLB.BP[I][GLB.SEQ].toUpperCase().trim().equals("125") == true)
    {    P_125("PRINT.FRAME");
    }
                }
            }
         }

         if (GLB.SHADOW.trim().equals("") == true)
         {
            GLB.LINECOUNT = GLB.LINECOUNT + 1;
         }
    if (GLB.SHADOW.trim().equals("B") ==true)
    {  GLB.LINECOUNTB = GLB.LINECOUNTB + 1;
    }
    if (GLB.SHADOW.trim().equals("C") ==true)
    {  GLB.LINECOUNTC = GLB.LINECOUNTC + 1;
    }
    if (GLB.SHADOW.trim().equals("D") ==true)
    {  GLB.LINECOUNTD = GLB.LINECOUNTD + 1;
    }
    if (GLB.SHADOW.trim().equals("E") ==true)
    {  GLB.LINECOUNTE = GLB.LINECOUNTE + 1;
    }
    if (GLB.SHADOW.trim().equals("F") ==true)
    {  GLB.LINECOUNTF = GLB.LINECOUNTF + 1;
    }
    if (GLB.SHADOW.trim().equals("G") ==true)
    {  GLB.LINECOUNTG = GLB.LINECOUNTG + 1;
    }
    if (GLB.SHADOW.trim().equals("H") ==true)
    {  GLB.LINECOUNTH = GLB.LINECOUNTH + 1;
    }
    if (GLB.SHADOW.trim().equals("I") ==true)
    {  GLB.LINECOUNTI = GLB.LINECOUNTI + 1;
    }
    if (GLB.SHADOW.trim().equals("J") ==true)
    {  GLB.LINECOUNTJ = GLB.LINECOUNTJ + 1;
    }
    if (GLB.SHADOW.trim().equals("L") ==true)
    {  GLB.LINECOUNTL = GLB.LINECOUNTL + 1;
    }
    if (GLB.SHADOW.trim().equals("M") ==true)
    {  GLB.LINECOUNTM = GLB.LINECOUNTM + 1;
    }
    if (GLB.SHADOW.trim().equals("N") ==true)
    {  GLB.LINECOUNTN = GLB.LINECOUNTN + 1;
    }
    if (GLB.SHADOW.trim().equals("O") ==true)
    {  GLB.LINECOUNTO = GLB.LINECOUNTO + 1;
    }
    if (GLB.SHADOW.trim().equals("P") ==true)
    {  GLB.LINECOUNTP = GLB.LINECOUNTP + 1;
    }
    if (GLB.SHADOW.trim().equals("Q") ==true)
    {  GLB.LINECOUNTQ = GLB.LINECOUNTQ + 1;
    }
    if (GLB.SHADOW.trim().equals("R") ==true)
    {  GLB.LINECOUNTR = GLB.LINECOUNTR + 1;
    }
    if (GLB.SHADOW.trim().equals("S") ==true)
    {  GLB.LINECOUNTS = GLB.LINECOUNTS + 1;
    }
    if (GLB.SHADOW.trim().equals("Z") ==true)
    {  GLB.LINECOUNTZ = GLB.LINECOUNTZ + 1;
    }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "BeginPage");
    }
}

private void P_CheckPage ()
  throws Exception
{
    if (GLB.INITREPORT == false)
    {
        if ( GLB.LP_XSEEDTITLE != null  && GLB.LP_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LP = new PrintStream(new FileOutputStream(GLB.LP_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LP_XSEEDTITLE = newBackup(GLB.TITLE,"");
            GLB.LP = new PrintStream(new FileOutputStream(GLB.LP_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNT = GLB.LINECOUNT + 1;
    if (GLB.LINECOUNT > GLB.FORMDEPTH || GLB.ADVANCE == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORT = true;
    GLB.PRINT_XSEEDWRITES= GLB.PRINT_XSEEDWRITES + 1;
}
private void P_CheckPageB ()
    throws Exception
{
    if (GLB.INITREPORTB == false)
    {
        if ( GLB.LPB_XSEEDTITLE != null  && GLB.LPB_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPB = new PrintStream(new FileOutputStream(GLB.LPB_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPB_XSEEDTITLE = newBackup(GLB.TITLEB,"B");
            GLB.LPB = new PrintStream(new FileOutputStream(GLB.LPB_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTB = GLB.LINECOUNTB + 1;
    if (GLB.LINECOUNTB > GLB.FORMDEPTHB || GLB.ADVANCEB == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTB = true;
    GLB.PRINTB_XSEEDWRITES= GLB.PRINTB_XSEEDWRITES + 1;
}
private void P_CheckPageC ()
    throws Exception
{
    if (GLB.INITREPORTC == false)
    {
        if ( GLB.LPC_XSEEDTITLE != null  && GLB.LPC_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPC = new PrintStream(new FileOutputStream(GLB.LPC_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPC_XSEEDTITLE = newBackup(GLB.TITLEC,"C");
            GLB.LPC = new PrintStream(new FileOutputStream(GLB.LPC_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTC = GLB.LINECOUNTC + 1;
    if (GLB.LINECOUNTC > GLB.FORMDEPTHC || GLB.ADVANCEC == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTC = true;
    GLB.PRINTC_XSEEDWRITES= GLB.PRINTC_XSEEDWRITES + 1;
}
private void P_CheckPageD ()
    throws Exception
{
    if (GLB.INITREPORTD == false)
    {
        if ( GLB.LPD_XSEEDTITLE != null  && GLB.LPD_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPD = new PrintStream(new FileOutputStream(GLB.LPD_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPD_XSEEDTITLE = newBackup(GLB.TITLED,"D");
            GLB.LPD = new PrintStream(new FileOutputStream(GLB.LPD_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTD = GLB.LINECOUNTD + 1;
    if (GLB.LINECOUNTD > GLB.FORMDEPTHD || GLB.ADVANCED == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTD = true;
    GLB.PRINTD_XSEEDWRITES= GLB.PRINTD_XSEEDWRITES + 1;
}
private void P_CheckPageE ()
    throws Exception
{
    if (GLB.INITREPORTE == false)
    {
        if ( GLB.LPE_XSEEDTITLE != null  && GLB.LPE_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPE = new PrintStream(new FileOutputStream(GLB.LPE_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPE_XSEEDTITLE = newBackup(GLB.TITLEE,"E");
            GLB.LPE = new PrintStream(new FileOutputStream(GLB.LPE_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTE = GLB.LINECOUNTE + 1;
    if (GLB.LINECOUNTE > GLB.FORMDEPTHE || GLB.ADVANCEE == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTE = true;
    GLB.PRINTE_XSEEDWRITES= GLB.PRINTE_XSEEDWRITES + 1;
}
private void P_CheckPageF ()
    throws Exception
{
    if (GLB.INITREPORTF == false)
    {
        if ( GLB.LPF_XSEEDTITLE != null  && GLB.LPF_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPF = new PrintStream(new FileOutputStream(GLB.LPF_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPF_XSEEDTITLE = newBackup(GLB.TITLEF,"F");
            GLB.LPF = new PrintStream(new FileOutputStream(GLB.LPF_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTF = GLB.LINECOUNTF + 1;
    if (GLB.LINECOUNTF > GLB.FORMDEPTHF || GLB.ADVANCEF == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTF = true;
    GLB.PRINTF_XSEEDWRITES= GLB.PRINTF_XSEEDWRITES + 1;
}
private void P_CheckPageG ()
    throws Exception
{
    if (GLB.INITREPORTG == false)
    {
        if ( GLB.LPG_XSEEDTITLE != null  && GLB.LPG_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPG = new PrintStream(new FileOutputStream(GLB.LPG_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPG_XSEEDTITLE = newBackup(GLB.TITLEG,"G");
            GLB.LPG = new PrintStream(new FileOutputStream(GLB.LPG_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTG = GLB.LINECOUNTG + 1;
    if (GLB.LINECOUNTG > GLB.FORMDEPTHG || GLB.ADVANCEG == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTG = true;
    GLB.PRINTG_XSEEDWRITES= GLB.PRINTG_XSEEDWRITES + 1;
}
private void P_CheckPageH ()
    throws Exception
{
    if (GLB.INITREPORTH == false)
    {
        if ( GLB.LPH_XSEEDTITLE != null  && GLB.LPH_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPH = new PrintStream(new FileOutputStream(GLB.LPH_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPH_XSEEDTITLE = newBackup(GLB.TITLEH,"H");
            GLB.LPH = new PrintStream(new FileOutputStream(GLB.LPH_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTH = GLB.LINECOUNTH + 1;
    if (GLB.LINECOUNTH > GLB.FORMDEPTHH || GLB.ADVANCEH == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTH = true;
    GLB.PRINTH_XSEEDWRITES= GLB.PRINTH_XSEEDWRITES + 1;
}
private void P_CheckPageI ()
    throws Exception
{
    if (GLB.INITREPORTI == false)
    {
        if ( GLB.LPI_XSEEDTITLE != null  && GLB.LPI_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPI = new PrintStream(new FileOutputStream(GLB.LPI_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPI_XSEEDTITLE = newBackup(GLB.TITLEI,"I");
            GLB.LPI = new PrintStream(new FileOutputStream(GLB.LPI_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTI = GLB.LINECOUNTI + 1;
    if (GLB.LINECOUNTI > GLB.FORMDEPTHI || GLB.ADVANCEI == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTI = true;
    GLB.PRINTI_XSEEDWRITES= GLB.PRINTI_XSEEDWRITES + 1;
}
private void P_CheckPageJ ()
    throws Exception
{
    if (GLB.INITREPORTJ == false)
    {
        if ( GLB.LPJ_XSEEDTITLE != null  && GLB.LPJ_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPJ = new PrintStream(new FileOutputStream(GLB.LPJ_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPJ_XSEEDTITLE = newBackup(GLB.TITLEJ,"J");
            GLB.LPJ = new PrintStream(new FileOutputStream(GLB.LPJ_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTJ = GLB.LINECOUNTJ + 1;
    if (GLB.LINECOUNTJ > GLB.FORMDEPTHJ || GLB.ADVANCEJ == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTJ = true;
    GLB.PRINTJ_XSEEDWRITES= GLB.PRINTJ_XSEEDWRITES + 1;
}
private void P_CheckPageL ()
    throws Exception
{
    if (GLB.INITREPORTL == false)
    {
        if ( GLB.LPL_XSEEDTITLE != null  && GLB.LPL_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPL = new PrintStream(new FileOutputStream(GLB.LPL_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPL_XSEEDTITLE = newBackup(GLB.TITLEL,"L");
            GLB.LPL = new PrintStream(new FileOutputStream(GLB.LPL_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTL = GLB.LINECOUNTL + 1;
    if (GLB.LINECOUNTL > GLB.FORMDEPTHL || GLB.ADVANCEL == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTL = true;
    GLB.PRINTL_XSEEDWRITES= GLB.PRINTL_XSEEDWRITES + 1;
}
private void P_CheckPageM ()
    throws Exception
{
    if (GLB.INITREPORTM == false)
    {
        if ( GLB.LPM_XSEEDTITLE != null  && GLB.LPM_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPM = new PrintStream(new FileOutputStream(GLB.LPM_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPM_XSEEDTITLE = newBackup(GLB.TITLEM,"M");
            GLB.LPM = new PrintStream(new FileOutputStream(GLB.LPM_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTM = GLB.LINECOUNTM + 1;
    if (GLB.LINECOUNTM > GLB.FORMDEPTHM || GLB.ADVANCEM == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTM = true;
    GLB.PRINTM_XSEEDWRITES= GLB.PRINTM_XSEEDWRITES + 1;
}
private void P_CheckPageN ()
    throws Exception
{
    if (GLB.INITREPORTN == false)
    {
        if ( GLB.LPN_XSEEDTITLE != null  && GLB.LPN_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPN = new PrintStream(new FileOutputStream(GLB.LPN_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPN_XSEEDTITLE = newBackup(GLB.TITLEN,"N");
            GLB.LPN = new PrintStream(new FileOutputStream(GLB.LPN_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTN = GLB.LINECOUNTN + 1;
    if (GLB.LINECOUNTN > GLB.FORMDEPTHN || GLB.ADVANCEN == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTN = true;
    GLB.PRINTN_XSEEDWRITES= GLB.PRINTN_XSEEDWRITES + 1;
}
private void P_CheckPageO ()
    throws Exception
{
    if (GLB.INITREPORTO == false)
    {
        if ( GLB.LPO_XSEEDTITLE != null  && GLB.LPO_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPO = new PrintStream(new FileOutputStream(GLB.LPO_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPO_XSEEDTITLE = newBackup(GLB.TITLEO,"O");
            GLB.LPO = new PrintStream(new FileOutputStream(GLB.LPO_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTO = GLB.LINECOUNTO + 1;
    if (GLB.LINECOUNTO > GLB.FORMDEPTHO || GLB.ADVANCEO == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTO = true;
    GLB.PRINTO_XSEEDWRITES= GLB.PRINTO_XSEEDWRITES + 1;
}
private void P_CheckPageP ()
    throws Exception
{
    if (GLB.INITREPORTP == false)
    {
        if ( GLB.LPP_XSEEDTITLE != null  && GLB.LPP_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPP_XSEEDTITLE = newBackup(GLB.TITLEP,"P");
            GLB.LPP = new PrintStream(new FileOutputStream(GLB.LPP_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTP = GLB.LINECOUNTP + 1;
    if (GLB.LINECOUNTP > GLB.FORMDEPTHP || GLB.ADVANCEP == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTP = true;
    GLB.PRINTP_XSEEDWRITES= GLB.PRINTP_XSEEDWRITES + 1;
}
private void P_CheckPageQ ()
    throws Exception
{
    if (GLB.INITREPORTQ == false)
    {
        if ( GLB.LPQ_XSEEDTITLE != null  && GLB.LPQ_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPQ = new PrintStream(new FileOutputStream(GLB.LPQ_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPQ_XSEEDTITLE = newBackup(GLB.TITLEQ,"Q");
            GLB.LPQ = new PrintStream(new FileOutputStream(GLB.LPQ_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTQ = GLB.LINECOUNTQ + 1;
    if (GLB.LINECOUNTQ > GLB.FORMDEPTHQ || GLB.ADVANCEQ == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTQ = true;
    GLB.PRINTQ_XSEEDWRITES= GLB.PRINTQ_XSEEDWRITES + 1;
}
private void P_CheckPageR ()
    throws Exception
{
    if (GLB.INITREPORTR == false)
    {
        if ( GLB.LPR_XSEEDTITLE != null  && GLB.LPR_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPR = new PrintStream(new FileOutputStream(GLB.LPR_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPR_XSEEDTITLE = newBackup(GLB.TITLER,"R");
            GLB.LPR = new PrintStream(new FileOutputStream(GLB.LPR_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTR = GLB.LINECOUNTR + 1;
    if (GLB.LINECOUNTR > GLB.FORMDEPTHR || GLB.ADVANCER == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTR = true;
    GLB.PRINTR_XSEEDWRITES= GLB.PRINTR_XSEEDWRITES + 1;
}
private void P_CheckPageS ()
    throws Exception
{
    if (GLB.INITREPORTS == false)
    {
        if ( GLB.LPS_XSEEDTITLE != null  && GLB.LPS_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPS = new PrintStream(new FileOutputStream(GLB.LPS_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPS_XSEEDTITLE = newBackup(GLB.TITLES,"S");
            GLB.LPS = new PrintStream(new FileOutputStream(GLB.LPS_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTS = GLB.LINECOUNTS + 1;
    if (GLB.LINECOUNTS > GLB.FORMDEPTHS || GLB.ADVANCES == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTS = true;
    GLB.PRINTS_XSEEDWRITES= GLB.PRINTS_XSEEDWRITES + 1;
}
private void P_CheckPageZ ()
    throws Exception
{
    if (GLB.INITREPORTZ == false)
    {
        if ( GLB.LPZ_XSEEDTITLE != null  && GLB.LPZ_XSEEDTITLE.trim().equals("") == false)
        {
            GLB.LPZ = new PrintStream(new FileOutputStream(GLB.LPZ_XSEEDTITLE ,true));
        }
        else
        {
            GLB.LPZ_XSEEDTITLE = newBackup(GLB.TITLEZ,"Z");
            GLB.LPZ = new PrintStream(new FileOutputStream(GLB.LPZ_XSEEDTITLE ,false));
        }
    }
    GLB.LINECOUNTZ = GLB.LINECOUNTZ + 1;
    if (GLB.LINECOUNTZ > GLB.FORMDEPTHZ || GLB.ADVANCEZ == true)
    {  P_BEGINPAGE();
    }
    GLB.INITREPORTZ = true;
    GLB.PRINTZ_XSEEDWRITES= GLB.PRINTZ_XSEEDWRITES + 1;
}

private void P_LINEPRINTER()
    throws Exception
{
    try
    {

    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_LINEPRINTER");
    }
}

private void P_VIDEO ()
    throws Exception
{
    try
    {
         if ((GLB.SHADOW.trim().equals("")==true))
         {
            GLB.WTITLE = GLB.LP_XSEEDTITLE;
         }
    if (GLB.SHADOW.trim().equals("B") ==true)
    {  GLB.WTITLE = GLB.LPB_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("C") ==true)
    {  GLB.WTITLE = GLB.LPC_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("D") ==true)
    {  GLB.WTITLE = GLB.LPD_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("E") ==true)
    {  GLB.WTITLE = GLB.LPE_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("F") ==true)
    {  GLB.WTITLE = GLB.LPF_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("G") ==true)
    {  GLB.WTITLE = GLB.LPG_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("H") ==true)
    {  GLB.WTITLE = GLB.LPH_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("I") ==true)
    {  GLB.WTITLE = GLB.LPI_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("J") ==true)
    {  GLB.WTITLE = GLB.LPJ_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("L") ==true)
    {  GLB.WTITLE = GLB.LPL_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("M") ==true)
    {  GLB.WTITLE = GLB.LPM_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("N") ==true)
    {  GLB.WTITLE = GLB.LPN_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("O") ==true)
    {  GLB.WTITLE = GLB.LPO_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("P") ==true)
    {  GLB.WTITLE = GLB.LPP_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("Q") ==true)
    {  GLB.WTITLE = GLB.LPQ_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("R") ==true)
    {  GLB.WTITLE = GLB.LPR_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("S") ==true)
    {  GLB.WTITLE = GLB.LPS_XSEEDTITLE;
    }
    if (GLB.SHADOW.trim().equals("Z") ==true)
    {  GLB.WTITLE = GLB.LPZ_XSEEDTITLE;
    }

         GLB.ReportFilename = GLB.WTITLE;
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_VIDEO");
    }
}

private void P_PRINTER ()
    throws Exception
{
    try

    {
        double wNumcopies = 0;
        String wPrinter = "";
        String wFormId = "";

        GLB.SAVCOPIES = GLB.NUMCOPIES;
        if ((GLB.SHADOW.trim().equals("")==true))
        {
           GLB.WTITLE = GLB.LP_XSEEDTITLE;
           GLB.WSTATION = GLB.STATION;
           wNumcopies = GLB.NUMCOPIES;
           wFormId = GLB.FORMID;
           if (GLB.PRINTER.equals("") == false)
           {
              wPrinter = GLB.PRINTER;
           }
           else if (GLB.STATION.equals("") == false)
           {
              wPrinter = GLB.STATION;
           }
        }
        if (GLB.SHADOW.trim().equals("B")==true)
        {  GLB.WTITLE = GLB.LPB_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONB;
           wNumcopies = GLB.NUMCOPIESB;
           wFormId = GLB.FORMIDB;
           if (GLB.PRINTERB.equals("") == false)
           {
              wPrinter = GLB.PRINTERB;
           }
           else if (GLB.STATIONB.equals("") == false)
           {
              wPrinter = GLB.STATIONB;
           }
        }
        if (GLB.SHADOW.trim().equals("C")==true)
        {  GLB.WTITLE = GLB.LPC_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONC;
           wNumcopies = GLB.NUMCOPIESC;
           wFormId = GLB.FORMIDC;
           if (GLB.PRINTERC.equals("") == false)
           {
              wPrinter = GLB.PRINTERC;
           }
           else if (GLB.STATIONC.equals("") == false)
           {
              wPrinter = GLB.STATIONC;
           }
        }
        if (GLB.SHADOW.trim().equals("D")==true)
        {  GLB.WTITLE = GLB.LPD_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIOND;
           wNumcopies = GLB.NUMCOPIESD;
           wFormId = GLB.FORMIDD;
           if (GLB.PRINTERD.equals("") == false)
           {
              wPrinter = GLB.PRINTERD;
           }
           else if (GLB.STATIOND.equals("") == false)
           {
              wPrinter = GLB.STATIOND;
           }
        }
        if (GLB.SHADOW.trim().equals("E")==true)
        {  GLB.WTITLE = GLB.LPE_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONE;
           wNumcopies = GLB.NUMCOPIESE;
           wFormId = GLB.FORMIDE;
           if (GLB.PRINTERE.equals("") == false)
           {
              wPrinter = GLB.PRINTERE;
           }
           else if (GLB.STATIONE.equals("") == false)
           {
              wPrinter = GLB.STATIONE;
           }
        }
        if (GLB.SHADOW.trim().equals("F")==true)
        {  GLB.WTITLE = GLB.LPF_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONF;
           wNumcopies = GLB.NUMCOPIESF;
           wFormId = GLB.FORMIDF;
           if (GLB.PRINTERF.equals("") == false)
           {
              wPrinter = GLB.PRINTERF;
           }
           else if (GLB.STATIONF.equals("") == false)
           {
              wPrinter = GLB.STATIONF;
           }
        }
        if (GLB.SHADOW.trim().equals("G")==true)
        {  GLB.WTITLE = GLB.LPG_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONG;
           wNumcopies = GLB.NUMCOPIESG;
           wFormId = GLB.FORMIDG;
           if (GLB.PRINTERG.equals("") == false)
           {
              wPrinter = GLB.PRINTERG;
           }
           else if (GLB.STATIONG.equals("") == false)
           {
              wPrinter = GLB.STATIONG;
           }
        }
        if (GLB.SHADOW.trim().equals("H")==true)
        {  GLB.WTITLE = GLB.LPH_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONH;
           wNumcopies = GLB.NUMCOPIESH;
           wFormId = GLB.FORMIDH;
           if (GLB.PRINTERH.equals("") == false)
           {
              wPrinter = GLB.PRINTERH;
           }
           else if (GLB.STATIONH.equals("") == false)
           {
              wPrinter = GLB.STATIONH;
           }
        }
        if (GLB.SHADOW.trim().equals("I")==true)
        {  GLB.WTITLE = GLB.LPI_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONI;
           wNumcopies = GLB.NUMCOPIESI;
           wFormId = GLB.FORMIDI;
           if (GLB.PRINTERI.equals("") == false)
           {
              wPrinter = GLB.PRINTERI;
           }
           else if (GLB.STATIONI.equals("") == false)
           {
              wPrinter = GLB.STATIONI;
           }
        }
        if (GLB.SHADOW.trim().equals("J")==true)
        {  GLB.WTITLE = GLB.LPJ_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONJ;
           wNumcopies = GLB.NUMCOPIESJ;
           wFormId = GLB.FORMIDJ;
           if (GLB.PRINTERJ.equals("") == false)
           {
              wPrinter = GLB.PRINTERJ;
           }
           else if (GLB.STATIONJ.equals("") == false)
           {
              wPrinter = GLB.STATIONJ;
           }
        }
        if (GLB.SHADOW.trim().equals("L")==true)
        {  GLB.WTITLE = GLB.LPL_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONL;
           wNumcopies = GLB.NUMCOPIESL;
           wFormId = GLB.FORMIDL;
           if (GLB.PRINTERL.equals("") == false)
           {
              wPrinter = GLB.PRINTERL;
           }
           else if (GLB.STATIONL.equals("") == false)
           {
              wPrinter = GLB.STATIONL;
           }
        }
        if (GLB.SHADOW.trim().equals("M")==true)
        {  GLB.WTITLE = GLB.LPM_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONM;
           wNumcopies = GLB.NUMCOPIESM;
           wFormId = GLB.FORMIDM;
           if (GLB.PRINTERM.equals("") == false)
           {
              wPrinter = GLB.PRINTERM;
           }
           else if (GLB.STATIONM.equals("") == false)
           {
              wPrinter = GLB.STATIONM;
           }
        }
        if (GLB.SHADOW.trim().equals("N")==true)
        {  GLB.WTITLE = GLB.LPN_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONN;
           wNumcopies = GLB.NUMCOPIESN;
           wFormId = GLB.FORMIDN;
           if (GLB.PRINTERN.equals("") == false)
           {
              wPrinter = GLB.PRINTERN;
           }
           else if (GLB.STATIONN.equals("") == false)
           {
              wPrinter = GLB.STATIONN;
           }
        }
        if (GLB.SHADOW.trim().equals("O")==true)
        {  GLB.WTITLE = GLB.LPO_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONO;
           wNumcopies = GLB.NUMCOPIESO;
           wFormId = GLB.FORMIDO;
           if (GLB.PRINTERO.equals("") == false)
           {
              wPrinter = GLB.PRINTERO;
           }
           else if (GLB.STATIONO.equals("") == false)
           {
              wPrinter = GLB.STATIONO;
           }
        }
        if (GLB.SHADOW.trim().equals("P")==true)
        {  GLB.WTITLE = GLB.LPP_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONP;
           wNumcopies = GLB.NUMCOPIESP;
           wFormId = GLB.FORMIDP;
           if (GLB.PRINTERP.equals("") == false)
           {
              wPrinter = GLB.PRINTERP;
           }
           else if (GLB.STATIONP.equals("") == false)
           {
              wPrinter = GLB.STATIONP;
           }
        }
        if (GLB.SHADOW.trim().equals("Q")==true)
        {  GLB.WTITLE = GLB.LPQ_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONQ;
           wNumcopies = GLB.NUMCOPIESQ;
           wFormId = GLB.FORMIDQ;
           if (GLB.PRINTERQ.equals("") == false)
           {
              wPrinter = GLB.PRINTERQ;
           }
           else if (GLB.STATIONQ.equals("") == false)
           {
              wPrinter = GLB.STATIONQ;
           }
        }
        if (GLB.SHADOW.trim().equals("R")==true)
        {  GLB.WTITLE = GLB.LPR_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONR;
           wNumcopies = GLB.NUMCOPIESR;
           wFormId = GLB.FORMIDR;
           if (GLB.PRINTERR.equals("") == false)
           {
              wPrinter = GLB.PRINTERR;
           }
           else if (GLB.STATIONR.equals("") == false)
           {
              wPrinter = GLB.STATIONR;
           }
        }
        if (GLB.SHADOW.trim().equals("S")==true)
        {  GLB.WTITLE = GLB.LPS_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONS;
           wNumcopies = GLB.NUMCOPIESS;
           wFormId = GLB.FORMIDS;
           if (GLB.PRINTERS.equals("") == false)
           {
              wPrinter = GLB.PRINTERS;
           }
           else if (GLB.STATIONS.equals("") == false)
           {
              wPrinter = GLB.STATIONS;
           }
        }
        if (GLB.SHADOW.trim().equals("Z")==true)
        {  GLB.WTITLE = GLB.LPZ_XSEEDTITLE;
           GLB.WSTATION = GLB.STATIONZ;
           wNumcopies = GLB.NUMCOPIESZ;
           wFormId = GLB.FORMIDZ;
           if (GLB.PRINTERZ.equals("") == false)
           {
              wPrinter = GLB.PRINTERZ;
           }
           else if (GLB.STATIONZ.equals("") == false)
           {
              wPrinter = GLB.STATIONZ;
           }
        }
        xseedSpool(wPrinter, GLB.WTITLE, cStr(wNumcopies), wFormId);
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_PRINTER");;
    }
}

private void P_InitialValues ()
    throws Exception
{
    F1_RLDSLITOBS = fix("", 6);
    F1_RLDTFINALX = fix("", 10);
    F1_RLDTINICIA = fix("", 10);
    F1_RLNRSOLICI = 0;
    F1_RLNRFOLHAS = 0;
    F1_RLDSTIPREL = fix("", 46);
    F1_RLNRCGCDIG = 0;
    F1_RLNRCGCFIL = 0;
    F1_RLNRCGCNUM = 0;
    F1_RLNRIESEMP = fix("", 15);
    F1_RLNMEMPRES = fix("", 30);
    F2_RLDTSAIDAX = fix("", 10);
    F2_RLVLOUTRAS = 0;
    F2_RLVLISENTA = 0;
    F2_RLVLIMPOST = 0;
    F2_RLVLPERCEN = 0;
    F2_RLNRBASCAL = 0;
    F2_RLDSOBSERV = fix("", 4);
    F2_RLCDNATOGR = fix("", 6);
    F2_RLCDCONTAX = 0;
    F2_RLVLCONTAB = 0;
    F2_RLCDUFMUNI = fix("", 2);
    F2_RLDTDIADOC = 0;
    F2_RLNRNOTFIN = 0;
    F2_RLDSLETRAA = fix("", 1);
    F2_RLNRNOTAFI = 0;
    F2_RLNRSERIEX = fix("", 3);
    F2_RLCDESPECI = fix("", 3);
    F3_RLVLOUTIPI = 0;
    F3_RLVLISEIPI = 0;
    F3_RLVLIMPIPI = 0;
    F3_RLVLBASIPI = 0;
    F3_RLVLOUTICM = 0;
    F3_RLVLISEICM = 0;
    F3_RLVLIMPICM = 0;
    F3_RLVLBASICM = 0;
    F4_RLDSCANCEL = fix("", 30);
    F4_RLDTDIADOC = 0;
    F4_RLNRNOTFIN = 0;
    F4_RLDSLETRAA = fix("", 1);
    F4_RLNRNOTAFI = 0;
    F4_RLNRSERIEX = fix("", 3);
    F4_RLCDESPECI = fix("", 3);
    F6_RLNMCONTAD = fix("", 30);
    F6_RLNRCRCCON = fix("", 14);
    F6_RLNRCPFSRF = fix("", 14);
    F6_RLNMRESSRF = fix("", 30);
    F6_RLAATERMOX = fix("", 4);
    F6_RLDSMESEXT = fix("", 9);
    F6_RLDTDIAATU = 0;
    F6_RLDSCIDADE = fix("", 20);
    F6_RLDTREGIST = fix("", 10);
    F6_RLNRREGJUN = 0;
    F6_RLNRCGCDIG = 0;
    F6_RLNRCGCFIL = 0;
    F6_RLNRCGCNUM = 0;
    F6_RLNRIESEMP = fix("", 15);
    F6_RLCDUFLEMP = fix("", 2);
    F6_RLDSENDEMP = fix("", 67);
    F6_RLNMEMPRES = fix("", 80);
    F6_RLNRPAGFIM = 0;
    F6_RLDSPAGINA = fix("", 36);
    F6_RLNRPAGINA = 0;
    F6_RLNRLIVROX = 0;
    F6_RLDSABRENC = fix("", 23);
    F6_RLNRFOLHAS = 0;
    F6_RLDTFINALX = fix("", 10);
    F6_RLDTINICIO = fix("", 10);
    F6_RLDSCARSRF = fix("", 30);
    F9_RLVLICSTIN = 0;
    F9_RLVLBASTIN = 0;
    F9_RLVLICSTSC = 0;
    F9_RLVLBASTSC = 0;
    F10_EXINDECEND = 0;
    F10_EXNRCANCEL = 0;
    F10_EXVLOUTIPI = 0;
    F10_EXVLISEIPI = 0;
    F10_EXVLIMPIPI = 0;
    F10_EXVLPERIPI = 0;
    F10_EXVLBASIPI = 0;
    F10_EXVLICMSTR = 0;
    F10_EXVLBASSTR = 0;
    F10_EXNRNOTFIN = 0;
    F10_EXCDUFMUNI = fix("", 2);
    F10_EXDISAINOT = 0;
    F10_EXVLOUTICM = 0;
    F10_EXVLISEICM = 0;
    F10_EXVLIMPICM = 0;
    F10_EXVLPERICM = 0;
    F10_EXVLBASICM = 0;
    F10_EXCDNATCOM = 0;
    F10_EXCDNATOPE = 0;
    F10_EXNRCONTAX = 0;
    F10_EXVLCONTAX = 0;
    F10_EXDIEMINOT = 0;
    F10_EXNRNOTAFI = 0;
    F10_EXNRSERIEX = fix("", 3);
    F10_EXNRCFICMP = 0;
    F10_EXINCONFIN = 0;
    F10_EXPCICMNAT = 0;
    F10_EXINORIGEM = 0;
    F10_EXVLLIQUID = 0;
    F10_EXVLICMPRO = 0;
    F10_EXPCICMPRO = 0;
    F10_EXVLBASDID = 0;
    F10_EXVLICMDID = 0;
    F10_EXVLICMDIO = 0;
    F10_EXVLFCPDES = 0;
    F10_EXCDMODENF = 0;
    F10_EXTPREGIST = 0;
    F13_EXCDTIPDEP = 0;
    F13_EXDIEMIDEP = 0;
    F13_EXINCLIDEP = 0;
    F13_EXCDCLIDEP = 0;
    F13_EXNRNOTDEP = 0;
    F13_EXCDDEPNFI = 0;
    F13_EXVLTOICMN = 0;
    F13_EXNRUSUNFI = 0;
    F21_RLNRSOLICI = 0;
    F21_RLNMABREMP = fix("", 16);
    F21_RLDTSISTEM = 0;
    F21_RLTHHHMMED = fix("", 5);
    F21_RLNRPAGINA = 0;
    F21_RLDTFINALX = fix("", 10);
    F21_RLDTINICIO = fix("", 10);
    F22_RLCDDEBICM = 0;
    F22_RLCDCONCRE = 0;
    F22_RLCDNATOPE = 0;
    F22_RLVLCONTAB = 0;
    F22_RLVLBASICM = 0;
    F22_RLVLIMPICM = 0;
    F23_RLVLCONTAB = 0;
    F23_RLVLBASICM = 0;
    F23_RLVLIMPICM = 0;
    F23_LABEL2 = fix("", 1);
    F24_RLNRSOLICI = 0;
    F24_RLNMABREMP = fix("", 16);
    F24_RLDTSISTEM = 0;
    F24_RLTHHHMMED = fix("", 5);
    F24_RLNRPAGINA = 0;
    F24_RLDTFINALX = fix("", 10);
    F24_RLDTINICIO = fix("", 10);
    F25_RLVLCONTAB = 0;
    F25_RLVLBASICM = 0;
    F25_RLVLIMPICM = 0;
    F25_RLCDCLAFIS = fix("", 14);
    F26_RLVLCONTAB = 0;
    F26_RLVLBASICM = 0;
    F26_RLVLIMPICM = 0;
    F27_RLNRSOLICI = 0;
    F27_RLNMABREMP = fix("", 16);
    F27_RLDTSISTEM = 0;
    F27_RLTHHHMMED = fix("", 5);
    F27_RLNRPAGINA = 0;
    F27_RLDTFINALX = fix("", 10);
    F27_RLDTINICIO = fix("", 10);
    F28_RLNRNOTAFI = 0;
    F28_RLCDPRODUT = 0;
    F28_RLDSPRODUT = fix("", 30);
    F28_RLCDCLAFIS = 0;
    F28_RLVLBASICM = 0;
    F28_RLVLICMPRO = 0;
    F28_RLCDCORPRO = 0;
    F29_RLVLBASICM = 0;
    F29_RLVLICMPRO = 0;
    F36_LABEL1 = fix("", 1);
    F36_RLNRPAGINA = 0;
    F36_RLDTFINALX = fix("", 10);
    F36_RLDTINICIO = fix("", 10);
    F36_RLNRSOLICI = 0;
    F36_RLHMCABECA = fix("", 5);
    F36_RLDTCABECA = 0;
    F36_RLNMABREMP = fix("", 16);
    F37_RLVLICMSTR = 0;
    F37_RLVLBASSTR = 0;
    F37_RLCDNATOGR = fix("", 7);
    F37_RLCDUFMUNI = fix("", 2);
    F38_LABEL1 = fix("", 1);
    F38_RLVLICMSTR = 0;
    F38_RLVLBASSTR = 0;
    F38_RLCDUFMUNI = fix("", 2);
    F41_LABEL1 = fix("", 1);
    F41_RLNRPAGINA = 0;
    F41_RLDSCONDEF = fix("", 17);
    F41_RLDTFINALX = fix("", 10);
    F41_RLDTINICIO = fix("", 10);
    F41_RLNRSOLICI = 0;
    F41_RLHMCABECA = fix("", 5);
    F41_RLDTCABECA = 0;
    F41_RLNMABREMP = fix("", 16);
    F42_RLVLAPOICM = 0;
    F42_RLCDAPNICM = 0;
    F42_RLCDAPVICM = 0;
    F42_RLCDAPBICM = 0;
    F42_RLCDAPCONT = 0;
    F42_RLCDNATOGR = fix("", 7);
    F42_RLINORIGEM = fix("", 1);
    F43_LABEL1 = fix("", 1);
    F43_RLVLSAOICM = 0;
    F43_RLVLSANICM = 0;
    F43_RLVLSAVICM = 0;
    F43_RLVLSABICM = 0;
    F43_RLVLSACONT = 0;
    F44_RLVLTTOICM = 0;
    F44_RLVLTTNICM = 0;
    F44_RLVLTTVICM = 0;
    F44_RLVLTTBICM = 0;
    F44_RLVLTOTCON = 0;
    F46_LABEL1 = fix("", 1);
    F46_RLNRPAGINA = 0;
    F46_RLDSCONDEF = fix("", 17);
    F46_RLDTFINALX = fix("", 10);
    F46_RLDTINICIO = fix("", 10);
    F46_RLNRSOLICI = 0;
    F46_RLHMCABECA = fix("", 5);
    F46_RLDTCABECA = 0;
    F46_RLNMABREMP = fix("", 16);
    F47_RLVLOUTICM = 0;
    F47_RLVLINTICM = 0;
    F47_RLVLIMPICM = 0;
    F47_RLVLBASICM = 0;
    F47_RLVLCONTAB = 0;
    F47_RLCDNATOGR = fix("", 7);
    F47_RLCDUFMUNI = fix("", 2);
    F48_LABEL1 = fix("", 1);
    F48_RLVLOUTICM = 0;
    F48_RLVLINTICM = 0;
    F48_RLVLIMPICM = 0;
    F48_RLVLBASICM = 0;
    F48_RLVLCONTAB = 0;
    F48_RLCDUFMUNI = fix("", 2);
    F51_LABEL1 = fix("", 1);
    F51_RLNRPAGINA = 0;
    F51_RLDSCONDEF = fix("", 17);
    F51_RLDTFINALX = fix("", 10);
    F51_RLDTINICIO = fix("", 10);
    F51_RLNRSOLICI = 0;
    F51_RLHMCABECA = fix("", 5);
    F51_RLDTCABECA = 0;
    F51_RLNMABREMP = fix("", 16);
    F52_RLVLAPOIPI = 0;
    F52_RLVLAPMIPI = 0;
    F52_RLVLAPVIPI = 0;
    F52_RLVLAPBIPI = 0;
    F52_RLVLAPCIPI = 0;
    F52_RLCDNATOGR = fix("", 7);
    F53_LABEL1 = fix("", 1);
    F53_RLVLSAOIPI = 0;
    F53_RLVLSANIPI = 0;
    F53_RLVLSAVIPI = 0;
    F53_RLVLSABIPI = 0;
    F53_RLVLSACIPI = 0;
    F54_RLTOTAOIPI = 0;
    F54_RLTOTANIPI = 0;
    F54_RLTOTAVIPI = 0;
    F54_RLTOTABIPI = 0;
    F54_RLTOTACIPI = 0;
    F55_LABEL1 = fix("", 1);
    F55_RLNRPAGINA = 0;
    F55_RLDSDEPNFI = fix("", 20);
    F55_RLCDDEPNFI = 0;
    F55_RLNRSOLICI = 0;
    F55_RLHMCABECA = fix("", 5);
    F55_RLDTFINALX = fix("", 10);
    F55_RLDTINICIO = fix("", 10);
    F55_RLDTSOLICI = 0;
    F55_RLNMABREMP = fix("", 16);
    F56_LABEL2 = fix("", 3);
    F56_RLCDTIPDEP = 0;
    F56_RLDIEMIDEP = fix("", 10);
    F56_RLNMCLIENT = fix("", 60);
    F56_RLCDCLIDEP = 0;
    F56_RLNRNOTDEP = 0;
    F56_RLVLTOICMN = 0;
    F56_RLCDUSUARI = fix("", 25);
    F64_RLNRPAGINA = 0;
    F64_RLDSCONDEF = fix("", 17);
    F64_RLDTFINALX = fix("", 10);
    F64_RLDTINICIO = fix("", 10);
    F64_RLNRSOLICI = 0;
    F64_RLHMCABECA = fix("", 5);
    F64_RLDTCABECA = 0;
    F64_RLNMABREMP = fix("", 16);
    F64_LABEL25 = fix("", 1);
    F65_RLVLAPOICM = 0;
    F65_RLCDAPNICM = 0;
    F65_RLCDAPVICM = 0;
    F65_RLCDAPBICM = 0;
    F65_RLCDAPCONT = 0;
    F65_RLCDNATOGR = fix("", 7);
    F66_RLVLSAOICM = 0;
    F66_RLVLSANICM = 0;
    F66_RLVLSAVICM = 0;
    F66_RLVLSABICM = 0;
    F66_RLVLSACONT = 0;
    F66_LABEL1 = fix("", 1);
    F67_RLVLTTOICM = 0;
    F67_RLVLTTNICM = 0;
    F67_RLVLTTVICM = 0;
    F67_RLVLTTBICM = 0;
    F67_RLVLTOTCON = 0;
    F71_LABEL1 = fix("", 2);
    F71_RLNRPAGINA = 0;
    F71_RLNRSOLICI = 0;
    F71_RLHMCABECA = fix("", 5);
    F71_RLDTCABECA = 0;
    F71_RLNMABREMP = fix("", 16);
    F72_RLVLIPIRES = 0;
    F72_RLVLICMRES = 0;
    F72_RLDTEMIRES = 0;
    F73_RLVLIPIRES = 0;
    F73_RLVLICMRES = 0;
    F74_RLNRPAGINA = 0;
    F74_RLDSCONDEF = fix("", 17);
    F74_RLDTFINALX = fix("", 10);
    F74_RLDTINICIO = fix("", 10);
    F74_RLNRSOLICI = 0;
    F74_RLHMCABECA = fix("", 5);
    F74_RLDTCABECA = 0;
    F74_RLNMABREMP = fix("", 16);
    F75_RLVLAPOICM = 0;
    F75_RLCDAPNICM = 0;
    F75_RLCDAPVICM = 0;
    F75_RLCDAPBICM = 0;
    F75_RLCDNATOGR = fix("", 7);
    F75_RLPCICMNOT = 0;
    F76_RLVLAPOICM = 0;
    F76_RLCDAPNICM = 0;
    F76_RLCDAPVICM = 0;
    F76_RLCDAPBICM = 0;
    F76_LABEL2 = fix("", 1);
    F77_RLNRPAGINA = 0;
    F77_RLDSCONDEF = fix("", 17);
    F77_RLDTFINALX = fix("", 10);
    F77_RLDTINICIO = fix("", 10);
    F77_RLNRSOLICI = 0;
    F77_RLHMCABECA = fix("", 5);
    F77_RLDTCABECA = 0;
    F77_RLNMABREMP = fix("", 16);
    F78_RLVLAPOICM = 0;
    F78_RLCDAPNICM = 0;
    F78_RLCDAPVICM = 0;
    F78_RLCDAPBICM = 0;
    F78_RLCDNATOGR = fix("", 7);
    F78_RLPCICMNOT = 0;
    F78_RLCDAPVDIO = 0;
    F78_RLINPESSOA = fix("", 3);
    F79_RLVLAPOICM = 0;
    F79_RLCDAPNICM = 0;
    F79_RLCDAPVICM = 0;
    F79_RLCDAPBICM = 0;
    F79_LABEL2 = fix("", 1);
    F79_RLCDAPVDIO = 0;
    F80_RLVLAPOICM = 0;
    F80_RLCDAPNICM = 0;
    F80_RLCDAPVICM = 0;
    F80_RLCDAPBICM = 0;
    F80_RLCDAPVDIO = 0;
    F81_RLNRPAGINA = 0;
    F81_RLDSCONDEF = fix("", 17);
    F81_RLDTFINALX = fix("", 10);
    F81_RLDTINICIO = fix("", 10);
    F81_RLNRSOLICI = 0;
    F81_RLHMCABECA = fix("", 5);
    F81_RLDTCABECA = 0;
    F81_RLNMABREMP = fix("", 16);
    F81_RLDSTEX20A = fix("", 20);
    F81_RLDSNOTFOP = fix("", 4);
    F81_RLDSICMSXX = fix("", 5);
    F82_RLNRNOTCRE = 0;
    F82_RLVLCONCRE = 0;
    F82_RLPCICMCRE = 0;
    F82_RLVLBASCRE = 0;
    F82_RLVLIMPCRE = 0;
    F83_RLVLCONCRE = 0;
    F83_RLVLBASCRE = 0;
    F83_RLVLIMPCRE = 0;
    F84_RLVLCONCRE = 0;
    F84_RLVLBASCRE = 0;
    F84_RLVLIMPCRE = 0;
    F90_EXVLMOVIME = 0;
    F90_EXCDCLIFOR = 0;
    F90_EXINCLIFOR = 0;
    F91_EXVLMOVIME = 0;
    F91_EXCDCLAFIS = 0;
    F92_EXCDDEBICM = 0;
    F92_EXCDCONCRE = 0;
    F92_EXCDNATOPE = 0;
    F92_EXCDCLAFIS = 0;
    F92_EXCDUFMUNI = fix("", 2);
    F92_EXVLCONTAB = 0;
    F92_EXVLBASICM = 0;
    F92_EXVLIMPICM = 0;
    F93_EXCDNATDIA = 0;
    F93_EXVLCONDIA = 0;
    F93_EXVLBASDIA = 0;
    F93_EXVLIMPDIA = 0;
    F93_EXVLICMDIA = 0;
    F93_EXPCICMDIA = 0;
    F93_EXNRNOTDIA = 0;
    F93_EXCDPRODUT = 0;
    F93_EXINBRINDE = 0;
    F93_EXCDUFMUNI = fix("", 2);
    F93_EXINCLIENT = 0;
    F94_EXCDNATCRE = 0;
    F94_EXVLCONCRE = 0;
    F94_EXVLBASCRE = 0;
    F94_EXVLIMPCRE = 0;
    F94_EXPCICMCRE = 0;
    F94_EXNRNOTCRE = 0;
    F94_EXCDLINCRE = 0;
    F94_EXINTEXCRE = fix("", 1);
    F95_LABEL1 = fix("", 1);
    F95_RLNRPAGINA = 0;
    F95_RLNRSOLICI = 0;
    F95_RLHMCABECA = fix("", 5);
    F95_RLDTCABECA = 0;
    F95_RLNMABREMP = fix("", 16);
    F96_RLDSOCORRE = fix("", 45);
    F96_RLINOCORRE = fix("", 20);
    F96_RLCDOCORRE = fix("", 10);
    F101_LABEL1 = fix("", 1);
    F101_RLNRPAGINA = 0;
    F101_RLDTFINALX = fix("", 10);
    F101_RLDTINICIO = fix("", 10);
    F101_RLNRSOLICI = 0;
    F101_RLHMCABECA = fix("", 5);
    F101_RLDTCABECA = 0;
    F101_RLNMABREMP = fix("", 16);
    F102_RLVLICMDIO = 0;
    F102_RLVLBASDID = 0;
    F102_RLCDNATOGR = fix("", 7);
    F102_RLCDUFMUNI = fix("", 2);
    F102_RLVLICMDID = 0;
    F102_RLVLFCPDES = 0;
    F103_RLCDUFMUNI = fix("", 2);
    F103_RLVLICMDIO = 0;
    F103_RLVLBASDID = 0;
    F103_RLVLICMDID = 0;
    F103_RLVLFCPDES = 0;
    F103_LABEL1 = fix("", 1);
    F104_EXVLBASCRE = 0;
    F104_EXVLICMDID = 0;
    F104_EXNRNOTCRE = 0;
    F104_EXVLICMDIO = 0;
    F104_EXVLFCPDES = 0;
    F111_LABEL1 = fix("", 1);
    F111_RLNRPAGINA = 0;
    F111_RLDTFINALX = fix("", 10);
    F111_RLDTINICIO = fix("", 10);
    F111_RLNRSOLICI = 0;
    F111_RLHMCABECA = fix("", 5);
    F111_RLDTCABECA = 0;
    F111_RLNMABREMP = fix("", 16);
    F111_RLDSTEX20A = fix("", 20);
    F112_RLVLICMDIO = 0;
    F112_RLVLICMDID = 0;
    F112_RLVLFCPDES = 0;
    F112_RLNRNOTCRE = 0;
    F112_RLVLBASCRE = 0;
    F113_RLVLICMDIO = 0;
    F113_RLVLICMDID = 0;
    F113_RLVLFCPDES = 0;
    F113_RLVLBASCRE = 0;
    F121_RLNRPAGINA = 0;
    F121_RLDSCONDEF = fix("", 17);
    F121_RLDTFINALX = fix("", 10);
    F121_RLDTINICIO = fix("", 10);
    F121_RLNRSOLICI = 0;
    F121_RLHMCABECA = fix("", 5);
    F121_RLDTCABECA = 0;
    F121_RLNMABREMP = fix("", 16);
    F121_RLCDCLAFIS = 0;
    F121_RLCDCLAFI1 = 0;
    F121_RLDSTEXAUX = fix("", 65);
    F122_RLVLAPOICM = 0;
    F122_RLCDAPNICM = 0;
    F122_RLCDAPVICM = 0;
    F122_RLCDAPBICM = 0;
    F122_RLCDNATOGR = fix("", 7);
    F122_RLPCICMNOT = 0;
    F122_RLCDAPVDIO = 0;
    F122_RLINPESSOA = fix("", 3);
    F123_RLVLAPOICM = 0;
    F123_RLCDAPNICM = 0;
    F123_RLCDAPVICM = 0;
    F123_RLCDAPBICM = 0;
    F123_LABEL2 = fix("", 1);
    F123_RLCDAPVDIO = 0;
    F124_LABEL2 = fix("", 1);
    F124_RLVLAPOICM = 0;
    F124_RLCDAPNICM = 0;
    F124_RLCDAPVICM = 0;
    F124_RLCDAPBICM = 0;
    F124_RLCDAPVDIO = 0;
    F125_EXCDNATDIA = 0;
    F125_EXVLCONDIA = 0;
    F125_EXVLBASDIA = 0;
    F125_EXVLIMPDIA = 0;
    F125_EXVLICMDIA = 0;
    F125_EXPCICMDIA = 0;
    F125_EXCDUFMUNI = fix("", 2);
    F125_EXINCLIENT = 0;
    SDTHINEXEC = 0;
    AXAMREFERE = 0.0;
    AXCDFILIAL = 0.0;
    AXDIFINALX = 0.0;
    AXDIINICIO = 0.0;
    AXINATUALI = 0.0;
    AXINIMPPCL = " ";
    AXINBACDET = " ";
    AXINMESPER = 0.0;
    AXINSEPDEP = " ";
    AXTPRELATO = 0.0;
    GEDSFILLER = 0.0;
    GENRDECEND = 0.0;
    GEAMREFERE = 0.0;
    GECDNATNUM = 0.0;
    GECDPO1GR1 = " ";
    GECDPO2GR1 = ".";
    GECDPO3GR1 = " ";
    GECDPO4GR1 = " ";
    GECDPO5GR1 = " ";
    GECDPO1GR2 = " ";
    GECDPO2GR2 = ".";
    GECDPO3GR2 = " ";
    GECDPRIPOS = 0.0;
    GECDSEGPOS = 0.0;
    GECDULTPOS = 0.0;
    GENRCPFED1 = 0.0;
    GEDSLIMI01 = ".";
    GENRCPFED2 = 0.0;
    GEDSLIMI02 = ".";
    GENRCPFED3 = 0.0;
    GEDSHIFENX = "-";
    GENRCPFDIG = 0.0;
    GENRCPF001 = 0.0;
    GENRCPF002 = 0.0;
    GENRCPF003 = 0.0;
    GENRCPF004 = 0.0;
    GENRINFORM = 0.0;
    GECDZEROSX = 0.0;
    GECDMODICM = 0.0;
    GECDFILICM = 0.0;
    GENRNFICMP = 0.0;
    GEINDEBIPI = 0.0;
    GEDSESTADO = " ";
    GECDNATCOM = 0.0;
    GEQTPESOKG = 0.0;
    GEVLAUXIL1 = 0.0;
    GEVLAUXIL2 = 0.0;
    GEVLBASICM = 0.0;
    GEVLBASIPI = 0.0;
    GEVLCONTAB = 0.0;
    GEVLIMPICM = 0.0;
    GEVLIMPIPI = 0.0;
    GEVLINTEGR = 0.0;
    GEVLINTICM = 0.0;
    GEVLINTIPI = 0.0;
    GEVLOUTICM = 0.0;
    GEVLOUTIPI = 0.0;
    GEVLCONTNC = 0.0;
    GEVLBICMNC = 0.0;
    GEVLBASSTR = 0.0;
    GEVLICMSTR = 0.0;
    GEVLTRAB01 = 0.0;
    GEVLTRAB02 = 0.0;
    GEVLTRAB03 = 0.0;
    GEVLTRAB04 = 0.0;
    GEVLTRAB05 = 0.0;
    GEVLTRAB06 = 0.0;
    GEVLTRAB07 = 0.0;
    GEVLTRAB08 = 0.0;
    GEVLTRAB09 = 0.0;
    GEVLTRAB10 = 0.0;
    GEVLTRAB11 = 0.0;
    GEVLTRAB12 = 0.0;
    GEVLTRAB13 = 0.0;
    GEVLFILRED = 0.0;
    GECDTEXRED = 0.0;
    GEPCREDICM = 0.0;
    GEDSNOTAFI = "     N.F.";
    GEDSESPA01 = " ";
    GEDSEMISSA = "EMISSAO ";
    GEDSESPA04 = " ";
    GEDSCLIENT = "CLIENTE";
    GEDSESPA02 = " ";
    GEDSCLIEN1 = " ";
    GENRNOTDEP = " ";
    GEDSESPA06 = " ";
    GEDIEMIDEP = " ";
    GEDSESPA09 = " ";
    GECDCLIDEP = " ";
    GEDSESPA07 = " ";
    GENMCLIENT = " ";
    SDAMAPUICM = 0.0;
    SDAMAPUIPI = 0.0;
    SDAMAUXILI = 0.0;
    SDAMEMIANT = 0.0;
    SDAMEMIATU = 0.0;
    SDAMREFERE = 0.0;
    SDAMREGSAI = 0.0;
    SDCDAJAPUR = " ";
    SDCDCANCEL = 0.0;
    SDCDCLFIAU = 0.0;
    SDCDCLAFIS = 0.0;
    SDCDCLIFOR = 0.0;
    SDCDCONANT = 0.0;
    SDCDCONCRE = 0.0;
    SDCDCRFREX = 0.0;
    SDCDCRTXFR = 0.0;
    SDCDDEBICM = 0.0;
    SDCDDEPNFI = 0.0;
    SDCDFISAUX = 0.0;
    SDCDFISCAL = 0.0;
    SDCDGRUCHA = 0.0;
    SDCDMODANT = 0.0;
    SDCDNATANT = 0.0;
    SDCDNATAUX = 0.0;
    SDCDNATCO1 = 0.0;
    SDCDNATCOM = 0.0;
    SDCDNATCRE = 0.0;
    SDCDNATCZF = 0.0;
    SDCDNATOPE = 0.0;
    SDCDOCONAT = 0.0;
    SDCDTIPFBO = 0.0;
    SDCDCTCRTE = 0.0;
    SDCDCTDBTE = 0.0;
    SDCDHISTOR = 0.0;
    SDCDUFLEMP = " ";
    SDCDUFMUNI = " ";
    SDCDUSUARI = " ";
    SDDIDATIPI = 0.0;
    SDDIINITTD = 0.0;
    SDDIEMIANT = 0.0;
    SDDIEMINOT = 0.0;
    SDDIFIMDEC = 0.0;
    SDDIFINALX = 0.0;
    SDDIINICIO = 0.0;
    SDDIINIDEC = 0.0;
    SDDINOVRGS = 0.0;
    SDDINRSIPI = 0.0;
    SDDIREGJUN = 0.0;
    SDDIREGSAI = 0.0;
    SDDISAINOT = 0.0;
    SDDSENDAUX = " ";
    SDDSIMPOST = " ";
    SDDSTEXAUX = " ";
    SDINACHOUX = 0.0;
    SDINCLIANT = 0.0;
    SDINCLIENT = 0.0;
    SDINCONTAB = 0.0;
    SDINAPURAC = 0.0;
    SDINBANTES = 0.0;
    SDINCALIPI = 0.0;
    SDININCENT = 0.0;
    SDINCLIFOR = 0.0;
    SDINCONFIN = 0.0;
    SDINCONTRO = 0.0;
    SDINDECEN1 = 0.0;
    SDINDECEN2 = 0.0;
    SDINDECEN3 = 0.0;
    SDINDECEND = 0.0;
    SDINEMILIV = 0.0;
    SDINENCERR = 0.0;
    SDINENCIPI = 0.0;
    SDINEXTDIA = 0.0;
    SDINEXTRAI = 0.0;
    SDINFILORI = 0.0;
    SDINICMPRO = 0.0;
    SDINLIVANU = 0.0;
    SDINNAOUTI = 0.0;
    SDINOPTSIM = 0.0;
    SDINORIGEM = 0.0;
    SDINPRIICM = 0.0;
    SDINPRIVEZ = 0.0;
    SDINSTATUS = 0.0;
    SDINSVLCON = 0.0;
    SDINTEM119 = 0.0;
    SDINTEM130 = 0.0;
    SDINTEXCRE = " ";
    SDINTXFRET = 0.0;
    SDINUMAANT = 0.0;
    SDINUMANAT = 0.0;
    SDINZONANT = 0.0;
    SDINZONAFR = 0.0;
    SDNMCONTAD = " ";
    SDNMEMPRES = " ";
    SDNRCGCNUM = 0.0;
    SDNRCFICMP = 0.0;
    SDNRCONPAG = 0.0;
    SDNRCRCCON = " ";
    SDNRCONTAD = 0.0;
    SDNRDECEND = 0.0;
    SDNRLIMPRS = 0.0;
    SDNRLINHAS = 0.0;
    SDNRLIVRRS = 0.0;
    SDNRLOTECG = 0.0;
    SDNRNOTAFI = 0.0;
    SDNRNOTANT = 0.0;
    SDNRNOTCRE = 0.0;
    SDNRNOTFIN = 0.0;
    SDNRREGJUN = 0.0;
    SDNRSEQIMP = 0.0;
    SDNRSEQUEN = 0.0;
    SDNRSLEEPX = 0.0;
    SDNRULTPRS = 0.0;
    SDNRUSUNFI = 0.0;
    SDPCICMPRO = 0.0;
    SDPCICMNOT = 0.0;
    SDPCIPIANT = 0.0;
    SDPCIPINOT = 0.0;
    SDTPFATREP = 0.0;
    SDTPIMPOST = 0.0;
    SDTPNFMANI = 0.0;
    SDTPREGIST = 0.0;
    SDTPREGANT = 0.0;
    SDTPSERANT = " ";
    SDTPSERIEX = " ";
    SDVLCONTAB = 0.0;
    SDVLINTICM = 0.0;
    SDVLAPBIPI = 0.0;
    SDVLAPVIPI = 0.0;
    SDVLAPMIPI = 0.0;
    SDVLAPOIPI = 0.0;
    SDVLOUTICM = 0.0;
    SDVLAUXILI = 0.0;
    SDVLBASICM = 0.0;
    SDVLBASDID = 0.0;
    SDVLBASIPI = 0.0;
    SDVLBASSTR = 0.0;
    SDVLBCIINT = 0.0;
    SDVLBICMAP = 0.0;
    SDVLBRUNEG = 0.0;
    SDVLCONTAP = 0.0;
    SDVLDIFERE = 0.0;
    SDVLICMCAL = 0.0;
    SDVLICMNAT = 0.0;
    SDVLICMNOT = 0.0;
    SDVLICMDIO = 0.0;
    SDVLICMDID = 0.0;
    SDVLFCPDES = 0.0;
    SDVLICMSTR = 0.0;
    SDVLICMZFP = 0.0;
    SDVLIMPIAP = 0.0;
    SDVLIMPICM = 0.0;
    SDVLINTIAP = 0.0;
    SDVLIPIISE = 0.0;
    SDVLIPINOT = 0.0;
    SDVLIPIOUT = 0.0;
    SDVLISENTA = 0.0;
    SDVLLIQNEG = 0.0;
    SDVLLIQUID = 0.0;
    SDVLICMPRO = 0.0;
    SDVLMOVAUX = 0.0;
    SDVLMOVIME = 0.0;
    SDVLNEGATI = 0.0;
    SDVLOUTIAP = 0.0;
    SDVLOUTRAS = 0.0;
    SDVLVLRCON = 0.0;
    for (int index1 = 0; index1 < TBCDNATOPE.length; index1++)
    {
        TBCDNATOPE[index1] = 0;
    }
    ITCDNATOPE = 0;
    for (int index1 = 0; index1 < TBCDNATCOM.length; index1++)
    {
        TBCDNATCOM[index1] = 0;
    }
    for (int index1 = 0; index1 < TBCDOCONAT.length; index1++)
    {
        TBCDOCONAT[index1] = 0;
    }
    for (int index1 = 0; index1 < TBNRCONTAX.length; index1++)
    {
        TBNRCONTAX[index1] = 0;
    }
    for (int index1 = 0; index1 < TBPCICMNAT.length; index1++)
    {
        TBPCICMNAT[index1] = 0;
    }
    for (int index1 = 0; index1 < TBVLBASICM.length; index1++)
    {
        TBVLBASICM[index1] = 0;
    }
    for (int index1 = 0; index1 < TBVLBASSTR.length; index1++)
    {
        TBVLBASSTR[index1] = 0;
    }
    for (int index1 = 0; index1 < TBVLICMNAT.length; index1++)
    {
        TBVLICMNAT[index1] = 0;
    }
    for (int index1 = 0; index1 < TBVLICMSTR.length; index1++)
    {
        TBVLICMSTR[index1] = 0;
    }
    for (int index1 = 0; index1 < TBINTEXTIL.length; index1++)
    {
        TBINTEXTIL[index1] = 0;
    }
    ITCDLINTEX = 0;
    SDDSAUXEMA = " ";
    SDDSFONTEX = " ";
    SDDSSUBJEC = " ";
    SDDSIPSERV = " ";
    SDDSEMASER = " ";
    SDDSEMAUSU = " ";
    SDDSEMAILX = " ";
    SDDSCONTAT = " ";
    SDDSIMAGEM = " ";
    SDSMTPUSER = " ";
    SDSMTPPASS = " ";
    SDDSEMACOP = " ";
    SDNMEMAAUX = " ";
    CGP001GEVLGRUPO1 = 0;
    CGP001GEVLGRUPO2 = 0;
    CGP001GEVLGRUPO3 = 0;
    CGP001GEVLGRUPO4 = 0;
    CGP001GEVLGRUPO5 = 0;
    CGP001GEVLGRUPO6 = 0;
    CGP001GEVLGRUPO7 = 0;
    CGP001GEDSVLREDI = "";
    CGP001GEDSSINEDI = "";
    CGP001GEVLINDICE = bigZeros;
    CGP001SDDSVLINDI = "";
    CGP001SDINPRIMEI = 0;
    CGP001SDNRGRUPOX = 0;
    CGP001SDNRPOSDES = 0;
    CGP001SDNRPOSORI = 0;
    CGP001SDVLGRUPOX = 0;
    CGP003SDCDATVREP = " ";
    CGP003SDAMENCEXE = 0;
    CGP003SDAMLCTREC = 0;
    CGP003SDAMSALCON = 0;
    CGP003SDCDCLACON = "";
    CGP003SDCDCTACON = 0;
    CGP003SDDSPOSCTA = "";
    CGP003SDINMESENC = 0;
    CGP003SDNRCGCCON = 0;
    CGP003SDNRCGCORI = 0;
    CGP003SDNRNIVCTA = 0;
    CGP003SDQTPOSICA = 0;
    CGP003SDVLSALCON = bigZeros;
    CGP003SDVLSALCOR = bigZeros;
    CGP004SDCDCLACUS = 0;
    CGP004SDCDNIVSAV = 0;
    CGP004SDCDNVCCUS = 0;
    CGP004SDNRNIVCCU = 0;
    CGP004SDNRPOSICA = 0;
    CGP004SDVLPOSICA = 0;
    CGP004SDVLPROGMO = 0;
    CGP004SDVLPROUMG = 0;
    CGP004SDVLREALCR = 0;
    CGP004SDVLREALMG = 0;
    CGP004SDVLREALMO = 0;
    CGP010SDCDATIVID = "";
    CGP010SDINTEM107 = 0;
    CGP010SDNRUSUARI = 0;
    CGP010SDVLDIFLAN = bigZeros;
    CGP010SDVLLANCRE = bigZeros;
    CGP010SDVLLANDEB = bigZeros;
    CGP016SDAMLCTRAZ = 0;
    CGP016SDCDATVREP = " ";
    CGP016SDCDCTARAZ = 0;
    CGP016SDNRCGCRAZ = 0;
    CGP016SDTPLANRAZ = 0;
    CGP016SDVLSALRAZ = bigZeros;
    EXTENSOSDVLINTEIR = 0;
    GSP004SDCDITEDEP = "";
    GSP004SDIN125130 = 0;
    GSP004SDINITEDEP = 0;
    GSP004SDINITEMOK = 0;
    GSP008SDCDDOITEM = "";
    GSP008SDCDEMPRES = 0;
    GSP008SDCDITEORI = "";
    GSP008SDVLELEMEN = bigZeros;
    GSP017SDQTMESESX = 0;
    GSP017SDAAFINALX = 0;
    GSP017SDAAINICIO = 0;
    GSP035SDCDATIVID = "";
    GSP035SDDSCARGOX = "";
    GSP035SDINSEMARQ = 0;
    GSP035SDNMEMAILX = "";
    GSP035SDNMUSUARI = "";
    GSP035SDDSSAUASS = "";
    GSP035SDNMFUNASS = "";
    GSP035SDDSDEPASS = "";
    GSP035SDDSCONASA = "";
    GSP035SDDSCONASB = "";
    GSP035SDDSCONASC = "";
    GSP035SDNRFAXCOM = "";
    GRAMREFERE_GROUP_INIT ();
    GRCDNATALF_GROUP_INIT ();
    GRCDNATGR1_GROUP_INIT ();
    GRCDNATGR2_GROUP_INIT ();
    GRCDNATTRA_GROUP_INIT ();
    GRCDNATONU_GROUP_INIT ();
    GRNRCPFEDI_GROUP_INIT ();
    GRNRCPFSRF_GROUP_INIT ();
    GRNRINFORM_GROUP_INIT ();
    GRNRNFICMP_GROUP_INIT ();
    GRVLATUALI_GROUP_INIT ();
    GRVLREDICM_GROUP_INIT ();
    GRDSCABECA_GROUP_INIT ();
    GRDSLINHAX_GROUP_INIT ();
    CGP001GRDSMASCAR_GROUP_INIT ();
    CGP001GRVLEDITAD_GROUP_INIT ();
    CGP001GRVLINDICE_GROUP_INIT ();
}

private void OpenPrintFiles()
    throws Exception
{
    try
    {

        createUserTempDir();

        if (GLB.EXD_XSEEDTITLE.trim().equals("")== true)
        {   GLBEXD_XSEEDTITLE = newName("EXTRACT","EXD");
        }
        else
        {   GLBEXD_XSEEDTITLE =  GLB.EXD_XSEEDTITLE;
        }
        if (GLB.EXE_XSEEDTITLE.trim().equals("")== true)
        {   GLBEXE_XSEEDTITLE = newName("EXTRACT","EXE");
        }
        else
        {   GLBEXE_XSEEDTITLE =  GLB.EXE_XSEEDTITLE;
        }
        if (GLB.EXH_XSEEDTITLE.trim().equals("")== true)
        {   GLBEXH_XSEEDTITLE = newName("EXTRACT","EXH");
        }
        else
        {   GLBEXH_XSEEDTITLE =  GLB.EXH_XSEEDTITLE;
        }
        if (GLB.EXI_XSEEDTITLE.trim().equals("")== true)
        {   GLBEXI_XSEEDTITLE = newName("EXTRACT","EXI");
        }
        else
        {   GLBEXI_XSEEDTITLE =  GLB.EXI_XSEEDTITLE;
        }
        if (GLB.EXP_XSEEDTITLE.trim().equals("")== true)
        {   GLBEXP_XSEEDTITLE = newName("EXTRACT","EXP");
        }
        else
        {   GLBEXP_XSEEDTITLE =  GLB.EXP_XSEEDTITLE;
        }
        if (GLB.EXS_XSEEDTITLE.trim().equals("")== true)
        {   GLBEXS_XSEEDTITLE = newName("EXTRACT","EXS");
        }
        else
        {   GLBEXS_XSEEDTITLE =  GLB.EXS_XSEEDTITLE;
        }
        if (GLB.EXU_XSEEDTITLE.trim().equals("")== true)
        {   GLBEXU_XSEEDTITLE = newName("EXTRACT","EXU");
        }
        else
        {   GLBEXU_XSEEDTITLE =  GLB.EXU_XSEEDTITLE;
        }
        if (GLB.EXW_XSEEDTITLE.trim().equals("")== true)
        {   GLBEXW_XSEEDTITLE = newName("EXTRACT","EXW");
        }
        else
        {   GLBEXW_XSEEDTITLE =  GLB.EXW_XSEEDTITLE;
        }
        if (GLB.EXY_XSEEDTITLE.trim().equals("")== true)
        {   GLBEXY_XSEEDTITLE = newName("EXTRACT","EXY");
        }
        else
        {   GLBEXY_XSEEDTITLE =  GLB.EXY_XSEEDTITLE;
        }
        GLBEXD_XSEEDSTATUS = "";
        GLB.EXD_STATUS = "";
        GLBEXD_XSEEDEOF = false;
        GLBEXD_EXTEND = "";
        GLBEXD_EXTRACTAS = "";
        GLB.RECORDD = 0;
        if ( (GLB.RECOVER == 1.0) && (GLB.EXD_XSEEDWRITES != 0.0 ) )
        {
           GLBEXD_EXTEND ="Y";
           GLBEXD.command="RECOVER";
        }
        GLBEXE_XSEEDSTATUS = "";
        GLB.EXE_STATUS = "";
        GLBEXE_XSEEDEOF = false;
        GLBEXE_EXTEND = "";
        GLBEXE_EXTRACTAS = "";
        GLB.RECORDE = 0;
        if ( (GLB.RECOVER == 1.0) && (GLB.EXE_XSEEDWRITES != 0.0 ) )
        {
           GLBEXE_EXTEND ="Y";
           GLBEXE.command="RECOVER";
        }
        GLBEXH_XSEEDSTATUS = "";
        GLB.EXH_STATUS = "";
        GLBEXH_XSEEDEOF = false;
        GLBEXH_EXTEND = "";
        GLBEXH_EXTRACTAS = "";
        GLB.RECORDH = 0;
        if ( (GLB.RECOVER == 1.0) && (GLB.EXH_XSEEDWRITES != 0.0 ) )
        {
           GLBEXH_EXTEND ="Y";
           GLBEXH.command="RECOVER";
        }
        GLBEXI_XSEEDSTATUS = "";
        GLB.EXI_STATUS = "";
        GLBEXI_XSEEDEOF = false;
        GLBEXI_EXTEND = "";
        GLBEXI_EXTRACTAS = "";
        GLB.RECORDI = 0;
        if ( (GLB.RECOVER == 1.0) && (GLB.EXI_XSEEDWRITES != 0.0 ) )
        {
           GLBEXI_EXTEND ="Y";
           GLBEXI.command="RECOVER";
        }
        GLBEXP_XSEEDSTATUS = "";
        GLB.EXP_STATUS = "";
        GLBEXP_XSEEDEOF = false;
        GLBEXP_EXTEND = "";
        GLBEXP_EXTRACTAS = "";
        GLB.RECORDP = 0;
        if ( (GLB.RECOVER == 1.0) && (GLB.EXP_XSEEDWRITES != 0.0 ) )
        {
           GLBEXP_EXTEND ="Y";
           GLBEXP.command="RECOVER";
        }
        GLBEXS_XSEEDSTATUS = "";
        GLB.EXS_STATUS = "";
        GLBEXS_XSEEDEOF = false;
        GLBEXS_EXTEND = "";
        GLBEXS_EXTRACTAS = "";
        GLB.RECORDS = 0;
        if ( (GLB.RECOVER == 1.0) && (GLB.EXS_XSEEDWRITES != 0.0 ) )
        {
           GLBEXS_EXTEND ="Y";
           GLBEXS.command="RECOVER";
        }
        GLBEXU_XSEEDSTATUS = "";
        GLB.EXU_STATUS = "";
        GLBEXU_XSEEDEOF = false;
        GLBEXU_EXTEND = "";
        GLBEXU_EXTRACTAS = "";
        GLB.RECORDU = 0;
        if ( (GLB.RECOVER == 1.0) && (GLB.EXU_XSEEDWRITES != 0.0 ) )
        {
           GLBEXU_EXTEND ="Y";
           GLBEXU.command="RECOVER";
        }
        GLBEXW_XSEEDSTATUS = "";
        GLB.EXW_STATUS = "";
        GLBEXW_XSEEDEOF = false;
        GLBEXW_EXTEND = "";
        GLBEXW_EXTRACTAS = "";
        GLB.RECORDW = 0;
        if ( (GLB.RECOVER == 1.0) && (GLB.EXW_XSEEDWRITES != 0.0 ) )
        {
           GLBEXW_EXTEND ="Y";
           GLBEXW.command="RECOVER";
        }
        GLBEXY_XSEEDSTATUS = "";
        GLB.EXY_STATUS = "";
        GLBEXY_XSEEDEOF = false;
        GLBEXY_EXTEND = "";
        GLBEXY_EXTRACTAS = "";
        GLB.RECORDY = 0;
        if ( (GLB.RECOVER == 1.0) && (GLB.EXY_XSEEDWRITES != 0.0 ) )
        {
           GLBEXY_EXTEND ="Y";
           GLBEXY.command="RECOVER";
        }

        GLBSOD_XSEEDTITLE = GLB.TEMPPREFIX.trim() + "SOD" + GLB.LSN.trim();
        GLBSOE_XSEEDTITLE = GLB.TEMPPREFIX.trim() + "SOE" + GLB.LSN.trim();
        GLBSOH_XSEEDTITLE = GLB.TEMPPREFIX.trim() + "SOH" + GLB.LSN.trim();
        GLBSOP_XSEEDTITLE = GLB.TEMPPREFIX.trim() + "SOP" + GLB.LSN.trim();
        GLBSOS_XSEEDTITLE = GLB.TEMPPREFIX.trim() + "SOS" + GLB.LSN.trim();
        GLBSOU_XSEEDTITLE = GLB.TEMPPREFIX.trim() + "SOU" + GLB.LSN.trim();
        GLBSOW_XSEEDTITLE = GLB.TEMPPREFIX.trim() + "SOW" + GLB.LSN.trim();
        GLBSOY_XSEEDTITLE = GLB.TEMPPREFIX.trim() + "SOY" + GLB.LSN.trim();

    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "OpenPrintFiles");;
    }
}

private void ClosePrintFiles()
    throws Exception
{
    try
    {
        if (GLB.INITREPORT == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LP.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LP_XSEEDTITLE);
            }
            GLB.LP.close();
            AuditMSG("Close (" + GLB.LP_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINT_XSEEDWRITES));
        }
        if (GLB.INITREPORTB == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPB.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPB_XSEEDTITLE);
            }
            GLB.LPB.close();
            AuditMSG("Close B (" + GLB.LPB_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTB_XSEEDWRITES));
        }
        if (GLB.INITREPORTC == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPC.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPC_XSEEDTITLE);
            }
            GLB.LPC.close();
            AuditMSG("Close C (" + GLB.LPC_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTC_XSEEDWRITES));
        }
        if (GLB.INITREPORTD == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPD.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPD_XSEEDTITLE);
            }
            GLB.LPD.close();
            AuditMSG("Close D (" + GLB.LPD_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTD_XSEEDWRITES));
        }
        if (GLB.INITREPORTE == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPE.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPE_XSEEDTITLE);
            }
            GLB.LPE.close();
            AuditMSG("Close E (" + GLB.LPE_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTE_XSEEDWRITES));
        }
        if (GLB.INITREPORTF == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPF.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPF_XSEEDTITLE);
            }
            GLB.LPF.close();
            AuditMSG("Close F (" + GLB.LPF_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTF_XSEEDWRITES));
        }
        if (GLB.INITREPORTG == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPG.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPG_XSEEDTITLE);
            }
            GLB.LPG.close();
            AuditMSG("Close G (" + GLB.LPG_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTG_XSEEDWRITES));
        }
        if (GLB.INITREPORTH == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPH.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPH_XSEEDTITLE);
            }
            GLB.LPH.close();
            AuditMSG("Close H (" + GLB.LPH_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTH_XSEEDWRITES));
        }
        if (GLB.INITREPORTI == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPI.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPI_XSEEDTITLE);
            }
            GLB.LPI.close();
            AuditMSG("Close I (" + GLB.LPI_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTI_XSEEDWRITES));
        }
        if (GLB.INITREPORTJ == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPJ.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPJ_XSEEDTITLE);
            }
            GLB.LPJ.close();
            AuditMSG("Close J (" + GLB.LPJ_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTJ_XSEEDWRITES));
        }
        if (GLB.INITREPORTL == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPL.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPL_XSEEDTITLE);
            }
            GLB.LPL.close();
            AuditMSG("Close L (" + GLB.LPL_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTL_XSEEDWRITES));
        }
        if (GLB.INITREPORTM == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPM.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPM_XSEEDTITLE);
            }
            GLB.LPM.close();
            AuditMSG("Close M (" + GLB.LPM_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTM_XSEEDWRITES));
        }
        if (GLB.INITREPORTN == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPN.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPN_XSEEDTITLE);
            }
            GLB.LPN.close();
            AuditMSG("Close N (" + GLB.LPN_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTN_XSEEDWRITES));
        }
        if (GLB.INITREPORTO == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPO.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPO_XSEEDTITLE);
            }
            GLB.LPO.close();
            AuditMSG("Close O (" + GLB.LPO_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTO_XSEEDWRITES));
        }
        if (GLB.INITREPORTP == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPP.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPP_XSEEDTITLE);
            }
            GLB.LPP.close();
            AuditMSG("Close P (" + GLB.LPP_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTP_XSEEDWRITES));
        }
        if (GLB.INITREPORTQ == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPQ.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPQ_XSEEDTITLE);
            }
            GLB.LPQ.close();
            AuditMSG("Close Q (" + GLB.LPQ_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTQ_XSEEDWRITES));
        }
        if (GLB.INITREPORTR == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPR.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPR_XSEEDTITLE);
            }
            GLB.LPR.close();
            AuditMSG("Close R (" + GLB.LPR_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTR_XSEEDWRITES));
        }
        if (GLB.INITREPORTS == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPS.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPS_XSEEDTITLE);
            }
            GLB.LPS.close();
            AuditMSG("Close S (" + GLB.LPS_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTS_XSEEDWRITES));
        }
        if (GLB.INITREPORTZ == true)
        {
            if ( (GLB.ABORT==false) && (GLB.LPZ.checkError()) )
            {     GLB.TASK=52;
                  abort("Error on File : " + GLB.LPZ_XSEEDTITLE);
            }
            GLB.LPZ.close();
            AuditMSG("Close Z (" + GLB.LPZ_XSEEDTITLE + "), Writes: " + cStr(GLB.PRINTZ_XSEEDWRITES));
        }
        if ((rTrim(GLB.EXD_STATUS)).equals("") == false)
        {
            if (GLB.EXD_XSEEDCOUNT != 0)
            {   GLBEXD.write(GLB.EXD_XSEEDBUFFER.toString());
                GLB.EXD_XSEEDCOUNT = 0;
            }
            if ( (GLB.ABORT==false) &&  (GLBEXD.out!=null) && (GLBEXD.out.checkError()) )
            {     GLB.TASK=53;
                  abort("Error on File : " + GLBEXD_XSEEDTITLE);
            }
            GLBEXD.close();
            AuditMSG("Close D (" + GLBEXD_XSEEDTITLE + "), Reads: " + cStr(GLB.EXD_XSEEDREADS) + " Writes: " + cStr(GLB.EXD_XSEEDWRITES));
            GLB.EXD_XSEEDREADS = 0;
            GLB.EXD_XSEEDWRITES = 0;
        }
        if ((rTrim(GLB.EXE_STATUS)).equals("") == false)
        {
            if (GLB.EXE_XSEEDCOUNT != 0)
            {   GLBEXE.write(GLB.EXE_XSEEDBUFFER.toString());
                GLB.EXE_XSEEDCOUNT = 0;
            }
            if ( (GLB.ABORT==false) &&  (GLBEXE.out!=null) && (GLBEXE.out.checkError()) )
            {     GLB.TASK=53;
                  abort("Error on File : " + GLBEXE_XSEEDTITLE);
            }
            GLBEXE.close();
            AuditMSG("Close E (" + GLBEXE_XSEEDTITLE + "), Reads: " + cStr(GLB.EXE_XSEEDREADS) + " Writes: " + cStr(GLB.EXE_XSEEDWRITES));
            GLB.EXE_XSEEDREADS = 0;
            GLB.EXE_XSEEDWRITES = 0;
        }
        if ((rTrim(GLB.EXH_STATUS)).equals("") == false)
        {
            if (GLB.EXH_XSEEDCOUNT != 0)
            {   GLBEXH.write(GLB.EXH_XSEEDBUFFER.toString());
                GLB.EXH_XSEEDCOUNT = 0;
            }
            if ( (GLB.ABORT==false) &&  (GLBEXH.out!=null) && (GLBEXH.out.checkError()) )
            {     GLB.TASK=53;
                  abort("Error on File : " + GLBEXH_XSEEDTITLE);
            }
            GLBEXH.close();
            AuditMSG("Close H (" + GLBEXH_XSEEDTITLE + "), Reads: " + cStr(GLB.EXH_XSEEDREADS) + " Writes: " + cStr(GLB.EXH_XSEEDWRITES));
            GLB.EXH_XSEEDREADS = 0;
            GLB.EXH_XSEEDWRITES = 0;
        }
        if ((rTrim(GLB.EXI_STATUS)).equals("") == false)
        {
            if (GLB.EXI_XSEEDCOUNT != 0)
            {   GLBEXI.write(GLB.EXI_XSEEDBUFFER.toString());
                GLB.EXI_XSEEDCOUNT = 0;
            }
            if ( (GLB.ABORT==false) &&  (GLBEXI.out!=null) && (GLBEXI.out.checkError()) )
            {     GLB.TASK=53;
                  abort("Error on File : " + GLBEXI_XSEEDTITLE);
            }
            GLBEXI.close();
            AuditMSG("Close I (" + GLBEXI_XSEEDTITLE + "), Reads: " + cStr(GLB.EXI_XSEEDREADS) + " Writes: " + cStr(GLB.EXI_XSEEDWRITES));
            GLB.EXI_XSEEDREADS = 0;
            GLB.EXI_XSEEDWRITES = 0;
        }
        if ((rTrim(GLB.EXP_STATUS)).equals("") == false)
        {
            if (GLB.EXP_XSEEDCOUNT != 0)
            {   GLBEXP.write(GLB.EXP_XSEEDBUFFER.toString());
                GLB.EXP_XSEEDCOUNT = 0;
            }
            if ( (GLB.ABORT==false) &&  (GLBEXP.out!=null) && (GLBEXP.out.checkError()) )
            {     GLB.TASK=53;
                  abort("Error on File : " + GLBEXP_XSEEDTITLE);
            }
            GLBEXP.close();
            AuditMSG("Close P (" + GLBEXP_XSEEDTITLE + "), Reads: " + cStr(GLB.EXP_XSEEDREADS) + " Writes: " + cStr(GLB.EXP_XSEEDWRITES));
            GLB.EXP_XSEEDREADS = 0;
            GLB.EXP_XSEEDWRITES = 0;
        }
        if ((rTrim(GLB.EXS_STATUS)).equals("") == false)
        {
            if (GLB.EXS_XSEEDCOUNT != 0)
            {   GLBEXS.write(GLB.EXS_XSEEDBUFFER.toString());
                GLB.EXS_XSEEDCOUNT = 0;
            }
            if ( (GLB.ABORT==false) &&  (GLBEXS.out!=null) && (GLBEXS.out.checkError()) )
            {     GLB.TASK=53;
                  abort("Error on File : " + GLBEXS_XSEEDTITLE);
            }
            GLBEXS.close();
            AuditMSG("Close S (" + GLBEXS_XSEEDTITLE + "), Reads: " + cStr(GLB.EXS_XSEEDREADS) + " Writes: " + cStr(GLB.EXS_XSEEDWRITES));
            GLB.EXS_XSEEDREADS = 0;
            GLB.EXS_XSEEDWRITES = 0;
        }
        if ((rTrim(GLB.EXU_STATUS)).equals("") == false)
        {
            if (GLB.EXU_XSEEDCOUNT != 0)
            {   GLBEXU.write(GLB.EXU_XSEEDBUFFER.toString());
                GLB.EXU_XSEEDCOUNT = 0;
            }
            if ( (GLB.ABORT==false) &&  (GLBEXU.out!=null) && (GLBEXU.out.checkError()) )
            {     GLB.TASK=53;
                  abort("Error on File : " + GLBEXU_XSEEDTITLE);
            }
            GLBEXU.close();
            AuditMSG("Close U (" + GLBEXU_XSEEDTITLE + "), Reads: " + cStr(GLB.EXU_XSEEDREADS) + " Writes: " + cStr(GLB.EXU_XSEEDWRITES));
            GLB.EXU_XSEEDREADS = 0;
            GLB.EXU_XSEEDWRITES = 0;
        }
        if ((rTrim(GLB.EXW_STATUS)).equals("") == false)
        {
            if (GLB.EXW_XSEEDCOUNT != 0)
            {   GLBEXW.write(GLB.EXW_XSEEDBUFFER.toString());
                GLB.EXW_XSEEDCOUNT = 0;
            }
            if ( (GLB.ABORT==false) &&  (GLBEXW.out!=null) && (GLBEXW.out.checkError()) )
            {     GLB.TASK=53;
                  abort("Error on File : " + GLBEXW_XSEEDTITLE);
            }
            GLBEXW.close();
            AuditMSG("Close W (" + GLBEXW_XSEEDTITLE + "), Reads: " + cStr(GLB.EXW_XSEEDREADS) + " Writes: " + cStr(GLB.EXW_XSEEDWRITES));
            GLB.EXW_XSEEDREADS = 0;
            GLB.EXW_XSEEDWRITES = 0;
        }
        if ((rTrim(GLB.EXY_STATUS)).equals("") == false)
        {
            if (GLB.EXY_XSEEDCOUNT != 0)
            {   GLBEXY.write(GLB.EXY_XSEEDBUFFER.toString());
                GLB.EXY_XSEEDCOUNT = 0;
            }
            if ( (GLB.ABORT==false) &&  (GLBEXY.out!=null) && (GLBEXY.out.checkError()) )
            {     GLB.TASK=53;
                  abort("Error on File : " + GLBEXY_XSEEDTITLE);
            }
            GLBEXY.close();
            AuditMSG("Close Y (" + GLBEXY_XSEEDTITLE + "), Reads: " + cStr(GLB.EXY_XSEEDREADS) + " Writes: " + cStr(GLB.EXY_XSEEDWRITES));
            GLB.EXY_XSEEDREADS = 0;
            GLB.EXY_XSEEDWRITES = 0;
        }
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "ClosePrintFiles");;
    }
}

private void OpenFiles()
throws Exception
{   try
    {
       if (GLB.DSN.trim().equals("") == true)
       {
           GLB.DSN = "SINGE";
       }
       Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
       GLB.CONNECTION = DriverManager.getConnection("jdbc:sqlserver://" + GLB.SERVER + ":1433;SelectMethod=cursor;User=" + GLB.USERNAME + ";PassWord=" + GLB.PASSWORD + ";DataBaseName="  + GLB.DSN);
       GLB.CONNECTION.setAutoCommit(false);
       GS114_CON = GLB.CONNECTION;
       GS114_CON.setAutoCommit(false);
       GS114_InitFile();
       GS125_CON = GLB.CONNECTION;
       GS125_CON.setAutoCommit(false);
       GS125_InitFile();
       GS101_CON = GLB.CONNECTION;
       GS101_CON.setAutoCommit(false);
       GS101_InitFile();
       GS109_CON = GLB.CONNECTION;
       GS109_CON.setAutoCommit(false);
       GS109_InitFile();
       AV119_CON = GLB.CONNECTION;
       AV119_CON.setAutoCommit(false);
       AV119_InitFile();
       AV120_CON = GLB.CONNECTION;
       AV120_CON.setAutoCommit(false);
       AV120_InitFile();
       CG133_CON = GLB.CONNECTION;
       CG133_CON.setAutoCommit(false);
       CG133_InitFile();
       CG122_CON = GLB.CONNECTION;
       CG122_CON.setAutoCommit(false);
       CG122_InitFile();
       CG168_CON = GLB.CONNECTION;
       CG168_CON.setAutoCommit(false);
       CG168_InitFile();
       CG123_CON = GLB.CONNECTION;
       CG123_CON.setAutoCommit(false);
       CG123_InitFile();
       CG124_CON = GLB.CONNECTION;
       CG124_CON.setAutoCommit(false);
       CG124_InitFile();
       AV101_CON = GLB.CONNECTION;
       AV101_CON.setAutoCommit(false);
       AV101_InitFile();
       SU101_CON = GLB.CONNECTION;
       SU101_CON.setAutoCommit(false);
       SU101_InitFile();
       MK102_CON = GLB.CONNECTION;
       MK102_CON.setAutoCommit(false);
       MK102_InitFile();
       MK101_CON = GLB.CONNECTION;
       MK101_CON.setAutoCommit(false);
       MK101_InitFile();
       CG111_CON = GLB.CONNECTION;
       CG111_CON.setAutoCommit(false);
       CG111_InitFile();
       CG140_CON = GLB.CONNECTION;
       CG140_CON.setAutoCommit(false);
       CG140_InitFile();
       CG105_CON = GLB.CONNECTION;
       CG105_CON.setAutoCommit(false);
       CG105_InitFile();
       CG102_CON = GLB.CONNECTION;
       CG102_CON.setAutoCommit(false);
       CG102_InitFile();
       CG106_CON = GLB.CONNECTION;
       CG106_CON.setAutoCommit(false);
       CG106_InitFile();
       CG107_CON = GLB.CONNECTION;
       CG107_CON.setAutoCommit(false);
       CG107_InitFile();
       CG104_CON = GLB.CONNECTION;
       CG104_CON.setAutoCommit(false);
       CG104_InitFile();
       CG118_CON = GLB.CONNECTION;
       CG118_CON.setAutoCommit(false);
       CG118_InitFile();
       GS107_CON = GLB.CONNECTION;
       GS107_CON.setAutoCommit(false);
       GS107_InitFile();
       DS103_CON = GLB.CONNECTION;
       DS103_CON.setAutoCommit(false);
       DS103_InitFile();
       GS130_CON = GLB.CONNECTION;
       GS130_CON.setAutoCommit(false);
       GS130_InitFile();
       GS106_CON = GLB.CONNECTION;
       GS106_CON.setAutoCommit(false);
       GS106_InitFile();
       GS103_CON = GLB.CONNECTION;
       GS103_CON.setAutoCommit(false);
       GS103_InitFile();
       CG110_CON = GLB.CONNECTION;
       CG110_CON.setAutoCommit(false);
       CG110_InitFile();
       PR101_CON = GLB.CONNECTION;
       PR101_CON.setAutoCommit(false);
       PR101_InitFile();
       SU103_CON = GLB.CONNECTION;
       SU103_CON.setAutoCommit(false);
       SU103_InitFile();
       AV112_CON = GLB.CONNECTION;
       AV112_CON.setAutoCommit(false);
       AV112_InitFile();
       TP101_CON = GLB.CONNECTION;
       TP101_CON.setAutoCommit(false);
       TP101_InitFile();
       CE121_CON = GLB.CONNECTION;
       CE121_CON.setAutoCommit(false);
       CE121_InitFile();
       CE118_CON = GLB.CONNECTION;
       CE118_CON.setAutoCommit(false);
       CE118_InitFile();
       AV281_CON = GLB.CONNECTION;
       AV281_CON.setAutoCommit(false);
       AV281_InitFile();
       QCG13301_CON = GLB.CONNECTION;
       QCG13301_CON.setAutoCommit(false);
       QAV12006_CON = GLB.CONNECTION;
       QAV12006_CON.setAutoCommit(false);
    }
    catch(SQLException e)
    {   ShowDataMsg(e, "OpenFiles","");
    }
    catch(ClassNotFoundException e)
    {   ShowErrorMsg (e,"OpenFiles");
    }
}

private void CloseFiles()
   throws Exception
{
   try
   {
        if (GS114_TAB!=null)
        {
            GS114_TAB.close();
            GS114_TAB = null;
        }
        if (GS114_CMD!=null)
        {
            GS114_CMD.close();
            GS114_CMD = null;
        }
        if (GS125_TAB!=null)
        {
            GS125_TAB.close();
            GS125_TAB = null;
        }
        if (GS125_CMD!=null)
        {
            GS125_CMD.close();
            GS125_CMD = null;
        }
        if (GS101_TAB!=null)
        {
            GS101_TAB.close();
            GS101_TAB = null;
        }
        if (GS101_CMD!=null)
        {
            GS101_CMD.close();
            GS101_CMD = null;
        }
        if (GS109_TAB!=null)
        {
            GS109_TAB.close();
            GS109_TAB = null;
        }
        if (GS109_CMD!=null)
        {
            GS109_CMD.close();
            GS109_CMD = null;
        }
        if (AV119_TAB!=null)
        {
            AV119_TAB.close();
            AV119_TAB = null;
        }
        if (AV119_CMD!=null)
        {
            AV119_CMD.close();
            AV119_CMD = null;
        }
        if (AV120_TAB!=null)
        {
            AV120_TAB.close();
            AV120_TAB = null;
        }
        if (AV120_CMD!=null)
        {
            AV120_CMD.close();
            AV120_CMD = null;
        }
        if (CG133_TAB!=null)
        {
            CG133_TAB.close();
            CG133_TAB = null;
        }
        if (CG133_CMD!=null)
        {
            CG133_CMD.close();
            CG133_CMD = null;
        }
        if (CG122_TAB!=null)
        {
            CG122_TAB.close();
            CG122_TAB = null;
        }
        if (CG122_CMD!=null)
        {
            CG122_CMD.close();
            CG122_CMD = null;
        }
        if (CG168_TAB!=null)
        {
            CG168_TAB.close();
            CG168_TAB = null;
        }
        if (CG168_CMD!=null)
        {
            CG168_CMD.close();
            CG168_CMD = null;
        }
        if (CG123_TAB!=null)
        {
            CG123_TAB.close();
            CG123_TAB = null;
        }
        if (CG123_CMD!=null)
        {
            CG123_CMD.close();
            CG123_CMD = null;
        }
        if (CG124_TAB!=null)
        {
            CG124_TAB.close();
            CG124_TAB = null;
        }
        if (CG124_CMD!=null)
        {
            CG124_CMD.close();
            CG124_CMD = null;
        }
        if (AV101_TAB!=null)
        {
            AV101_TAB.close();
            AV101_TAB = null;
        }
        if (AV101_CMD!=null)
        {
            AV101_CMD.close();
            AV101_CMD = null;
        }
        if (SU101_TAB!=null)
        {
            SU101_TAB.close();
            SU101_TAB = null;
        }
        if (SU101_CMD!=null)
        {
            SU101_CMD.close();
            SU101_CMD = null;
        }
        if (MK102_TAB!=null)
        {
            MK102_TAB.close();
            MK102_TAB = null;
        }
        if (MK102_CMD!=null)
        {
            MK102_CMD.close();
            MK102_CMD = null;
        }
        if (MK101_TAB!=null)
        {
            MK101_TAB.close();
            MK101_TAB = null;
        }
        if (MK101_CMD!=null)
        {
            MK101_CMD.close();
            MK101_CMD = null;
        }
        if (CG111_TAB!=null)
        {
            CG111_TAB.close();
            CG111_TAB = null;
        }
        if (CG111_CMD!=null)
        {
            CG111_CMD.close();
            CG111_CMD = null;
        }
        if (CG140_TAB!=null)
        {
            CG140_TAB.close();
            CG140_TAB = null;
        }
        if (CG140_CMD!=null)
        {
            CG140_CMD.close();
            CG140_CMD = null;
        }
        if (CG105_TAB!=null)
        {
            CG105_TAB.close();
            CG105_TAB = null;
        }
        if (CG105_CMD!=null)
        {
            CG105_CMD.close();
            CG105_CMD = null;
        }
        if (CG102_TAB!=null)
        {
            CG102_TAB.close();
            CG102_TAB = null;
        }
        if (CG102_CMD!=null)
        {
            CG102_CMD.close();
            CG102_CMD = null;
        }
        if (CG106_TAB!=null)
        {
            CG106_TAB.close();
            CG106_TAB = null;
        }
        if (CG106_CMD!=null)
        {
            CG106_CMD.close();
            CG106_CMD = null;
        }
        if (CG107_TAB!=null)
        {
            CG107_TAB.close();
            CG107_TAB = null;
        }
        if (CG107_CMD!=null)
        {
            CG107_CMD.close();
            CG107_CMD = null;
        }
        if (CG104_TAB!=null)
        {
            CG104_TAB.close();
            CG104_TAB = null;
        }
        if (CG104_CMD!=null)
        {
            CG104_CMD.close();
            CG104_CMD = null;
        }
        if (CG118_TAB!=null)
        {
            CG118_TAB.close();
            CG118_TAB = null;
        }
        if (CG118_CMD!=null)
        {
            CG118_CMD.close();
            CG118_CMD = null;
        }
        if (GS107_TAB!=null)
        {
            GS107_TAB.close();
            GS107_TAB = null;
        }
        if (GS107_CMD!=null)
        {
            GS107_CMD.close();
            GS107_CMD = null;
        }
        if (DS103_TAB!=null)
        {
            DS103_TAB.close();
            DS103_TAB = null;
        }
        if (DS103_CMD!=null)
        {
            DS103_CMD.close();
            DS103_CMD = null;
        }
        if (GS130_TAB!=null)
        {
            GS130_TAB.close();
            GS130_TAB = null;
        }
        if (GS130_CMD!=null)
        {
            GS130_CMD.close();
            GS130_CMD = null;
        }
        if (GS106_TAB!=null)
        {
            GS106_TAB.close();
            GS106_TAB = null;
        }
        if (GS106_CMD!=null)
        {
            GS106_CMD.close();
            GS106_CMD = null;
        }
        if (GS103_TAB!=null)
        {
            GS103_TAB.close();
            GS103_TAB = null;
        }
        if (GS103_CMD!=null)
        {
            GS103_CMD.close();
            GS103_CMD = null;
        }
        if (CG110_TAB!=null)
        {
            CG110_TAB.close();
            CG110_TAB = null;
        }
        if (CG110_CMD!=null)
        {
            CG110_CMD.close();
            CG110_CMD = null;
        }
        if (PR101_TAB!=null)
        {
            PR101_TAB.close();
            PR101_TAB = null;
        }
        if (PR101_CMD!=null)
        {
            PR101_CMD.close();
            PR101_CMD = null;
        }
        if (SU103_TAB!=null)
        {
            SU103_TAB.close();
            SU103_TAB = null;
        }
        if (SU103_CMD!=null)
        {
            SU103_CMD.close();
            SU103_CMD = null;
        }
        if (AV112_TAB!=null)
        {
            AV112_TAB.close();
            AV112_TAB = null;
        }
        if (AV112_CMD!=null)
        {
            AV112_CMD.close();
            AV112_CMD = null;
        }
        if (TP101_TAB!=null)
        {
            TP101_TAB.close();
            TP101_TAB = null;
        }
        if (TP101_CMD!=null)
        {
            TP101_CMD.close();
            TP101_CMD = null;
        }
        if (CE121_TAB!=null)
        {
            CE121_TAB.close();
            CE121_TAB = null;
        }
        if (CE121_CMD!=null)
        {
            CE121_CMD.close();
            CE121_CMD = null;
        }
        if (CE118_TAB!=null)
        {
            CE118_TAB.close();
            CE118_TAB = null;
        }
        if (CE118_CMD!=null)
        {
            CE118_CMD.close();
            CE118_CMD = null;
        }
        if (AV281_TAB!=null)
        {
            AV281_TAB.close();
            AV281_TAB = null;
        }
        if (AV281_CMD!=null)
        {
            AV281_CMD.close();
            AV281_CMD = null;
        }
        if (GS114_Lk.TAB!=null)
        {
            GS114_Lk.TAB.close();
            GS114_Lk.TAB = null;
        }
        if (GS114_Lk.CMD!=null)
        {
            GS114_Lk.CMD.close();
            GS114_Lk.CMD = null;
        }
        if (CG124_Lk.TAB!=null)
        {
            CG124_Lk.TAB.close();
            CG124_Lk.TAB = null;
        }
        if (CG124_Lk.CMD!=null)
        {
            CG124_Lk.CMD.close();
            CG124_Lk.CMD = null;
        }
        if (CG111_Lk.TAB!=null)
        {
            CG111_Lk.TAB.close();
            CG111_Lk.TAB = null;
        }
        if (CG111_Lk.CMD!=null)
        {
            CG111_Lk.CMD.close();
            CG111_Lk.CMD = null;
        }
        if (CG122_Lk.TAB!=null)
        {
            CG122_Lk.TAB.close();
            CG122_Lk.TAB = null;
        }
        if (CG122_Lk.CMD!=null)
        {
            CG122_Lk.CMD.close();
            CG122_Lk.CMD = null;
        }
        if (CG123_Lk.TAB!=null)
        {
            CG123_Lk.TAB.close();
            CG123_Lk.TAB = null;
        }
        if (CG123_Lk.CMD!=null)
        {
            CG123_Lk.CMD.close();
            CG123_Lk.CMD = null;
        }
        if (GS125_Lk.TAB!=null)
        {
            GS125_Lk.TAB.close();
            GS125_Lk.TAB = null;
        }
        if (GS125_Lk.CMD!=null)
        {
            GS125_Lk.CMD.close();
            GS125_Lk.CMD = null;
        }
        if (CG105_Lk.TAB!=null)
        {
            CG105_Lk.TAB.close();
            CG105_Lk.TAB = null;
        }
        if (CG105_Lk.CMD!=null)
        {
            CG105_Lk.CMD.close();
            CG105_Lk.CMD = null;
        }
        if (CG106_Lk.TAB!=null)
        {
            CG106_Lk.TAB.close();
            CG106_Lk.TAB = null;
        }
        if (CG106_Lk.CMD!=null)
        {
            CG106_Lk.CMD.close();
            CG106_Lk.CMD = null;
        }
        if (CG107_Lk.TAB!=null)
        {
            CG107_Lk.TAB.close();
            CG107_Lk.TAB = null;
        }
        if (CG107_Lk.CMD!=null)
        {
            CG107_Lk.CMD.close();
            CG107_Lk.CMD = null;
        }
        if (CG140_Lk.TAB!=null)
        {
            CG140_Lk.TAB.close();
            CG140_Lk.TAB = null;
        }
        if (CG140_Lk.CMD!=null)
        {
            CG140_Lk.CMD.close();
            CG140_Lk.CMD = null;
        }
        if (GS130_Lk.TAB!=null)
        {
            GS130_Lk.TAB.close();
            GS130_Lk.TAB = null;
        }
        if (GS130_Lk.CMD!=null)
        {
            GS130_Lk.CMD.close();
            GS130_Lk.CMD = null;
        }
        if (QCG13301_TAB!=null)
        {
            QCG13301_TAB.close();
            QCG13301_TAB = null;
        }
        if (QCG13301_CMD!=null)
        {
            QCG13301_CMD.close();
            QCG13301_CMD = null;
        }
        if (QAV12006_TAB!=null)
        {
            QAV12006_TAB.close();
            QAV12006_TAB = null;
        }
        if (QAV12006_CMD!=null)
        {
            QAV12006_CMD.close();
            QAV12006_CMD = null;
        }
        if (XSEED_SQL!=null)
        {
            XSEED_SQL.close();
            XSEED_SQL = null;
        }
        if (XSEED_CMD!=null)
        {
            XSEED_CMD.close();
            XSEED_CMD = null;
        }
        if (GLB.CALLABLECMD != null)
        {
           GLB.CALLABLECMD.close();
           GLB.CALLABLECMD=null;
        }
        GLB.CONNECTION.close();
    }
    catch(SQLException e)
    {
        ShowDataMsg(e,"CloseFiles","");
    }
}

private String GS114_Lock()
   throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "select /*+ CGR032 */ " + ODBC_GS114_FIELDS + " from GS114 ";
        sqlCommand = sqlCommand + " WITH (UPDLOCK INDEX=FGS114ROWID) where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(GS114_ROWID);
        if (GS114_Lk.CMD == null)
        {   GS114_Lk.CMD = GLB.CONNECTION.createStatement();
        }
        if (GS114_Lk.TAB != null)
        {   GS114_Lk.TAB.close();
        }
        GS114_Lk.TAB = GS114_Lk.CMD.executeQuery(sqlCommand);
        if (GS114_Lk.TAB.next() == true)
        {   xsdStatus = "";
            GS114_TableToFile(GS114_Lk);
        }
        else
        {   GS114_Lk.EOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS114_Lock",sqlCommand);
        return(xsdStatus);
    }
}
private void GS114_TableToFile (XseedJDBC pXseedJDBC )
  throws Exception
{   try
    {
        if (pXseedJDBC.EOF == true)
        {    return;
        }
       GS114_INSOLICI = pXseedJDBC.TAB.getDouble("INSOLICI");
       GS114_DIINEXEC = pXseedJDBC.TAB.getDouble("DIINEXEC");
       GS114_THINEXEC = pXseedJDBC.TAB.getDouble("THINEXEC");
       GS114_NRSOLICI = pXseedJDBC.TAB.getDouble("NRSOLICI");
       GS114_NRUSUARI = pXseedJDBC.TAB.getDouble("NRUSUARI");
       GS114_CDEMPRES = pXseedJDBC.TAB.getDouble("CDEMPRES");
       GS114_CDATVREP = pXseedJDBC.TAB.getString("CDATVREP");
       GS114_DIFIEXEC = pXseedJDBC.TAB.getDouble("DIFIEXEC");
       GS114_THFIEXEC = pXseedJDBC.TAB.getDouble("THFIEXEC");
       GS114_ROWID = pXseedJDBC.TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "GS114_TableToFile","");
    }
}
private String GS11401_DetermineEvery(double NRSOLICI)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        GS114_XSEEDEOF = false;
        GS114_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_GS114_FIELDS + " FROM GS114 with (NOLOCK INDEX=GS11401) WHERE (";
        sqlCommand = sqlCommand + " NRSOLICI = " + cStr(NRSOLICI);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " NRSOLICI  ";
        if (GS114_CMD == null)
        {   GS114_CMD = GS114_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (GS114_TAB != null)
        {   GS114_TAB.close();
        }
        GS114_TAB = GS114_CMD.executeQuery(sqlCommand);
        if (GS114_TAB.next())
        {   xsdStatus = "";
            GS114_TableToFile();
        }
        else
        {   GS114_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS114_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void GS11401_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (GS114_XSEEDEOF == true)
        {   return;
        }
        if (GS114_XSEEDSEEK == false)
        {    if (GS114_TAB.next())
             {    GS114_TableToFile ();
             }
             else
             {    GS114_XSEEDEOF = true;
             }
        }
        {    GS114_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS114_DetermineMoveNext", "");
    }
}
private void GS114_InitFile()
{
    GS114_CDATVREP = "";
    GS114_CDEMPRES = 0;
    GS114_CDFILVEN = 0;
    GS114_DIATUALX = 0;
    GS114_DIFIEXEC = 0;
    GS114_DIINEXEC = 0;
    GS114_DIPARAEX = 0;
    GS114_DISOLICI = 0;
    GS114_INIMPRES = "";
    GS114_INSITREG = "";
    GS114_INSOLICI = 0;
    GS114_NMSTATIO = "";
    GS114_NRDAFILA = 0;
    GS114_NRDEVIAS = 0;
    GS114_NRMIXREP = 0;
    GS114_NRREADSS = 0;
    GS114_NRSOLICI = 0;
    GS114_NRUSUARI = 0;
    GS114_NRWRITES = 0;
    GS114_QTLINHAS = 0;
    GS114_QTPAGINA = 0;
    GS114_THCONSUM = 0;
    GS114_THFIEXEC = 0;
    GS114_THINEXEC = 0;
    GS114_THPARAEX = 0;
    GS114_THPROCES = 0;
    GS114_THSOLICI = 0;
}
private void GS114_TableToFile ()
  throws Exception
{   try
    {
        if (GS114_XSEEDEOF == true)
        {    return;
        }
       GS114_INSOLICI = GS114_TAB.getDouble("INSOLICI");
       GS114_DIINEXEC = GS114_TAB.getDouble("DIINEXEC");
       GS114_THINEXEC = GS114_TAB.getDouble("THINEXEC");
       GS114_NRSOLICI = GS114_TAB.getDouble("NRSOLICI");
       GS114_NRUSUARI = GS114_TAB.getDouble("NRUSUARI");
       GS114_CDEMPRES = GS114_TAB.getDouble("CDEMPRES");
       GS114_CDATVREP = GS114_TAB.getString("CDATVREP");
       GS114_DIFIEXEC = GS114_TAB.getDouble("DIFIEXEC");
       GS114_THFIEXEC = GS114_TAB.getDouble("THFIEXEC");
       GS114_ROWID = GS114_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "GS114_TableToFile","");
    }
}
private void GS114_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ GS114 set ";
        sqlCommand = sqlCommand + "INSOLICI = " + cStr(GS114_INSOLICI);
        sqlCommand = sqlCommand + ",DIINEXEC = " + cStr(GS114_DIINEXEC);
        sqlCommand = sqlCommand + ",THINEXEC = " + cStr(GS114_THINEXEC);
        sqlCommand = sqlCommand + ",NRSOLICI = " + cStr(GS114_NRSOLICI);
        sqlCommand = sqlCommand + ",NRUSUARI = " + cStr(GS114_NRUSUARI);
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(GS114_CDEMPRES);
        if (GS114_CDATVREP.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",CDATVREP = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",CDATVREP = '" + ReplaceQuotes(rTrim(GS114_CDATVREP)) + "'";
        }
        sqlCommand = sqlCommand + ",DIFIEXEC = " + cStr(GS114_DIFIEXEC);
        sqlCommand = sqlCommand + ",THFIEXEC = " + cStr(GS114_THFIEXEC);
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(GS114_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"GS114_Modify");
         }
     }
}
private String GS12502_DetermineGroupFrom(int DtgFix, boolean FlagUntil, String CDDOITEM ,double CDEMPRES ,String CDELEMTO, String CDDOITEMUntil,double CDEMPRESUntil,String CDELEMTOUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        GS125_XSEEDEOF = false;
        GS125_XSEEDSEEK = true;
        CDDOITEM = rTrim(CDDOITEM);
        if (CDDOITEM.equals("") == true)
        {   CDDOITEM = " ";
        }
        CDELEMTO = rTrim(CDELEMTO);
        if (CDELEMTO.equals("") == true)
        {   CDELEMTO = " ";
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_GS125_FIELDS + " FROM GS125 with (NOLOCK INDEX=GS12502) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDDOITEM = '" + CDDOITEM + "'" +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDDOITEM = '" + CDDOITEM + "'" + " And " +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + GS12502_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDDOITEM,CDEMPRES,CDELEMTO, CDDOITEMUntil,CDEMPRESUntil,CDELEMTOUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + GS12502_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDDOITEM,CDEMPRES,CDELEMTO, CDDOITEMUntil,CDEMPRESUntil,CDELEMTOUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + GS12502_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDDOITEM,CDEMPRES,CDELEMTO, CDDOITEMUntil,CDEMPRESUntil,CDELEMTOUntil);
          break;
        }
        sqlCommand = sqlCommand + ") And (" + "INSITREG <> 'D'";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDDOITEM  ";
        sqlCommand = sqlCommand + " ,CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDELEMTO  ";
        if (GS125_CMD == null)
        {   GS125_CMD = GS125_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (GS125_TAB != null)
        {   GS125_TAB.close();
        }
        GS125_TAB = GS125_CMD.executeQuery(sqlCommand);
        if (GS125_TAB.next())
        {   xsdStatus = "";
            GS125_TableToFile();
        }
        else
        {   GS125_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS125_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String GS12502_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, String CDDOITEM ,double CDEMPRES ,String CDELEMTO, String CDDOITEMUntil,double CDEMPRESUntil,String CDELEMTOUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDDOITEM =  '" + ReplaceQuotes(CDDOITEM) + "' " + " And " +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDELEMTO >=  '" + ReplaceQuotes(CDELEMTO) + "' " +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDDOITEM =  '" + ReplaceQuotes(CDDOITEM) + "' " + " And " +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDDOITEM >  '" + ReplaceQuotes(CDDOITEM) + "' " +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
      " CDDOITEM =  '" + ReplaceQuotes(CDDOITEMUntil) + "' " + " And " +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
      " CDELEMTO <=  '" + ReplaceQuotes(CDELEMTOUntil) + "' " +
      ")";
      sqlCommand = sqlCommand + " Or (" +
      " CDDOITEM =  '" + ReplaceQuotes(CDDOITEMUntil) + "' " + " And " +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
      " CDDOITEM <  '" + ReplaceQuotes(CDDOITEMUntil) + "' " +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String GS12502_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, String CDDOITEM ,double CDEMPRES ,String CDELEMTO, String CDDOITEMUntil,double CDEMPRESUntil,String CDELEMTOUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDELEMTO >=  '" + ReplaceQuotes(CDELEMTO) + "' " +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
      " CDELEMTO <=  '" + ReplaceQuotes(CDELEMTOUntil) + "' " +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String GS12502_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, String CDDOITEM ,double CDEMPRES ,String CDELEMTO, String CDDOITEMUntil,double CDEMPRESUntil,String CDELEMTOUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDELEMTO >=  '" + ReplaceQuotes(CDELEMTO) + "' " +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
      " CDELEMTO <=  '" + ReplaceQuotes(CDELEMTOUntil) + "' " +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void GS12502_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (GS125_XSEEDEOF == true)
        {   return;
        }
        if (GS125_XSEEDSEEK == false)
        {    if (GS125_TAB.next())
             {    GS125_TableToFile ();
             }
             else
             {    GS125_XSEEDEOF = true;
             }
        }
        {    GS125_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS125_DetermineMoveNext", "");
    }
}
private void GS125_InitFile()
{
    GS125_CDDOITEM = "";
    GS125_CDELEMTO = "";
    GS125_CDEMPRES = 0;
    GS125_DSELEMEN = "";
    GS125_INCHAVDS = "";
    GS125_INSITREG = "";
    GS125_VLELEMEN = bigZeros;
}
private void GS125_TableToFile ()
  throws Exception
{   try
    {
        if (GS125_XSEEDEOF == true)
        {    return;
        }
       GS125_CDELEMTO = GS125_TAB.getString("CDELEMTO");
       GS125_DSELEMEN = GS125_TAB.getString("DSELEMEN");
       GS125_VLELEMEN = GS125_TAB.getBigDecimal("VLELEMEN");
       GS125_CDDOITEM = GS125_TAB.getString("CDDOITEM");
       GS125_CDEMPRES = GS125_TAB.getDouble("CDEMPRES");
       GS125_INCHAVDS = GS125_TAB.getString("INCHAVDS");
       GS125_INSITREG = GS125_TAB.getString("INSITREG");
       GS125_ROWID = GS125_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "GS125_TableToFile","");
    }
}
private void GS125_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into GS125 (";
        sqlCommand = sqlCommand + " CDDOITEM";
        sqlCommand = sqlCommand + ",CDELEMTO";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",DSELEMEN";
        sqlCommand = sqlCommand + ",INCHAVDS";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",VLELEMEN";
        sqlCommand = sqlCommand + ") values (";
        if (GS125_CDDOITEM.trim().equals("") == true)
        {   sqlCommand = sqlCommand + " ' '";
        }
        else
        {    sqlCommand = sqlCommand + " '" + ReplaceQuotes(rTrim(GS125_CDDOITEM)) + "'";
        }
        if (GS125_CDELEMTO.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(GS125_CDELEMTO)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(GS125_CDEMPRES);
        if (GS125_DSELEMEN.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(GS125_DSELEMEN)) + "'";
        }
        if (GS125_INCHAVDS.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(GS125_INCHAVDS)) + "'";
        }
        if (GS125_INSITREG.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(GS125_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(GS125_VLELEMEN);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"GS125_Insert");
            }
        }
    }
}
private void GS125_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ GS125 set ";
        if (GS125_CDELEMTO.trim().equals("") == true)
        {    sqlCommand = sqlCommand + "CDELEMTO = ' '";
        }
        else
        {   sqlCommand = sqlCommand + "CDELEMTO = '" + ReplaceQuotes(rTrim(GS125_CDELEMTO)) + "'";
        }
        if (GS125_DSELEMEN.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",DSELEMEN = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",DSELEMEN = '" + ReplaceQuotes(rTrim(GS125_DSELEMEN)) + "'";
        }
        sqlCommand = sqlCommand + ",VLELEMEN = " + cStr(GS125_VLELEMEN);
        if (GS125_CDDOITEM.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",CDDOITEM = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",CDDOITEM = '" + ReplaceQuotes(rTrim(GS125_CDDOITEM)) + "'";
        }
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(GS125_CDEMPRES);
        if (GS125_INCHAVDS.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INCHAVDS = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INCHAVDS = '" + ReplaceQuotes(rTrim(GS125_INCHAVDS)) + "'";
        }
        if (GS125_INSITREG.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INSITREG = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INSITREG = '" + ReplaceQuotes(rTrim(GS125_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(GS125_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"GS125_Modify");
         }
     }
}
private void GS125_AutoToFile()
{
    GS125_InitFile();
    GS125_CDELEMTO = AU_GS125_CDELEMTO;
    GS125_DSELEMEN = AU_GS125_DSELEMEN;
    GS125_VLELEMEN = AU_GS125_VLELEMEN;
    GS125_CDDOITEM = AU_GS125_CDDOITEM;
    GS125_CDEMPRES = AU_GS125_CDEMPRES;
    GS125_INCHAVDS = AU_GS125_INCHAVDS;
    GS125_INSITREG = AU_GS125_INSITREG;
    GS125_ROWID = AU_GS125_ROWID;
}
private void GS125_FileToAuto()
{    AU_GS125_CDELEMTO = GS125_CDELEMTO;
    AU_GS125_DSELEMEN = GS125_DSELEMEN;
    AU_GS125_VLELEMEN = GS125_VLELEMEN;
    AU_GS125_CDDOITEM = GS125_CDDOITEM;
    AU_GS125_CDEMPRES = GS125_CDEMPRES;
    AU_GS125_INCHAVDS = GS125_INCHAVDS;
    AU_GS125_INSITREG = GS125_INSITREG;
    AU_GS125_ROWID = GS125_ROWID;
 }
private void GS125_InitAuto()
{
    AU_GS125_CDELEMTO = "";
    AU_GS125_DSELEMEN = "";
    AU_GS125_VLELEMEN = bigZeros;
    AU_GS125_CDDOITEM = "";
    AU_GS125_CDEMPRES = 0;
    AU_GS125_INCHAVDS = "";
    AU_GS125_INSITREG = "";
    AU_GS125_ROWID = 0;
}
private String GS10101_DetermineEvery(double CDEMPRES ,double CDFILIAL)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        GS101_XSEEDEOF = false;
        GS101_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_GS101_FIELDS + " FROM GS101 with (NOLOCK INDEX=GS10101) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDFILIAL = " + cStr(CDFILIAL);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        if (GS101_CMD == null)
        {   GS101_CMD = GS101_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (GS101_TAB != null)
        {   GS101_TAB.close();
        }
        GS101_TAB = GS101_CMD.executeQuery(sqlCommand);
        if (GS101_TAB.next())
        {   xsdStatus = "";
            GS101_TableToFile();
        }
        else
        {   GS101_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS101_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void GS10101_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (GS101_XSEEDEOF == true)
        {   return;
        }
        if (GS101_XSEEDSEEK == false)
        {    if (GS101_TAB.next())
             {    GS101_TableToFile ();
             }
             else
             {    GS101_XSEEDEOF = true;
             }
        }
        {    GS101_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS101_DetermineMoveNext", "");
    }
}
private void GS101_InitFile()
{
    GS101_CDACTRAB = 0;
    GS101_CDATVECO = 0;
    GS101_CDATVEMP = 0;
    GS101_CDDOPAIS = 0;
    GS101_CDEMPEAN = "";
    GS101_CDEMPRES = 0;
    GS101_CDFILIAL = 0;
    GS101_CDFPASXX = 0;
    GS101_CDGRUEMP = 0;
    GS101_CDLOCEAN = 0;
    GS101_CDNATEST = 0;
    GS101_CDSEGNEG = 0;
    GS101_CDUFLOCA = "";
    GS101_DIREGJUN = 0;
    GS101_DSABREMP = "";
    GS101_DSBAIRRO = "";
    GS101_DSENDERE = "";
    GS101_INADISEN = "";
    GS101_INATIVOX = 0;
    GS101_INDETALH = 0;
    GS101_INEMPPRI = "";
    GS101_INLINSHO = "";
    GS101_INREVOPE = 0;
    GS101_NMEMPCON = "";
    GS101_NMEMPEXT = "";
    GS101_NMEMPRES = "";
    GS101_NMFILIAL = "";
    GS101_NMLOCALI = "";
    GS101_NMSITEAC = "";
    GS101_NRAGEFGT = 0;
    GS101_NRBANFGT = 0;
    GS101_NRCEPCOM = 0;
    GS101_NRCEPLOC = 0;
    GS101_NRCGCDIG = 0;
    GS101_NRCGCFIL = 0;
    GS101_NRCGCNUM = 0;
    GS101_NRCONFGT = "";
    GS101_NRCXPOST = "";
    GS101_NREMPFGT = 0;
    GS101_NRENDLOC = 0;
    GS101_NRFACSIM = "";
    GS101_NRFAMITR = 0;
    GS101_NRFAXDDD = 0;
    GS101_NRFAXNUM = 0;
    GS101_NRINSCRE = "";
    GS101_NRINSMUN = "";
    GS101_NRPREFIP = "";
    GS101_NRPROPTR = 0;
    GS101_NRREGJUN = 0;
    GS101_NRSEQCON = 0;
    GS101_NRSEQSIF = 0;
    GS101_NRTELDDD = 0;
    GS101_NRTELEFO = "";
    GS101_NRTELEXX = "";
    GS101_NRTELNUM = 0;
    GS101_TPEMPSIF = 0;
    GS101_VLPROATE = 0;
    GS101_VLPROEXC = 0;
}
private void GS101_TableToFile ()
  throws Exception
{   try
    {
        if (GS101_XSEEDEOF == true)
        {    return;
        }
       GS101_NRINSCRE = GS101_TAB.getString("NRINSCRE");
       GS101_NRCGCNUM = GS101_TAB.getDouble("NRCGCNUM");
       GS101_NRCGCFIL = GS101_TAB.getDouble("NRCGCFIL");
       GS101_NRCGCDIG = GS101_TAB.getDouble("NRCGCDIG");
       GS101_NMLOCALI = GS101_TAB.getString("NMLOCALI");
       GS101_DSENDERE = GS101_TAB.getString("DSENDERE");
       GS101_NRENDLOC = GS101_TAB.getDouble("NRENDLOC");
       GS101_NMEMPEXT = GS101_TAB.getString("NMEMPEXT");
       GS101_NMEMPRES = GS101_TAB.getString("NMEMPRES");
       GS101_CDUFLOCA = GS101_TAB.getString("CDUFLOCA");
       GS101_NRREGJUN = GS101_TAB.getDouble("NRREGJUN");
       GS101_DIREGJUN = GS101_TAB.getDouble("DIREGJUN");
       GS101_ROWID = GS101_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "GS101_TableToFile","");
    }
}
private String GS10901_DetermineEvery(double CDEMPRES ,double DIDIASUT)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        GS109_XSEEDEOF = false;
        GS109_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_GS109_FIELDS + " FROM GS109 with (NOLOCK INDEX=GS10901) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And DIDIASUT = " + cStr(DIDIASUT);
        sqlCommand = sqlCommand + ") And (" + "INSITREG <> 'D'";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,DIDIASUT  ";
        if (GS109_CMD == null)
        {   GS109_CMD = GS109_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (GS109_TAB != null)
        {   GS109_TAB.close();
        }
        GS109_TAB = GS109_CMD.executeQuery(sqlCommand);
        if (GS109_TAB.next())
        {   xsdStatus = "";
            GS109_TableToFile();
        }
        else
        {   GS109_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS109_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void GS10901_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (GS109_XSEEDEOF == true)
        {   return;
        }
        if (GS109_XSEEDSEEK == false)
        {    if (GS109_TAB.next())
             {    GS109_TableToFile ();
             }
             else
             {    GS109_XSEEDEOF = true;
             }
        }
        {    GS109_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS109_DetermineMoveNext", "");
    }
}
private void GS109_InitFile()
{
    GS109_CDEMPRES = 0;
    GS109_CDINDFIN = 0;
    GS109_CDINDMAT = 0;
    GS109_CDINDPRO = 0;
    GS109_CDINDVEN = 0;
    GS109_DIDIASUT = 0;
    GS109_INSITREG = "";
    GS109_NRDUTMFI = 0;
    GS109_NRDUTMMA = 0;
    GS109_NRDUTMPR = 0;
    GS109_NRDUTMVE = 0;
    GS109_QTPESOME = 0;
    GS109_QTVOLUME = 0;
    GS109_VLFRERED = 0;
    GS109_VLFRETEX = 0;
    GS109_VLVENDAS = 0;
}
private void GS109_TableToFile ()
  throws Exception
{   try
    {
        if (GS109_XSEEDEOF == true)
        {    return;
        }
       GS109_CDINDFIN = GS109_TAB.getDouble("CDINDFIN");
       GS109_ROWID = GS109_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "GS109_TableToFile","");
    }
}
private String AV11903_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double DIEMINOT ,double NRORDFAT ,double CDCLIENT ,double CDMODENF ,double TPREGIST ,double NRNOTAFI, double CDEMPRESUntil,double CDFILIALUntil,double DIEMINOTUntil,double NRORDFATUntil,double CDCLIENTUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        AV119_XSEEDEOF = false;
        AV119_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_AV119_FIELDS + " FROM AV119 with (NOLOCK INDEX=AV11903) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " DIEMINOT = " + cStr(DIEMINOT) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " DIEMINOT = " + cStr(DIEMINOT) + " And " +
           " NRORDFAT = " + cStr(NRORDFAT) +
           " ) And (";
           break;
         case 5:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " DIEMINOT = " + cStr(DIEMINOT) + " And " +
           " NRORDFAT = " + cStr(NRORDFAT) + " And " +
           " CDCLIENT = " + cStr(CDCLIENT) +
           " ) And (";
           break;
         case 6:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " DIEMINOT = " + cStr(DIEMINOT) + " And " +
           " NRORDFAT = " + cStr(NRORDFAT) + " And " +
           " CDCLIENT = " + cStr(CDCLIENT) + " And " +
           " CDMODENF = " + cStr(CDMODENF) +
           " ) And (";
           break;
         case 7:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " DIEMINOT = " + cStr(DIEMINOT) + " And " +
           " NRORDFAT = " + cStr(NRORDFAT) + " And " +
           " CDCLIENT = " + cStr(CDCLIENT) + " And " +
           " CDMODENF = " + cStr(CDMODENF) + " And " +
           " TPREGIST = " + cStr(TPREGIST) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + AV11903_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,DIEMINOT,NRORDFAT,CDCLIENT,CDMODENF,TPREGIST,NRNOTAFI, CDEMPRESUntil,CDFILIALUntil,DIEMINOTUntil,NRORDFATUntil,CDCLIENTUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + AV11903_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,DIEMINOT,NRORDFAT,CDCLIENT,CDMODENF,TPREGIST,NRNOTAFI, CDEMPRESUntil,CDFILIALUntil,DIEMINOTUntil,NRORDFATUntil,CDCLIENTUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + AV11903_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,DIEMINOT,NRORDFAT,CDCLIENT,CDMODENF,TPREGIST,NRNOTAFI, CDEMPRESUntil,CDFILIALUntil,DIEMINOTUntil,NRORDFATUntil,CDCLIENTUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + AV11903_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,DIEMINOT,NRORDFAT,CDCLIENT,CDMODENF,TPREGIST,NRNOTAFI, CDEMPRESUntil,CDFILIALUntil,DIEMINOTUntil,NRORDFATUntil,CDCLIENTUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + AV11903_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,DIEMINOT,NRORDFAT,CDCLIENT,CDMODENF,TPREGIST,NRNOTAFI, CDEMPRESUntil,CDFILIALUntil,DIEMINOTUntil,NRORDFATUntil,CDCLIENTUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil);
          break;
        case 5:
           sqlCommand = sqlCommand + AV11903_DetermineGroupFrom_5 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,DIEMINOT,NRORDFAT,CDCLIENT,CDMODENF,TPREGIST,NRNOTAFI, CDEMPRESUntil,CDFILIALUntil,DIEMINOTUntil,NRORDFATUntil,CDCLIENTUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil);
          break;
        case 6:
           sqlCommand = sqlCommand + AV11903_DetermineGroupFrom_6 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,DIEMINOT,NRORDFAT,CDCLIENT,CDMODENF,TPREGIST,NRNOTAFI, CDEMPRESUntil,CDFILIALUntil,DIEMINOTUntil,NRORDFATUntil,CDCLIENTUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil);
          break;
        case 7:
           sqlCommand = sqlCommand + AV11903_DetermineGroupFrom_7 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,DIEMINOT,NRORDFAT,CDCLIENT,CDMODENF,TPREGIST,NRNOTAFI, CDEMPRESUntil,CDFILIALUntil,DIEMINOTUntil,NRORDFATUntil,CDCLIENTUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,DIEMINOT  ";
        sqlCommand = sqlCommand + " ,NRORDFAT  ";
        sqlCommand = sqlCommand + " ,CDCLIENT  ";
        sqlCommand = sqlCommand + " ,CDMODENF  ";
        sqlCommand = sqlCommand + " ,TPREGIST  ";
        sqlCommand = sqlCommand + " ,NRNOTAFI  ";
        if (AV119_CMD == null)
        {   AV119_CMD = AV119_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (AV119_TAB != null)
        {   AV119_TAB.close();
        }
        AV119_TAB = AV119_CMD.executeQuery(sqlCommand);
        if (AV119_TAB.next())
        {   xsdStatus = "";
            AV119_TableToFile();
        }
        else
        {   AV119_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"AV119_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String AV11903_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double DIEMINOT ,double NRORDFAT ,double CDCLIENT ,double CDMODENF ,double TPREGIST ,double NRNOTAFI, double CDEMPRESUntil,double CDFILIALUntil,double DIEMINOTUntil,double NRORDFATUntil,double CDCLIENTUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI >=  " + cStr(NRNOTAFI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF >  " + cStr(CDMODENF) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT >  " + cStr(CDCLIENT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT >  " + cStr(NRORDFAT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT >  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI <=  " + cStr(NRNOTAFIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF <  " + cStr(CDMODENFUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT <  " + cStr(CDCLIENTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT <  " + cStr(NRORDFATUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT <  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV11903_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double DIEMINOT ,double NRORDFAT ,double CDCLIENT ,double CDMODENF ,double TPREGIST ,double NRNOTAFI, double CDEMPRESUntil,double CDFILIALUntil,double DIEMINOTUntil,double NRORDFATUntil,double CDCLIENTUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI >=  " + cStr(NRNOTAFI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF >  " + cStr(CDMODENF) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT >  " + cStr(CDCLIENT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT >  " + cStr(NRORDFAT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " DIEMINOT >  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI <=  " + cStr(NRNOTAFIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF <  " + cStr(CDMODENFUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT <  " + cStr(CDCLIENTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT <  " + cStr(NRORDFATUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " DIEMINOT <  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV11903_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double DIEMINOT ,double NRORDFAT ,double CDCLIENT ,double CDMODENF ,double TPREGIST ,double NRNOTAFI, double CDEMPRESUntil,double CDFILIALUntil,double DIEMINOTUntil,double NRORDFATUntil,double CDCLIENTUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI >=  " + cStr(NRNOTAFI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF >  " + cStr(CDMODENF) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT >  " + cStr(CDCLIENT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " DIEMINOT =  " + cStr(DIEMINOT) + " And " +
    " NRORDFAT >  " + cStr(NRORDFAT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " DIEMINOT >  " + cStr(DIEMINOT) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI <=  " + cStr(NRNOTAFIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF <  " + cStr(CDMODENFUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT <  " + cStr(CDCLIENTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " DIEMINOT =  " + cStr(DIEMINOTUntil) + " And " +
       " NRORDFAT <  " + cStr(NRORDFATUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " DIEMINOT <  " + cStr(DIEMINOTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV11903_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double DIEMINOT ,double NRORDFAT ,double CDCLIENT ,double CDMODENF ,double TPREGIST ,double NRNOTAFI, double CDEMPRESUntil,double CDFILIALUntil,double DIEMINOTUntil,double NRORDFATUntil,double CDCLIENTUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI >=  " + cStr(NRNOTAFI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF >  " + cStr(CDMODENF) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " NRORDFAT =  " + cStr(NRORDFAT) + " And " +
    " CDCLIENT >  " + cStr(CDCLIENT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " NRORDFAT >  " + cStr(NRORDFAT) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI <=  " + cStr(NRNOTAFIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF <  " + cStr(CDMODENFUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " NRORDFAT =  " + cStr(NRORDFATUntil) + " And " +
       " CDCLIENT <  " + cStr(CDCLIENTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " NRORDFAT <  " + cStr(NRORDFATUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV11903_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double DIEMINOT ,double NRORDFAT ,double CDCLIENT ,double CDMODENF ,double TPREGIST ,double NRNOTAFI, double CDEMPRESUntil,double CDFILIALUntil,double DIEMINOTUntil,double NRORDFATUntil,double CDCLIENTUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI >=  " + cStr(NRNOTAFI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " CDMODENF >  " + cStr(CDMODENF) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDCLIENT >  " + cStr(CDCLIENT) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI <=  " + cStr(NRNOTAFIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " CDMODENF <  " + cStr(CDMODENFUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDCLIENT <  " + cStr(CDCLIENTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV11903_DetermineGroupFrom_5(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double DIEMINOT ,double NRORDFAT ,double CDCLIENT ,double CDMODENF ,double TPREGIST ,double NRNOTAFI, double CDEMPRESUntil,double CDFILIALUntil,double DIEMINOTUntil,double NRORDFATUntil,double CDCLIENTUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI >=  " + cStr(NRNOTAFI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDMODENF >  " + cStr(CDMODENF) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI <=  " + cStr(NRNOTAFIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDMODENF <  " + cStr(CDMODENFUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV11903_DetermineGroupFrom_6(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double DIEMINOT ,double NRORDFAT ,double CDCLIENT ,double CDMODENF ,double TPREGIST ,double NRNOTAFI, double CDEMPRESUntil,double CDFILIALUntil,double DIEMINOTUntil,double NRORDFATUntil,double CDCLIENTUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI >=  " + cStr(NRNOTAFI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI <=  " + cStr(NRNOTAFIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV11903_DetermineGroupFrom_7(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double DIEMINOT ,double NRORDFAT ,double CDCLIENT ,double CDMODENF ,double TPREGIST ,double NRNOTAFI, double CDEMPRESUntil,double CDFILIALUntil,double DIEMINOTUntil,double NRORDFATUntil,double CDCLIENTUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " NRNOTAFI >=  " + cStr(NRNOTAFI) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " NRNOTAFI <=  " + cStr(NRNOTAFIUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void AV11903_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (AV119_XSEEDEOF == true)
        {   return;
        }
        if (AV119_XSEEDSEEK == false)
        {    if (AV119_TAB.next())
             {    AV119_TableToFile ();
             }
             else
             {    AV119_XSEEDEOF = true;
             }
        }
        {    AV119_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"AV119_DetermineMoveNext", "");
    }
}
private void AV119_InitFile()
{
    AV119_CDAGENCI = 0;
    AV119_CDATVENF = "";
    AV119_CDATVSNF = "";
    AV119_CDBANCOX = 0;
    AV119_CDCANVDA = 0;
    AV119_CDCLACUS = 0;
    AV119_CDCLIENT = 0;
    AV119_CDCLIFIN = 0;
    AV119_CDCONDEB = 0;
    AV119_CDCONIPI = 0;
    AV119_CDCREICM = 0;
    AV119_CDCREIPI = 0;
    AV119_CDDEBICM = 0;
    AV119_CDDEPNFI = 0;
    AV119_CDDESMER = 0;
    AV119_CDEMPRES = 0;
    AV119_CDESPEC1 = 0;
    AV119_CDESPEC2 = 0;
    AV119_CDESTADO = 0;
    AV119_CDETQCOR = "";
    AV119_CDFILIAL = 0;
    AV119_CDFILVEN = 0;
    AV119_CDFORDIF = 0;
    AV119_CDFORFCP = 0;
    AV119_CDFORNST = 0;
    AV119_CDFRETEX = 0;
    AV119_CDGERENT = 0;
    AV119_CDLOCCLI = 0;
    AV119_CDLOCEMB = 0;
    AV119_CDMERCAD = 0;
    AV119_CDMODENF = 0;
    AV119_CDMOTFTE = 0;
    AV119_CDOCORTR = 0;
    AV119_CDORIFRE = 0;
    AV119_CDPAISEN = 0;
    AV119_CDRASTRE = "";
    AV119_CDREDESP = 0;
    AV119_CDREPRES = 0;
    AV119_CDSERVCO = 0;
    AV119_CDSITNFE = 0;
    AV119_CDSUPERV = 0;
    AV119_CDTEXTNF = 0;
    AV119_CDTIPFAT = 0;
    AV119_CDTRANSP = 0;
    AV119_CDVDCONS = 0;
    AV119_CDVENCTO = 0;
    AV119_CDVIATRA = 0;
    AV119_DDENTRED = 0;
    AV119_DDENTREG = 0;
    AV119_DDPRORRO = 0;
    AV119_DDVENCCD = 0;
    AV119_DIDENTNF = 0;
    AV119_DIDEVOLU = 0;
    AV119_DIDSAINF = 0;
    AV119_DIEMINOT = 0;
    AV119_DIENTRRE = 0;
    AV119_DIENTRTR = 0;
    AV119_DIIMPNOT = 0;
    AV119_DISAINOT = 0;
    AV119_DISEQUNI = 0;
    AV119_DSCHANFE = "";
    AV119_INCLIFOR = 0;
    AV119_INDESPCO = 0;
    AV119_INDESPIS = 0;
    AV119_INENCEOS = 0;
    AV119_INFREINF = 0;
    AV119_INLINLSO = 0;
    AV119_INNFCVAL = 0;
    AV119_INNOTUNI = 0;
    AV119_INOBSFAT = 0;
    AV119_INOCORTR = 0;
    AV119_INPEDESP = 0;
    AV119_INPEDTRP = 0;
    AV119_INRECDEP = 0;
    AV119_INSITNOT = 0;
    AV119_INSITREG = "";
    AV119_NMRECALF = "";
    AV119_NRACACLI = 0;
    AV119_NRCEPCEN = 0;
    AV119_NRCEPENT = 0;
    AV119_NRDACOTA = 0;
    AV119_NRDOLOTE = 0;
    AV119_NRDUPLIC = 0;
    AV119_NRFATEXP = 0;
    AV119_NRGRUPOC = 0;
    AV119_NRNFEPAC = 0;
    AV119_NRNOTAFI = 0;
    AV119_NRORDEMB = 0;
    AV119_NRORDFAT = 0;
    AV119_NRORDPRO = 0;
    AV119_NRORDSEP = 0;
    AV119_NRORDSER = 0;
    AV119_NRPEDIDO = 0;
    AV119_NRPRAMED = 0;
    AV119_NRSEQUNI = 0;
    AV119_NRSOLAUT = 0;
    AV119_NRSOLICI = 0;
    AV119_NRSOLORD = 0;
    AV119_NRSOLPDF = 0;
    AV119_NRSOLVER = 0;
    AV119_NRSQFTEX = 0;
    AV119_NRUSUENF = 0;
    AV119_NRUSUSNF = 0;
    AV119_NRVOLUM1 = 0;
    AV119_NRVOLUM2 = 0;
    AV119_PCICMNOT = 0;
    AV119_PCICMTXF = 0;
    AV119_PCVENCCD = 0;
    AV119_PQBRUTOX = 0;
    AV119_PQLIQUID = 0;
    AV119_QTMCEMBA = 0;
    AV119_QTVOLU01 = 0;
    AV119_QTVOLU02 = 0;
    AV119_THDENTNF = 0;
    AV119_THDSAINF = 0;
    AV119_THIMPNOT = 0;
    AV119_THSAIDAX = 0;
    AV119_THSEQUNI = 0;
    AV119_TPREGIST = 0;
    AV119_TPSERIEN = "";
    AV119_TPVENDAX = 0;
    AV119_VLADIDEV = 0;
    AV119_VLALTURA = 0;
    AV119_VLBASNOR = 0;
    AV119_VLBASSTR = 0;
    AV119_VLBRDESN = 0;
    AV119_VLBRIDNF = 0;
    AV119_VLBRUTOP = 0;
    AV119_VLCOFFRE = 0;
    AV119_VLCOFNOT = 0;
    AV119_VLCOFTXF = 0;
    AV119_VLCOMMKP = 0;
    AV119_VLCOMPRI = 0;
    AV119_VLCUSSIM = 0;
    AV119_VLDESPSE = 0;
    AV119_VLDOLENT = 0;
    AV119_VLDVVSIM = 0;
    AV119_VLFATMOE = 0;
    AV119_VLFCPDET = 0;
    AV119_VLFCPSTT = 0;
    AV119_VLFREDNF = 0;
    AV119_VLFREFNF = 0;
    AV119_VLFRERED = 0;
    AV119_VLFRETEX = 0;
    AV119_VLICMDDT = 0;
    AV119_VLICMDIT = 0;
    AV119_VLICMDOT = 0;
    AV119_VLICMNOR = 0;
    AV119_VLICMSFR = 0;
    AV119_VLICMSTR = 0;
    AV119_VLICMTXF = 0;
    AV119_VLICMZFN = 0;
    AV119_VLINDDEF = 0;
    AV119_VLIPINOT = 0;
    AV119_VLIPITXF = 0;
    AV119_VLLARGUR = 0;
    AV119_VLLIQUID = 0;
    AV119_VLMOEDAX = bigZeros;
    AV119_VLPISCZF = 0;
    AV119_VLPISFRE = 0;
    AV119_VLPISNOT = 0;
    AV119_VLPISTXF = 0;
    AV119_VLRECSIM = 0;
    AV119_VLRICMST = 0;
    AV119_VLSEGEXP = 0;
    AV119_VLTAXFRE = 0;
    AV119_VLTOICMN = 0;
    AV119_VLURVFAT = 0;
}
private void AV119_TableToFile ()
  throws Exception
{   try
    {
        if (AV119_XSEEDEOF == true)
        {    return;
        }
       AV119_CDESTADO = AV119_TAB.getDouble("CDESTADO");
       AV119_NRNOTAFI = AV119_TAB.getDouble("NRNOTAFI");
       AV119_TPSERIEN = AV119_TAB.getString("TPSERIEN");
       AV119_CDMODENF = AV119_TAB.getDouble("CDMODENF");
       AV119_TPREGIST = AV119_TAB.getDouble("TPREGIST");
       AV119_NRORDEMB = AV119_TAB.getDouble("NRORDEMB");
       AV119_DIEMINOT = AV119_TAB.getDouble("DIEMINOT");
       AV119_DISAINOT = AV119_TAB.getDouble("DISAINOT");
       AV119_INSITNOT = AV119_TAB.getDouble("INSITNOT");
       AV119_CDDESMER = AV119_TAB.getDouble("CDDESMER");
       AV119_CDVDCONS = AV119_TAB.getDouble("CDVDCONS");
       AV119_INPEDESP = AV119_TAB.getDouble("INPEDESP");
       AV119_CDTIPFAT = AV119_TAB.getDouble("CDTIPFAT");
       AV119_DIDEVOLU = AV119_TAB.getDouble("DIDEVOLU");
       AV119_PCICMNOT = AV119_TAB.getDouble("PCICMNOT");
       AV119_VLTOICMN = AV119_TAB.getDouble("VLTOICMN");
       AV119_CDPAISEN = AV119_TAB.getDouble("CDPAISEN");
       AV119_NRCEPENT = AV119_TAB.getDouble("NRCEPENT");
       AV119_CDCLIENT = AV119_TAB.getDouble("CDCLIENT");
       AV119_CDFILIAL = AV119_TAB.getDouble("CDFILIAL");
       AV119_VLTAXFRE = AV119_TAB.getDouble("VLTAXFRE");
       AV119_CDMERCAD = AV119_TAB.getDouble("CDMERCAD");
       AV119_PCICMTXF = AV119_TAB.getDouble("PCICMTXF");
       AV119_VLSEGEXP = AV119_TAB.getDouble("VLSEGEXP");
       AV119_VLICMTXF = AV119_TAB.getDouble("VLICMTXF");
       AV119_VLIPITXF = AV119_TAB.getDouble("VLIPITXF");
       AV119_VLBRUTOP = AV119_TAB.getDouble("VLBRUTOP");
       AV119_CDDEPNFI = AV119_TAB.getDouble("CDDEPNFI");
       AV119_INCLIFOR = AV119_TAB.getDouble("INCLIFOR");
       AV119_NRSOLICI = AV119_TAB.getDouble("NRSOLICI");
       AV119_VLIPINOT = AV119_TAB.getDouble("VLIPINOT");
       AV119_VLLIQUID = AV119_TAB.getDouble("VLLIQUID");
       AV119_INDESPCO = AV119_TAB.getDouble("INDESPCO");
       AV119_ROWID = AV119_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "AV119_TableToFile","");
    }
}
private String AV12001_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double CDMODENF ,double TPREGIST ,double NRNOTAFI ,double CDPRODUT ,double INBRINDE ,double CDITEMXX, double CDEMPRESUntil,double CDFILIALUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil,double CDPRODUTUntil,double INBRINDEUntil,double CDITEMXXUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        AV120_XSEEDEOF = false;
        AV120_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_AV120_FIELDS + " FROM AV120 with (NOLOCK INDEX=AV12001) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " CDMODENF = " + cStr(CDMODENF) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " CDMODENF = " + cStr(CDMODENF) + " And " +
           " TPREGIST = " + cStr(TPREGIST) +
           " ) And (";
           break;
         case 5:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " CDMODENF = " + cStr(CDMODENF) + " And " +
           " TPREGIST = " + cStr(TPREGIST) + " And " +
           " NRNOTAFI = " + cStr(NRNOTAFI) +
           " ) And (";
           break;
         case 6:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " CDMODENF = " + cStr(CDMODENF) + " And " +
           " TPREGIST = " + cStr(TPREGIST) + " And " +
           " NRNOTAFI = " + cStr(NRNOTAFI) + " And " +
           " CDPRODUT = " + cStr(CDPRODUT) +
           " ) And (";
           break;
         case 7:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " CDMODENF = " + cStr(CDMODENF) + " And " +
           " TPREGIST = " + cStr(TPREGIST) + " And " +
           " NRNOTAFI = " + cStr(NRNOTAFI) + " And " +
           " CDPRODUT = " + cStr(CDPRODUT) + " And " +
           " INBRINDE = " + cStr(INBRINDE) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + AV12001_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,CDMODENF,TPREGIST,NRNOTAFI,CDPRODUT,INBRINDE,CDITEMXX, CDEMPRESUntil,CDFILIALUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil,CDPRODUTUntil,INBRINDEUntil,CDITEMXXUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + AV12001_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,CDMODENF,TPREGIST,NRNOTAFI,CDPRODUT,INBRINDE,CDITEMXX, CDEMPRESUntil,CDFILIALUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil,CDPRODUTUntil,INBRINDEUntil,CDITEMXXUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + AV12001_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,CDMODENF,TPREGIST,NRNOTAFI,CDPRODUT,INBRINDE,CDITEMXX, CDEMPRESUntil,CDFILIALUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil,CDPRODUTUntil,INBRINDEUntil,CDITEMXXUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + AV12001_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,CDMODENF,TPREGIST,NRNOTAFI,CDPRODUT,INBRINDE,CDITEMXX, CDEMPRESUntil,CDFILIALUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil,CDPRODUTUntil,INBRINDEUntil,CDITEMXXUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + AV12001_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,CDMODENF,TPREGIST,NRNOTAFI,CDPRODUT,INBRINDE,CDITEMXX, CDEMPRESUntil,CDFILIALUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil,CDPRODUTUntil,INBRINDEUntil,CDITEMXXUntil);
          break;
        case 5:
           sqlCommand = sqlCommand + AV12001_DetermineGroupFrom_5 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,CDMODENF,TPREGIST,NRNOTAFI,CDPRODUT,INBRINDE,CDITEMXX, CDEMPRESUntil,CDFILIALUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil,CDPRODUTUntil,INBRINDEUntil,CDITEMXXUntil);
          break;
        case 6:
           sqlCommand = sqlCommand + AV12001_DetermineGroupFrom_6 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,CDMODENF,TPREGIST,NRNOTAFI,CDPRODUT,INBRINDE,CDITEMXX, CDEMPRESUntil,CDFILIALUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil,CDPRODUTUntil,INBRINDEUntil,CDITEMXXUntil);
          break;
        case 7:
           sqlCommand = sqlCommand + AV12001_DetermineGroupFrom_7 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,CDMODENF,TPREGIST,NRNOTAFI,CDPRODUT,INBRINDE,CDITEMXX, CDEMPRESUntil,CDFILIALUntil,CDMODENFUntil,TPREGISTUntil,NRNOTAFIUntil,CDPRODUTUntil,INBRINDEUntil,CDITEMXXUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,CDMODENF  ";
        sqlCommand = sqlCommand + " ,TPREGIST  ";
        sqlCommand = sqlCommand + " ,NRNOTAFI  ";
        sqlCommand = sqlCommand + " ,CDPRODUT  ";
        sqlCommand = sqlCommand + " ,INBRINDE  ";
        sqlCommand = sqlCommand + " ,CDITEMXX  ";
        if (AV120_CMD == null)
        {   AV120_CMD = AV120_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (AV120_TAB != null)
        {   AV120_TAB.close();
        }
        AV120_TAB = AV120_CMD.executeQuery(sqlCommand);
        if (AV120_TAB.next())
        {   xsdStatus = "";
            AV120_TableToFile();
        }
        else
        {   AV120_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"AV120_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String AV12001_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double CDMODENF ,double TPREGIST ,double NRNOTAFI ,double CDPRODUT ,double INBRINDE ,double CDITEMXX, double CDEMPRESUntil,double CDFILIALUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil,double CDPRODUTUntil,double INBRINDEUntil,double CDITEMXXUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE =  " + cStr(INBRINDE) + " And " +
    " CDITEMXX >=  " + cStr(CDITEMXX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE >  " + cStr(INBRINDE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT >  " + cStr(CDPRODUT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI >  " + cStr(NRNOTAFI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF >  " + cStr(CDMODENF) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE =  " + cStr(INBRINDEUntil) + " And " +
       " CDITEMXX <=  " + cStr(CDITEMXXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE <  " + cStr(INBRINDEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT <  " + cStr(CDPRODUTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI <  " + cStr(NRNOTAFIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF <  " + cStr(CDMODENFUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV12001_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double CDMODENF ,double TPREGIST ,double NRNOTAFI ,double CDPRODUT ,double INBRINDE ,double CDITEMXX, double CDEMPRESUntil,double CDFILIALUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil,double CDPRODUTUntil,double INBRINDEUntil,double CDITEMXXUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE =  " + cStr(INBRINDE) + " And " +
    " CDITEMXX >=  " + cStr(CDITEMXX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE >  " + cStr(INBRINDE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT >  " + cStr(CDPRODUT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI >  " + cStr(NRNOTAFI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " CDMODENF >  " + cStr(CDMODENF) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE =  " + cStr(INBRINDEUntil) + " And " +
       " CDITEMXX <=  " + cStr(CDITEMXXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE <  " + cStr(INBRINDEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT <  " + cStr(CDPRODUTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI <  " + cStr(NRNOTAFIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " CDMODENF <  " + cStr(CDMODENFUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV12001_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double CDMODENF ,double TPREGIST ,double NRNOTAFI ,double CDPRODUT ,double INBRINDE ,double CDITEMXX, double CDEMPRESUntil,double CDFILIALUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil,double CDPRODUTUntil,double INBRINDEUntil,double CDITEMXXUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE =  " + cStr(INBRINDE) + " And " +
    " CDITEMXX >=  " + cStr(CDITEMXX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE >  " + cStr(INBRINDE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT >  " + cStr(CDPRODUT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI >  " + cStr(NRNOTAFI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDMODENF =  " + cStr(CDMODENF) + " And " +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDMODENF >  " + cStr(CDMODENF) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE =  " + cStr(INBRINDEUntil) + " And " +
       " CDITEMXX <=  " + cStr(CDITEMXXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE <  " + cStr(INBRINDEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT <  " + cStr(CDPRODUTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI <  " + cStr(NRNOTAFIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDMODENF =  " + cStr(CDMODENFUntil) + " And " +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDMODENF <  " + cStr(CDMODENFUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV12001_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double CDMODENF ,double TPREGIST ,double NRNOTAFI ,double CDPRODUT ,double INBRINDE ,double CDITEMXX, double CDEMPRESUntil,double CDFILIALUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil,double CDPRODUTUntil,double INBRINDEUntil,double CDITEMXXUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE =  " + cStr(INBRINDE) + " And " +
    " CDITEMXX >=  " + cStr(CDITEMXX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE >  " + cStr(INBRINDE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT >  " + cStr(CDPRODUT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " NRNOTAFI >  " + cStr(NRNOTAFI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE =  " + cStr(INBRINDEUntil) + " And " +
       " CDITEMXX <=  " + cStr(CDITEMXXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE <  " + cStr(INBRINDEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT <  " + cStr(CDPRODUTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " NRNOTAFI <  " + cStr(NRNOTAFIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV12001_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double CDMODENF ,double TPREGIST ,double NRNOTAFI ,double CDPRODUT ,double INBRINDE ,double CDITEMXX, double CDEMPRESUntil,double CDFILIALUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil,double CDPRODUTUntil,double INBRINDEUntil,double CDITEMXXUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE =  " + cStr(INBRINDE) + " And " +
    " CDITEMXX >=  " + cStr(CDITEMXX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE >  " + cStr(INBRINDE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " NRNOTAFI =  " + cStr(NRNOTAFI) + " And " +
    " CDPRODUT >  " + cStr(CDPRODUT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " NRNOTAFI >  " + cStr(NRNOTAFI) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE =  " + cStr(INBRINDEUntil) + " And " +
       " CDITEMXX <=  " + cStr(CDITEMXXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE <  " + cStr(INBRINDEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " NRNOTAFI =  " + cStr(NRNOTAFIUntil) + " And " +
       " CDPRODUT <  " + cStr(CDPRODUTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " NRNOTAFI <  " + cStr(NRNOTAFIUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV12001_DetermineGroupFrom_5(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double CDMODENF ,double TPREGIST ,double NRNOTAFI ,double CDPRODUT ,double INBRINDE ,double CDITEMXX, double CDEMPRESUntil,double CDFILIALUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil,double CDPRODUTUntil,double INBRINDEUntil,double CDITEMXXUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE =  " + cStr(INBRINDE) + " And " +
    " CDITEMXX >=  " + cStr(CDITEMXX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDPRODUT =  " + cStr(CDPRODUT) + " And " +
    " INBRINDE >  " + cStr(INBRINDE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDPRODUT >  " + cStr(CDPRODUT) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE =  " + cStr(INBRINDEUntil) + " And " +
       " CDITEMXX <=  " + cStr(CDITEMXXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDPRODUT =  " + cStr(CDPRODUTUntil) + " And " +
       " INBRINDE <  " + cStr(INBRINDEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDPRODUT <  " + cStr(CDPRODUTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV12001_DetermineGroupFrom_6(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double CDMODENF ,double TPREGIST ,double NRNOTAFI ,double CDPRODUT ,double INBRINDE ,double CDITEMXX, double CDEMPRESUntil,double CDFILIALUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil,double CDPRODUTUntil,double INBRINDEUntil,double CDITEMXXUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " INBRINDE =  " + cStr(INBRINDE) + " And " +
    " CDITEMXX >=  " + cStr(CDITEMXX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INBRINDE >  " + cStr(INBRINDE) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " INBRINDE =  " + cStr(INBRINDEUntil) + " And " +
       " CDITEMXX <=  " + cStr(CDITEMXXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INBRINDE <  " + cStr(INBRINDEUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV12001_DetermineGroupFrom_7(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double CDMODENF ,double TPREGIST ,double NRNOTAFI ,double CDPRODUT ,double INBRINDE ,double CDITEMXX, double CDEMPRESUntil,double CDFILIALUntil,double CDMODENFUntil,double TPREGISTUntil,double NRNOTAFIUntil,double CDPRODUTUntil,double INBRINDEUntil,double CDITEMXXUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDITEMXX >=  " + cStr(CDITEMXX) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDITEMXX <=  " + cStr(CDITEMXXUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void AV12001_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (AV120_XSEEDEOF == true)
        {   return;
        }
        if (AV120_XSEEDSEEK == false)
        {    if (AV120_TAB.next())
             {    AV120_TableToFile ();
             }
             else
             {    AV120_XSEEDEOF = true;
             }
        }
        {    AV120_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"AV120_DetermineMoveNext", "");
    }
}
private void AV120_InitFile()
{
    AV120_CDALMCLI = "";
    AV120_CDCCUDEB = 0;
    AV120_CDCLACUS = 0;
    AV120_CDCLAFIS = 0;
    AV120_CDCONCRE = 0;
    AV120_CDCONDEB = 0;
    AV120_CDCRECOF = 0;
    AV120_CDCREICM = 0;
    AV120_CDCREIPI = 0;
    AV120_CDCREPIS = 0;
    AV120_CDCRESTR = 0;
    AV120_CDDEBCOF = 0;
    AV120_CDDEBICM = 0;
    AV120_CDDEBIPI = 0;
    AV120_CDDEBPIS = 0;
    AV120_CDDEBSTR = 0;
    AV120_CDDOCEST = 0;
    AV120_CDEMPRES = 0;
    AV120_CDENQIPI = 0;
    AV120_CDFILIAL = 0;
    AV120_CDITEMXX = 0;
    AV120_CDMODENF = 0;
    AV120_CDNATCOM = 0;
    AV120_CDNATOEN = 0;
    AV120_CDNATOPE = 0;
    AV120_CDOCONAT = 0;
    AV120_CDOCONEN = 0;
    AV120_CDPRODUT = 0;
    AV120_CDPROPDF = "";
    AV120_CDSITCOF = 0;
    AV120_CDSITIPI = 0;
    AV120_CDSITPIS = 0;
    AV120_CDSITTRI = 0;
    AV120_CDTRIDIF = 0;
    AV120_CDUNIVOL = "";
    AV120_DIEMINFI = 0;
    AV120_INBRIDNF = 0;
    AV120_INBRINDE = 0;
    AV120_INIPIDBC = 0;
    AV120_INORIPRO = 0;
    AV120_INSITREG = "";
    AV120_NRNOTAFI = 0;
    AV120_NRSQORDE = 0;
    AV120_PCAPRTRI = 0;
    AV120_PCDESCNT = 0;
    AV120_PCDESCON = 0;
    AV120_PCFCPDES = 0;
    AV120_PCFCPSTR = 0;
    AV120_PCICMDID = 0;
    AV120_PCICMPRO = 0;
    AV120_PCICMSIS = 0;
    AV120_PCIPIPRO = 0;
    AV120_PCMVASTS = 0;
    AV120_PCPARICD = 0;
    AV120_QTDEVOLU = 0;
    AV120_QTDEVVOL = 0;
    AV120_QTFATURA = 0;
    AV120_QTFATVOL = 0;
    AV120_TPREGIST = 0;
    AV120_VLADIBIC = 0;
    AV120_VLADIDEV = 0;
    AV120_VLAPRTRI = 0;
    AV120_VLBASDID = 0;
    AV120_VLBASFCS = 0;
    AV120_VLBASRIC = 0;
    AV120_VLBASSTR = 0;
    AV120_VLBASSTS = 0;
    AV120_VLBICMTF = 0;
    AV120_VLBIPITF = 0;
    AV120_VLBRUTOP = 0;
    AV120_VLBUNSTR = 0;
    AV120_VLCOFPRO = 0;
    AV120_VLDESACE = 0;
    AV120_VLDESCNT = 0;
    AV120_VLDESCON = 0;
    AV120_VLDESFNF = 0;
    AV120_VLDEVOLU = 0;
    AV120_VLFATMOE = 0;
    AV120_VLFCPDES = 0;
    AV120_VLFCPSTR = 0;
    AV120_VLFRECIF = 0;
    AV120_VLFREFNF = 0;
    AV120_VLICMDID = 0;
    AV120_VLICMDIN = 0;
    AV120_VLICMDIO = 0;
    AV120_VLICMPRO = 0;
    AV120_VLICMSIS = 0;
    AV120_VLICMSTR = 0;
    AV120_VLICMSTS = 0;
    AV120_VLICMTXF = 0;
    AV120_VLICMZFP = 0;
    AV120_VLIPIDEV = 0;
    AV120_VLIPIPRO = 0;
    AV120_VLIPITXF = 0;
    AV120_VLISTDEV = 0;
    AV120_VLIUNSTR = 0;
    AV120_VLLIQFNF = 0;
    AV120_VLLIQUID = 0;
    AV120_VLPISCZF = 0;
    AV120_VLPISPRO = 0;
    AV120_VLPMPROF = 0;
    AV120_VLPREFAT = 0;
    AV120_VLPREVOL = 0;
    AV120_VLUNIFNF = 0;
}
private void AV120_TableToFile ()
  throws Exception
{   try
    {
        if (AV120_XSEEDEOF == true)
        {    return;
        }
       AV120_VLPISCZF = AV120_TAB.getDouble("VLPISCZF");
       AV120_VLLIQUID = AV120_TAB.getDouble("VLLIQUID");
       AV120_CDNATOPE = AV120_TAB.getDouble("CDNATOPE");
       AV120_VLBRUTOP = AV120_TAB.getDouble("VLBRUTOP");
       AV120_PCICMPRO = AV120_TAB.getDouble("PCICMPRO");
       AV120_VLICMPRO = AV120_TAB.getDouble("VLICMPRO");
       AV120_VLICMZFP = AV120_TAB.getDouble("VLICMZFP");
       AV120_CDEMPRES = AV120_TAB.getDouble("CDEMPRES");
       AV120_CDFILIAL = AV120_TAB.getDouble("CDFILIAL");
       AV120_CDMODENF = AV120_TAB.getDouble("CDMODENF");
       AV120_TPREGIST = AV120_TAB.getDouble("TPREGIST");
       AV120_NRNOTAFI = AV120_TAB.getDouble("NRNOTAFI");
       AV120_CDCONCRE = AV120_TAB.getDouble("CDCONCRE");
       AV120_CDNATCOM = AV120_TAB.getDouble("CDNATCOM");
       AV120_PCIPIPRO = AV120_TAB.getDouble("PCIPIPRO");
       AV120_INBRIDNF = AV120_TAB.getDouble("INBRIDNF");
       AV120_VLDESCNT = AV120_TAB.getDouble("VLDESCNT");
       AV120_CDOCONAT = AV120_TAB.getDouble("CDOCONAT");
       AV120_VLIPIPRO = AV120_TAB.getDouble("VLIPIPRO");
       AV120_INIPIDBC = AV120_TAB.getDouble("INIPIDBC");
       AV120_VLIPIDEV = AV120_TAB.getDouble("VLIPIDEV");
       AV120_VLADIBIC = AV120_TAB.getDouble("VLADIBIC");
       AV120_VLBASRIC = AV120_TAB.getDouble("VLBASRIC");
       AV120_VLBASSTR = AV120_TAB.getDouble("VLBASSTR");
       AV120_VLBASDID = AV120_TAB.getDouble("VLBASDID");
       AV120_VLICMDID = AV120_TAB.getDouble("VLICMDID");
       AV120_VLICMDIO = AV120_TAB.getDouble("VLICMDIO");
       AV120_VLFCPDES = AV120_TAB.getDouble("VLFCPDES");
       AV120_VLICMSTR = AV120_TAB.getDouble("VLICMSTR");
       AV120_VLFCPSTR = AV120_TAB.getDouble("VLFCPSTR");
       AV120_CDCLAFIS = AV120_TAB.getDouble("CDCLAFIS");
       AV120_CDPRODUT = AV120_TAB.getDouble("CDPRODUT");
       AV120_CDITEMXX = AV120_TAB.getDouble("CDITEMXX");
       AV120_CDDEBICM = AV120_TAB.getDouble("CDDEBICM");
       AV120_VLDESCON = AV120_TAB.getDouble("VLDESCON");
       AV120_INORIPRO = AV120_TAB.getDouble("INORIPRO");
       AV120_QTFATURA = AV120_TAB.getDouble("QTFATURA");
       AV120_CDTRIDIF = AV120_TAB.getDouble("CDTRIDIF");
       AV120_INBRINDE = AV120_TAB.getDouble("INBRINDE");
       AV120_ROWID = AV120_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "AV120_TableToFile","");
    }
}
private void CG133_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG133 (";
        sqlCommand = sqlCommand + " CDCONTAX";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",CDMODENF";
        sqlCommand = sqlCommand + ",CDNATCOM";
        sqlCommand = sqlCommand + ",CDNATOPE";
        sqlCommand = sqlCommand + ",CDUFMUNI";
        sqlCommand = sqlCommand + ",DIEMINOT";
        sqlCommand = sqlCommand + ",DISAINOT";
        sqlCommand = sqlCommand + ",INCONFIN";
        sqlCommand = sqlCommand + ",INDECEND";
        sqlCommand = sqlCommand + ",INORIGEM";
        sqlCommand = sqlCommand + ",INSITNOT";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",INZONAFR";
        sqlCommand = sqlCommand + ",NRCFICMP";
        sqlCommand = sqlCommand + ",NRNOTAFI";
        sqlCommand = sqlCommand + ",NRNOTFIN";
        sqlCommand = sqlCommand + ",PCICMNAT";
        sqlCommand = sqlCommand + ",PCICMPRO";
        sqlCommand = sqlCommand + ",TPREGIST";
        sqlCommand = sqlCommand + ",TPSERIEN";
        sqlCommand = sqlCommand + ",VLBASDID";
        sqlCommand = sqlCommand + ",VLBASICM";
        sqlCommand = sqlCommand + ",VLBASIPI";
        sqlCommand = sqlCommand + ",VLBASSTR";
        sqlCommand = sqlCommand + ",VLCONTAX";
        sqlCommand = sqlCommand + ",VLFCPDES";
        sqlCommand = sqlCommand + ",VLICMDID";
        sqlCommand = sqlCommand + ",VLICMDIO";
        sqlCommand = sqlCommand + ",VLICMPRO";
        sqlCommand = sqlCommand + ",VLICMSTR";
        sqlCommand = sqlCommand + ",VLIMPICM";
        sqlCommand = sqlCommand + ",VLIMPIPI";
        sqlCommand = sqlCommand + ",VLISEICM";
        sqlCommand = sqlCommand + ",VLISEIPI";
        sqlCommand = sqlCommand + ",VLLIQUID";
        sqlCommand = sqlCommand + ",VLOUTICM";
        sqlCommand = sqlCommand + ",VLOUTIPI";
        sqlCommand = sqlCommand + ",VLPERICM";
        sqlCommand = sqlCommand + ",VLPERIPI";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CG133_CDCONTAX);
        sqlCommand = sqlCommand + "," + cStr(CG133_CDEMPRES);
        sqlCommand = sqlCommand + "," + cStr(CG133_CDMODENF);
        sqlCommand = sqlCommand + "," + cStr(CG133_CDNATCOM);
        sqlCommand = sqlCommand + "," + cStr(CG133_CDNATOPE);
        if (CG133_CDUFMUNI.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG133_CDUFMUNI)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG133_DIEMINOT);
        sqlCommand = sqlCommand + "," + cStr(CG133_DISAINOT);
        sqlCommand = sqlCommand + "," + cStr(CG133_INCONFIN);
        sqlCommand = sqlCommand + "," + cStr(CG133_INDECEND);
        sqlCommand = sqlCommand + "," + cStr(CG133_INORIGEM);
        sqlCommand = sqlCommand + "," + cStr(CG133_INSITNOT);
        if (CG133_INSITREG.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG133_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG133_INZONAFR);
        sqlCommand = sqlCommand + "," + cStr(CG133_NRCFICMP);
        sqlCommand = sqlCommand + "," + cStr(CG133_NRNOTAFI);
        sqlCommand = sqlCommand + "," + cStr(CG133_NRNOTFIN);
        sqlCommand = sqlCommand + "," + cStr(CG133_PCICMNAT);
        sqlCommand = sqlCommand + "," + cStr(CG133_PCICMPRO);
        sqlCommand = sqlCommand + "," + cStr(CG133_TPREGIST);
        if (CG133_TPSERIEN.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG133_TPSERIEN)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG133_VLBASDID);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLBASICM);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLBASIPI);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLBASSTR);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLCONTAX);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLFCPDES);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLICMDID);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLICMDIO);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLICMPRO);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLICMSTR);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLIMPICM);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLIMPIPI);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLISEICM);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLISEIPI);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLLIQUID);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLOUTICM);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLOUTIPI);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLPERICM);
        sqlCommand = sqlCommand + "," + cStr(CG133_VLPERIPI);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG133_Insert");
            }
        }
    }
}
private void CG133_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG133 set ";
        sqlCommand = sqlCommand + "CDCONTAX = " + cStr(CG133_CDCONTAX);
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(CG133_CDEMPRES);
        sqlCommand = sqlCommand + ",CDMODENF = " + cStr(CG133_CDMODENF);
        sqlCommand = sqlCommand + ",CDNATCOM = " + cStr(CG133_CDNATCOM);
        sqlCommand = sqlCommand + ",CDNATOPE = " + cStr(CG133_CDNATOPE);
        if (CG133_CDUFMUNI.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",CDUFMUNI = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",CDUFMUNI = '" + ReplaceQuotes(rTrim(CG133_CDUFMUNI)) + "'";
        }
        sqlCommand = sqlCommand + ",DIEMINOT = " + cStr(CG133_DIEMINOT);
        sqlCommand = sqlCommand + ",DISAINOT = " + cStr(CG133_DISAINOT);
        sqlCommand = sqlCommand + ",INCONFIN = " + cStr(CG133_INCONFIN);
        sqlCommand = sqlCommand + ",INDECEND = " + cStr(CG133_INDECEND);
        sqlCommand = sqlCommand + ",INORIGEM = " + cStr(CG133_INORIGEM);
        sqlCommand = sqlCommand + ",INSITNOT = " + cStr(CG133_INSITNOT);
        if (CG133_INSITREG.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INSITREG = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INSITREG = '" + ReplaceQuotes(rTrim(CG133_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + ",INZONAFR = " + cStr(CG133_INZONAFR);
        sqlCommand = sqlCommand + ",NRCFICMP = " + cStr(CG133_NRCFICMP);
        sqlCommand = sqlCommand + ",NRNOTAFI = " + cStr(CG133_NRNOTAFI);
        sqlCommand = sqlCommand + ",NRNOTFIN = " + cStr(CG133_NRNOTFIN);
        sqlCommand = sqlCommand + ",PCICMNAT = " + cStr(CG133_PCICMNAT);
        sqlCommand = sqlCommand + ",PCICMPRO = " + cStr(CG133_PCICMPRO);
        sqlCommand = sqlCommand + ",TPREGIST = " + cStr(CG133_TPREGIST);
        if (CG133_TPSERIEN.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",TPSERIEN = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",TPSERIEN = '" + ReplaceQuotes(rTrim(CG133_TPSERIEN)) + "'";
        }
        sqlCommand = sqlCommand + ",VLBASICM = " + cStr(CG133_VLBASICM);
        sqlCommand = sqlCommand + ",VLBASIPI = " + cStr(CG133_VLBASIPI);
        sqlCommand = sqlCommand + ",VLBASSTR = " + cStr(CG133_VLBASSTR);
        sqlCommand = sqlCommand + ",VLCONTAX = " + cStr(CG133_VLCONTAX);
        sqlCommand = sqlCommand + ",VLBASDID = " + cStr(CG133_VLBASDID);
        sqlCommand = sqlCommand + ",VLICMDID = " + cStr(CG133_VLICMDID);
        sqlCommand = sqlCommand + ",VLICMDIO = " + cStr(CG133_VLICMDIO);
        sqlCommand = sqlCommand + ",VLFCPDES = " + cStr(CG133_VLFCPDES);
        sqlCommand = sqlCommand + ",VLICMPRO = " + cStr(CG133_VLICMPRO);
        sqlCommand = sqlCommand + ",VLICMSTR = " + cStr(CG133_VLICMSTR);
        sqlCommand = sqlCommand + ",VLIMPICM = " + cStr(CG133_VLIMPICM);
        sqlCommand = sqlCommand + ",VLIMPIPI = " + cStr(CG133_VLIMPIPI);
        sqlCommand = sqlCommand + ",VLISEICM = " + cStr(CG133_VLISEICM);
        sqlCommand = sqlCommand + ",VLISEIPI = " + cStr(CG133_VLISEIPI);
        sqlCommand = sqlCommand + ",VLLIQUID = " + cStr(CG133_VLLIQUID);
        sqlCommand = sqlCommand + ",VLOUTICM = " + cStr(CG133_VLOUTICM);
        sqlCommand = sqlCommand + ",VLOUTIPI = " + cStr(CG133_VLOUTIPI);
        sqlCommand = sqlCommand + ",VLPERICM = " + cStr(CG133_VLPERICM);
        sqlCommand = sqlCommand + ",VLPERIPI = " + cStr(CG133_VLPERIPI);
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG133_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG133_Modify");
         }
     }
}
private void CG133_AutoToFile()
{
    CG133_InitFile();
    CG133_CDCONTAX = AU_CG133_CDCONTAX;
    CG133_CDEMPRES = AU_CG133_CDEMPRES;
    CG133_CDMODENF = AU_CG133_CDMODENF;
    CG133_CDNATCOM = AU_CG133_CDNATCOM;
    CG133_CDNATOPE = AU_CG133_CDNATOPE;
    CG133_CDUFMUNI = AU_CG133_CDUFMUNI;
    CG133_DIEMINOT = AU_CG133_DIEMINOT;
    CG133_DISAINOT = AU_CG133_DISAINOT;
    CG133_INCONFIN = AU_CG133_INCONFIN;
    CG133_INDECEND = AU_CG133_INDECEND;
    CG133_INORIGEM = AU_CG133_INORIGEM;
    CG133_INSITNOT = AU_CG133_INSITNOT;
    CG133_INSITREG = AU_CG133_INSITREG;
    CG133_INZONAFR = AU_CG133_INZONAFR;
    CG133_NRCFICMP = AU_CG133_NRCFICMP;
    CG133_NRNOTAFI = AU_CG133_NRNOTAFI;
    CG133_NRNOTFIN = AU_CG133_NRNOTFIN;
    CG133_PCICMNAT = AU_CG133_PCICMNAT;
    CG133_PCICMPRO = AU_CG133_PCICMPRO;
    CG133_TPREGIST = AU_CG133_TPREGIST;
    CG133_TPSERIEN = AU_CG133_TPSERIEN;
    CG133_VLBASICM = AU_CG133_VLBASICM;
    CG133_VLBASIPI = AU_CG133_VLBASIPI;
    CG133_VLBASSTR = AU_CG133_VLBASSTR;
    CG133_VLCONTAX = AU_CG133_VLCONTAX;
    CG133_VLBASDID = AU_CG133_VLBASDID;
    CG133_VLICMDID = AU_CG133_VLICMDID;
    CG133_VLICMDIO = AU_CG133_VLICMDIO;
    CG133_VLFCPDES = AU_CG133_VLFCPDES;
    CG133_VLICMPRO = AU_CG133_VLICMPRO;
    CG133_VLICMSTR = AU_CG133_VLICMSTR;
    CG133_VLIMPICM = AU_CG133_VLIMPICM;
    CG133_VLIMPIPI = AU_CG133_VLIMPIPI;
    CG133_VLISEICM = AU_CG133_VLISEICM;
    CG133_VLISEIPI = AU_CG133_VLISEIPI;
    CG133_VLLIQUID = AU_CG133_VLLIQUID;
    CG133_VLOUTICM = AU_CG133_VLOUTICM;
    CG133_VLOUTIPI = AU_CG133_VLOUTIPI;
    CG133_VLPERICM = AU_CG133_VLPERICM;
    CG133_VLPERIPI = AU_CG133_VLPERIPI;
    CG133_ROWID = AU_CG133_ROWID;
}
private void CG133_FileToAuto()
{    AU_CG133_CDCONTAX = CG133_CDCONTAX;
    AU_CG133_CDEMPRES = CG133_CDEMPRES;
    AU_CG133_CDMODENF = CG133_CDMODENF;
    AU_CG133_CDNATCOM = CG133_CDNATCOM;
    AU_CG133_CDNATOPE = CG133_CDNATOPE;
    AU_CG133_CDUFMUNI = CG133_CDUFMUNI;
    AU_CG133_DIEMINOT = CG133_DIEMINOT;
    AU_CG133_DISAINOT = CG133_DISAINOT;
    AU_CG133_INCONFIN = CG133_INCONFIN;
    AU_CG133_INDECEND = CG133_INDECEND;
    AU_CG133_INORIGEM = CG133_INORIGEM;
    AU_CG133_INSITNOT = CG133_INSITNOT;
    AU_CG133_INSITREG = CG133_INSITREG;
    AU_CG133_INZONAFR = CG133_INZONAFR;
    AU_CG133_NRCFICMP = CG133_NRCFICMP;
    AU_CG133_NRNOTAFI = CG133_NRNOTAFI;
    AU_CG133_NRNOTFIN = CG133_NRNOTFIN;
    AU_CG133_PCICMNAT = CG133_PCICMNAT;
    AU_CG133_PCICMPRO = CG133_PCICMPRO;
    AU_CG133_TPREGIST = CG133_TPREGIST;
    AU_CG133_TPSERIEN = CG133_TPSERIEN;
    AU_CG133_VLBASICM = CG133_VLBASICM;
    AU_CG133_VLBASIPI = CG133_VLBASIPI;
    AU_CG133_VLBASSTR = CG133_VLBASSTR;
    AU_CG133_VLCONTAX = CG133_VLCONTAX;
    AU_CG133_VLBASDID = CG133_VLBASDID;
    AU_CG133_VLICMDID = CG133_VLICMDID;
    AU_CG133_VLICMDIO = CG133_VLICMDIO;
    AU_CG133_VLFCPDES = CG133_VLFCPDES;
    AU_CG133_VLICMPRO = CG133_VLICMPRO;
    AU_CG133_VLICMSTR = CG133_VLICMSTR;
    AU_CG133_VLIMPICM = CG133_VLIMPICM;
    AU_CG133_VLIMPIPI = CG133_VLIMPIPI;
    AU_CG133_VLISEICM = CG133_VLISEICM;
    AU_CG133_VLISEIPI = CG133_VLISEIPI;
    AU_CG133_VLLIQUID = CG133_VLLIQUID;
    AU_CG133_VLOUTICM = CG133_VLOUTICM;
    AU_CG133_VLOUTIPI = CG133_VLOUTIPI;
    AU_CG133_VLPERICM = CG133_VLPERICM;
    AU_CG133_VLPERIPI = CG133_VLPERIPI;
    AU_CG133_ROWID = CG133_ROWID;
 }
private void CG133_InitAuto()
{
    AU_CG133_CDCONTAX = 0;
    AU_CG133_CDEMPRES = 0;
    AU_CG133_CDMODENF = 0;
    AU_CG133_CDNATCOM = 0;
    AU_CG133_CDNATOPE = 0;
    AU_CG133_CDUFMUNI = "";
    AU_CG133_DIEMINOT = 0;
    AU_CG133_DISAINOT = 0;
    AU_CG133_INCONFIN = 0;
    AU_CG133_INDECEND = 0;
    AU_CG133_INORIGEM = 0;
    AU_CG133_INSITNOT = 0;
    AU_CG133_INSITREG = "";
    AU_CG133_INZONAFR = 0;
    AU_CG133_NRCFICMP = 0;
    AU_CG133_NRNOTAFI = 0;
    AU_CG133_NRNOTFIN = 0;
    AU_CG133_PCICMNAT = 0;
    AU_CG133_PCICMPRO = 0;
    AU_CG133_TPREGIST = 0;
    AU_CG133_TPSERIEN = "";
    AU_CG133_VLBASICM = 0;
    AU_CG133_VLBASIPI = 0;
    AU_CG133_VLBASSTR = 0;
    AU_CG133_VLCONTAX = 0;
    AU_CG133_VLBASDID = 0;
    AU_CG133_VLICMDID = 0;
    AU_CG133_VLICMDIO = 0;
    AU_CG133_VLFCPDES = 0;
    AU_CG133_VLICMPRO = 0;
    AU_CG133_VLICMSTR = 0;
    AU_CG133_VLIMPICM = 0;
    AU_CG133_VLIMPIPI = 0;
    AU_CG133_VLISEICM = 0;
    AU_CG133_VLISEIPI = 0;
    AU_CG133_VLLIQUID = 0;
    AU_CG133_VLOUTICM = 0;
    AU_CG133_VLOUTIPI = 0;
    AU_CG133_VLPERICM = 0;
    AU_CG133_VLPERIPI = 0;
    AU_CG133_ROWID = 0;
}
private void CG133_InitFile()
{
    CG133_CDCONTAX = 0;
    CG133_CDEMPRES = 0;
    CG133_CDMODENF = 0;
    CG133_CDNATCOM = 0;
    CG133_CDNATOPE = 0;
    CG133_CDUFMUNI = "";
    CG133_DIEMINOT = 0;
    CG133_DISAINOT = 0;
    CG133_INCONFIN = 0;
    CG133_INDECEND = 0;
    CG133_INORIGEM = 0;
    CG133_INSITNOT = 0;
    CG133_INSITREG = "";
    CG133_INZONAFR = 0;
    CG133_NRCFICMP = 0;
    CG133_NRNOTAFI = 0;
    CG133_NRNOTFIN = 0;
    CG133_PCICMNAT = 0;
    CG133_PCICMPRO = 0;
    CG133_TPREGIST = 0;
    CG133_TPSERIEN = "";
    CG133_VLBASDID = 0;
    CG133_VLBASICM = 0;
    CG133_VLBASIPI = 0;
    CG133_VLBASSTR = 0;
    CG133_VLCONTAX = 0;
    CG133_VLFCPDES = 0;
    CG133_VLICMDID = 0;
    CG133_VLICMDIO = 0;
    CG133_VLICMPRO = 0;
    CG133_VLICMSTR = 0;
    CG133_VLIMPICM = 0;
    CG133_VLIMPIPI = 0;
    CG133_VLISEICM = 0;
    CG133_VLISEIPI = 0;
    CG133_VLLIQUID = 0;
    CG133_VLOUTICM = 0;
    CG133_VLOUTIPI = 0;
    CG133_VLPERICM = 0;
    CG133_VLPERIPI = 0;
}
private void CG133_TableToFile ()
  throws Exception
{   try
    {
        if (CG133_XSEEDEOF == true)
        {    return;
        }
       CG133_CDCONTAX = CG133_TAB.getDouble("CDCONTAX");
       CG133_CDEMPRES = CG133_TAB.getDouble("CDEMPRES");
       CG133_CDMODENF = CG133_TAB.getDouble("CDMODENF");
       CG133_CDNATCOM = CG133_TAB.getDouble("CDNATCOM");
       CG133_CDNATOPE = CG133_TAB.getDouble("CDNATOPE");
       CG133_CDUFMUNI = CG133_TAB.getString("CDUFMUNI");
       CG133_DIEMINOT = CG133_TAB.getDouble("DIEMINOT");
       CG133_DISAINOT = CG133_TAB.getDouble("DISAINOT");
       CG133_INCONFIN = CG133_TAB.getDouble("INCONFIN");
       CG133_INDECEND = CG133_TAB.getDouble("INDECEND");
       CG133_INORIGEM = CG133_TAB.getDouble("INORIGEM");
       CG133_INSITNOT = CG133_TAB.getDouble("INSITNOT");
       CG133_INSITREG = CG133_TAB.getString("INSITREG");
       CG133_INZONAFR = CG133_TAB.getDouble("INZONAFR");
       CG133_NRCFICMP = CG133_TAB.getDouble("NRCFICMP");
       CG133_NRNOTAFI = CG133_TAB.getDouble("NRNOTAFI");
       CG133_NRNOTFIN = CG133_TAB.getDouble("NRNOTFIN");
       CG133_PCICMNAT = CG133_TAB.getDouble("PCICMNAT");
       CG133_PCICMPRO = CG133_TAB.getDouble("PCICMPRO");
       CG133_TPREGIST = CG133_TAB.getDouble("TPREGIST");
       CG133_TPSERIEN = CG133_TAB.getString("TPSERIEN");
       CG133_VLBASICM = CG133_TAB.getDouble("VLBASICM");
       CG133_VLBASIPI = CG133_TAB.getDouble("VLBASIPI");
       CG133_VLBASSTR = CG133_TAB.getDouble("VLBASSTR");
       CG133_VLCONTAX = CG133_TAB.getDouble("VLCONTAX");
       CG133_VLBASDID = CG133_TAB.getDouble("VLBASDID");
       CG133_VLICMDID = CG133_TAB.getDouble("VLICMDID");
       CG133_VLICMDIO = CG133_TAB.getDouble("VLICMDIO");
       CG133_VLFCPDES = CG133_TAB.getDouble("VLFCPDES");
       CG133_VLICMPRO = CG133_TAB.getDouble("VLICMPRO");
       CG133_VLICMSTR = CG133_TAB.getDouble("VLICMSTR");
       CG133_VLIMPICM = CG133_TAB.getDouble("VLIMPICM");
       CG133_VLIMPIPI = CG133_TAB.getDouble("VLIMPIPI");
       CG133_VLISEICM = CG133_TAB.getDouble("VLISEICM");
       CG133_VLISEIPI = CG133_TAB.getDouble("VLISEIPI");
       CG133_VLLIQUID = CG133_TAB.getDouble("VLLIQUID");
       CG133_VLOUTICM = CG133_TAB.getDouble("VLOUTICM");
       CG133_VLOUTIPI = CG133_TAB.getDouble("VLOUTIPI");
       CG133_VLPERICM = CG133_TAB.getDouble("VLPERICM");
       CG133_VLPERIPI = CG133_TAB.getDouble("VLPERIPI");
       CG133_ROWID = CG133_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG133_TableToFile","");
    }
}
private void CG122_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG122 (";
        sqlCommand = sqlCommand + " AMMOVTOX";
        sqlCommand = sqlCommand + ",CDCLIFOR";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",CDFILIAL";
        sqlCommand = sqlCommand + ",INCLIFOR";
        sqlCommand = sqlCommand + ",INENTSAI";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",VLMOVIME";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CG122_AMMOVTOX);
        sqlCommand = sqlCommand + "," + cStr(CG122_CDCLIFOR);
        sqlCommand = sqlCommand + "," + cStr(CG122_CDEMPRES);
        sqlCommand = sqlCommand + "," + cStr(CG122_CDFILIAL);
        sqlCommand = sqlCommand + "," + cStr(CG122_INCLIFOR);
        sqlCommand = sqlCommand + "," + cStr(CG122_INENTSAI);
        if (CG122_INSITREG.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG122_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG122_VLMOVIME);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG122_Insert");
            }
        }
    }
}
private void CG122_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG122 set ";
        sqlCommand = sqlCommand + "CDEMPRES = " + cStr(CG122_CDEMPRES);
        sqlCommand = sqlCommand + ",AMMOVTOX = " + cStr(CG122_AMMOVTOX);
        sqlCommand = sqlCommand + ",CDCLIFOR = " + cStr(CG122_CDCLIFOR);
        sqlCommand = sqlCommand + ",CDFILIAL = " + cStr(CG122_CDFILIAL);
        sqlCommand = sqlCommand + ",INCLIFOR = " + cStr(CG122_INCLIFOR);
        sqlCommand = sqlCommand + ",INENTSAI = " + cStr(CG122_INENTSAI);
        if (CG122_INSITREG.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INSITREG = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INSITREG = '" + ReplaceQuotes(rTrim(CG122_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + ",VLMOVIME = " + cStr(CG122_VLMOVIME);
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG122_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG122_Modify");
         }
     }
}
private void CG122_AutoToFile()
{
    CG122_InitFile();
    CG122_CDEMPRES = AU_CG122_CDEMPRES;
    CG122_AMMOVTOX = AU_CG122_AMMOVTOX;
    CG122_CDCLIFOR = AU_CG122_CDCLIFOR;
    CG122_CDFILIAL = AU_CG122_CDFILIAL;
    CG122_INCLIFOR = AU_CG122_INCLIFOR;
    CG122_INENTSAI = AU_CG122_INENTSAI;
    CG122_INSITREG = AU_CG122_INSITREG;
    CG122_VLMOVIME = AU_CG122_VLMOVIME;
    CG122_ROWID = AU_CG122_ROWID;
}
private void CG122_FileToAuto()
{    AU_CG122_CDEMPRES = CG122_CDEMPRES;
    AU_CG122_AMMOVTOX = CG122_AMMOVTOX;
    AU_CG122_CDCLIFOR = CG122_CDCLIFOR;
    AU_CG122_CDFILIAL = CG122_CDFILIAL;
    AU_CG122_INCLIFOR = CG122_INCLIFOR;
    AU_CG122_INENTSAI = CG122_INENTSAI;
    AU_CG122_INSITREG = CG122_INSITREG;
    AU_CG122_VLMOVIME = CG122_VLMOVIME;
    AU_CG122_ROWID = CG122_ROWID;
 }
private void CG122_InitAuto()
{
    AU_CG122_CDEMPRES = 0;
    AU_CG122_AMMOVTOX = 0;
    AU_CG122_CDCLIFOR = 0;
    AU_CG122_CDFILIAL = 0;
    AU_CG122_INCLIFOR = 0;
    AU_CG122_INENTSAI = 0;
    AU_CG122_INSITREG = "";
    AU_CG122_VLMOVIME = 0;
    AU_CG122_ROWID = 0;
}
private void CG122_InitFile()
{
    CG122_AMMOVTOX = 0;
    CG122_CDCLIFOR = 0;
    CG122_CDEMPRES = 0;
    CG122_CDFILIAL = 0;
    CG122_INCLIFOR = 0;
    CG122_INENTSAI = 0;
    CG122_INSITREG = "";
    CG122_VLMOVIME = 0;
}
private void CG122_TableToFile ()
  throws Exception
{   try
    {
        if (CG122_XSEEDEOF == true)
        {    return;
        }
       CG122_CDEMPRES = CG122_TAB.getDouble("CDEMPRES");
       CG122_AMMOVTOX = CG122_TAB.getDouble("AMMOVTOX");
       CG122_CDCLIFOR = CG122_TAB.getDouble("CDCLIFOR");
       CG122_CDFILIAL = CG122_TAB.getDouble("CDFILIAL");
       CG122_INCLIFOR = CG122_TAB.getDouble("INCLIFOR");
       CG122_INENTSAI = CG122_TAB.getDouble("INENTSAI");
       CG122_INSITREG = CG122_TAB.getString("INSITREG");
       CG122_VLMOVIME = CG122_TAB.getDouble("VLMOVIME");
       CG122_ROWID = CG122_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG122_TableToFile","");
    }
}
private String CG16801_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDCLAFIS, double CDEMPRESUntil,double CDCLAFISUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG168_XSEEDEOF = false;
        CG168_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG168_FIELDS + " FROM CG168 with (NOLOCK INDEX=CG16801) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG16801_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,CDCLAFIS, CDEMPRESUntil,CDCLAFISUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG16801_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,CDCLAFIS, CDEMPRESUntil,CDCLAFISUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDCLAFIS  ";
        if (CG168_CMD == null)
        {   CG168_CMD = CG168_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG168_TAB != null)
        {   CG168_TAB.close();
        }
        CG168_TAB = CG168_CMD.executeQuery(sqlCommand);
        if (CG168_TAB.next())
        {   xsdStatus = "";
            CG168_TableToFile();
        }
        else
        {   CG168_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG168_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG16801_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDCLAFIS, double CDEMPRESUntil,double CDCLAFISUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDCLAFIS >=  " + cStr(CDCLAFIS) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDCLAFIS <=  " + cStr(CDCLAFISUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG16801_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDCLAFIS, double CDEMPRESUntil,double CDCLAFISUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDCLAFIS >=  " + cStr(CDCLAFIS) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDCLAFIS <=  " + cStr(CDCLAFISUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG16801_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG168_XSEEDEOF == true)
        {   return;
        }
        if (CG168_XSEEDSEEK == false)
        {    if (CG168_TAB.next())
             {    CG168_TableToFile ();
             }
             else
             {    CG168_XSEEDEOF = true;
             }
        }
        {    CG168_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG168_DetermineMoveNext", "");
    }
}
private void CG168_InitFile()
{
    CG168_CDCLAFIS = 0;
    CG168_CDEMPRES = 0;
    CG168_INSITREG = "";
    CG168_VLMOVIME = 0;
}
private void CG168_TableToFile ()
  throws Exception
{   try
    {
        if (CG168_XSEEDEOF == true)
        {    return;
        }
       CG168_CDEMPRES = CG168_TAB.getDouble("CDEMPRES");
       CG168_CDCLAFIS = CG168_TAB.getDouble("CDCLAFIS");
       CG168_VLMOVIME = CG168_TAB.getDouble("VLMOVIME");
       CG168_INSITREG = CG168_TAB.getString("INSITREG");
       CG168_ROWID = CG168_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG168_TableToFile","");
    }
}
private void CG123_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG123 (";
        sqlCommand = sqlCommand + " AMMOVTOX";
        sqlCommand = sqlCommand + ",CDCLAFIS";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",CDFILIAL";
        sqlCommand = sqlCommand + ",INENTSAI";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",VLMOVIME";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CG123_AMMOVTOX);
        sqlCommand = sqlCommand + "," + cStr(CG123_CDCLAFIS);
        sqlCommand = sqlCommand + "," + cStr(CG123_CDEMPRES);
        sqlCommand = sqlCommand + "," + cStr(CG123_CDFILIAL);
        sqlCommand = sqlCommand + "," + cStr(CG123_INENTSAI);
        if (CG123_INSITREG.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG123_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG123_VLMOVIME);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG123_Insert");
            }
        }
    }
}
private void CG123_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG123 set ";
        sqlCommand = sqlCommand + "AMMOVTOX = " + cStr(CG123_AMMOVTOX);
        sqlCommand = sqlCommand + ",CDCLAFIS = " + cStr(CG123_CDCLAFIS);
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(CG123_CDEMPRES);
        sqlCommand = sqlCommand + ",CDFILIAL = " + cStr(CG123_CDFILIAL);
        sqlCommand = sqlCommand + ",INENTSAI = " + cStr(CG123_INENTSAI);
        if (CG123_INSITREG.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INSITREG = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INSITREG = '" + ReplaceQuotes(rTrim(CG123_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + ",VLMOVIME = " + cStr(CG123_VLMOVIME);
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG123_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG123_Modify");
         }
     }
}
private void CG123_AutoToFile()
{
    CG123_InitFile();
    CG123_AMMOVTOX = AU_CG123_AMMOVTOX;
    CG123_CDCLAFIS = AU_CG123_CDCLAFIS;
    CG123_CDEMPRES = AU_CG123_CDEMPRES;
    CG123_CDFILIAL = AU_CG123_CDFILIAL;
    CG123_INENTSAI = AU_CG123_INENTSAI;
    CG123_INSITREG = AU_CG123_INSITREG;
    CG123_VLMOVIME = AU_CG123_VLMOVIME;
    CG123_ROWID = AU_CG123_ROWID;
}
private void CG123_FileToAuto()
{    AU_CG123_AMMOVTOX = CG123_AMMOVTOX;
    AU_CG123_CDCLAFIS = CG123_CDCLAFIS;
    AU_CG123_CDEMPRES = CG123_CDEMPRES;
    AU_CG123_CDFILIAL = CG123_CDFILIAL;
    AU_CG123_INENTSAI = CG123_INENTSAI;
    AU_CG123_INSITREG = CG123_INSITREG;
    AU_CG123_VLMOVIME = CG123_VLMOVIME;
    AU_CG123_ROWID = CG123_ROWID;
 }
private void CG123_InitAuto()
{
    AU_CG123_AMMOVTOX = 0;
    AU_CG123_CDCLAFIS = 0;
    AU_CG123_CDEMPRES = 0;
    AU_CG123_CDFILIAL = 0;
    AU_CG123_INENTSAI = 0;
    AU_CG123_INSITREG = "";
    AU_CG123_VLMOVIME = 0;
    AU_CG123_ROWID = 0;
}
private void CG123_InitFile()
{
    CG123_AMMOVTOX = 0;
    CG123_CDCLAFIS = 0;
    CG123_CDEMPRES = 0;
    CG123_CDFILIAL = 0;
    CG123_INENTSAI = 0;
    CG123_INSITREG = "";
    CG123_VLMOVIME = 0;
}
private void CG123_TableToFile ()
  throws Exception
{   try
    {
        if (CG123_XSEEDEOF == true)
        {    return;
        }
       CG123_AMMOVTOX = CG123_TAB.getDouble("AMMOVTOX");
       CG123_CDCLAFIS = CG123_TAB.getDouble("CDCLAFIS");
       CG123_CDEMPRES = CG123_TAB.getDouble("CDEMPRES");
       CG123_CDFILIAL = CG123_TAB.getDouble("CDFILIAL");
       CG123_INENTSAI = CG123_TAB.getDouble("INENTSAI");
       CG123_INSITREG = CG123_TAB.getString("INSITREG");
       CG123_VLMOVIME = CG123_TAB.getDouble("VLMOVIME");
       CG123_ROWID = CG123_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG123_TableToFile","");
    }
}
private void QCG13301_SelectEvery(double pCDEMPRES)
    throws Exception
{   String sqlCommand="";
    try
    {   GLB.STATUS = "*****";
        sqlCommand = "SELECT " + ODBC_CG133_FIELDS + " FROM CG133 WHERE CDEMPRES = " + pCDEMPRES + " AND NRNOTAFI > 0 ORDER BY DIEMINOT, TPSERIEN, NRNOTAFI, CDNATOPE DESC, CDNATCOM, CDCONTAX, VLPERIPI      ";
        QCG13301_XSEEDEOF = false;
        QCG13301_XSEEDSEEK = true;
        if (QCG13301_CMD == null)
        {   QCG13301_CMD = QCG13301_CON.createStatement();
        }
        if (QCG13301_TAB != null)
        {   QCG13301_TAB.close();
        }
        QCG13301_TAB = QCG13301_CMD.executeQuery(sqlCommand);
        if (QCG13301_TAB.next())
        {   GLB.STATUS = "";
            QCG13301_TableToFile();
        }
        else
        {   QCG13301_XSEEDEOF = true;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"QCG13301_SelectEvery",sqlCommand);
    }
}
private void QCG13301_TableToFile()
    throws Exception
{   try
    {
       CG133_CDCONTAX = QCG13301_TAB.getDouble("CDCONTAX");
       CG133_CDEMPRES = QCG13301_TAB.getDouble("CDEMPRES");
       CG133_CDMODENF = QCG13301_TAB.getDouble("CDMODENF");
       CG133_CDNATCOM = QCG13301_TAB.getDouble("CDNATCOM");
       CG133_CDNATOPE = QCG13301_TAB.getDouble("CDNATOPE");
       CG133_CDUFMUNI = QCG13301_TAB.getString("CDUFMUNI");
       CG133_DIEMINOT = QCG13301_TAB.getDouble("DIEMINOT");
       CG133_DISAINOT = QCG13301_TAB.getDouble("DISAINOT");
       CG133_INCONFIN = QCG13301_TAB.getDouble("INCONFIN");
       CG133_INDECEND = QCG13301_TAB.getDouble("INDECEND");
       CG133_INORIGEM = QCG13301_TAB.getDouble("INORIGEM");
       CG133_INSITNOT = QCG13301_TAB.getDouble("INSITNOT");
       CG133_INSITREG = QCG13301_TAB.getString("INSITREG");
       CG133_INZONAFR = QCG13301_TAB.getDouble("INZONAFR");
       CG133_NRCFICMP = QCG13301_TAB.getDouble("NRCFICMP");
       CG133_NRNOTAFI = QCG13301_TAB.getDouble("NRNOTAFI");
       CG133_NRNOTFIN = QCG13301_TAB.getDouble("NRNOTFIN");
       CG133_PCICMNAT = QCG13301_TAB.getDouble("PCICMNAT");
       CG133_PCICMPRO = QCG13301_TAB.getDouble("PCICMPRO");
       CG133_TPREGIST = QCG13301_TAB.getDouble("TPREGIST");
       CG133_TPSERIEN = QCG13301_TAB.getString("TPSERIEN");
       CG133_VLBASICM = QCG13301_TAB.getDouble("VLBASICM");
       CG133_VLBASIPI = QCG13301_TAB.getDouble("VLBASIPI");
       CG133_VLBASSTR = QCG13301_TAB.getDouble("VLBASSTR");
       CG133_VLCONTAX = QCG13301_TAB.getDouble("VLCONTAX");
       CG133_VLBASDID = QCG13301_TAB.getDouble("VLBASDID");
       CG133_VLICMDID = QCG13301_TAB.getDouble("VLICMDID");
       CG133_VLICMDIO = QCG13301_TAB.getDouble("VLICMDIO");
       CG133_VLFCPDES = QCG13301_TAB.getDouble("VLFCPDES");
       CG133_VLICMPRO = QCG13301_TAB.getDouble("VLICMPRO");
       CG133_VLICMSTR = QCG13301_TAB.getDouble("VLICMSTR");
       CG133_VLIMPICM = QCG13301_TAB.getDouble("VLIMPICM");
       CG133_VLIMPIPI = QCG13301_TAB.getDouble("VLIMPIPI");
       CG133_VLISEICM = QCG13301_TAB.getDouble("VLISEICM");
       CG133_VLISEIPI = QCG13301_TAB.getDouble("VLISEIPI");
       CG133_VLLIQUID = QCG13301_TAB.getDouble("VLLIQUID");
       CG133_VLOUTICM = QCG13301_TAB.getDouble("VLOUTICM");
       CG133_VLOUTIPI = QCG13301_TAB.getDouble("VLOUTIPI");
       CG133_VLPERICM = QCG13301_TAB.getDouble("VLPERICM");
       CG133_VLPERIPI = QCG13301_TAB.getDouble("VLPERIPI");
       CG133_ROWID = QCG13301_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "QCG13301_TableToFile","");
    }
}
private void QCG13301_MoveNext()
  throws Exception
{    try
     {
        if (QCG13301_XSEEDEOF == true)
        {   return;
        }
        if (QCG13301_XSEEDSEEK == false)
        {   if (QCG13301_TAB.next())
            {    QCG13301_TableToFile();
            }
            else
            {   QCG13301_XSEEDEOF = true;
            }
         }
         else
         {    QCG13301_XSEEDSEEK = false;
         }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"QCG13301_MoveNext","");
    }
}
private String CG12401_DetermineLast(double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG124_XSEEDEOF = false;
        CG124_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG124_FIELDS + " FROM CG124 with (NOLOCK INDEX=CG12401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " CDFILIAL =  " + cStr(CDFILIAL) +  " And ";
        sqlCommand = sqlCommand + " AMMOVTOX =  " + cStr(AMMOVTOX) +  " And ";
        sqlCommand = sqlCommand + " CDFISCAL =  " + cStr(CDFISCAL) +  " And ";
        sqlCommand = sqlCommand + " CDNATCOM =  " + cStr(CDNATCOM) +  " And ";
        sqlCommand = sqlCommand + " INORIGEM =  " + cStr(INORIGEM) +  " And ";
        sqlCommand = sqlCommand + " NRSEQUEN <=  " + cStr(NRSEQUEN);
        sqlCommand = sqlCommand + ") And (" + "INICMIPI = 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,CDNATCOM DESC";
        sqlCommand = sqlCommand + " ,INORIGEM DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG124_CMD == null)
        {   CG124_CMD = CG124_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG124_TAB != null)
        {   CG124_TAB.close();
        }
        CG124_TAB = CG124_CMD.executeQuery(sqlCommand);
        if (CG124_TAB.next())
        {   xsdStatus = "";
            CG124_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG124_FIELDS + " FROM CG124 with (NOLOCK INDEX=CG12401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " CDFILIAL =  " + cStr(CDFILIAL) +  " And ";
        sqlCommand = sqlCommand + " AMMOVTOX =  " + cStr(AMMOVTOX) +  " And ";
        sqlCommand = sqlCommand + " CDFISCAL =  " + cStr(CDFISCAL) +  " And ";
        sqlCommand = sqlCommand + " CDNATCOM =  " + cStr(CDNATCOM) +  " And ";
        sqlCommand = sqlCommand + " INORIGEM <  " + cStr(INORIGEM);
        sqlCommand = sqlCommand + ") And (" + "INICMIPI = 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,CDNATCOM DESC";
        sqlCommand = sqlCommand + " ,INORIGEM DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG124_CMD == null)
        {   CG124_CMD = CG124_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG124_TAB != null)
        {   CG124_TAB.close();
        }
        CG124_TAB = CG124_CMD.executeQuery(sqlCommand);
        if (CG124_TAB.next())
        {   xsdStatus = "";
            CG124_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG124_FIELDS + " FROM CG124 with (NOLOCK INDEX=CG12401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " CDFILIAL =  " + cStr(CDFILIAL) +  " And ";
        sqlCommand = sqlCommand + " AMMOVTOX =  " + cStr(AMMOVTOX) +  " And ";
        sqlCommand = sqlCommand + " CDFISCAL =  " + cStr(CDFISCAL) +  " And ";
        sqlCommand = sqlCommand + " CDNATCOM <  " + cStr(CDNATCOM);
        sqlCommand = sqlCommand + ") And (" + "INICMIPI = 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,CDNATCOM DESC";
        sqlCommand = sqlCommand + " ,INORIGEM DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG124_CMD == null)
        {   CG124_CMD = CG124_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG124_TAB != null)
        {   CG124_TAB.close();
        }
        CG124_TAB = CG124_CMD.executeQuery(sqlCommand);
        if (CG124_TAB.next())
        {   xsdStatus = "";
            CG124_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG124_FIELDS + " FROM CG124 with (NOLOCK INDEX=CG12401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " CDFILIAL =  " + cStr(CDFILIAL) +  " And ";
        sqlCommand = sqlCommand + " AMMOVTOX =  " + cStr(AMMOVTOX) +  " And ";
        sqlCommand = sqlCommand + " CDFISCAL <  " + cStr(CDFISCAL);
        sqlCommand = sqlCommand + ") And (" + "INICMIPI = 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,CDNATCOM DESC";
        sqlCommand = sqlCommand + " ,INORIGEM DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG124_CMD == null)
        {   CG124_CMD = CG124_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG124_TAB != null)
        {   CG124_TAB.close();
        }
        CG124_TAB = CG124_CMD.executeQuery(sqlCommand);
        if (CG124_TAB.next())
        {   xsdStatus = "";
            CG124_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG124_FIELDS + " FROM CG124 with (NOLOCK INDEX=CG12401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " CDFILIAL =  " + cStr(CDFILIAL) +  " And ";
        sqlCommand = sqlCommand + " AMMOVTOX <  " + cStr(AMMOVTOX);
        sqlCommand = sqlCommand + ") And (" + "INICMIPI = 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,CDNATCOM DESC";
        sqlCommand = sqlCommand + " ,INORIGEM DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG124_CMD == null)
        {   CG124_CMD = CG124_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG124_TAB != null)
        {   CG124_TAB.close();
        }
        CG124_TAB = CG124_CMD.executeQuery(sqlCommand);
        if (CG124_TAB.next())
        {   xsdStatus = "";
            CG124_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG124_FIELDS + " FROM CG124 with (NOLOCK INDEX=CG12401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " CDFILIAL <  " + cStr(CDFILIAL);
        sqlCommand = sqlCommand + ") And (" + "INICMIPI = 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,CDNATCOM DESC";
        sqlCommand = sqlCommand + " ,INORIGEM DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG124_CMD == null)
        {   CG124_CMD = CG124_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG124_TAB != null)
        {   CG124_TAB.close();
        }
        CG124_TAB = CG124_CMD.executeQuery(sqlCommand);
        if (CG124_TAB.next())
        {   xsdStatus = "";
            CG124_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG124_FIELDS + " FROM CG124 with (NOLOCK INDEX=CG12401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES <  " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + ") And (" + "INICMIPI = 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,CDNATCOM DESC";
        sqlCommand = sqlCommand + " ,INORIGEM DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG124_CMD == null)
        {   CG124_CMD = CG124_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG124_TAB != null)
        {   CG124_TAB.close();
        }
        CG124_TAB = CG124_CMD.executeQuery(sqlCommand);
        if (CG124_TAB.next())
        {   xsdStatus = "";
            CG124_TableToFile();
            return(xsdStatus);
        }
        CG124_XSEEDEOF = true;
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG124_DetermineLast", sqlCommand);
        return(xsdStatus);
    }
}
private void CG124_InitFile()
{
    CG124_AMMOVTOX = 0;
    CG124_CDAJAPUR = "";
    CG124_CDEMPRES = 0;
    CG124_CDFILIAL = 0;
    CG124_CDFISCAL = 0;
    CG124_CDNATCOM = 0;
    CG124_DIIMPORT = 0;
    CG124_DSIMPOST = "";
    CG124_INICMIPI = 0;
    CG124_INORIGEM = 0;
    CG124_INPROTRI = 0;
    CG124_NRDECEND = 0;
    CG124_NRPROTRI = "";
    CG124_NRSEQUEN = 0;
    CG124_NRSISTRI = 0;
    CG124_TPIMPOST = 0;
    CG124_VLBASICM = 0;
    CG124_VLBASIPI = 0;
    CG124_VLCONTAB = 0;
    CG124_VLIMPICM = 0;
    CG124_VLIMPIPI = 0;
    CG124_VLINTICM = 0;
    CG124_VLINTIPI = 0;
    CG124_VLOUTICM = 0;
    CG124_VLOUTIPI = 0;
}
private void CG124_TableToFile ()
  throws Exception
{   try
    {
        if (CG124_XSEEDEOF == true)
        {    return;
        }
       CG124_AMMOVTOX = CG124_TAB.getDouble("AMMOVTOX");
       CG124_CDEMPRES = CG124_TAB.getDouble("CDEMPRES");
       CG124_CDFILIAL = CG124_TAB.getDouble("CDFILIAL");
       CG124_CDFISCAL = CG124_TAB.getDouble("CDFISCAL");
       CG124_CDNATCOM = CG124_TAB.getDouble("CDNATCOM");
       CG124_DSIMPOST = CG124_TAB.getString("DSIMPOST");
       CG124_INICMIPI = CG124_TAB.getDouble("INICMIPI");
       CG124_INORIGEM = CG124_TAB.getDouble("INORIGEM");
       CG124_TPIMPOST = CG124_TAB.getDouble("TPIMPOST");
       CG124_NRSEQUEN = CG124_TAB.getDouble("NRSEQUEN");
       CG124_VLIMPICM = CG124_TAB.getDouble("VLIMPICM");
       CG124_VLBASICM = CG124_TAB.getDouble("VLBASICM");
       CG124_VLCONTAB = CG124_TAB.getDouble("VLCONTAB");
       CG124_VLINTICM = CG124_TAB.getDouble("VLINTICM");
       CG124_VLOUTICM = CG124_TAB.getDouble("VLOUTICM");
       CG124_NRDECEND = CG124_TAB.getDouble("NRDECEND");
       CG124_VLBASIPI = CG124_TAB.getDouble("VLBASIPI");
       CG124_VLIMPIPI = CG124_TAB.getDouble("VLIMPIPI");
       CG124_VLINTIPI = CG124_TAB.getDouble("VLINTIPI");
       CG124_VLOUTIPI = CG124_TAB.getDouble("VLOUTIPI");
       CG124_ROWID = CG124_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG124_TableToFile","");
    }
}
private void CG124_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG124 (";
        sqlCommand = sqlCommand + " AMMOVTOX";
        sqlCommand = sqlCommand + ",CDAJAPUR";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",CDFILIAL";
        sqlCommand = sqlCommand + ",CDFISCAL";
        sqlCommand = sqlCommand + ",CDNATCOM";
        sqlCommand = sqlCommand + ",DIIMPORT";
        sqlCommand = sqlCommand + ",DSIMPOST";
        sqlCommand = sqlCommand + ",INICMIPI";
        sqlCommand = sqlCommand + ",INORIGEM";
        sqlCommand = sqlCommand + ",INPROTRI";
        sqlCommand = sqlCommand + ",NRDECEND";
        sqlCommand = sqlCommand + ",NRPROTRI";
        sqlCommand = sqlCommand + ",NRSEQUEN";
        sqlCommand = sqlCommand + ",NRSISTRI";
        sqlCommand = sqlCommand + ",TPIMPOST";
        sqlCommand = sqlCommand + ",VLBASICM";
        sqlCommand = sqlCommand + ",VLBASIPI";
        sqlCommand = sqlCommand + ",VLCONTAB";
        sqlCommand = sqlCommand + ",VLIMPICM";
        sqlCommand = sqlCommand + ",VLIMPIPI";
        sqlCommand = sqlCommand + ",VLINTICM";
        sqlCommand = sqlCommand + ",VLINTIPI";
        sqlCommand = sqlCommand + ",VLOUTICM";
        sqlCommand = sqlCommand + ",VLOUTIPI";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CG124_AMMOVTOX);
        sqlCommand = sqlCommand + ",' '";
        sqlCommand = sqlCommand + "," + cStr(CG124_CDEMPRES);
        sqlCommand = sqlCommand + "," + cStr(CG124_CDFILIAL);
        sqlCommand = sqlCommand + "," + cStr(CG124_CDFISCAL);
        sqlCommand = sqlCommand + "," + cStr(CG124_CDNATCOM);
        sqlCommand = sqlCommand + ", 0";
        if (CG124_DSIMPOST.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG124_DSIMPOST)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG124_INICMIPI);
        sqlCommand = sqlCommand + "," + cStr(CG124_INORIGEM);
        sqlCommand = sqlCommand + ", 0";
        sqlCommand = sqlCommand + "," + cStr(CG124_NRDECEND);
        sqlCommand = sqlCommand + ",' '";
        sqlCommand = sqlCommand + "," + cStr(CG124_NRSEQUEN);
        sqlCommand = sqlCommand + ", 0";
        sqlCommand = sqlCommand + "," + cStr(CG124_TPIMPOST);
        sqlCommand = sqlCommand + "," + cStr(CG124_VLBASICM);
        sqlCommand = sqlCommand + "," + cStr(CG124_VLBASIPI);
        sqlCommand = sqlCommand + "," + cStr(CG124_VLCONTAB);
        sqlCommand = sqlCommand + "," + cStr(CG124_VLIMPICM);
        sqlCommand = sqlCommand + "," + cStr(CG124_VLIMPIPI);
        sqlCommand = sqlCommand + "," + cStr(CG124_VLINTICM);
        sqlCommand = sqlCommand + "," + cStr(CG124_VLINTIPI);
        sqlCommand = sqlCommand + "," + cStr(CG124_VLOUTICM);
        sqlCommand = sqlCommand + "," + cStr(CG124_VLOUTIPI);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG124_Insert");
            }
        }
    }
}
private void CG124_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG124 set ";
        sqlCommand = sqlCommand + "AMMOVTOX = " + cStr(CG124_AMMOVTOX);
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(CG124_CDEMPRES);
        sqlCommand = sqlCommand + ",CDFILIAL = " + cStr(CG124_CDFILIAL);
        sqlCommand = sqlCommand + ",CDFISCAL = " + cStr(CG124_CDFISCAL);
        sqlCommand = sqlCommand + ",CDNATCOM = " + cStr(CG124_CDNATCOM);
        if (CG124_DSIMPOST.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",DSIMPOST = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",DSIMPOST = '" + ReplaceQuotes(rTrim(CG124_DSIMPOST)) + "'";
        }
        sqlCommand = sqlCommand + ",INICMIPI = " + cStr(CG124_INICMIPI);
        sqlCommand = sqlCommand + ",INORIGEM = " + cStr(CG124_INORIGEM);
        sqlCommand = sqlCommand + ",TPIMPOST = " + cStr(CG124_TPIMPOST);
        sqlCommand = sqlCommand + ",NRSEQUEN = " + cStr(CG124_NRSEQUEN);
        sqlCommand = sqlCommand + ",VLIMPICM = " + cStr(CG124_VLIMPICM);
        sqlCommand = sqlCommand + ",VLBASICM = " + cStr(CG124_VLBASICM);
        sqlCommand = sqlCommand + ",VLCONTAB = " + cStr(CG124_VLCONTAB);
        sqlCommand = sqlCommand + ",VLINTICM = " + cStr(CG124_VLINTICM);
        sqlCommand = sqlCommand + ",VLOUTICM = " + cStr(CG124_VLOUTICM);
        sqlCommand = sqlCommand + ",NRDECEND = " + cStr(CG124_NRDECEND);
        sqlCommand = sqlCommand + ",VLBASIPI = " + cStr(CG124_VLBASIPI);
        sqlCommand = sqlCommand + ",VLIMPIPI = " + cStr(CG124_VLIMPIPI);
        sqlCommand = sqlCommand + ",VLINTIPI = " + cStr(CG124_VLINTIPI);
        sqlCommand = sqlCommand + ",VLOUTIPI = " + cStr(CG124_VLOUTIPI);
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG124_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG124_Modify");
         }
     }
}
private void CG124_AutoToFile()
{
    CG124_InitFile();
    CG124_AMMOVTOX = AU_CG124_AMMOVTOX;
    CG124_CDEMPRES = AU_CG124_CDEMPRES;
    CG124_CDFILIAL = AU_CG124_CDFILIAL;
    CG124_CDFISCAL = AU_CG124_CDFISCAL;
    CG124_CDNATCOM = AU_CG124_CDNATCOM;
    CG124_DSIMPOST = AU_CG124_DSIMPOST;
    CG124_INICMIPI = AU_CG124_INICMIPI;
    CG124_INORIGEM = AU_CG124_INORIGEM;
    CG124_TPIMPOST = AU_CG124_TPIMPOST;
    CG124_NRSEQUEN = AU_CG124_NRSEQUEN;
    CG124_VLIMPICM = AU_CG124_VLIMPICM;
    CG124_VLBASICM = AU_CG124_VLBASICM;
    CG124_VLCONTAB = AU_CG124_VLCONTAB;
    CG124_VLINTICM = AU_CG124_VLINTICM;
    CG124_VLOUTICM = AU_CG124_VLOUTICM;
    CG124_NRDECEND = AU_CG124_NRDECEND;
    CG124_VLBASIPI = AU_CG124_VLBASIPI;
    CG124_VLIMPIPI = AU_CG124_VLIMPIPI;
    CG124_VLINTIPI = AU_CG124_VLINTIPI;
    CG124_VLOUTIPI = AU_CG124_VLOUTIPI;
    CG124_ROWID = AU_CG124_ROWID;
}
private void CG124_FileToAuto()
{    AU_CG124_AMMOVTOX = CG124_AMMOVTOX;
    AU_CG124_CDEMPRES = CG124_CDEMPRES;
    AU_CG124_CDFILIAL = CG124_CDFILIAL;
    AU_CG124_CDFISCAL = CG124_CDFISCAL;
    AU_CG124_CDNATCOM = CG124_CDNATCOM;
    AU_CG124_DSIMPOST = CG124_DSIMPOST;
    AU_CG124_INICMIPI = CG124_INICMIPI;
    AU_CG124_INORIGEM = CG124_INORIGEM;
    AU_CG124_TPIMPOST = CG124_TPIMPOST;
    AU_CG124_NRSEQUEN = CG124_NRSEQUEN;
    AU_CG124_VLIMPICM = CG124_VLIMPICM;
    AU_CG124_VLBASICM = CG124_VLBASICM;
    AU_CG124_VLCONTAB = CG124_VLCONTAB;
    AU_CG124_VLINTICM = CG124_VLINTICM;
    AU_CG124_VLOUTICM = CG124_VLOUTICM;
    AU_CG124_NRDECEND = CG124_NRDECEND;
    AU_CG124_VLBASIPI = CG124_VLBASIPI;
    AU_CG124_VLIMPIPI = CG124_VLIMPIPI;
    AU_CG124_VLINTIPI = CG124_VLINTIPI;
    AU_CG124_VLOUTIPI = CG124_VLOUTIPI;
    AU_CG124_ROWID = CG124_ROWID;
 }
private void CG124_InitAuto()
{
    AU_CG124_AMMOVTOX = 0;
    AU_CG124_CDEMPRES = 0;
    AU_CG124_CDFILIAL = 0;
    AU_CG124_CDFISCAL = 0;
    AU_CG124_CDNATCOM = 0;
    AU_CG124_DSIMPOST = "";
    AU_CG124_INICMIPI = 0;
    AU_CG124_INORIGEM = 0;
    AU_CG124_TPIMPOST = 0;
    AU_CG124_NRSEQUEN = 0;
    AU_CG124_VLIMPICM = 0;
    AU_CG124_VLBASICM = 0;
    AU_CG124_VLCONTAB = 0;
    AU_CG124_VLINTICM = 0;
    AU_CG124_VLOUTICM = 0;
    AU_CG124_NRDECEND = 0;
    AU_CG124_VLBASIPI = 0;
    AU_CG124_VLIMPIPI = 0;
    AU_CG124_VLINTIPI = 0;
    AU_CG124_VLOUTIPI = 0;
    AU_CG124_ROWID = 0;
}
private String CG13302_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG133_XSEEDEOF = false;
        CG133_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG133_FIELDS + " FROM CG133 with (NOLOCK INDEX=CG13302) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) + " And " +
           " CDNATCOM = " + cStr(CDNATCOM) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) + " And " +
           " CDNATCOM = " + cStr(CDNATCOM) + " And " +
           " INORIGEM = " + cStr(INORIGEM) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG13302_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,CDNATOPE,CDNATCOM,INORIGEM,DIEMINOT, CDEMPRESUntil,CDNATOPEUntil,CDNATCOMUntil,INORIGEMUntil,DIEMINOTUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG13302_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,CDNATOPE,CDNATCOM,INORIGEM,DIEMINOT, CDEMPRESUntil,CDNATOPEUntil,CDNATCOMUntil,INORIGEMUntil,DIEMINOTUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG13302_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,CDNATOPE,CDNATCOM,INORIGEM,DIEMINOT, CDEMPRESUntil,CDNATOPEUntil,CDNATCOMUntil,INORIGEMUntil,DIEMINOTUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG13302_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,CDNATOPE,CDNATCOM,INORIGEM,DIEMINOT, CDEMPRESUntil,CDNATOPEUntil,CDNATCOMUntil,INORIGEMUntil,DIEMINOTUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + CG13302_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,CDNATOPE,CDNATCOM,INORIGEM,DIEMINOT, CDEMPRESUntil,CDNATOPEUntil,CDNATCOMUntil,INORIGEMUntil,DIEMINOTUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDNATOPE  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        sqlCommand = sqlCommand + " ,INORIGEM  ";
        sqlCommand = sqlCommand + " ,DIEMINOT  ";
        if (CG133_CMD == null)
        {   CG133_CMD = CG133_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG133_TAB != null)
        {   CG133_TAB.close();
        }
        CG133_TAB = CG133_CMD.executeQuery(sqlCommand);
        if (CG133_TAB.next())
        {   xsdStatus = "";
            CG133_TableToFile();
        }
        else
        {   CG133_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG13302_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13302_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13302_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13302_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13302_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG13302_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG133_XSEEDEOF == true)
        {   return;
        }
        if (CG133_XSEEDSEEK == false)
        {    if (CG133_TAB.next())
             {    CG133_TableToFile ();
             }
             else
             {    CG133_XSEEDEOF = true;
             }
        }
        {    CG133_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineMoveNext", "");
    }
}
private String CG13303_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double PCICMNAT, double CDEMPRESUntil,double CDNATOPEUntil,double CDNATCOMUntil,double PCICMNATUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG133_XSEEDEOF = false;
        CG133_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG133_FIELDS + " FROM CG133 with (NOLOCK INDEX=CG13303) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) + " And " +
           " CDNATCOM = " + cStr(CDNATCOM) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG13303_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,CDNATOPE,CDNATCOM,PCICMNAT, CDEMPRESUntil,CDNATOPEUntil,CDNATCOMUntil,PCICMNATUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG13303_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,CDNATOPE,CDNATCOM,PCICMNAT, CDEMPRESUntil,CDNATOPEUntil,CDNATCOMUntil,PCICMNATUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG13303_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,CDNATOPE,CDNATCOM,PCICMNAT, CDEMPRESUntil,CDNATOPEUntil,CDNATCOMUntil,PCICMNATUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG13303_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,CDNATOPE,CDNATCOM,PCICMNAT, CDEMPRESUntil,CDNATOPEUntil,CDNATCOMUntil,PCICMNATUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDNATOPE  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        sqlCommand = sqlCommand + " ,PCICMNAT  ";
        if (CG133_CMD == null)
        {   CG133_CMD = CG133_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG133_TAB != null)
        {   CG133_TAB.close();
        }
        CG133_TAB = CG133_CMD.executeQuery(sqlCommand);
        if (CG133_TAB.next())
        {   xsdStatus = "";
            CG133_TableToFile();
        }
        else
        {   CG133_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG13303_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double PCICMNAT, double CDEMPRESUntil,double CDNATOPEUntil,double CDNATCOMUntil,double PCICMNATUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " PCICMNAT >=  " + cStr(PCICMNAT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " PCICMNAT <=  " + cStr(PCICMNATUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13303_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double PCICMNAT, double CDEMPRESUntil,double CDNATOPEUntil,double CDNATCOMUntil,double PCICMNATUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " PCICMNAT >=  " + cStr(PCICMNAT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " PCICMNAT <=  " + cStr(PCICMNATUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13303_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double PCICMNAT, double CDEMPRESUntil,double CDNATOPEUntil,double CDNATCOMUntil,double PCICMNATUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " PCICMNAT >=  " + cStr(PCICMNAT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " PCICMNAT <=  " + cStr(PCICMNATUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13303_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double PCICMNAT, double CDEMPRESUntil,double CDNATOPEUntil,double CDNATCOMUntil,double PCICMNATUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " PCICMNAT >=  " + cStr(PCICMNAT) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " PCICMNAT <=  " + cStr(PCICMNATUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG13303_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG133_XSEEDEOF == true)
        {   return;
        }
        if (CG133_XSEEDSEEK == false)
        {    if (CG133_TAB.next())
             {    CG133_TableToFile ();
             }
             else
             {    CG133_XSEEDEOF = true;
             }
        }
        {    CG133_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineMoveNext", "");
    }
}
private String CG13304_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCONFIN ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,double INCONFINUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG133_XSEEDEOF = false;
        CG133_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG133_FIELDS + " FROM CG133 with (NOLOCK INDEX=CG13304) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " INCONFIN = " + cStr(INCONFIN) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " INCONFIN = " + cStr(INCONFIN) + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " INCONFIN = " + cStr(INCONFIN) + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) + " And " +
           " CDNATCOM = " + cStr(CDNATCOM) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG13304_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,INCONFIN,CDNATOPE,CDNATCOM,DIEMINOT, CDEMPRESUntil,INCONFINUntil,CDNATOPEUntil,CDNATCOMUntil,DIEMINOTUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG13304_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,INCONFIN,CDNATOPE,CDNATCOM,DIEMINOT, CDEMPRESUntil,INCONFINUntil,CDNATOPEUntil,CDNATCOMUntil,DIEMINOTUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG13304_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,INCONFIN,CDNATOPE,CDNATCOM,DIEMINOT, CDEMPRESUntil,INCONFINUntil,CDNATOPEUntil,CDNATCOMUntil,DIEMINOTUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG13304_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,INCONFIN,CDNATOPE,CDNATCOM,DIEMINOT, CDEMPRESUntil,INCONFINUntil,CDNATOPEUntil,CDNATCOMUntil,DIEMINOTUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + CG13304_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,INCONFIN,CDNATOPE,CDNATCOM,DIEMINOT, CDEMPRESUntil,INCONFINUntil,CDNATOPEUntil,CDNATCOMUntil,DIEMINOTUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,INCONFIN  ";
        sqlCommand = sqlCommand + " ,CDNATOPE  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        sqlCommand = sqlCommand + " ,DIEMINOT  ";
        if (CG133_CMD == null)
        {   CG133_CMD = CG133_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG133_TAB != null)
        {   CG133_TAB.close();
        }
        CG133_TAB = CG133_CMD.executeQuery(sqlCommand);
        if (CG133_TAB.next())
        {   xsdStatus = "";
            CG133_TableToFile();
        }
        else
        {   CG133_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG13304_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCONFIN ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,double INCONFINUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INCONFIN =  " + cStr(INCONFIN) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INCONFIN =  " + cStr(INCONFIN) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INCONFIN =  " + cStr(INCONFIN) + " And " +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INCONFIN >  " + cStr(INCONFIN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INCONFIN =  " + cStr(INCONFINUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INCONFIN =  " + cStr(INCONFINUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INCONFIN =  " + cStr(INCONFINUntil) + " And " +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INCONFIN <  " + cStr(INCONFINUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13304_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCONFIN ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,double INCONFINUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " INCONFIN =  " + cStr(INCONFIN) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INCONFIN =  " + cStr(INCONFIN) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INCONFIN =  " + cStr(INCONFIN) + " And " +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INCONFIN >  " + cStr(INCONFIN) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " INCONFIN =  " + cStr(INCONFINUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INCONFIN =  " + cStr(INCONFINUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INCONFIN =  " + cStr(INCONFINUntil) + " And " +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INCONFIN <  " + cStr(INCONFINUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13304_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCONFIN ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,double INCONFINUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13304_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCONFIN ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,double INCONFINUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13304_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCONFIN ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,double INCONFINUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG13304_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG133_XSEEDEOF == true)
        {   return;
        }
        if (CG133_XSEEDSEEK == false)
        {    if (CG133_TAB.next())
             {    CG133_TableToFile ();
             }
             else
             {    CG133_XSEEDEOF = true;
             }
        }
        {    CG133_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineMoveNext", "");
    }
}
private String CG13305_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INDECEND ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double INDECENDUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG133_XSEEDEOF = false;
        CG133_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG133_FIELDS + " FROM CG133 with (NOLOCK INDEX=CG13305) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " INDECEND = " + cStr(INDECEND) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " INDECEND = " + cStr(INDECEND) + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " INDECEND = " + cStr(INDECEND) + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) + " And " +
           " CDNATCOM = " + cStr(CDNATCOM) +
           " ) And (";
           break;
         case 5:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " INDECEND = " + cStr(INDECEND) + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) + " And " +
           " CDNATCOM = " + cStr(CDNATCOM) + " And " +
           " INORIGEM = " + cStr(INORIGEM) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG13305_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,INDECEND,CDNATOPE,CDNATCOM,INORIGEM,DIEMINOT, CDEMPRESUntil,INDECENDUntil,CDNATOPEUntil,CDNATCOMUntil,INORIGEMUntil,DIEMINOTUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG13305_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,INDECEND,CDNATOPE,CDNATCOM,INORIGEM,DIEMINOT, CDEMPRESUntil,INDECENDUntil,CDNATOPEUntil,CDNATCOMUntil,INORIGEMUntil,DIEMINOTUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG13305_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,INDECEND,CDNATOPE,CDNATCOM,INORIGEM,DIEMINOT, CDEMPRESUntil,INDECENDUntil,CDNATOPEUntil,CDNATCOMUntil,INORIGEMUntil,DIEMINOTUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG13305_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,INDECEND,CDNATOPE,CDNATCOM,INORIGEM,DIEMINOT, CDEMPRESUntil,INDECENDUntil,CDNATOPEUntil,CDNATCOMUntil,INORIGEMUntil,DIEMINOTUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + CG13305_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,INDECEND,CDNATOPE,CDNATCOM,INORIGEM,DIEMINOT, CDEMPRESUntil,INDECENDUntil,CDNATOPEUntil,CDNATCOMUntil,INORIGEMUntil,DIEMINOTUntil);
          break;
        case 5:
           sqlCommand = sqlCommand + CG13305_DetermineGroupFrom_5 (DtgFix, FlagUntil, CDEMPRES,INDECEND,CDNATOPE,CDNATCOM,INORIGEM,DIEMINOT, CDEMPRESUntil,INDECENDUntil,CDNATOPEUntil,CDNATCOMUntil,INORIGEMUntil,DIEMINOTUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,INDECEND  ";
        sqlCommand = sqlCommand + " ,CDNATOPE  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        sqlCommand = sqlCommand + " ,INORIGEM  ";
        sqlCommand = sqlCommand + " ,DIEMINOT  ";
        if (CG133_CMD == null)
        {   CG133_CMD = CG133_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG133_TAB != null)
        {   CG133_TAB.close();
        }
        CG133_TAB = CG133_CMD.executeQuery(sqlCommand);
        if (CG133_TAB.next())
        {   xsdStatus = "";
            CG133_TableToFile();
        }
        else
        {   CG133_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG13305_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INDECEND ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double INDECENDUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INDECEND =  " + cStr(INDECEND) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INDECEND =  " + cStr(INDECEND) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INDECEND =  " + cStr(INDECEND) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INDECEND =  " + cStr(INDECEND) + " And " +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INDECEND >  " + cStr(INDECEND) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INDECEND =  " + cStr(INDECENDUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INDECEND =  " + cStr(INDECENDUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INDECEND =  " + cStr(INDECENDUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INDECEND =  " + cStr(INDECENDUntil) + " And " +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INDECEND <  " + cStr(INDECENDUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13305_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INDECEND ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double INDECENDUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " INDECEND =  " + cStr(INDECEND) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INDECEND =  " + cStr(INDECEND) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INDECEND =  " + cStr(INDECEND) + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INDECEND =  " + cStr(INDECEND) + " And " +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INDECEND >  " + cStr(INDECEND) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " INDECEND =  " + cStr(INDECENDUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INDECEND =  " + cStr(INDECENDUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INDECEND =  " + cStr(INDECENDUntil) + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INDECEND =  " + cStr(INDECENDUntil) + " And " +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INDECEND <  " + cStr(INDECENDUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13305_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INDECEND ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double INDECENDUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13305_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INDECEND ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double INDECENDUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13305_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INDECEND ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double INDECENDUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13305_DetermineGroupFrom_5(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INDECEND ,double CDNATOPE ,double CDNATCOM ,double INORIGEM ,double DIEMINOT, double CDEMPRESUntil,double INDECENDUntil,double CDNATOPEUntil,double CDNATCOMUntil,double INORIGEMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG13305_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG133_XSEEDEOF == true)
        {   return;
        }
        if (CG133_XSEEDSEEK == false)
        {    if (CG133_TAB.next())
             {    CG133_TableToFile ();
             }
             else
             {    CG133_XSEEDEOF = true;
             }
        }
        {    CG133_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineMoveNext", "");
    }
}
private String CG13306_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,String CDUFMUNI ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,String CDUFMUNIUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG133_XSEEDEOF = false;
        CG133_XSEEDSEEK = true;
        CDUFMUNI = rTrim(CDUFMUNI);
        if (CDUFMUNI.equals("") == true)
        {   CDUFMUNI = " ";
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG133_FIELDS + " FROM CG133 with (NOLOCK INDEX=CG13306) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDUFMUNI = '" + CDUFMUNI + "'" +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDUFMUNI = '" + CDUFMUNI + "'" + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDUFMUNI = '" + CDUFMUNI + "'" + " And " +
           " CDNATOPE = " + cStr(CDNATOPE) + " And " +
           " CDNATCOM = " + cStr(CDNATCOM) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG13306_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,CDUFMUNI,CDNATOPE,CDNATCOM,DIEMINOT, CDEMPRESUntil,CDUFMUNIUntil,CDNATOPEUntil,CDNATCOMUntil,DIEMINOTUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG13306_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,CDUFMUNI,CDNATOPE,CDNATCOM,DIEMINOT, CDEMPRESUntil,CDUFMUNIUntil,CDNATOPEUntil,CDNATCOMUntil,DIEMINOTUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG13306_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,CDUFMUNI,CDNATOPE,CDNATCOM,DIEMINOT, CDEMPRESUntil,CDUFMUNIUntil,CDNATOPEUntil,CDNATCOMUntil,DIEMINOTUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG13306_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,CDUFMUNI,CDNATOPE,CDNATCOM,DIEMINOT, CDEMPRESUntil,CDUFMUNIUntil,CDNATOPEUntil,CDNATCOMUntil,DIEMINOTUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + CG13306_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,CDUFMUNI,CDNATOPE,CDNATCOM,DIEMINOT, CDEMPRESUntil,CDUFMUNIUntil,CDNATOPEUntil,CDNATCOMUntil,DIEMINOTUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDUFMUNI  ";
        sqlCommand = sqlCommand + " ,CDNATOPE  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        sqlCommand = sqlCommand + " ,DIEMINOT  ";
        if (CG133_CMD == null)
        {   CG133_CMD = CG133_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG133_TAB != null)
        {   CG133_TAB.close();
        }
        CG133_TAB = CG133_CMD.executeQuery(sqlCommand);
        if (CG133_TAB.next())
        {   xsdStatus = "";
            CG133_TableToFile();
        }
        else
        {   CG133_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG13306_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,String CDUFMUNI ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,String CDUFMUNIUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDUFMUNI >  '" + ReplaceQuotes(CDUFMUNI) + "' " +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
      " CDUFMUNI <  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13306_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,String CDUFMUNI ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,String CDUFMUNIUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDUFMUNI >  '" + ReplaceQuotes(CDUFMUNI) + "' " +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
      " CDUFMUNI <  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13306_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,String CDUFMUNI ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,String CDUFMUNIUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE =  " + cStr(CDNATOPE) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATOPE >  " + cStr(CDNATOPE) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE =  " + cStr(CDNATOPEUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATOPE <  " + cStr(CDNATOPEUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13306_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,String CDUFMUNI ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,String CDUFMUNIUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13306_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,String CDUFMUNI ,double CDNATOPE ,double CDNATCOM ,double DIEMINOT, double CDEMPRESUntil,String CDUFMUNIUntil,double CDNATOPEUntil,double CDNATCOMUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG13306_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG133_XSEEDEOF == true)
        {   return;
        }
        if (CG133_XSEEDSEEK == false)
        {    if (CG133_TAB.next())
             {    CG133_TableToFile ();
             }
             else
             {    CG133_XSEEDEOF = true;
             }
        }
        {    CG133_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineMoveNext", "");
    }
}
private String CG124_Lock()
   throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "select /*+ CGR032 */ " + ODBC_CG124_FIELDS + " from CG124 ";
        sqlCommand = sqlCommand + " WITH (UPDLOCK INDEX=FCG124ROWID) where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG124_ROWID);
        if (CG124_Lk.CMD == null)
        {   CG124_Lk.CMD = GLB.CONNECTION.createStatement();
        }
        if (CG124_Lk.TAB != null)
        {   CG124_Lk.TAB.close();
        }
        CG124_Lk.TAB = CG124_Lk.CMD.executeQuery(sqlCommand);
        if (CG124_Lk.TAB.next() == true)
        {   xsdStatus = "";
            CG124_TableToFile(CG124_Lk);
        }
        else
        {   CG124_Lk.EOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG124_Lock",sqlCommand);
        return(xsdStatus);
    }
}
private void CG124_TableToFile (XseedJDBC pXseedJDBC )
  throws Exception
{   try
    {
        if (pXseedJDBC.EOF == true)
        {    return;
        }
       CG124_AMMOVTOX = pXseedJDBC.TAB.getDouble("AMMOVTOX");
       CG124_CDEMPRES = pXseedJDBC.TAB.getDouble("CDEMPRES");
       CG124_CDFILIAL = pXseedJDBC.TAB.getDouble("CDFILIAL");
       CG124_CDFISCAL = pXseedJDBC.TAB.getDouble("CDFISCAL");
       CG124_CDNATCOM = pXseedJDBC.TAB.getDouble("CDNATCOM");
       CG124_DSIMPOST = pXseedJDBC.TAB.getString("DSIMPOST");
       CG124_INICMIPI = pXseedJDBC.TAB.getDouble("INICMIPI");
       CG124_INORIGEM = pXseedJDBC.TAB.getDouble("INORIGEM");
       CG124_TPIMPOST = pXseedJDBC.TAB.getDouble("TPIMPOST");
       CG124_NRSEQUEN = pXseedJDBC.TAB.getDouble("NRSEQUEN");
       CG124_VLIMPICM = pXseedJDBC.TAB.getDouble("VLIMPICM");
       CG124_VLBASICM = pXseedJDBC.TAB.getDouble("VLBASICM");
       CG124_VLCONTAB = pXseedJDBC.TAB.getDouble("VLCONTAB");
       CG124_VLINTICM = pXseedJDBC.TAB.getDouble("VLINTICM");
       CG124_VLOUTICM = pXseedJDBC.TAB.getDouble("VLOUTICM");
       CG124_NRDECEND = pXseedJDBC.TAB.getDouble("NRDECEND");
       CG124_VLBASIPI = pXseedJDBC.TAB.getDouble("VLBASIPI");
       CG124_VLIMPIPI = pXseedJDBC.TAB.getDouble("VLIMPIPI");
       CG124_VLINTIPI = pXseedJDBC.TAB.getDouble("VLINTIPI");
       CG124_VLOUTIPI = pXseedJDBC.TAB.getDouble("VLOUTIPI");
       CG124_ROWID = pXseedJDBC.TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG124_TableToFile","");
    }
}
private String CG12401_DetermineEvery(double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        CG124_XSEEDEOF = false;
        CG124_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG124_FIELDS + " FROM CG124 with (NOLOCK INDEX=CG12401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDFILIAL = " + cStr(CDFILIAL);
        sqlCommand = sqlCommand + "  And AMMOVTOX = " + cStr(AMMOVTOX);
        sqlCommand = sqlCommand + "  And CDFISCAL = " + cStr(CDFISCAL);
        sqlCommand = sqlCommand + "  And CDNATCOM = " + cStr(CDNATCOM);
        sqlCommand = sqlCommand + "  And INORIGEM = " + cStr(INORIGEM);
        sqlCommand = sqlCommand + "  And NRSEQUEN = " + cStr(NRSEQUEN);
        sqlCommand = sqlCommand + ") And (" + "INICMIPI = 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,AMMOVTOX  ";
        sqlCommand = sqlCommand + " ,CDFISCAL  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        sqlCommand = sqlCommand + " ,INORIGEM  ";
        sqlCommand = sqlCommand + " ,NRSEQUEN  ";
        if (CG124_CMD == null)
        {   CG124_CMD = CG124_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG124_TAB != null)
        {   CG124_TAB.close();
        }
        CG124_TAB = CG124_CMD.executeQuery(sqlCommand);
        if (CG124_TAB.next())
        {   xsdStatus = "";
            CG124_TableToFile();
        }
        else
        {   CG124_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG124_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CG12401_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG124_XSEEDEOF == true)
        {   return;
        }
        if (CG124_XSEEDSEEK == false)
        {    if (CG124_TAB.next())
             {    CG124_TableToFile ();
             }
             else
             {    CG124_XSEEDEOF = true;
             }
        }
        {    CG124_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG124_DetermineMoveNext", "");
    }
}
private String CG12403_DetermineEvery(double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double NRDECEND ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        CG124_XSEEDEOF = false;
        CG124_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG124_FIELDS + " FROM CG124 with (NOLOCK INDEX=CG12403) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDFILIAL = " + cStr(CDFILIAL);
        sqlCommand = sqlCommand + "  And AMMOVTOX = " + cStr(AMMOVTOX);
        sqlCommand = sqlCommand + "  And NRDECEND = " + cStr(NRDECEND);
        sqlCommand = sqlCommand + "  And CDFISCAL = " + cStr(CDFISCAL);
        sqlCommand = sqlCommand + "  And CDNATCOM = " + cStr(CDNATCOM);
        sqlCommand = sqlCommand + "  And INORIGEM = " + cStr(INORIGEM);
        sqlCommand = sqlCommand + "  And NRSEQUEN = " + cStr(NRSEQUEN);
        sqlCommand = sqlCommand + ") And (" + "INICMIPI <> 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,AMMOVTOX  ";
        sqlCommand = sqlCommand + " ,NRDECEND  ";
        sqlCommand = sqlCommand + " ,CDFISCAL  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        sqlCommand = sqlCommand + " ,INORIGEM  ";
        sqlCommand = sqlCommand + " ,NRSEQUEN  ";
        if (CG124_CMD == null)
        {   CG124_CMD = CG124_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG124_TAB != null)
        {   CG124_TAB.close();
        }
        CG124_TAB = CG124_CMD.executeQuery(sqlCommand);
        if (CG124_TAB.next())
        {   xsdStatus = "";
            CG124_TableToFile();
        }
        else
        {   CG124_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG124_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CG12403_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG124_XSEEDEOF == true)
        {   return;
        }
        if (CG124_XSEEDSEEK == false)
        {    if (CG124_TAB.next())
             {    CG124_TableToFile ();
             }
             else
             {    CG124_XSEEDEOF = true;
             }
        }
        {    CG124_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG124_DetermineMoveNext", "");
    }
}
private String AV10101_DetermineEvery(double CDEMPRES ,double CDCLIENT)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        AV101_XSEEDEOF = false;
        AV101_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_AV101_FIELDS + " FROM AV101 with (NOLOCK INDEX=AV10101) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDCLIENT = " + cStr(CDCLIENT);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDCLIENT  ";
        if (AV101_CMD == null)
        {   AV101_CMD = AV101_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (AV101_TAB != null)
        {   AV101_TAB.close();
        }
        AV101_TAB = AV101_CMD.executeQuery(sqlCommand);
        if (AV101_TAB.next())
        {   xsdStatus = "";
            AV101_TableToFile();
        }
        else
        {   AV101_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"AV101_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void AV10101_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (AV101_XSEEDEOF == true)
        {   return;
        }
        if (AV101_XSEEDSEEK == false)
        {    if (AV101_TAB.next())
             {    AV101_TableToFile ();
             }
             else
             {    AV101_XSEEDEOF = true;
             }
        }
        {    AV101_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"AV101_DetermineMoveNext", "");
    }
}
private void AV101_InitFile()
{
    AV101_AMCADAST = 0;
    AV101_AMREACLI = 0;
    AV101_CDAGEAUX = 0;
    AV101_CDAGEFOR = 0;
    AV101_CDAGENCI = 0;
    AV101_CDBANAUX = 0;
    AV101_CDBANCOX = 0;
    AV101_CDBANFOR = 0;
    AV101_CDBLOQUE = 0;
    AV101_CDCATCLI = 0;
    AV101_CDCLICCI = 0;
    AV101_CDCLIENT = 0;
    AV101_CDCLIORD = 0;
    AV101_CDCLIVIP = "";
    AV101_CDCONSVD = 0;
    AV101_CDDCTFOR = "";
    AV101_CDDESMER = 0;
    AV101_CDDIGAGE = "";
    AV101_CDDIGCON = "";
    AV101_CDDIGFOR = "";
    AV101_CDDOPAIS = 0;
    AV101_CDEANCLI = "";
    AV101_CDEANENT = "";
    AV101_CDEANFAT = "";
    AV101_CDEMPRES = 0;
    AV101_CDFILFAT = 0;
    AV101_CDFISJUR = 0;
    AV101_CDFRETEX = 0;
    AV101_CDGERENT = 0;
    AV101_CDMERCAD = 0;
    AV101_CDMERNEG = 0;
    AV101_CDMOTEXC = 0;
    AV101_CDPAIDES = 0;
    AV101_CDPAISEN = 0;
    AV101_CDPAISFA = 0;
    AV101_CDPAISPG = 0;
    AV101_CDREEMBO = 0;
    AV101_CDREGIAO = 0;
    AV101_CDREGINT = 0;
    AV101_CDREPRES = 0;
    AV101_CDSENEXT = "";
    AV101_CDSUFRAM = "";
    AV101_CDTEXORD = 0;
    AV101_CDTEXPDF = 0;
    AV101_CDTEXTNF = 0;
    AV101_CDTRADER = 0;
    AV101_CDVDCONS = 0;
    AV101_CDVENDED = 0;
    AV101_CDVENPRE = 0;
    AV101_DDVENCCD = 0;
    AV101_DIACEEXT = 0;
    AV101_DIALTCAD = 0;
    AV101_DIALTOBF = 0;
    AV101_DIBLOQUE = 0;
    AV101_DIFUNDAC = 0;
    AV101_DIMOTEXC = 0;
    AV101_DIREATIV = 0;
    AV101_DIULTNOT = 0;
    AV101_DIULTPED = 0;
    AV101_DIVALSUF = 0;
    AV101_DSBAIENT = "";
    AV101_DSBAIPAG = "";
    AV101_DSBAIRRO = "";
    AV101_DSCOMPEN = "";
    AV101_DSCOMPLO = "";
    AV101_DSCOMPPG = "";
    AV101_DSENDENT = "";
    AV101_DSENDERE = "";
    AV101_DSLATITU = "";
    AV101_DSLONGIT = "";
    AV101_DSPRAPAG = "";
    AV101_DSSITEXX = "";
    AV101_INACOPED = 0;
    AV101_INCGCDUP = 0;
    AV101_INCLIDDA = 0;
    AV101_INCLIMEI = 0;
    AV101_INCLSMEI = 0;
    AV101_INCOMELE = 0;
    AV101_INDESPIS = 0;
    AV101_INEMINFI = 0;
    AV101_INENVEMA = 0;
    AV101_INENVPDF = 0;
    AV101_INFATVOL = 0;
    AV101_INIMPBOL = 0;
    AV101_INIMPNFC = 0;
    AV101_INJUNCAO = 0;
    AV101_INNFCORX = 0;
    AV101_INPREFER = 0;
    AV101_INPROSAV = 0;
    AV101_INRELREP = 0;
    AV101_INSALPED = 0;
    AV101_INSEPBON = 0;
    AV101_INSIMNAC = 0;
    AV101_INSITREG = "";
    AV101_INSITUAC = 0;
    AV101_INSUTRIB = 0;
    AV101_INTELPED = 0;
    AV101_NMCARCON = "";
    AV101_NMCLIENT = "";
    AV101_NMEMACPG = "";
    AV101_NMEMADEV = "";
    AV101_NMEMAIL1 = "";
    AV101_NMEMAILX = "";
    AV101_NMEMANF2 = "";
    AV101_NMEMANFE = "";
    AV101_NMEMAXML = "";
    AV101_NMFANTAS = "";
    AV101_NMPESCON = "";
    AV101_NMPESXML = "";
    AV101_NRBLOQUE = 0;
    AV101_NRCELDDD = 0;
    AV101_NRCELNUM = 0;
    AV101_NRCEPCEN = 0;
    AV101_NRCEPCFA = 0;
    AV101_NRCEPCOM = 0;
    AV101_NRCEPCPG = 0;
    AV101_NRCEPENT = 0;
    AV101_NRCEPFAT = 0;
    AV101_NRCEPLOC = 0;
    AV101_NRCEPPAG = 0;
    AV101_NRCFDFXX = "";
    AV101_NRCGCDIG = 0;
    AV101_NRCGCFIL = 0;
    AV101_NRCGCNUM = 0;
    AV101_NRCGCPRI = 0;
    AV101_NRCTACOR = "";
    AV101_NRCTAFOR = 0;
    AV101_NRDDDXML = 0;
    AV101_NRENDENT = 0;
    AV101_NRENDLOC = 0;
    AV101_NRENDPAG = 0;
    AV101_NRFAXDDD = 0;
    AV101_NRFAXNUM = 0;
    AV101_NRINSCRE = "";
    AV101_NRINSMUN = "";
    AV101_NRTELDDD = 0;
    AV101_NRTELNUM = 0;
    AV101_NRTELXML = 0;
    AV101_NRUSUALT = 0;
    AV101_NRUSUARI = 0;
    AV101_NRUSUOBF = 0;
    AV101_NRUSUREA = 0;
    AV101_NRVOLUMI = 0;
    AV101_NRZAPDDD = 0;
    AV101_NRZAPNUM = 0;
    AV101_PCDESPCO = 0;
    AV101_PCPARFRE = 0;
    AV101_PCVENCCD = 0;
    AV101_THALTOBF = 0;
    AV101_TPCADCLI = 0;
    AV101_TPCLIENT = 0;
    AV101_TPESTABE = 0;
    AV101_TPPORAUX = 0;
    AV101_TPPORTAD = 0;
    AV101_TPVENDAX = 0;
    AV101_VLULTPED = 0;
}
private void AV101_TableToFile ()
  throws Exception
{   try
    {
        if (AV101_XSEEDEOF == true)
        {    return;
        }
       AV101_NMCLIENT = AV101_TAB.getString("NMCLIENT");
       AV101_CDDOPAIS = AV101_TAB.getDouble("CDDOPAIS");
       AV101_NRCEPLOC = AV101_TAB.getDouble("NRCEPLOC");
       AV101_NRCEPCOM = AV101_TAB.getDouble("NRCEPCOM");
       AV101_CDFISJUR = AV101_TAB.getDouble("CDFISJUR");
       AV101_INSIMNAC = AV101_TAB.getDouble("INSIMNAC");
       AV101_CDVDCONS = AV101_TAB.getDouble("CDVDCONS");
       AV101_ROWID = AV101_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "AV101_TableToFile","");
    }
}
private String SU10101_DetermineEvery(double CDEMPRES ,double CDFORNEC)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        SU101_XSEEDEOF = false;
        SU101_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_SU101_FIELDS + " FROM SU101 with (NOLOCK INDEX=SU10101) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDFORNEC = " + cStr(CDFORNEC);
        sqlCommand = sqlCommand + ") And (" + "TPFORNEC <= 90";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFORNEC  ";
        if (SU101_CMD == null)
        {   SU101_CMD = SU101_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (SU101_TAB != null)
        {   SU101_TAB.close();
        }
        SU101_TAB = SU101_CMD.executeQuery(sqlCommand);
        if (SU101_TAB.next())
        {   xsdStatus = "";
            SU101_TableToFile();
        }
        else
        {   SU101_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"SU101_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void SU10101_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (SU101_XSEEDEOF == true)
        {   return;
        }
        if (SU101_XSEEDSEEK == false)
        {    if (SU101_TAB.next())
             {    SU101_TableToFile ();
             }
             else
             {    SU101_XSEEDEOF = true;
             }
        }
        {    SU101_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"SU101_DetermineMoveNext", "");
    }
}
private void SU101_InitFile()
{
    SU101_CDAGENCI = 0;
    SU101_CDALMOXA = 0;
    SU101_CDBANCOX = 0;
    SU101_CDBLOFOR = 0;
    SU101_CDCLAFOR = "";
    SU101_CDCREICM = 0;
    SU101_CDCREIPI = 0;
    SU101_CDCTACON = 0;
    SU101_CDCTAMPT = 0;
    SU101_CDCTDIND = 0;
    SU101_CDDEBIPI = 0;
    SU101_CDDIGAGE = "";
    SU101_CDDIVNEG = 0;
    SU101_CDDOPAIS = 0;
    SU101_CDEMPRES = 0;
    SU101_CDFISJUR = 0;
    SU101_CDFORNEC = 0;
    SU101_CDLOCFOR = 0;
    SU101_CDNAOFUN = 0;
    SU101_CDREMICR = 0;
    SU101_CDREMIDB = 0;
    SU101_CDSENEXT = "";
    SU101_CDTEXTNF = 0;
    SU101_CDTRARES = 0;
    SU101_DICADAST = 0;
    SU101_DIVALCER = 0;
    SU101_DIVALLAO = 0;
    SU101_DSBAIRRO = "";
    SU101_DSCOMEND = "";
    SU101_DSENDERE = "";
    SU101_DSENDMAN = "";
    SU101_DSSITAGE = "";
    SU101_INCOCPRB = 0;
    SU101_INCTASAL = 0;
    SU101_INDCTFRE = 0;
    SU101_INFORIMP = 0;
    SU101_INICMSFR = 0;
    SU101_INMAIPES = 0;
    SU101_INPISCOF = 0;
    SU101_INPRESER = 0;
    SU101_INPRORUR = 0;
    SU101_INSITREG = "";
    SU101_INTARQUI = 0;
    SU101_INTRTFRE = 0;
    SU101_NMCOMERL = "";
    SU101_NMEMAAC1 = "";
    SU101_NMEMAACO = "";
    SU101_NMEMAAGE = "";
    SU101_NMEMACO1 = "";
    SU101_NMEMACO2 = "";
    SU101_NMEMACO3 = "";
    SU101_NMEMACO4 = "";
    SU101_NMEMACOL = "";
    SU101_NMEMAIL1 = "";
    SU101_NMEMAILX = "";
    SU101_NMEMANF2 = "";
    SU101_NMEMANFE = "";
    SU101_NMEMAXML = "";
    SU101_NMFORNEC = "";
    SU101_NMPESTIT = "";
    SU101_NMPESXML = "";
    SU101_NRCEPCOM = 0;
    SU101_NRCEPLOC = 0;
    SU101_NRCGCDIG = 0;
    SU101_NRCGCFIL = 0;
    SU101_NRCGCNUM = 0;
    SU101_NRCGCPRI = 0;
    SU101_NRCTACOR = "";
    SU101_NRCXPOST = "";
    SU101_NRCXPSTM = 0;
    SU101_NRDDDXML = 0;
    SU101_NRDIACRE = 0;
    SU101_NRENDCOM = 0;
    SU101_NRENDLOC = 0;
    SU101_NRFACSIM = "";
    SU101_NRINSCRE = "";
    SU101_NRINSMUN = "";
    SU101_NRPTOQUA = 0;
    SU101_NRRAMALX = "";
    SU101_NRREMRET = 0;
    SU101_NRTABTAR = 0;
    SU101_NRTELEFO = "";
    SU101_NRTELEXX = "";
    SU101_NRTELXML = 0;
    SU101_NRULTVOL = 0;
    SU101_PCJURFOR = 0;
    SU101_QTMESRES = 0;
    SU101_QTMINFRC = 0;
    SU101_THCOLETA = 0;
    SU101_TPARQFRE = 0;
    SU101_TPFORNEC = 0;
    SU101_TPFRECUB = 0;
    SU101_VLCONVM3 = 0;
}
private void SU101_TableToFile ()
  throws Exception
{   try
    {
        if (SU101_XSEEDEOF == true)
        {    return;
        }
       SU101_NMFORNEC = SU101_TAB.getString("NMFORNEC");
       SU101_CDDOPAIS = SU101_TAB.getDouble("CDDOPAIS");
       SU101_NRCEPLOC = SU101_TAB.getDouble("NRCEPLOC");
       SU101_CDFISJUR = SU101_TAB.getDouble("CDFISJUR");
       SU101_ROWID = SU101_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "SU101_TableToFile","");
    }
}
private String MK10201_DetermineEvery(double CDEMPRES ,double CDPROFES)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        MK102_XSEEDEOF = false;
        MK102_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_MK102_FIELDS + " FROM MK102 with (NOLOCK INDEX=MK10201) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDPROFES = " + cStr(CDPROFES);
        sqlCommand = sqlCommand + ") And (" + "INSITREG <> 'D'";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDPROFES  ";
        if (MK102_CMD == null)
        {   MK102_CMD = MK102_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (MK102_TAB != null)
        {   MK102_TAB.close();
        }
        MK102_TAB = MK102_CMD.executeQuery(sqlCommand);
        if (MK102_TAB.next())
        {   xsdStatus = "";
            MK102_TableToFile();
        }
        else
        {   MK102_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"MK102_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void MK10201_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (MK102_XSEEDEOF == true)
        {   return;
        }
        if (MK102_XSEEDSEEK == false)
        {    if (MK102_TAB.next())
             {    MK102_TableToFile ();
             }
             else
             {    MK102_XSEEDEOF = true;
             }
        }
        {    MK102_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"MK102_DetermineMoveNext", "");
    }
}
private void MK102_InitFile()
{
    MK102_AMULTPAG = 0;
    MK102_CDAGENCI = 0;
    MK102_CDBANCOX = 0;
    MK102_CDDIGAGE = "";
    MK102_CDDOPAIS = 0;
    MK102_CDEMPRES = 0;
    MK102_CDIDEEMI = "";
    MK102_CDLOCCLI = 0;
    MK102_CDPAICOM = 0;
    MK102_CDPROFES = 0;
    MK102_CDSEXOXX = "";
    MK102_DIALTCAD = 0;
    MK102_DIEXCLUS = 0;
    MK102_DIIMPLAN = 0;
    MK102_DINASCIM = 0;
    MK102_DSBAICOM = "";
    MK102_DSBAIRRO = "";
    MK102_DSCOMCOM = "";
    MK102_DSCOMEND = "";
    MK102_DSENDCOM = "";
    MK102_DSENDERE = "";
    MK102_DSPRIPAR = "";
    MK102_DSZONCOM = "";
    MK102_DSZONURB = "";
    MK102_INATIVOX = 0;
    MK102_INLISTAS = 0;
    MK102_INRESCOM = 0;
    MK102_INSITREG = "";
    MK102_NMEMAILX = "";
    MK102_NMEMARES = "";
    MK102_NMPROFES = "";
    MK102_NMPROPCC = "";
    MK102_NRCELDDD = 0;
    MK102_NRCELNUM = 0;
    MK102_NRCEPCOC = 0;
    MK102_NRCEPCOM = 0;
    MK102_NRCEPLCO = 0;
    MK102_NRCEPLOC = 0;
    MK102_NRCONLIQ = "";
    MK102_NRENDCOM = 0;
    MK102_NRENDLOC = 0;
    MK102_NRIDENTI = "";
    MK102_NRININPS = "";
    MK102_NRNUMCPF = 0;
    MK102_NRSALCON = 0;
    MK102_NRTELCOM = "";
    MK102_NRTELEFO = "";
    MK102_VLSALHOR = 0;
}
private void MK102_TableToFile ()
  throws Exception
{   try
    {
        if (MK102_XSEEDEOF == true)
        {    return;
        }
       MK102_NMPROFES = MK102_TAB.getString("NMPROFES");
       MK102_CDDOPAIS = MK102_TAB.getDouble("CDDOPAIS");
       MK102_NRCEPLOC = MK102_TAB.getDouble("NRCEPLOC");
       MK102_ROWID = MK102_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "MK102_TableToFile","");
    }
}
private String MK10101_DetermineEvery(double CDEMPRES ,double CDMATRIC)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        MK101_XSEEDEOF = false;
        MK101_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_MK101_FIELDS + " FROM MK101 with (NOLOCK INDEX=MK10101) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDMATRIC = " + cStr(CDMATRIC);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDMATRIC  ";
        if (MK101_CMD == null)
        {   MK101_CMD = MK101_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (MK101_TAB != null)
        {   MK101_TAB.close();
        }
        MK101_TAB = MK101_CMD.executeQuery(sqlCommand);
        if (MK101_TAB.next())
        {   xsdStatus = "";
            MK101_TableToFile();
        }
        else
        {   MK101_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"MK101_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void MK10101_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (MK101_XSEEDEOF == true)
        {   return;
        }
        if (MK101_XSEEDSEEK == false)
        {    if (MK101_TAB.next())
             {    MK101_TableToFile ();
             }
             else
             {    MK101_XSEEDEOF = true;
             }
        }
        {    MK101_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"MK101_DetermineMoveNext", "");
    }
}
private void MK101_InitFile()
{
    MK101_CDCONSAC = 0;
    MK101_CDCONTAT = 0;
    MK101_CDDOPAIS = 0;
    MK101_CDEMPRES = 0;
    MK101_CDESTCIV = 0;
    MK101_CDFISJUR = 0;
    MK101_CDINSTRU = 0;
    MK101_CDLOCINS = 0;
    MK101_CDMATRIC = 0;
    MK101_CDPROCAD = 0;
    MK101_CDSEXOXX = "";
    MK101_DIEMIETI = 0;
    MK101_DIINCCAD = 0;
    MK101_DINASCIM = 0;
    MK101_DSATVCON = "";
    MK101_DSBAIRRO = "";
    MK101_DSCARGOX = "";
    MK101_DSENDCOM = "";
    MK101_DSENDERE = "";
    MK101_DSININOM = "";
    MK101_DSPRIPAR = "";
    MK101_DSPROADQ = "";
    MK101_DSSEGPAR = "";
    MK101_DSTERPAR = "";
    MK101_DSZONURB = "";
    MK101_INATIVOX = 0;
    MK101_INEMIETI = 0;
    MK101_INFILMEN = 0;
    MK101_INNOVCEL = "";
    MK101_INNOVCOR = "";
    MK101_INNOVEMA = "";
    MK101_INPOSCAR = 0;
    MK101_INRECESP = 0;
    MK101_INSITREG = "";
    MK101_INVENTRA = 0;
    MK101_NMCLIENT = "";
    MK101_NMEMAILX = "";
    MK101_NRCELDDD = 0;
    MK101_NRCELNUM = 0;
    MK101_NRCEPCOM = 0;
    MK101_NRCEPLOC = 0;
    MK101_NRCGCDIG = 0;
    MK101_NRCGCFIL = 0;
    MK101_NRCGCNUM = 0;
    MK101_NRCXPOST = "";
    MK101_NRDACASA = 0;
    MK101_NRENDLOC = 0;
    MK101_NRRESDDD = 0;
    MK101_NRRESNUM = 0;
    MK101_NRTELCOM = "";
    MK101_NRTELDDD = 0;
    MK101_NRTELEFO = "";
    MK101_NRTELNUM = 0;
}
private void MK101_TableToFile ()
  throws Exception
{   try
    {
        if (MK101_XSEEDEOF == true)
        {    return;
        }
       MK101_NMCLIENT = MK101_TAB.getString("NMCLIENT");
       MK101_CDDOPAIS = MK101_TAB.getDouble("CDDOPAIS");
       MK101_NRCEPLOC = MK101_TAB.getDouble("NRCEPLOC");
       MK101_CDFISJUR = MK101_TAB.getDouble("CDFISJUR");
       MK101_ROWID = MK101_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "MK101_TableToFile","");
    }
}
private String CG111_Lock()
   throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "select /*+ CGR032 */ " + ODBC_CG111_FIELDS + " from CG111 ";
        sqlCommand = sqlCommand + " WITH (UPDLOCK INDEX=FCG111ROWID) where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG111_ROWID);
        if (CG111_Lk.CMD == null)
        {   CG111_Lk.CMD = GLB.CONNECTION.createStatement();
        }
        if (CG111_Lk.TAB != null)
        {   CG111_Lk.TAB.close();
        }
        CG111_Lk.TAB = CG111_Lk.CMD.executeQuery(sqlCommand);
        if (CG111_Lk.TAB.next() == true)
        {   xsdStatus = "";
            CG111_TableToFile(CG111_Lk);
        }
        else
        {   CG111_Lk.EOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG111_Lock",sqlCommand);
        return(xsdStatus);
    }
}
private void CG111_TableToFile (XseedJDBC pXseedJDBC )
  throws Exception
{   try
    {
        if (pXseedJDBC.EOF == true)
        {    return;
        }
       CG111_TPREGIMP = pXseedJDBC.TAB.getDouble("TPREGIMP");
       CG111_VLINTEGR = pXseedJDBC.TAB.getDouble("VLINTEGR");
       CG111_VLBASICM = pXseedJDBC.TAB.getDouble("VLBASICM");
       CG111_VLBASIPI = pXseedJDBC.TAB.getDouble("VLBASIPI");
       CG111_VLIMPICM = pXseedJDBC.TAB.getDouble("VLIMPICM");
       CG111_VLIMPIPI = pXseedJDBC.TAB.getDouble("VLIMPIPI");
       CG111_VLINTICM = pXseedJDBC.TAB.getDouble("VLINTICM");
       CG111_VLINTIPI = pXseedJDBC.TAB.getDouble("VLINTIPI");
       CG111_VLOUTICM = pXseedJDBC.TAB.getDouble("VLOUTICM");
       CG111_VLOUTIPI = pXseedJDBC.TAB.getDouble("VLOUTIPI");
       CG111_VLCONTNC = pXseedJDBC.TAB.getDouble("VLCONTNC");
       CG111_VLBICMNC = pXseedJDBC.TAB.getDouble("VLBICMNC");
       CG111_VLBASSTR = pXseedJDBC.TAB.getDouble("VLBASSTR");
       CG111_VLICMSTR = pXseedJDBC.TAB.getDouble("VLICMSTR");
       CG111_AMMOVTOX = pXseedJDBC.TAB.getDouble("AMMOVTOX");
       CG111_CDEMPRES = pXseedJDBC.TAB.getDouble("CDEMPRES");
       CG111_CDFILIAL = pXseedJDBC.TAB.getDouble("CDFILIAL");
       CG111_CDREFIMP = pXseedJDBC.TAB.getString("CDREFIMP");
       CG111_CDNATCOM = pXseedJDBC.TAB.getDouble("CDNATCOM");
       CG111_INSITREG = pXseedJDBC.TAB.getString("INSITREG");
       CG111_CDUFMUNI = pXseedJDBC.TAB.getString("CDUFMUNI");
       CG111_ROWID = pXseedJDBC.TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG111_TableToFile","");
    }
}
private String CG11102_DetermineEvery(double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPREGIMP ,String CDUFMUNI ,String CDREFIMP ,double CDNATCOM)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        CG111_XSEEDEOF = false;
        CG111_XSEEDSEEK = true;
        CDUFMUNI = rTrim(CDUFMUNI);
        if (CDUFMUNI.equals("") == true)
        {   CDUFMUNI = " ";
        }
        CDREFIMP = rTrim(CDREFIMP);
        if (CDREFIMP.equals("") == true)
        {   CDREFIMP = " ";
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG111_FIELDS + " FROM CG111 with (NOLOCK INDEX=CG11102) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDFILIAL = " + cStr(CDFILIAL);
        sqlCommand = sqlCommand + "  And AMMOVTOX = " + cStr(AMMOVTOX);
        sqlCommand = sqlCommand + "  And TPREGIMP = " + cStr(TPREGIMP);
        sqlCommand = sqlCommand + "  And CDUFMUNI = '" +  ReplaceQuotes(CDUFMUNI) + "'";
        sqlCommand = sqlCommand + "  And CDREFIMP = '" +  ReplaceQuotes(CDREFIMP) + "'";
        sqlCommand = sqlCommand + "  And CDNATCOM = " + cStr(CDNATCOM);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,AMMOVTOX  ";
        sqlCommand = sqlCommand + " ,TPREGIMP  ";
        sqlCommand = sqlCommand + " ,CDUFMUNI  ";
        sqlCommand = sqlCommand + " ,CDREFIMP  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        if (CG111_CMD == null)
        {   CG111_CMD = CG111_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG111_TAB != null)
        {   CG111_TAB.close();
        }
        CG111_TAB = CG111_CMD.executeQuery(sqlCommand);
        if (CG111_TAB.next())
        {   xsdStatus = "";
            CG111_TableToFile();
        }
        else
        {   CG111_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG111_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CG11102_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG111_XSEEDEOF == true)
        {   return;
        }
        if (CG111_XSEEDSEEK == false)
        {    if (CG111_TAB.next())
             {    CG111_TableToFile ();
             }
             else
             {    CG111_XSEEDEOF = true;
             }
        }
        {    CG111_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG111_DetermineMoveNext", "");
    }
}
private void CG111_InitFile()
{
    CG111_AMMOVTOX = 0;
    CG111_CDEMPRES = 0;
    CG111_CDFILIAL = 0;
    CG111_CDNATCOM = 0;
    CG111_CDREFIMP = "";
    CG111_CDUFMUNI = "";
    CG111_INSITREG = "";
    CG111_TPREGIMP = 0;
    CG111_VLBASICM = 0;
    CG111_VLBASIPI = 0;
    CG111_VLBASSTR = 0;
    CG111_VLBICMNC = 0;
    CG111_VLCONTNC = 0;
    CG111_VLICMSTR = 0;
    CG111_VLIMPICM = 0;
    CG111_VLIMPIPI = 0;
    CG111_VLINTEGR = 0;
    CG111_VLINTICM = 0;
    CG111_VLINTIPI = 0;
    CG111_VLOUTICM = 0;
    CG111_VLOUTIPI = 0;
}
private void CG111_TableToFile ()
  throws Exception
{   try
    {
        if (CG111_XSEEDEOF == true)
        {    return;
        }
       CG111_TPREGIMP = CG111_TAB.getDouble("TPREGIMP");
       CG111_VLINTEGR = CG111_TAB.getDouble("VLINTEGR");
       CG111_VLBASICM = CG111_TAB.getDouble("VLBASICM");
       CG111_VLBASIPI = CG111_TAB.getDouble("VLBASIPI");
       CG111_VLIMPICM = CG111_TAB.getDouble("VLIMPICM");
       CG111_VLIMPIPI = CG111_TAB.getDouble("VLIMPIPI");
       CG111_VLINTICM = CG111_TAB.getDouble("VLINTICM");
       CG111_VLINTIPI = CG111_TAB.getDouble("VLINTIPI");
       CG111_VLOUTICM = CG111_TAB.getDouble("VLOUTICM");
       CG111_VLOUTIPI = CG111_TAB.getDouble("VLOUTIPI");
       CG111_VLCONTNC = CG111_TAB.getDouble("VLCONTNC");
       CG111_VLBICMNC = CG111_TAB.getDouble("VLBICMNC");
       CG111_VLBASSTR = CG111_TAB.getDouble("VLBASSTR");
       CG111_VLICMSTR = CG111_TAB.getDouble("VLICMSTR");
       CG111_AMMOVTOX = CG111_TAB.getDouble("AMMOVTOX");
       CG111_CDEMPRES = CG111_TAB.getDouble("CDEMPRES");
       CG111_CDFILIAL = CG111_TAB.getDouble("CDFILIAL");
       CG111_CDREFIMP = CG111_TAB.getString("CDREFIMP");
       CG111_CDNATCOM = CG111_TAB.getDouble("CDNATCOM");
       CG111_INSITREG = CG111_TAB.getString("INSITREG");
       CG111_CDUFMUNI = CG111_TAB.getString("CDUFMUNI");
       CG111_ROWID = CG111_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG111_TableToFile","");
    }
}
private void CG111_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG111 set ";
        sqlCommand = sqlCommand + "TPREGIMP = " + cStr(CG111_TPREGIMP);
        sqlCommand = sqlCommand + ",VLINTEGR = " + cStr(CG111_VLINTEGR);
        sqlCommand = sqlCommand + ",VLBASICM = " + cStr(CG111_VLBASICM);
        sqlCommand = sqlCommand + ",VLBASIPI = " + cStr(CG111_VLBASIPI);
        sqlCommand = sqlCommand + ",VLIMPICM = " + cStr(CG111_VLIMPICM);
        sqlCommand = sqlCommand + ",VLIMPIPI = " + cStr(CG111_VLIMPIPI);
        sqlCommand = sqlCommand + ",VLINTICM = " + cStr(CG111_VLINTICM);
        sqlCommand = sqlCommand + ",VLINTIPI = " + cStr(CG111_VLINTIPI);
        sqlCommand = sqlCommand + ",VLOUTICM = " + cStr(CG111_VLOUTICM);
        sqlCommand = sqlCommand + ",VLOUTIPI = " + cStr(CG111_VLOUTIPI);
        sqlCommand = sqlCommand + ",VLCONTNC = " + cStr(CG111_VLCONTNC);
        sqlCommand = sqlCommand + ",VLBICMNC = " + cStr(CG111_VLBICMNC);
        sqlCommand = sqlCommand + ",VLBASSTR = " + cStr(CG111_VLBASSTR);
        sqlCommand = sqlCommand + ",VLICMSTR = " + cStr(CG111_VLICMSTR);
        sqlCommand = sqlCommand + ",AMMOVTOX = " + cStr(CG111_AMMOVTOX);
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(CG111_CDEMPRES);
        sqlCommand = sqlCommand + ",CDFILIAL = " + cStr(CG111_CDFILIAL);
        if (CG111_CDREFIMP.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",CDREFIMP = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",CDREFIMP = '" + ReplaceQuotes(rTrim(CG111_CDREFIMP)) + "'";
        }
        sqlCommand = sqlCommand + ",CDNATCOM = " + cStr(CG111_CDNATCOM);
        if (CG111_INSITREG.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INSITREG = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INSITREG = '" + ReplaceQuotes(rTrim(CG111_INSITREG)) + "'";
        }
        if (CG111_CDUFMUNI.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",CDUFMUNI = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",CDUFMUNI = '" + ReplaceQuotes(rTrim(CG111_CDUFMUNI)) + "'";
        }
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG111_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG111_Modify");
         }
     }
}
private void CG111_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG111 (";
        sqlCommand = sqlCommand + " AMMOVTOX";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",CDFILIAL";
        sqlCommand = sqlCommand + ",CDNATCOM";
        sqlCommand = sqlCommand + ",CDREFIMP";
        sqlCommand = sqlCommand + ",CDUFMUNI";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",TPREGIMP";
        sqlCommand = sqlCommand + ",VLBASICM";
        sqlCommand = sqlCommand + ",VLBASIPI";
        sqlCommand = sqlCommand + ",VLBASSTR";
        sqlCommand = sqlCommand + ",VLBICMNC";
        sqlCommand = sqlCommand + ",VLCONTNC";
        sqlCommand = sqlCommand + ",VLICMSTR";
        sqlCommand = sqlCommand + ",VLIMPICM";
        sqlCommand = sqlCommand + ",VLIMPIPI";
        sqlCommand = sqlCommand + ",VLINTEGR";
        sqlCommand = sqlCommand + ",VLINTICM";
        sqlCommand = sqlCommand + ",VLINTIPI";
        sqlCommand = sqlCommand + ",VLOUTICM";
        sqlCommand = sqlCommand + ",VLOUTIPI";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CG111_AMMOVTOX);
        sqlCommand = sqlCommand + "," + cStr(CG111_CDEMPRES);
        sqlCommand = sqlCommand + "," + cStr(CG111_CDFILIAL);
        sqlCommand = sqlCommand + "," + cStr(CG111_CDNATCOM);
        if (CG111_CDREFIMP.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG111_CDREFIMP)) + "'";
        }
        if (CG111_CDUFMUNI.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG111_CDUFMUNI)) + "'";
        }
        if (CG111_INSITREG.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG111_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG111_TPREGIMP);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLBASICM);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLBASIPI);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLBASSTR);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLBICMNC);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLCONTNC);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLICMSTR);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLIMPICM);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLIMPIPI);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLINTEGR);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLINTICM);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLINTIPI);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLOUTICM);
        sqlCommand = sqlCommand + "," + cStr(CG111_VLOUTIPI);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG111_Insert");
            }
        }
    }
}
private void CG111_AutoToFile()
{
    CG111_InitFile();
    CG111_TPREGIMP = AU_CG111_TPREGIMP;
    CG111_VLINTEGR = AU_CG111_VLINTEGR;
    CG111_VLBASICM = AU_CG111_VLBASICM;
    CG111_VLBASIPI = AU_CG111_VLBASIPI;
    CG111_VLIMPICM = AU_CG111_VLIMPICM;
    CG111_VLIMPIPI = AU_CG111_VLIMPIPI;
    CG111_VLINTICM = AU_CG111_VLINTICM;
    CG111_VLINTIPI = AU_CG111_VLINTIPI;
    CG111_VLOUTICM = AU_CG111_VLOUTICM;
    CG111_VLOUTIPI = AU_CG111_VLOUTIPI;
    CG111_VLCONTNC = AU_CG111_VLCONTNC;
    CG111_VLBICMNC = AU_CG111_VLBICMNC;
    CG111_VLBASSTR = AU_CG111_VLBASSTR;
    CG111_VLICMSTR = AU_CG111_VLICMSTR;
    CG111_AMMOVTOX = AU_CG111_AMMOVTOX;
    CG111_CDEMPRES = AU_CG111_CDEMPRES;
    CG111_CDFILIAL = AU_CG111_CDFILIAL;
    CG111_CDREFIMP = AU_CG111_CDREFIMP;
    CG111_CDNATCOM = AU_CG111_CDNATCOM;
    CG111_INSITREG = AU_CG111_INSITREG;
    CG111_CDUFMUNI = AU_CG111_CDUFMUNI;
    CG111_ROWID = AU_CG111_ROWID;
}
private void CG111_FileToAuto()
{    AU_CG111_TPREGIMP = CG111_TPREGIMP;
    AU_CG111_VLINTEGR = CG111_VLINTEGR;
    AU_CG111_VLBASICM = CG111_VLBASICM;
    AU_CG111_VLBASIPI = CG111_VLBASIPI;
    AU_CG111_VLIMPICM = CG111_VLIMPICM;
    AU_CG111_VLIMPIPI = CG111_VLIMPIPI;
    AU_CG111_VLINTICM = CG111_VLINTICM;
    AU_CG111_VLINTIPI = CG111_VLINTIPI;
    AU_CG111_VLOUTICM = CG111_VLOUTICM;
    AU_CG111_VLOUTIPI = CG111_VLOUTIPI;
    AU_CG111_VLCONTNC = CG111_VLCONTNC;
    AU_CG111_VLBICMNC = CG111_VLBICMNC;
    AU_CG111_VLBASSTR = CG111_VLBASSTR;
    AU_CG111_VLICMSTR = CG111_VLICMSTR;
    AU_CG111_AMMOVTOX = CG111_AMMOVTOX;
    AU_CG111_CDEMPRES = CG111_CDEMPRES;
    AU_CG111_CDFILIAL = CG111_CDFILIAL;
    AU_CG111_CDREFIMP = CG111_CDREFIMP;
    AU_CG111_CDNATCOM = CG111_CDNATCOM;
    AU_CG111_INSITREG = CG111_INSITREG;
    AU_CG111_CDUFMUNI = CG111_CDUFMUNI;
    AU_CG111_ROWID = CG111_ROWID;
 }
private void CG111_InitAuto()
{
    AU_CG111_TPREGIMP = 0;
    AU_CG111_VLINTEGR = 0;
    AU_CG111_VLBASICM = 0;
    AU_CG111_VLBASIPI = 0;
    AU_CG111_VLIMPICM = 0;
    AU_CG111_VLIMPIPI = 0;
    AU_CG111_VLINTICM = 0;
    AU_CG111_VLINTIPI = 0;
    AU_CG111_VLOUTICM = 0;
    AU_CG111_VLOUTIPI = 0;
    AU_CG111_VLCONTNC = 0;
    AU_CG111_VLBICMNC = 0;
    AU_CG111_VLBASSTR = 0;
    AU_CG111_VLICMSTR = 0;
    AU_CG111_AMMOVTOX = 0;
    AU_CG111_CDEMPRES = 0;
    AU_CG111_CDFILIAL = 0;
    AU_CG111_CDREFIMP = "";
    AU_CG111_CDNATCOM = 0;
    AU_CG111_INSITREG = "";
    AU_CG111_CDUFMUNI = "";
    AU_CG111_ROWID = 0;
}
private String CG11101_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPREGIMP ,String CDREFIMP ,double CDNATCOM, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPREGIMPUntil,String CDREFIMPUntil,double CDNATCOMUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG111_XSEEDEOF = false;
        CG111_XSEEDSEEK = true;
        CDREFIMP = rTrim(CDREFIMP);
        if (CDREFIMP.equals("") == true)
        {   CDREFIMP = " ";
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG111_FIELDS + " FROM CG111 with (NOLOCK INDEX=CG11101) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " TPREGIMP = " + cStr(TPREGIMP) +
           " ) And (";
           break;
         case 5:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " TPREGIMP = " + cStr(TPREGIMP) + " And " +
           " CDREFIMP = '" + CDREFIMP + "'" +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG11101_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPREGIMP,CDREFIMP,CDNATCOM, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPREGIMPUntil,CDREFIMPUntil,CDNATCOMUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG11101_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPREGIMP,CDREFIMP,CDNATCOM, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPREGIMPUntil,CDREFIMPUntil,CDNATCOMUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG11101_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPREGIMP,CDREFIMP,CDNATCOM, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPREGIMPUntil,CDREFIMPUntil,CDNATCOMUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG11101_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPREGIMP,CDREFIMP,CDNATCOM, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPREGIMPUntil,CDREFIMPUntil,CDNATCOMUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + CG11101_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPREGIMP,CDREFIMP,CDNATCOM, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPREGIMPUntil,CDREFIMPUntil,CDNATCOMUntil);
          break;
        case 5:
           sqlCommand = sqlCommand + CG11101_DetermineGroupFrom_5 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPREGIMP,CDREFIMP,CDNATCOM, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPREGIMPUntil,CDREFIMPUntil,CDNATCOMUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,AMMOVTOX  ";
        sqlCommand = sqlCommand + " ,TPREGIMP  ";
        sqlCommand = sqlCommand + " ,CDREFIMP  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        if (CG111_CMD == null)
        {   CG111_CMD = CG111_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG111_TAB != null)
        {   CG111_TAB.close();
        }
        CG111_TAB = CG111_CMD.executeQuery(sqlCommand);
        if (CG111_TAB.next())
        {   xsdStatus = "";
            CG111_TableToFile();
        }
        else
        {   CG111_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG111_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG11101_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPREGIMP ,String CDREFIMP ,double CDNATCOM, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPREGIMPUntil,String CDREFIMPUntil,double CDNATCOMUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPREGIMP =  " + cStr(TPREGIMP) + " And " +
    " CDREFIMP =  '" + ReplaceQuotes(CDREFIMP) + "' " + " And " +
    " CDNATCOM >=  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPREGIMP =  " + cStr(TPREGIMP) + " And " +
    " CDREFIMP >  '" + ReplaceQuotes(CDREFIMP) + "' " +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPREGIMP >  " + cStr(TPREGIMP) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPREGIMP =  " + cStr(TPREGIMPUntil) + " And " +
      " CDREFIMP =  '" + ReplaceQuotes(CDREFIMPUntil) + "' " + " And " +
       " CDNATCOM <=  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPREGIMP =  " + cStr(TPREGIMPUntil) + " And " +
      " CDREFIMP <  '" + ReplaceQuotes(CDREFIMPUntil) + "' " +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPREGIMP <  " + cStr(TPREGIMPUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG11101_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPREGIMP ,String CDREFIMP ,double CDNATCOM, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPREGIMPUntil,String CDREFIMPUntil,double CDNATCOMUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPREGIMP =  " + cStr(TPREGIMP) + " And " +
    " CDREFIMP =  '" + ReplaceQuotes(CDREFIMP) + "' " + " And " +
    " CDNATCOM >=  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPREGIMP =  " + cStr(TPREGIMP) + " And " +
    " CDREFIMP >  '" + ReplaceQuotes(CDREFIMP) + "' " +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPREGIMP >  " + cStr(TPREGIMP) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPREGIMP =  " + cStr(TPREGIMPUntil) + " And " +
      " CDREFIMP =  '" + ReplaceQuotes(CDREFIMPUntil) + "' " + " And " +
       " CDNATCOM <=  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPREGIMP =  " + cStr(TPREGIMPUntil) + " And " +
      " CDREFIMP <  '" + ReplaceQuotes(CDREFIMPUntil) + "' " +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPREGIMP <  " + cStr(TPREGIMPUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG11101_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPREGIMP ,String CDREFIMP ,double CDNATCOM, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPREGIMPUntil,String CDREFIMPUntil,double CDNATCOMUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPREGIMP =  " + cStr(TPREGIMP) + " And " +
    " CDREFIMP =  '" + ReplaceQuotes(CDREFIMP) + "' " + " And " +
    " CDNATCOM >=  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPREGIMP =  " + cStr(TPREGIMP) + " And " +
    " CDREFIMP >  '" + ReplaceQuotes(CDREFIMP) + "' " +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPREGIMP >  " + cStr(TPREGIMP) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPREGIMP =  " + cStr(TPREGIMPUntil) + " And " +
      " CDREFIMP =  '" + ReplaceQuotes(CDREFIMPUntil) + "' " + " And " +
       " CDNATCOM <=  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPREGIMP =  " + cStr(TPREGIMPUntil) + " And " +
      " CDREFIMP <  '" + ReplaceQuotes(CDREFIMPUntil) + "' " +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPREGIMP <  " + cStr(TPREGIMPUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG11101_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPREGIMP ,String CDREFIMP ,double CDNATCOM, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPREGIMPUntil,String CDREFIMPUntil,double CDNATCOMUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " TPREGIMP =  " + cStr(TPREGIMP) + " And " +
    " CDREFIMP =  '" + ReplaceQuotes(CDREFIMP) + "' " + " And " +
    " CDNATCOM >=  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIMP =  " + cStr(TPREGIMP) + " And " +
    " CDREFIMP >  '" + ReplaceQuotes(CDREFIMP) + "' " +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIMP >  " + cStr(TPREGIMP) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " TPREGIMP =  " + cStr(TPREGIMPUntil) + " And " +
      " CDREFIMP =  '" + ReplaceQuotes(CDREFIMPUntil) + "' " + " And " +
       " CDNATCOM <=  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIMP =  " + cStr(TPREGIMPUntil) + " And " +
      " CDREFIMP <  '" + ReplaceQuotes(CDREFIMPUntil) + "' " +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIMP <  " + cStr(TPREGIMPUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG11101_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPREGIMP ,String CDREFIMP ,double CDNATCOM, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPREGIMPUntil,String CDREFIMPUntil,double CDNATCOMUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDREFIMP =  '" + ReplaceQuotes(CDREFIMP) + "' " + " And " +
    " CDNATCOM >=  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDREFIMP >  '" + ReplaceQuotes(CDREFIMP) + "' " +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
      " CDREFIMP =  '" + ReplaceQuotes(CDREFIMPUntil) + "' " + " And " +
       " CDNATCOM <=  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
      " CDREFIMP <  '" + ReplaceQuotes(CDREFIMPUntil) + "' " +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG11101_DetermineGroupFrom_5(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPREGIMP ,String CDREFIMP ,double CDNATCOM, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPREGIMPUntil,String CDREFIMPUntil,double CDNATCOMUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATCOM >=  " + cStr(CDNATCOM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATCOM <=  " + cStr(CDNATCOMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG11101_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG111_XSEEDEOF == true)
        {   return;
        }
        if (CG111_XSEEDSEEK == false)
        {    if (CG111_TAB.next())
             {    CG111_TableToFile ();
             }
             else
             {    CG111_XSEEDEOF = true;
             }
        }
        {    CG111_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG111_DetermineMoveNext", "");
    }
}
private void CG111_Delete()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "delete /*+ CGR032 */ from CG111 where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG111_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
        if (recordsAffected == 0)
        {   GLB.STATUS = "*****";
        }
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else
        {   ShowErrorMsg (e,"CG111_Delete");
        }
     }
}
private String CG122_Lock()
   throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "select /*+ CGR032 */ " + ODBC_CG122_FIELDS + " from CG122 ";
        sqlCommand = sqlCommand + " WITH (UPDLOCK INDEX=FCG122ROWID) where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG122_ROWID);
        if (CG122_Lk.CMD == null)
        {   CG122_Lk.CMD = GLB.CONNECTION.createStatement();
        }
        if (CG122_Lk.TAB != null)
        {   CG122_Lk.TAB.close();
        }
        CG122_Lk.TAB = CG122_Lk.CMD.executeQuery(sqlCommand);
        if (CG122_Lk.TAB.next() == true)
        {   xsdStatus = "";
            CG122_TableToFile(CG122_Lk);
        }
        else
        {   CG122_Lk.EOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG122_Lock",sqlCommand);
        return(xsdStatus);
    }
}
private void CG122_TableToFile (XseedJDBC pXseedJDBC )
  throws Exception
{   try
    {
        if (pXseedJDBC.EOF == true)
        {    return;
        }
       CG122_CDEMPRES = pXseedJDBC.TAB.getDouble("CDEMPRES");
       CG122_AMMOVTOX = pXseedJDBC.TAB.getDouble("AMMOVTOX");
       CG122_CDCLIFOR = pXseedJDBC.TAB.getDouble("CDCLIFOR");
       CG122_CDFILIAL = pXseedJDBC.TAB.getDouble("CDFILIAL");
       CG122_INCLIFOR = pXseedJDBC.TAB.getDouble("INCLIFOR");
       CG122_INENTSAI = pXseedJDBC.TAB.getDouble("INENTSAI");
       CG122_INSITREG = pXseedJDBC.TAB.getString("INSITREG");
       CG122_VLMOVIME = pXseedJDBC.TAB.getDouble("VLMOVIME");
       CG122_ROWID = pXseedJDBC.TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG122_TableToFile","");
    }
}
private String CG12201_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLIFOR ,double INCLIFOR, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLIFORUntil,double INCLIFORUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG122_XSEEDEOF = false;
        CG122_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG122_FIELDS + " FROM CG122 with (NOLOCK INDEX=CG12201) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " INENTSAI = " + cStr(INENTSAI) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " INENTSAI = " + cStr(INENTSAI) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) +
           " ) And (";
           break;
         case 5:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " INENTSAI = " + cStr(INENTSAI) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " CDCLIFOR = " + cStr(CDCLIFOR) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG12201_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,INENTSAI,AMMOVTOX,CDCLIFOR,INCLIFOR, CDEMPRESUntil,CDFILIALUntil,INENTSAIUntil,AMMOVTOXUntil,CDCLIFORUntil,INCLIFORUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG12201_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,INENTSAI,AMMOVTOX,CDCLIFOR,INCLIFOR, CDEMPRESUntil,CDFILIALUntil,INENTSAIUntil,AMMOVTOXUntil,CDCLIFORUntil,INCLIFORUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG12201_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,INENTSAI,AMMOVTOX,CDCLIFOR,INCLIFOR, CDEMPRESUntil,CDFILIALUntil,INENTSAIUntil,AMMOVTOXUntil,CDCLIFORUntil,INCLIFORUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG12201_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,INENTSAI,AMMOVTOX,CDCLIFOR,INCLIFOR, CDEMPRESUntil,CDFILIALUntil,INENTSAIUntil,AMMOVTOXUntil,CDCLIFORUntil,INCLIFORUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + CG12201_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,INENTSAI,AMMOVTOX,CDCLIFOR,INCLIFOR, CDEMPRESUntil,CDFILIALUntil,INENTSAIUntil,AMMOVTOXUntil,CDCLIFORUntil,INCLIFORUntil);
          break;
        case 5:
           sqlCommand = sqlCommand + CG12201_DetermineGroupFrom_5 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,INENTSAI,AMMOVTOX,CDCLIFOR,INCLIFOR, CDEMPRESUntil,CDFILIALUntil,INENTSAIUntil,AMMOVTOXUntil,CDCLIFORUntil,INCLIFORUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,INENTSAI  ";
        sqlCommand = sqlCommand + " ,AMMOVTOX  ";
        sqlCommand = sqlCommand + " ,CDCLIFOR  ";
        sqlCommand = sqlCommand + " ,INCLIFOR  ";
        if (CG122_CMD == null)
        {   CG122_CMD = CG122_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG122_TAB != null)
        {   CG122_TAB.close();
        }
        CG122_TAB = CG122_CMD.executeQuery(sqlCommand);
        if (CG122_TAB.next())
        {   xsdStatus = "";
            CG122_TableToFile();
        }
        else
        {   CG122_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG122_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG12201_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLIFOR ,double INCLIFOR, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLIFORUntil,double INCLIFORUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLIFOR =  " + cStr(CDCLIFOR) + " And " +
    " INCLIFOR >=  " + cStr(INCLIFOR) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLIFOR >  " + cStr(CDCLIFOR) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI >  " + cStr(INENTSAI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLIFOR =  " + cStr(CDCLIFORUntil) + " And " +
       " INCLIFOR <=  " + cStr(INCLIFORUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLIFOR <  " + cStr(CDCLIFORUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI <  " + cStr(INENTSAIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12201_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLIFOR ,double INCLIFOR, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLIFORUntil,double INCLIFORUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLIFOR =  " + cStr(CDCLIFOR) + " And " +
    " INCLIFOR >=  " + cStr(INCLIFOR) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLIFOR >  " + cStr(CDCLIFOR) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI >  " + cStr(INENTSAI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLIFOR =  " + cStr(CDCLIFORUntil) + " And " +
       " INCLIFOR <=  " + cStr(INCLIFORUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLIFOR <  " + cStr(CDCLIFORUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI <  " + cStr(INENTSAIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12201_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLIFOR ,double INCLIFOR, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLIFORUntil,double INCLIFORUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLIFOR =  " + cStr(CDCLIFOR) + " And " +
    " INCLIFOR >=  " + cStr(INCLIFOR) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLIFOR >  " + cStr(CDCLIFOR) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INENTSAI >  " + cStr(INENTSAI) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLIFOR =  " + cStr(CDCLIFORUntil) + " And " +
       " INCLIFOR <=  " + cStr(INCLIFORUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLIFOR <  " + cStr(CDCLIFORUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INENTSAI <  " + cStr(INENTSAIUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12201_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLIFOR ,double INCLIFOR, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLIFORUntil,double INCLIFORUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLIFOR =  " + cStr(CDCLIFOR) + " And " +
    " INCLIFOR >=  " + cStr(INCLIFOR) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLIFOR >  " + cStr(CDCLIFOR) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLIFOR =  " + cStr(CDCLIFORUntil) + " And " +
       " INCLIFOR <=  " + cStr(INCLIFORUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLIFOR <  " + cStr(CDCLIFORUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12201_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLIFOR ,double INCLIFOR, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLIFORUntil,double INCLIFORUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDCLIFOR =  " + cStr(CDCLIFOR) + " And " +
    " INCLIFOR >=  " + cStr(INCLIFOR) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDCLIFOR >  " + cStr(CDCLIFOR) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDCLIFOR =  " + cStr(CDCLIFORUntil) + " And " +
       " INCLIFOR <=  " + cStr(INCLIFORUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDCLIFOR <  " + cStr(CDCLIFORUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12201_DetermineGroupFrom_5(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLIFOR ,double INCLIFOR, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLIFORUntil,double INCLIFORUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " INCLIFOR >=  " + cStr(INCLIFOR) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " INCLIFOR <=  " + cStr(INCLIFORUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG12201_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG122_XSEEDEOF == true)
        {   return;
        }
        if (CG122_XSEEDSEEK == false)
        {    if (CG122_TAB.next())
             {    CG122_TableToFile ();
             }
             else
             {    CG122_XSEEDEOF = true;
             }
        }
        {    CG122_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG122_DetermineMoveNext", "");
    }
}
private void CG122_Delete()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "delete /*+ CGR032 */ from CG122 where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG122_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
        if (recordsAffected == 0)
        {   GLB.STATUS = "*****";
        }
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else
        {   ShowErrorMsg (e,"CG122_Delete");
        }
     }
}
private String CG123_Lock()
   throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "select /*+ CGR032 */ " + ODBC_CG123_FIELDS + " from CG123 ";
        sqlCommand = sqlCommand + " WITH (UPDLOCK INDEX=FCG123ROWID) where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG123_ROWID);
        if (CG123_Lk.CMD == null)
        {   CG123_Lk.CMD = GLB.CONNECTION.createStatement();
        }
        if (CG123_Lk.TAB != null)
        {   CG123_Lk.TAB.close();
        }
        CG123_Lk.TAB = CG123_Lk.CMD.executeQuery(sqlCommand);
        if (CG123_Lk.TAB.next() == true)
        {   xsdStatus = "";
            CG123_TableToFile(CG123_Lk);
        }
        else
        {   CG123_Lk.EOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG123_Lock",sqlCommand);
        return(xsdStatus);
    }
}
private void CG123_TableToFile (XseedJDBC pXseedJDBC )
  throws Exception
{   try
    {
        if (pXseedJDBC.EOF == true)
        {    return;
        }
       CG123_AMMOVTOX = pXseedJDBC.TAB.getDouble("AMMOVTOX");
       CG123_CDCLAFIS = pXseedJDBC.TAB.getDouble("CDCLAFIS");
       CG123_CDEMPRES = pXseedJDBC.TAB.getDouble("CDEMPRES");
       CG123_CDFILIAL = pXseedJDBC.TAB.getDouble("CDFILIAL");
       CG123_INENTSAI = pXseedJDBC.TAB.getDouble("INENTSAI");
       CG123_INSITREG = pXseedJDBC.TAB.getString("INSITREG");
       CG123_VLMOVIME = pXseedJDBC.TAB.getDouble("VLMOVIME");
       CG123_ROWID = pXseedJDBC.TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG123_TableToFile","");
    }
}
private String CG12301_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLAFIS, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLAFISUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG123_XSEEDEOF = false;
        CG123_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG123_FIELDS + " FROM CG123 with (NOLOCK INDEX=CG12301) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " INENTSAI = " + cStr(INENTSAI) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " INENTSAI = " + cStr(INENTSAI) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG12301_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,INENTSAI,AMMOVTOX,CDCLAFIS, CDEMPRESUntil,CDFILIALUntil,INENTSAIUntil,AMMOVTOXUntil,CDCLAFISUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG12301_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,INENTSAI,AMMOVTOX,CDCLAFIS, CDEMPRESUntil,CDFILIALUntil,INENTSAIUntil,AMMOVTOXUntil,CDCLAFISUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG12301_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,INENTSAI,AMMOVTOX,CDCLAFIS, CDEMPRESUntil,CDFILIALUntil,INENTSAIUntil,AMMOVTOXUntil,CDCLAFISUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG12301_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,INENTSAI,AMMOVTOX,CDCLAFIS, CDEMPRESUntil,CDFILIALUntil,INENTSAIUntil,AMMOVTOXUntil,CDCLAFISUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + CG12301_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,INENTSAI,AMMOVTOX,CDCLAFIS, CDEMPRESUntil,CDFILIALUntil,INENTSAIUntil,AMMOVTOXUntil,CDCLAFISUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,INENTSAI  ";
        sqlCommand = sqlCommand + " ,AMMOVTOX  ";
        sqlCommand = sqlCommand + " ,CDCLAFIS  ";
        if (CG123_CMD == null)
        {   CG123_CMD = CG123_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG123_TAB != null)
        {   CG123_TAB.close();
        }
        CG123_TAB = CG123_CMD.executeQuery(sqlCommand);
        if (CG123_TAB.next())
        {   xsdStatus = "";
            CG123_TableToFile();
        }
        else
        {   CG123_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG123_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG12301_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLAFIS, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLAFISUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLAFIS >=  " + cStr(CDCLAFIS) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI >  " + cStr(INENTSAI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLAFIS <=  " + cStr(CDCLAFISUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI <  " + cStr(INENTSAIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12301_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLAFIS, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLAFISUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLAFIS >=  " + cStr(CDCLAFIS) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " INENTSAI >  " + cStr(INENTSAI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLAFIS <=  " + cStr(CDCLAFISUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " INENTSAI <  " + cStr(INENTSAIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12301_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLAFIS, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLAFISUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLAFIS >=  " + cStr(CDCLAFIS) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INENTSAI =  " + cStr(INENTSAI) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INENTSAI >  " + cStr(INENTSAI) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLAFIS <=  " + cStr(CDCLAFISUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INENTSAI =  " + cStr(INENTSAIUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INENTSAI <  " + cStr(INENTSAIUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12301_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLAFIS, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLAFISUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDCLAFIS >=  " + cStr(CDCLAFIS) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " CDCLAFIS <=  " + cStr(CDCLAFISUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12301_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double INENTSAI ,double AMMOVTOX ,double CDCLAFIS, double CDEMPRESUntil,double CDFILIALUntil,double INENTSAIUntil,double AMMOVTOXUntil,double CDCLAFISUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDCLAFIS >=  " + cStr(CDCLAFIS) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDCLAFIS <=  " + cStr(CDCLAFISUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG12301_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG123_XSEEDEOF == true)
        {   return;
        }
        if (CG123_XSEEDSEEK == false)
        {    if (CG123_TAB.next())
             {    CG123_TableToFile ();
             }
             else
             {    CG123_XSEEDEOF = true;
             }
        }
        {    CG123_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG123_DetermineMoveNext", "");
    }
}
private void CG123_Delete()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "delete /*+ CGR032 */ from CG123 where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG123_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
        if (recordsAffected == 0)
        {   GLB.STATUS = "*****";
        }
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else
        {   ShowErrorMsg (e,"CG123_Delete");
        }
     }
}
private String CG11101_DetermineEvery(double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPREGIMP ,String CDREFIMP ,double CDNATCOM)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        CG111_XSEEDEOF = false;
        CG111_XSEEDSEEK = true;
        CDREFIMP = rTrim(CDREFIMP);
        if (CDREFIMP.equals("") == true)
        {   CDREFIMP = " ";
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG111_FIELDS + " FROM CG111 with (NOLOCK INDEX=CG11101) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDFILIAL = " + cStr(CDFILIAL);
        sqlCommand = sqlCommand + "  And AMMOVTOX = " + cStr(AMMOVTOX);
        sqlCommand = sqlCommand + "  And TPREGIMP = " + cStr(TPREGIMP);
        sqlCommand = sqlCommand + "  And CDREFIMP = '" +  ReplaceQuotes(CDREFIMP) + "'";
        sqlCommand = sqlCommand + "  And CDNATCOM = " + cStr(CDNATCOM);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,AMMOVTOX  ";
        sqlCommand = sqlCommand + " ,TPREGIMP  ";
        sqlCommand = sqlCommand + " ,CDREFIMP  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        if (CG111_CMD == null)
        {   CG111_CMD = CG111_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG111_TAB != null)
        {   CG111_TAB.close();
        }
        CG111_TAB = CG111_CMD.executeQuery(sqlCommand);
        if (CG111_TAB.next())
        {   xsdStatus = "";
            CG111_TableToFile();
        }
        else
        {   CG111_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG111_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private String CG13307_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double DIEMINOT, double CDEMPRESUntil,double DIEMINOTUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG133_XSEEDEOF = false;
        CG133_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG133_FIELDS + " FROM CG133 with (NOLOCK INDEX=CG13307) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG13307_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,DIEMINOT, CDEMPRESUntil,DIEMINOTUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG13307_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,DIEMINOT, CDEMPRESUntil,DIEMINOTUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,DIEMINOT  ";
        if (CG133_CMD == null)
        {   CG133_CMD = CG133_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG133_TAB != null)
        {   CG133_TAB.close();
        }
        CG133_TAB = CG133_CMD.executeQuery(sqlCommand);
        if (CG133_TAB.next())
        {   xsdStatus = "";
            CG133_TableToFile();
        }
        else
        {   CG133_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG13307_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double DIEMINOT, double CDEMPRESUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG13307_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double DIEMINOT, double CDEMPRESUntil,double DIEMINOTUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " DIEMINOT >=  " + cStr(DIEMINOT) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " DIEMINOT <=  " + cStr(DIEMINOTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG13307_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG133_XSEEDEOF == true)
        {   return;
        }
        if (CG133_XSEEDSEEK == false)
        {    if (CG133_TAB.next())
             {    CG133_TableToFile ();
             }
             else
             {    CG133_XSEEDEOF = true;
             }
        }
        {    CG133_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG133_DetermineMoveNext", "");
    }
}
private String CG12402_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPIMPOST ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPIMPOSTUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG124_XSEEDEOF = false;
        CG124_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG124_FIELDS + " FROM CG124 with (NOLOCK INDEX=CG12402) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " TPIMPOST = " + cStr(TPIMPOST) +
           " ) And (";
           break;
         case 5:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " TPIMPOST = " + cStr(TPIMPOST) + " And " +
           " CDFISCAL = " + cStr(CDFISCAL) +
           " ) And (";
           break;
         case 6:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " TPIMPOST = " + cStr(TPIMPOST) + " And " +
           " CDFISCAL = " + cStr(CDFISCAL) + " And " +
           " CDNATCOM = " + cStr(CDNATCOM) +
           " ) And (";
           break;
         case 7:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " TPIMPOST = " + cStr(TPIMPOST) + " And " +
           " CDFISCAL = " + cStr(CDFISCAL) + " And " +
           " CDNATCOM = " + cStr(CDNATCOM) + " And " +
           " INORIGEM = " + cStr(INORIGEM) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG12402_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPIMPOST,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPIMPOSTUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG12402_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPIMPOST,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPIMPOSTUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG12402_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPIMPOST,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPIMPOSTUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG12402_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPIMPOST,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPIMPOSTUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + CG12402_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPIMPOST,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPIMPOSTUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 5:
           sqlCommand = sqlCommand + CG12402_DetermineGroupFrom_5 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPIMPOST,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPIMPOSTUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 6:
           sqlCommand = sqlCommand + CG12402_DetermineGroupFrom_6 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPIMPOST,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPIMPOSTUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 7:
           sqlCommand = sqlCommand + CG12402_DetermineGroupFrom_7 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,TPIMPOST,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,TPIMPOSTUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,AMMOVTOX  ";
        sqlCommand = sqlCommand + " ,TPIMPOST  ";
        sqlCommand = sqlCommand + " ,CDFISCAL  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        sqlCommand = sqlCommand + " ,INORIGEM  ";
        sqlCommand = sqlCommand + " ,NRSEQUEN  ";
        if (CG124_CMD == null)
        {   CG124_CMD = CG124_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG124_TAB != null)
        {   CG124_TAB.close();
        }
        CG124_TAB = CG124_CMD.executeQuery(sqlCommand);
        if (CG124_TAB.next())
        {   xsdStatus = "";
            CG124_TableToFile();
        }
        else
        {   CG124_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG124_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG12402_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPIMPOST ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPIMPOSTUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST >  " + cStr(TPIMPOST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST <  " + cStr(TPIMPOSTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12402_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPIMPOST ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPIMPOSTUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST >  " + cStr(TPIMPOST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST <  " + cStr(TPIMPOSTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12402_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPIMPOST ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPIMPOSTUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " TPIMPOST >  " + cStr(TPIMPOST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " TPIMPOST <  " + cStr(TPIMPOSTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12402_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPIMPOST ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPIMPOSTUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPIMPOST >  " + cStr(TPIMPOST) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPIMPOST <  " + cStr(TPIMPOSTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12402_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPIMPOST ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPIMPOSTUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12402_DetermineGroupFrom_5(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPIMPOST ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPIMPOSTUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12402_DetermineGroupFrom_6(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPIMPOST ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPIMPOSTUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12402_DetermineGroupFrom_7(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double TPIMPOST ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double TPIMPOSTUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG12402_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG124_XSEEDEOF == true)
        {   return;
        }
        if (CG124_XSEEDSEEK == false)
        {    if (CG124_TAB.next())
             {    CG124_TableToFile ();
             }
             else
             {    CG124_XSEEDEOF = true;
             }
        }
        {    CG124_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG124_DetermineMoveNext", "");
    }
}
private void CG124_Delete()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "delete /*+ CGR032 */ from CG124 where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG124_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
        if (recordsAffected == 0)
        {   GLB.STATUS = "*****";
        }
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else
        {   ShowErrorMsg (e,"CG124_Delete");
        }
     }
}
private String CG12403_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double NRDECEND ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double NRDECENDUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG124_XSEEDEOF = false;
        CG124_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG124_FIELDS + " FROM CG124 with (NOLOCK INDEX=CG12403) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " NRDECEND = " + cStr(NRDECEND) +
           " ) And (";
           break;
         case 5:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " NRDECEND = " + cStr(NRDECEND) + " And " +
           " CDFISCAL = " + cStr(CDFISCAL) +
           " ) And (";
           break;
         case 6:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " NRDECEND = " + cStr(NRDECEND) + " And " +
           " CDFISCAL = " + cStr(CDFISCAL) + " And " +
           " CDNATCOM = " + cStr(CDNATCOM) +
           " ) And (";
           break;
         case 7:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " NRDECEND = " + cStr(NRDECEND) + " And " +
           " CDFISCAL = " + cStr(CDFISCAL) + " And " +
           " CDNATCOM = " + cStr(CDNATCOM) + " And " +
           " INORIGEM = " + cStr(INORIGEM) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG12403_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,NRDECEND,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,NRDECENDUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG12403_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,NRDECEND,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,NRDECENDUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG12403_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,NRDECEND,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,NRDECENDUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG12403_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,NRDECEND,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,NRDECENDUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + CG12403_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,NRDECEND,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,NRDECENDUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 5:
           sqlCommand = sqlCommand + CG12403_DetermineGroupFrom_5 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,NRDECEND,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,NRDECENDUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 6:
           sqlCommand = sqlCommand + CG12403_DetermineGroupFrom_6 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,NRDECEND,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,NRDECENDUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        case 7:
           sqlCommand = sqlCommand + CG12403_DetermineGroupFrom_7 (DtgFix, FlagUntil, CDEMPRES,CDFILIAL,AMMOVTOX,NRDECEND,CDFISCAL,CDNATCOM,INORIGEM,NRSEQUEN, CDEMPRESUntil,CDFILIALUntil,AMMOVTOXUntil,NRDECENDUntil,CDFISCALUntil,CDNATCOMUntil,INORIGEMUntil,NRSEQUENUntil);
          break;
        }
        sqlCommand = sqlCommand + ") And (" + "INICMIPI <> 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,AMMOVTOX  ";
        sqlCommand = sqlCommand + " ,NRDECEND  ";
        sqlCommand = sqlCommand + " ,CDFISCAL  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        sqlCommand = sqlCommand + " ,INORIGEM  ";
        sqlCommand = sqlCommand + " ,NRSEQUEN  ";
        if (CG124_CMD == null)
        {   CG124_CMD = CG124_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG124_TAB != null)
        {   CG124_TAB.close();
        }
        CG124_TAB = CG124_CMD.executeQuery(sqlCommand);
        if (CG124_TAB.next())
        {   xsdStatus = "";
            CG124_TableToFile();
        }
        else
        {   CG124_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG124_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG12403_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double NRDECEND ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double NRDECENDUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND >  " + cStr(NRDECEND) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND <  " + cStr(NRDECENDUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12403_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double NRDECEND ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double NRDECENDUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND >  " + cStr(NRDECEND) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND <  " + cStr(NRDECENDUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12403_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double NRDECEND ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double NRDECENDUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " NRDECEND >  " + cStr(NRDECEND) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
       " NRDECEND <  " + cStr(NRDECENDUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12403_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double NRDECEND ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double NRDECENDUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " NRDECEND =  " + cStr(NRDECEND) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " NRDECEND >  " + cStr(NRDECEND) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " NRDECEND =  " + cStr(NRDECENDUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " NRDECEND <  " + cStr(NRDECENDUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12403_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double NRDECEND ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double NRDECENDUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12403_DetermineGroupFrom_5(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double NRDECEND ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double NRDECENDUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATCOM =  " + cStr(CDNATCOM) + " And " +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDNATCOM >  " + cStr(CDNATCOM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATCOM =  " + cStr(CDNATCOMUntil) + " And " +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDNATCOM <  " + cStr(CDNATCOMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12403_DetermineGroupFrom_6(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double NRDECEND ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double NRDECENDUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " INORIGEM =  " + cStr(INORIGEM) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INORIGEM >  " + cStr(INORIGEM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " INORIGEM =  " + cStr(INORIGEMUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INORIGEM <  " + cStr(INORIGEMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG12403_DetermineGroupFrom_7(int DtgFix, boolean FlagUntil, double CDEMPRES ,double CDFILIAL ,double AMMOVTOX ,double NRDECEND ,double CDFISCAL ,double CDNATCOM ,double INORIGEM ,double NRSEQUEN, double CDEMPRESUntil,double CDFILIALUntil,double AMMOVTOXUntil,double NRDECENDUntil,double CDFISCALUntil,double CDNATCOMUntil,double INORIGEMUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private String CG14001_DetermineLast(double CDEMPRES ,double TPREGIST ,double CDFILIAL ,double AMMOVTOX ,String CDUFMUNI ,double CDFISCAL ,double NRSEQUEN)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG140_XSEEDEOF = false;
        CG140_XSEEDSEEK = true;
        CDUFMUNI = rTrim(CDUFMUNI);
        if (CDUFMUNI.equals("") == true)
        {   CDUFMUNI = " ";
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG140_FIELDS + " FROM CG140 with (NOLOCK INDEX=CG14001) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " TPREGIST =  " + cStr(TPREGIST) +  " And ";
        sqlCommand = sqlCommand + " CDFILIAL =  " + cStr(CDFILIAL) +  " And ";
        sqlCommand = sqlCommand + " AMMOVTOX =  " + cStr(AMMOVTOX) +  " And ";
        sqlCommand = sqlCommand + " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "'" +  " And ";
        sqlCommand = sqlCommand + " CDFISCAL =  " + cStr(CDFISCAL) +  " And ";
        sqlCommand = sqlCommand + " NRSEQUEN <=  " + cStr(NRSEQUEN);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPREGIST DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDUFMUNI DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG140_CMD == null)
        {   CG140_CMD = CG140_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG140_TAB != null)
        {   CG140_TAB.close();
        }
        CG140_TAB = CG140_CMD.executeQuery(sqlCommand);
        if (CG140_TAB.next())
        {   xsdStatus = "";
            CG140_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG140_FIELDS + " FROM CG140 with (NOLOCK INDEX=CG14001) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " TPREGIST =  " + cStr(TPREGIST) +  " And ";
        sqlCommand = sqlCommand + " CDFILIAL =  " + cStr(CDFILIAL) +  " And ";
        sqlCommand = sqlCommand + " AMMOVTOX =  " + cStr(AMMOVTOX) +  " And ";
        sqlCommand = sqlCommand + " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "'" +  " And ";
        sqlCommand = sqlCommand + " CDFISCAL <  " + cStr(CDFISCAL);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPREGIST DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDUFMUNI DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG140_CMD == null)
        {   CG140_CMD = CG140_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG140_TAB != null)
        {   CG140_TAB.close();
        }
        CG140_TAB = CG140_CMD.executeQuery(sqlCommand);
        if (CG140_TAB.next())
        {   xsdStatus = "";
            CG140_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG140_FIELDS + " FROM CG140 with (NOLOCK INDEX=CG14001) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " TPREGIST =  " + cStr(TPREGIST) +  " And ";
        sqlCommand = sqlCommand + " CDFILIAL =  " + cStr(CDFILIAL) +  " And ";
        sqlCommand = sqlCommand + " AMMOVTOX =  " + cStr(AMMOVTOX) +  " And ";
        sqlCommand = sqlCommand + " CDUFMUNI <  '" + ReplaceQuotes(CDUFMUNI) + "'";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPREGIST DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDUFMUNI DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG140_CMD == null)
        {   CG140_CMD = CG140_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG140_TAB != null)
        {   CG140_TAB.close();
        }
        CG140_TAB = CG140_CMD.executeQuery(sqlCommand);
        if (CG140_TAB.next())
        {   xsdStatus = "";
            CG140_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG140_FIELDS + " FROM CG140 with (NOLOCK INDEX=CG14001) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " TPREGIST =  " + cStr(TPREGIST) +  " And ";
        sqlCommand = sqlCommand + " CDFILIAL =  " + cStr(CDFILIAL) +  " And ";
        sqlCommand = sqlCommand + " AMMOVTOX <  " + cStr(AMMOVTOX);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPREGIST DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDUFMUNI DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG140_CMD == null)
        {   CG140_CMD = CG140_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG140_TAB != null)
        {   CG140_TAB.close();
        }
        CG140_TAB = CG140_CMD.executeQuery(sqlCommand);
        if (CG140_TAB.next())
        {   xsdStatus = "";
            CG140_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG140_FIELDS + " FROM CG140 with (NOLOCK INDEX=CG14001) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " TPREGIST =  " + cStr(TPREGIST) +  " And ";
        sqlCommand = sqlCommand + " CDFILIAL <  " + cStr(CDFILIAL);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPREGIST DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDUFMUNI DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG140_CMD == null)
        {   CG140_CMD = CG140_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG140_TAB != null)
        {   CG140_TAB.close();
        }
        CG140_TAB = CG140_CMD.executeQuery(sqlCommand);
        if (CG140_TAB.next())
        {   xsdStatus = "";
            CG140_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG140_FIELDS + " FROM CG140 with (NOLOCK INDEX=CG14001) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " TPREGIST <  " + cStr(TPREGIST);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPREGIST DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDUFMUNI DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG140_CMD == null)
        {   CG140_CMD = CG140_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG140_TAB != null)
        {   CG140_TAB.close();
        }
        CG140_TAB = CG140_CMD.executeQuery(sqlCommand);
        if (CG140_TAB.next())
        {   xsdStatus = "";
            CG140_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG140_FIELDS + " FROM CG140 with (NOLOCK INDEX=CG14001) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES <  " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPREGIST DESC";
        sqlCommand = sqlCommand + " ,CDFILIAL DESC";
        sqlCommand = sqlCommand + " ,AMMOVTOX DESC";
        sqlCommand = sqlCommand + " ,CDUFMUNI DESC";
        sqlCommand = sqlCommand + " ,CDFISCAL DESC";
        sqlCommand = sqlCommand + " ,NRSEQUEN DESC";
        if (CG140_CMD == null)
        {   CG140_CMD = CG140_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG140_TAB != null)
        {   CG140_TAB.close();
        }
        CG140_TAB = CG140_CMD.executeQuery(sqlCommand);
        if (CG140_TAB.next())
        {   xsdStatus = "";
            CG140_TableToFile();
            return(xsdStatus);
        }
        CG140_XSEEDEOF = true;
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG140_DetermineLast", sqlCommand);
        return(xsdStatus);
    }
}
private void CG140_InitFile()
{
    CG140_AMMOVTOX = 0;
    CG140_CDAJAPUR = "";
    CG140_CDEMPRES = 0;
    CG140_CDFILIAL = 0;
    CG140_CDFISCAL = 0;
    CG140_CDUFMUNI = "";
    CG140_DIIMPORT = 0;
    CG140_DSIMPOST = "";
    CG140_INSITREG = "";
    CG140_NRSEQUEN = 0;
    CG140_TPIMPOST = 0;
    CG140_TPREGIST = 0;
    CG140_VLBASSTR = 0;
    CG140_VLCONTAB = 0;
    CG140_VLICMSTR = 0;
}
private void CG140_TableToFile ()
  throws Exception
{   try
    {
        if (CG140_XSEEDEOF == true)
        {    return;
        }
       CG140_TPREGIST = CG140_TAB.getDouble("TPREGIST");
       CG140_CDEMPRES = CG140_TAB.getDouble("CDEMPRES");
       CG140_CDFILIAL = CG140_TAB.getDouble("CDFILIAL");
       CG140_AMMOVTOX = CG140_TAB.getDouble("AMMOVTOX");
       CG140_CDUFMUNI = CG140_TAB.getString("CDUFMUNI");
       CG140_CDFISCAL = CG140_TAB.getDouble("CDFISCAL");
       CG140_NRSEQUEN = CG140_TAB.getDouble("NRSEQUEN");
       CG140_CDAJAPUR = CG140_TAB.getString("CDAJAPUR");
       CG140_DIIMPORT = CG140_TAB.getDouble("DIIMPORT");
       CG140_DSIMPOST = CG140_TAB.getString("DSIMPOST");
       CG140_TPIMPOST = CG140_TAB.getDouble("TPIMPOST");
       CG140_VLICMSTR = CG140_TAB.getDouble("VLICMSTR");
       CG140_VLCONTAB = CG140_TAB.getDouble("VLCONTAB");
       CG140_VLBASSTR = CG140_TAB.getDouble("VLBASSTR");
       CG140_ROWID = CG140_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG140_TableToFile","");
    }
}
private void CG140_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG140 (";
        sqlCommand = sqlCommand + " AMMOVTOX";
        sqlCommand = sqlCommand + ",CDAJAPUR";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",CDFILIAL";
        sqlCommand = sqlCommand + ",CDFISCAL";
        sqlCommand = sqlCommand + ",CDUFMUNI";
        sqlCommand = sqlCommand + ",DIIMPORT";
        sqlCommand = sqlCommand + ",DSIMPOST";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",NRSEQUEN";
        sqlCommand = sqlCommand + ",TPIMPOST";
        sqlCommand = sqlCommand + ",TPREGIST";
        sqlCommand = sqlCommand + ",VLBASSTR";
        sqlCommand = sqlCommand + ",VLCONTAB";
        sqlCommand = sqlCommand + ",VLICMSTR";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CG140_AMMOVTOX);
        if (CG140_CDAJAPUR.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG140_CDAJAPUR)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG140_CDEMPRES);
        sqlCommand = sqlCommand + "," + cStr(CG140_CDFILIAL);
        sqlCommand = sqlCommand + "," + cStr(CG140_CDFISCAL);
        if (CG140_CDUFMUNI.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG140_CDUFMUNI)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG140_DIIMPORT);
        if (CG140_DSIMPOST.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG140_DSIMPOST)) + "'";
        }
        sqlCommand = sqlCommand + ",' '";
        sqlCommand = sqlCommand + "," + cStr(CG140_NRSEQUEN);
        sqlCommand = sqlCommand + "," + cStr(CG140_TPIMPOST);
        sqlCommand = sqlCommand + "," + cStr(CG140_TPREGIST);
        sqlCommand = sqlCommand + "," + cStr(CG140_VLBASSTR);
        sqlCommand = sqlCommand + "," + cStr(CG140_VLCONTAB);
        sqlCommand = sqlCommand + "," + cStr(CG140_VLICMSTR);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG140_Insert");
            }
        }
    }
}
private void CG140_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG140 set ";
        sqlCommand = sqlCommand + "TPREGIST = " + cStr(CG140_TPREGIST);
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(CG140_CDEMPRES);
        sqlCommand = sqlCommand + ",CDFILIAL = " + cStr(CG140_CDFILIAL);
        sqlCommand = sqlCommand + ",AMMOVTOX = " + cStr(CG140_AMMOVTOX);
        if (CG140_CDUFMUNI.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",CDUFMUNI = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",CDUFMUNI = '" + ReplaceQuotes(rTrim(CG140_CDUFMUNI)) + "'";
        }
        sqlCommand = sqlCommand + ",CDFISCAL = " + cStr(CG140_CDFISCAL);
        sqlCommand = sqlCommand + ",NRSEQUEN = " + cStr(CG140_NRSEQUEN);
        if (CG140_CDAJAPUR.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",CDAJAPUR = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",CDAJAPUR = '" + ReplaceQuotes(rTrim(CG140_CDAJAPUR)) + "'";
        }
        sqlCommand = sqlCommand + ",DIIMPORT = " + cStr(CG140_DIIMPORT);
        if (CG140_DSIMPOST.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",DSIMPOST = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",DSIMPOST = '" + ReplaceQuotes(rTrim(CG140_DSIMPOST)) + "'";
        }
        sqlCommand = sqlCommand + ",TPIMPOST = " + cStr(CG140_TPIMPOST);
        sqlCommand = sqlCommand + ",VLICMSTR = " + cStr(CG140_VLICMSTR);
        sqlCommand = sqlCommand + ",VLCONTAB = " + cStr(CG140_VLCONTAB);
        sqlCommand = sqlCommand + ",VLBASSTR = " + cStr(CG140_VLBASSTR);
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG140_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG140_Modify");
         }
     }
}
private void CG140_AutoToFile()
{
    CG140_InitFile();
    CG140_TPREGIST = AU_CG140_TPREGIST;
    CG140_CDEMPRES = AU_CG140_CDEMPRES;
    CG140_CDFILIAL = AU_CG140_CDFILIAL;
    CG140_AMMOVTOX = AU_CG140_AMMOVTOX;
    CG140_CDUFMUNI = AU_CG140_CDUFMUNI;
    CG140_CDFISCAL = AU_CG140_CDFISCAL;
    CG140_NRSEQUEN = AU_CG140_NRSEQUEN;
    CG140_CDAJAPUR = AU_CG140_CDAJAPUR;
    CG140_DIIMPORT = AU_CG140_DIIMPORT;
    CG140_DSIMPOST = AU_CG140_DSIMPOST;
    CG140_TPIMPOST = AU_CG140_TPIMPOST;
    CG140_VLICMSTR = AU_CG140_VLICMSTR;
    CG140_VLCONTAB = AU_CG140_VLCONTAB;
    CG140_VLBASSTR = AU_CG140_VLBASSTR;
    CG140_ROWID = AU_CG140_ROWID;
}
private void CG140_FileToAuto()
{    AU_CG140_TPREGIST = CG140_TPREGIST;
    AU_CG140_CDEMPRES = CG140_CDEMPRES;
    AU_CG140_CDFILIAL = CG140_CDFILIAL;
    AU_CG140_AMMOVTOX = CG140_AMMOVTOX;
    AU_CG140_CDUFMUNI = CG140_CDUFMUNI;
    AU_CG140_CDFISCAL = CG140_CDFISCAL;
    AU_CG140_NRSEQUEN = CG140_NRSEQUEN;
    AU_CG140_CDAJAPUR = CG140_CDAJAPUR;
    AU_CG140_DIIMPORT = CG140_DIIMPORT;
    AU_CG140_DSIMPOST = CG140_DSIMPOST;
    AU_CG140_TPIMPOST = CG140_TPIMPOST;
    AU_CG140_VLICMSTR = CG140_VLICMSTR;
    AU_CG140_VLCONTAB = CG140_VLCONTAB;
    AU_CG140_VLBASSTR = CG140_VLBASSTR;
    AU_CG140_ROWID = CG140_ROWID;
 }
private void CG140_InitAuto()
{
    AU_CG140_TPREGIST = 0;
    AU_CG140_CDEMPRES = 0;
    AU_CG140_CDFILIAL = 0;
    AU_CG140_AMMOVTOX = 0;
    AU_CG140_CDUFMUNI = "";
    AU_CG140_CDFISCAL = 0;
    AU_CG140_NRSEQUEN = 0;
    AU_CG140_CDAJAPUR = "";
    AU_CG140_DIIMPORT = 0;
    AU_CG140_DSIMPOST = "";
    AU_CG140_TPIMPOST = 0;
    AU_CG140_VLICMSTR = 0;
    AU_CG140_VLCONTAB = 0;
    AU_CG140_VLBASSTR = 0;
    AU_CG140_ROWID = 0;
}
private String CG105_LookupEvery()
   throws Exception
{   String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG105_XSEEDEOF = false;
        CG105_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG105_FIELDS + " FROM CG105 ORDER BY ROWID  " ;
        if (CG105_CMD == null)
        {   CG105_CMD = CG105_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG105_TAB != null)
        {   CG105_TAB.close();
        }
        CG105_TAB = CG105_CMD.executeQuery(sqlCommand);
        if (CG105_TAB.next())
        {   xsdStatus = "";
            CG105_TableToFile();
        }
        else
        {   CG105_XSEEDEOF = true;
        }
        return(xsdStatus);
       }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG105_LookupEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CG105_LookupMoveNext()
   throws Exception
{   try
    {
        if (CG105_XSEEDEOF == true)
        {   return;
        }
        if (CG105_XSEEDSEEK == false)
        {   if (CG105_TAB.next())
            {    CG105_TableToFile();
            }
            else
            {   CG105_XSEEDEOF = true;
            }
         }
         else
         {    CG105_XSEEDSEEK = false;
         }
    }
    catch (SQLException e)
    {
     ShowDataMsg(e,"CG105_LookupMoveNext", "");
    }
}
private void CG105_InitFile()
{
    CG105_AMSALCON = 0;
    CG105_CDCTACON = 0;
    CG105_CDEMPRES = 0;
    CG105_INSITREG = "";
    CG105_NRCGCNUM = 0;
    CG105_TPLANCTO = 0;
    CG105_VLSALCON = bigZeros;
    CG105_VLSALORC = bigZeros;
}
private void CG105_TableToFile ()
  throws Exception
{   try
    {
        if (CG105_XSEEDEOF == true)
        {    return;
        }
       CG105_CDCTACON = CG105_TAB.getDouble("CDCTACON");
       CG105_NRCGCNUM = CG105_TAB.getDouble("NRCGCNUM");
       CG105_VLSALCON = CG105_TAB.getBigDecimal("VLSALCON");
       CG105_CDEMPRES = CG105_TAB.getDouble("CDEMPRES");
       CG105_TPLANCTO = CG105_TAB.getDouble("TPLANCTO");
       CG105_AMSALCON = CG105_TAB.getDouble("AMSALCON");
       CG105_INSITREG = CG105_TAB.getString("INSITREG");
       CG105_ROWID = CG105_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG105_TableToFile","");
    }
}
private String GS12502_DetermineEvery(String CDDOITEM ,double CDEMPRES ,String CDELEMTO)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        GS125_XSEEDEOF = false;
        GS125_XSEEDSEEK = true;
        CDDOITEM = rTrim(CDDOITEM);
        if (CDDOITEM.equals("") == true)
        {   CDDOITEM = " ";
        }
        CDELEMTO = rTrim(CDELEMTO);
        if (CDELEMTO.equals("") == true)
        {   CDELEMTO = " ";
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_GS125_FIELDS + " FROM GS125 with (NOLOCK INDEX=GS12502) WHERE (";
        sqlCommand = sqlCommand + " CDDOITEM = '" +  ReplaceQuotes(CDDOITEM) + "'";
        sqlCommand = sqlCommand + "  And CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDELEMTO = '" +  ReplaceQuotes(CDELEMTO) + "'";
        sqlCommand = sqlCommand + ") And (" + "INSITREG <> 'D'";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDDOITEM  ";
        sqlCommand = sqlCommand + " ,CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDELEMTO  ";
        if (GS125_CMD == null)
        {   GS125_CMD = GS125_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (GS125_TAB != null)
        {   GS125_TAB.close();
        }
        GS125_TAB = GS125_CMD.executeQuery(sqlCommand);
        if (GS125_TAB.next())
        {   xsdStatus = "";
            GS125_TableToFile();
        }
        else
        {   GS125_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS125_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private String GS125_Lock()
   throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "select /*+ CGR032 */ " + ODBC_GS125_FIELDS + " from GS125 ";
        sqlCommand = sqlCommand + " WITH (UPDLOCK INDEX=FGS125ROWID) where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(GS125_ROWID);
        if (GS125_Lk.CMD == null)
        {   GS125_Lk.CMD = GLB.CONNECTION.createStatement();
        }
        if (GS125_Lk.TAB != null)
        {   GS125_Lk.TAB.close();
        }
        GS125_Lk.TAB = GS125_Lk.CMD.executeQuery(sqlCommand);
        if (GS125_Lk.TAB.next() == true)
        {   xsdStatus = "";
            GS125_TableToFile(GS125_Lk);
        }
        else
        {   GS125_Lk.EOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS125_Lock",sqlCommand);
        return(xsdStatus);
    }
}
private void GS125_TableToFile (XseedJDBC pXseedJDBC )
  throws Exception
{   try
    {
        if (pXseedJDBC.EOF == true)
        {    return;
        }
       GS125_CDELEMTO = pXseedJDBC.TAB.getString("CDELEMTO");
       GS125_DSELEMEN = pXseedJDBC.TAB.getString("DSELEMEN");
       GS125_VLELEMEN = pXseedJDBC.TAB.getBigDecimal("VLELEMEN");
       GS125_CDDOITEM = pXseedJDBC.TAB.getString("CDDOITEM");
       GS125_CDEMPRES = pXseedJDBC.TAB.getDouble("CDEMPRES");
       GS125_INCHAVDS = pXseedJDBC.TAB.getString("INCHAVDS");
       GS125_INSITREG = pXseedJDBC.TAB.getString("INSITREG");
       GS125_ROWID = pXseedJDBC.TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "GS125_TableToFile","");
    }
}
private String CG105_Lock()
   throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "select /*+ CGR032 */ " + ODBC_CG105_FIELDS + " from CG105 ";
        sqlCommand = sqlCommand + " WITH (UPDLOCK INDEX=FCG105ROWID) where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG105_ROWID);
        if (CG105_Lk.CMD == null)
        {   CG105_Lk.CMD = GLB.CONNECTION.createStatement();
        }
        if (CG105_Lk.TAB != null)
        {   CG105_Lk.TAB.close();
        }
        CG105_Lk.TAB = CG105_Lk.CMD.executeQuery(sqlCommand);
        if (CG105_Lk.TAB.next() == true)
        {   xsdStatus = "";
            CG105_TableToFile(CG105_Lk);
        }
        else
        {   CG105_Lk.EOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG105_Lock",sqlCommand);
        return(xsdStatus);
    }
}
private void CG105_TableToFile (XseedJDBC pXseedJDBC )
  throws Exception
{   try
    {
        if (pXseedJDBC.EOF == true)
        {    return;
        }
       CG105_CDCTACON = pXseedJDBC.TAB.getDouble("CDCTACON");
       CG105_NRCGCNUM = pXseedJDBC.TAB.getDouble("NRCGCNUM");
       CG105_VLSALCON = pXseedJDBC.TAB.getBigDecimal("VLSALCON");
       CG105_CDEMPRES = pXseedJDBC.TAB.getDouble("CDEMPRES");
       CG105_TPLANCTO = pXseedJDBC.TAB.getDouble("TPLANCTO");
       CG105_AMSALCON = pXseedJDBC.TAB.getDouble("AMSALCON");
       CG105_INSITREG = pXseedJDBC.TAB.getString("INSITREG");
       CG105_ROWID = pXseedJDBC.TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG105_TableToFile","");
    }
}
private String CG10501_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPLANCTO ,double AMSALCON ,double CDCTACON ,double NRCGCNUM, double CDEMPRESUntil,double TPLANCTOUntil,double AMSALCONUntil,double CDCTACONUntil,double NRCGCNUMUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG105_XSEEDEOF = false;
        CG105_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG105_FIELDS + " FROM CG105 with (NOLOCK INDEX=CG10501) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " TPLANCTO = " + cStr(TPLANCTO) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " TPLANCTO = " + cStr(TPLANCTO) + " And " +
           " AMSALCON = " + cStr(AMSALCON) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " TPLANCTO = " + cStr(TPLANCTO) + " And " +
           " AMSALCON = " + cStr(AMSALCON) + " And " +
           " CDCTACON = " + cStr(CDCTACON) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG10501_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,TPLANCTO,AMSALCON,CDCTACON,NRCGCNUM, CDEMPRESUntil,TPLANCTOUntil,AMSALCONUntil,CDCTACONUntil,NRCGCNUMUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG10501_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,TPLANCTO,AMSALCON,CDCTACON,NRCGCNUM, CDEMPRESUntil,TPLANCTOUntil,AMSALCONUntil,CDCTACONUntil,NRCGCNUMUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG10501_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,TPLANCTO,AMSALCON,CDCTACON,NRCGCNUM, CDEMPRESUntil,TPLANCTOUntil,AMSALCONUntil,CDCTACONUntil,NRCGCNUMUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG10501_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,TPLANCTO,AMSALCON,CDCTACON,NRCGCNUM, CDEMPRESUntil,TPLANCTOUntil,AMSALCONUntil,CDCTACONUntil,NRCGCNUMUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + CG10501_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,TPLANCTO,AMSALCON,CDCTACON,NRCGCNUM, CDEMPRESUntil,TPLANCTOUntil,AMSALCONUntil,CDCTACONUntil,NRCGCNUMUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,TPLANCTO  ";
        sqlCommand = sqlCommand + " ,AMSALCON  ";
        sqlCommand = sqlCommand + " ,CDCTACON  ";
        sqlCommand = sqlCommand + " ,NRCGCNUM  ";
        if (CG105_CMD == null)
        {   CG105_CMD = CG105_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG105_TAB != null)
        {   CG105_TAB.close();
        }
        CG105_TAB = CG105_CMD.executeQuery(sqlCommand);
        if (CG105_TAB.next())
        {   xsdStatus = "";
            CG105_TableToFile();
        }
        else
        {   CG105_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG105_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG10501_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPLANCTO ,double AMSALCON ,double CDCTACON ,double NRCGCNUM, double CDEMPRESUntil,double TPLANCTOUntil,double AMSALCONUntil,double CDCTACONUntil,double NRCGCNUMUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " TPLANCTO =  " + cStr(TPLANCTO) + " And " +
    " AMSALCON =  " + cStr(AMSALCON) + " And " +
    " CDCTACON =  " + cStr(CDCTACON) + " And " +
    " NRCGCNUM >=  " + cStr(NRCGCNUM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " TPLANCTO =  " + cStr(TPLANCTO) + " And " +
    " AMSALCON =  " + cStr(AMSALCON) + " And " +
    " CDCTACON >  " + cStr(CDCTACON) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " TPLANCTO =  " + cStr(TPLANCTO) + " And " +
    " AMSALCON >  " + cStr(AMSALCON) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " TPLANCTO >  " + cStr(TPLANCTO) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " TPLANCTO =  " + cStr(TPLANCTOUntil) + " And " +
       " AMSALCON =  " + cStr(AMSALCONUntil) + " And " +
       " CDCTACON =  " + cStr(CDCTACONUntil) + " And " +
       " NRCGCNUM <=  " + cStr(NRCGCNUMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " TPLANCTO =  " + cStr(TPLANCTOUntil) + " And " +
       " AMSALCON =  " + cStr(AMSALCONUntil) + " And " +
       " CDCTACON <  " + cStr(CDCTACONUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " TPLANCTO =  " + cStr(TPLANCTOUntil) + " And " +
       " AMSALCON <  " + cStr(AMSALCONUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " TPLANCTO <  " + cStr(TPLANCTOUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG10501_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPLANCTO ,double AMSALCON ,double CDCTACON ,double NRCGCNUM, double CDEMPRESUntil,double TPLANCTOUntil,double AMSALCONUntil,double CDCTACONUntil,double NRCGCNUMUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " TPLANCTO =  " + cStr(TPLANCTO) + " And " +
    " AMSALCON =  " + cStr(AMSALCON) + " And " +
    " CDCTACON =  " + cStr(CDCTACON) + " And " +
    " NRCGCNUM >=  " + cStr(NRCGCNUM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPLANCTO =  " + cStr(TPLANCTO) + " And " +
    " AMSALCON =  " + cStr(AMSALCON) + " And " +
    " CDCTACON >  " + cStr(CDCTACON) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPLANCTO =  " + cStr(TPLANCTO) + " And " +
    " AMSALCON >  " + cStr(AMSALCON) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPLANCTO >  " + cStr(TPLANCTO) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " TPLANCTO =  " + cStr(TPLANCTOUntil) + " And " +
       " AMSALCON =  " + cStr(AMSALCONUntil) + " And " +
       " CDCTACON =  " + cStr(CDCTACONUntil) + " And " +
       " NRCGCNUM <=  " + cStr(NRCGCNUMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPLANCTO =  " + cStr(TPLANCTOUntil) + " And " +
       " AMSALCON =  " + cStr(AMSALCONUntil) + " And " +
       " CDCTACON <  " + cStr(CDCTACONUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPLANCTO =  " + cStr(TPLANCTOUntil) + " And " +
       " AMSALCON <  " + cStr(AMSALCONUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPLANCTO <  " + cStr(TPLANCTOUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG10501_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPLANCTO ,double AMSALCON ,double CDCTACON ,double NRCGCNUM, double CDEMPRESUntil,double TPLANCTOUntil,double AMSALCONUntil,double CDCTACONUntil,double NRCGCNUMUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " AMSALCON =  " + cStr(AMSALCON) + " And " +
    " CDCTACON =  " + cStr(CDCTACON) + " And " +
    " NRCGCNUM >=  " + cStr(NRCGCNUM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMSALCON =  " + cStr(AMSALCON) + " And " +
    " CDCTACON >  " + cStr(CDCTACON) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMSALCON >  " + cStr(AMSALCON) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " AMSALCON =  " + cStr(AMSALCONUntil) + " And " +
       " CDCTACON =  " + cStr(CDCTACONUntil) + " And " +
       " NRCGCNUM <=  " + cStr(NRCGCNUMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMSALCON =  " + cStr(AMSALCONUntil) + " And " +
       " CDCTACON <  " + cStr(CDCTACONUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMSALCON <  " + cStr(AMSALCONUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG10501_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPLANCTO ,double AMSALCON ,double CDCTACON ,double NRCGCNUM, double CDEMPRESUntil,double TPLANCTOUntil,double AMSALCONUntil,double CDCTACONUntil,double NRCGCNUMUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDCTACON =  " + cStr(CDCTACON) + " And " +
    " NRCGCNUM >=  " + cStr(NRCGCNUM) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDCTACON >  " + cStr(CDCTACON) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDCTACON =  " + cStr(CDCTACONUntil) + " And " +
       " NRCGCNUM <=  " + cStr(NRCGCNUMUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDCTACON <  " + cStr(CDCTACONUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG10501_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPLANCTO ,double AMSALCON ,double CDCTACON ,double NRCGCNUM, double CDEMPRESUntil,double TPLANCTOUntil,double AMSALCONUntil,double CDCTACONUntil,double NRCGCNUMUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " NRCGCNUM >=  " + cStr(NRCGCNUM) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " NRCGCNUM <=  " + cStr(NRCGCNUMUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG10501_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG105_XSEEDEOF == true)
        {   return;
        }
        if (CG105_XSEEDSEEK == false)
        {    if (CG105_TAB.next())
             {    CG105_TableToFile ();
             }
             else
             {    CG105_XSEEDEOF = true;
             }
        }
        {    CG105_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG105_DetermineMoveNext", "");
    }
}
private String CG10201_DetermineEvery(double CDEMPRES ,double CDCTACON)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        CG102_XSEEDEOF = false;
        CG102_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG102_FIELDS + " FROM CG102 with (NOLOCK INDEX=CG10201) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDCTACON = " + cStr(CDCTACON);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDCTACON  ";
        if (CG102_CMD == null)
        {   CG102_CMD = CG102_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG102_TAB != null)
        {   CG102_TAB.close();
        }
        CG102_TAB = CG102_CMD.executeQuery(sqlCommand);
        if (CG102_TAB.next())
        {   xsdStatus = "";
            CG102_TableToFile();
        }
        else
        {   CG102_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG102_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CG10201_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG102_XSEEDEOF == true)
        {   return;
        }
        if (CG102_XSEEDSEEK == false)
        {    if (CG102_TAB.next())
             {    CG102_TableToFile ();
             }
             else
             {    CG102_XSEEDEOF = true;
             }
        }
        {    CG102_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG102_DetermineMoveNext", "");
    }
}
private void CG102_InitFile()
{
    CG102_CDCLACON = "";
    CG102_CDCLADRE = "";
    CG102_CDCTACON = 0;
    CG102_CDCTAFIL = 0;
    CG102_CDCTARSP = "";
    CG102_CDCTPGCI = 0;
    CG102_CDCTPGMC = 0;
    CG102_CDCUSPRO = 0;
    CG102_CDECUSTO = 0;
    CG102_CDEMPRES = 0;
    CG102_CDGRUDES = 0;
    CG102_CDNATCSP = 0;
    CG102_CDNATSUB = 0;
    CG102_CDRAZAUX = 0;
    CG102_DSCTACON = "";
    CG102_INATIVOX = 0;
    CG102_INCONCIL = "";
    CG102_INCONMOV = 0;
    CG102_INSITREG = "";
    CG102_TPCONVCI = 0;
    CG102_TPCONVMC = 0;
    CG102_TPCTACON = 0;
}
private void CG102_TableToFile ()
  throws Exception
{   try
    {
        if (CG102_XSEEDEOF == true)
        {    return;
        }
       CG102_TPCTACON = CG102_TAB.getDouble("TPCTACON");
       CG102_CDCLACON = CG102_TAB.getString("CDCLACON");
       CG102_CDECUSTO = CG102_TAB.getDouble("CDECUSTO");
       CG102_CDRAZAUX = CG102_TAB.getDouble("CDRAZAUX");
       CG102_INCONCIL = CG102_TAB.getString("INCONCIL");
       CG102_ROWID = CG102_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG102_TableToFile","");
    }
}
private void CG105_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG105 (";
        sqlCommand = sqlCommand + " AMSALCON";
        sqlCommand = sqlCommand + ",CDCTACON";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",NRCGCNUM";
        sqlCommand = sqlCommand + ",TPLANCTO";
        sqlCommand = sqlCommand + ",VLSALCON";
        sqlCommand = sqlCommand + ",VLSALORC";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CG105_AMSALCON);
        sqlCommand = sqlCommand + "," + cStr(CG105_CDCTACON);
        sqlCommand = sqlCommand + "," + cStr(CG105_CDEMPRES);
        if (CG105_INSITREG.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG105_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG105_NRCGCNUM);
        sqlCommand = sqlCommand + "," + cStr(CG105_TPLANCTO);
        sqlCommand = sqlCommand + "," + cStr(CG105_VLSALCON);
        sqlCommand = sqlCommand + ", 0";
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG105_Insert");
            }
        }
    }
}
private void CG105_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG105 set ";
        sqlCommand = sqlCommand + "CDCTACON = " + cStr(CG105_CDCTACON);
        sqlCommand = sqlCommand + ",NRCGCNUM = " + cStr(CG105_NRCGCNUM);
        sqlCommand = sqlCommand + ",VLSALCON = " + cStr(CG105_VLSALCON);
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(CG105_CDEMPRES);
        sqlCommand = sqlCommand + ",TPLANCTO = " + cStr(CG105_TPLANCTO);
        sqlCommand = sqlCommand + ",AMSALCON = " + cStr(CG105_AMSALCON);
        if (CG105_INSITREG.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INSITREG = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INSITREG = '" + ReplaceQuotes(rTrim(CG105_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG105_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG105_Modify");
         }
     }
}
private void CG105_AutoToFile()
{
    CG105_InitFile();
    CG105_CDCTACON = AU_CG105_CDCTACON;
    CG105_NRCGCNUM = AU_CG105_NRCGCNUM;
    CG105_VLSALCON = AU_CG105_VLSALCON;
    CG105_CDEMPRES = AU_CG105_CDEMPRES;
    CG105_TPLANCTO = AU_CG105_TPLANCTO;
    CG105_AMSALCON = AU_CG105_AMSALCON;
    CG105_INSITREG = AU_CG105_INSITREG;
    CG105_ROWID = AU_CG105_ROWID;
}
private void CG105_FileToAuto()
{    AU_CG105_CDCTACON = CG105_CDCTACON;
    AU_CG105_NRCGCNUM = CG105_NRCGCNUM;
    AU_CG105_VLSALCON = CG105_VLSALCON;
    AU_CG105_CDEMPRES = CG105_CDEMPRES;
    AU_CG105_TPLANCTO = CG105_TPLANCTO;
    AU_CG105_AMSALCON = CG105_AMSALCON;
    AU_CG105_INSITREG = CG105_INSITREG;
    AU_CG105_ROWID = CG105_ROWID;
 }
private void CG105_InitAuto()
{
    AU_CG105_CDCTACON = 0;
    AU_CG105_NRCGCNUM = 0;
    AU_CG105_VLSALCON = bigZeros;
    AU_CG105_CDEMPRES = 0;
    AU_CG105_TPLANCTO = 0;
    AU_CG105_AMSALCON = 0;
    AU_CG105_INSITREG = "";
    AU_CG105_ROWID = 0;
}
private String CG106_Lock()
   throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "select /*+ CGR032 */ " + ODBC_CG106_FIELDS + " from CG106 ";
        sqlCommand = sqlCommand + " WITH (UPDLOCK INDEX=FCG106ROWID) where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG106_ROWID);
        if (CG106_Lk.CMD == null)
        {   CG106_Lk.CMD = GLB.CONNECTION.createStatement();
        }
        if (CG106_Lk.TAB != null)
        {   CG106_Lk.TAB.close();
        }
        CG106_Lk.TAB = CG106_Lk.CMD.executeQuery(sqlCommand);
        if (CG106_Lk.TAB.next() == true)
        {   xsdStatus = "";
            CG106_TableToFile(CG106_Lk);
        }
        else
        {   CG106_Lk.EOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG106_Lock",sqlCommand);
        return(xsdStatus);
    }
}
private void CG106_TableToFile (XseedJDBC pXseedJDBC )
  throws Exception
{   try
    {
        if (pXseedJDBC.EOF == true)
        {    return;
        }
       CG106_VLPROGMO = pXseedJDBC.TAB.getDouble("VLPROGMO");
       CG106_VLPROUMG = pXseedJDBC.TAB.getDouble("VLPROUMG");
       CG106_VLREALCR = pXseedJDBC.TAB.getDouble("VLREALCR");
       CG106_VLREALMO = pXseedJDBC.TAB.getDouble("VLREALMO");
       CG106_VLREALMG = pXseedJDBC.TAB.getDouble("VLREALMG");
       CG106_CDECUSTO = pXseedJDBC.TAB.getDouble("CDECUSTO");
       CG106_AMSALCON = pXseedJDBC.TAB.getDouble("AMSALCON");
       CG106_CDCLACUS = pXseedJDBC.TAB.getDouble("CDCLACUS");
       CG106_CDCONCLA = pXseedJDBC.TAB.getDouble("CDCONCLA");
       CG106_CDEMPRES = pXseedJDBC.TAB.getDouble("CDEMPRES");
       CG106_CDNVCCUS = pXseedJDBC.TAB.getDouble("CDNVCCUS");
       CG106_ROWID = pXseedJDBC.TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG106_TableToFile","");
    }
}
private String CG10601_DetermineEvery(double CDEMPRES ,double AMSALCON ,double CDCONCLA ,double CDCLACUS ,double CDNVCCUS)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        CG106_XSEEDEOF = false;
        CG106_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG106_FIELDS + " FROM CG106 with (NOLOCK INDEX=CG10601) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And AMSALCON = " + cStr(AMSALCON);
        sqlCommand = sqlCommand + "  And CDCONCLA = " + cStr(CDCONCLA);
        sqlCommand = sqlCommand + "  And CDCLACUS = " + cStr(CDCLACUS);
        sqlCommand = sqlCommand + "  And CDNVCCUS = " + cStr(CDNVCCUS);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,AMSALCON  ";
        sqlCommand = sqlCommand + " ,CDCONCLA  ";
        sqlCommand = sqlCommand + " ,CDCLACUS  ";
        sqlCommand = sqlCommand + " ,CDNVCCUS  ";
        if (CG106_CMD == null)
        {   CG106_CMD = CG106_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG106_TAB != null)
        {   CG106_TAB.close();
        }
        CG106_TAB = CG106_CMD.executeQuery(sqlCommand);
        if (CG106_TAB.next())
        {   xsdStatus = "";
            CG106_TableToFile();
        }
        else
        {   CG106_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG106_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CG10601_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG106_XSEEDEOF == true)
        {   return;
        }
        if (CG106_XSEEDSEEK == false)
        {    if (CG106_TAB.next())
             {    CG106_TableToFile ();
             }
             else
             {    CG106_XSEEDEOF = true;
             }
        }
        {    CG106_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG106_DetermineMoveNext", "");
    }
}
private void CG106_InitFile()
{
    CG106_AMSALCON = 0;
    CG106_CDCLACUS = 0;
    CG106_CDCONCLA = 0;
    CG106_CDECUSTO = 0;
    CG106_CDEMPRES = 0;
    CG106_CDNVCCUS = 0;
    CG106_INSITREG = "";
    CG106_VLPROGMO = 0;
    CG106_VLPROUMG = 0;
    CG106_VLREALCR = 0;
    CG106_VLREALMG = 0;
    CG106_VLREALMO = 0;
}
private void CG106_TableToFile ()
  throws Exception
{   try
    {
        if (CG106_XSEEDEOF == true)
        {    return;
        }
       CG106_VLPROGMO = CG106_TAB.getDouble("VLPROGMO");
       CG106_VLPROUMG = CG106_TAB.getDouble("VLPROUMG");
       CG106_VLREALCR = CG106_TAB.getDouble("VLREALCR");
       CG106_VLREALMO = CG106_TAB.getDouble("VLREALMO");
       CG106_VLREALMG = CG106_TAB.getDouble("VLREALMG");
       CG106_CDECUSTO = CG106_TAB.getDouble("CDECUSTO");
       CG106_AMSALCON = CG106_TAB.getDouble("AMSALCON");
       CG106_CDCLACUS = CG106_TAB.getDouble("CDCLACUS");
       CG106_CDCONCLA = CG106_TAB.getDouble("CDCONCLA");
       CG106_CDEMPRES = CG106_TAB.getDouble("CDEMPRES");
       CG106_CDNVCCUS = CG106_TAB.getDouble("CDNVCCUS");
       CG106_ROWID = CG106_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG106_TableToFile","");
    }
}
private void CG106_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG106 set ";
        sqlCommand = sqlCommand + "VLPROGMO = " + cStr(CG106_VLPROGMO);
        sqlCommand = sqlCommand + ",VLPROUMG = " + cStr(CG106_VLPROUMG);
        sqlCommand = sqlCommand + ",VLREALCR = " + cStr(CG106_VLREALCR);
        sqlCommand = sqlCommand + ",VLREALMO = " + cStr(CG106_VLREALMO);
        sqlCommand = sqlCommand + ",VLREALMG = " + cStr(CG106_VLREALMG);
        sqlCommand = sqlCommand + ",CDECUSTO = " + cStr(CG106_CDECUSTO);
        sqlCommand = sqlCommand + ",AMSALCON = " + cStr(CG106_AMSALCON);
        sqlCommand = sqlCommand + ",CDCLACUS = " + cStr(CG106_CDCLACUS);
        sqlCommand = sqlCommand + ",CDCONCLA = " + cStr(CG106_CDCONCLA);
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(CG106_CDEMPRES);
        sqlCommand = sqlCommand + ",CDNVCCUS = " + cStr(CG106_CDNVCCUS);
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG106_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG106_Modify");
         }
     }
}
private void CG106_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG106 (";
        sqlCommand = sqlCommand + " AMSALCON";
        sqlCommand = sqlCommand + ",CDCLACUS";
        sqlCommand = sqlCommand + ",CDCONCLA";
        sqlCommand = sqlCommand + ",CDECUSTO";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",CDNVCCUS";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",VLPROGMO";
        sqlCommand = sqlCommand + ",VLPROUMG";
        sqlCommand = sqlCommand + ",VLREALCR";
        sqlCommand = sqlCommand + ",VLREALMG";
        sqlCommand = sqlCommand + ",VLREALMO";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CG106_AMSALCON);
        sqlCommand = sqlCommand + "," + cStr(CG106_CDCLACUS);
        sqlCommand = sqlCommand + "," + cStr(CG106_CDCONCLA);
        sqlCommand = sqlCommand + "," + cStr(CG106_CDECUSTO);
        sqlCommand = sqlCommand + "," + cStr(CG106_CDEMPRES);
        sqlCommand = sqlCommand + "," + cStr(CG106_CDNVCCUS);
        sqlCommand = sqlCommand + ",' '";
        sqlCommand = sqlCommand + "," + cStr(CG106_VLPROGMO);
        sqlCommand = sqlCommand + "," + cStr(CG106_VLPROUMG);
        sqlCommand = sqlCommand + "," + cStr(CG106_VLREALCR);
        sqlCommand = sqlCommand + "," + cStr(CG106_VLREALMG);
        sqlCommand = sqlCommand + "," + cStr(CG106_VLREALMO);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG106_Insert");
            }
        }
    }
}
private void CG106_AutoToFile()
{
    CG106_InitFile();
    CG106_VLPROGMO = AU_CG106_VLPROGMO;
    CG106_VLPROUMG = AU_CG106_VLPROUMG;
    CG106_VLREALCR = AU_CG106_VLREALCR;
    CG106_VLREALMO = AU_CG106_VLREALMO;
    CG106_VLREALMG = AU_CG106_VLREALMG;
    CG106_CDECUSTO = AU_CG106_CDECUSTO;
    CG106_AMSALCON = AU_CG106_AMSALCON;
    CG106_CDCLACUS = AU_CG106_CDCLACUS;
    CG106_CDCONCLA = AU_CG106_CDCONCLA;
    CG106_CDEMPRES = AU_CG106_CDEMPRES;
    CG106_CDNVCCUS = AU_CG106_CDNVCCUS;
    CG106_ROWID = AU_CG106_ROWID;
}
private void CG106_FileToAuto()
{    AU_CG106_VLPROGMO = CG106_VLPROGMO;
    AU_CG106_VLPROUMG = CG106_VLPROUMG;
    AU_CG106_VLREALCR = CG106_VLREALCR;
    AU_CG106_VLREALMO = CG106_VLREALMO;
    AU_CG106_VLREALMG = CG106_VLREALMG;
    AU_CG106_CDECUSTO = CG106_CDECUSTO;
    AU_CG106_AMSALCON = CG106_AMSALCON;
    AU_CG106_CDCLACUS = CG106_CDCLACUS;
    AU_CG106_CDCONCLA = CG106_CDCONCLA;
    AU_CG106_CDEMPRES = CG106_CDEMPRES;
    AU_CG106_CDNVCCUS = CG106_CDNVCCUS;
    AU_CG106_ROWID = CG106_ROWID;
 }
private void CG106_InitAuto()
{
    AU_CG106_VLPROGMO = 0;
    AU_CG106_VLPROUMG = 0;
    AU_CG106_VLREALCR = 0;
    AU_CG106_VLREALMO = 0;
    AU_CG106_VLREALMG = 0;
    AU_CG106_CDECUSTO = 0;
    AU_CG106_AMSALCON = 0;
    AU_CG106_CDCLACUS = 0;
    AU_CG106_CDCONCLA = 0;
    AU_CG106_CDEMPRES = 0;
    AU_CG106_CDNVCCUS = 0;
    AU_CG106_ROWID = 0;
}
private String CG107_Lock()
   throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "select /*+ CGR032 */ " + ODBC_CG107_FIELDS + " from CG107 ";
        sqlCommand = sqlCommand + " WITH (UPDLOCK INDEX=FCG107ROWID) where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG107_ROWID);
        if (CG107_Lk.CMD == null)
        {   CG107_Lk.CMD = GLB.CONNECTION.createStatement();
        }
        if (CG107_Lk.TAB != null)
        {   CG107_Lk.TAB.close();
        }
        CG107_Lk.TAB = CG107_Lk.CMD.executeQuery(sqlCommand);
        if (CG107_Lk.TAB.next() == true)
        {   xsdStatus = "";
            CG107_TableToFile(CG107_Lk);
        }
        else
        {   CG107_Lk.EOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG107_Lock",sqlCommand);
        return(xsdStatus);
    }
}
private void CG107_TableToFile (XseedJDBC pXseedJDBC )
  throws Exception
{   try
    {
        if (pXseedJDBC.EOF == true)
        {    return;
        }
       CG107_VLLANCRE = pXseedJDBC.TAB.getBigDecimal("VLLANCRE");
       CG107_VLLANDEB = pXseedJDBC.TAB.getBigDecimal("VLLANDEB");
       CG107_VLDIFLAN = pXseedJDBC.TAB.getBigDecimal("VLDIFLAN");
       CG107_INLOTLIS = pXseedJDBC.TAB.getDouble("INLOTLIS");
       CG107_NRUSUALT = pXseedJDBC.TAB.getDouble("NRUSUALT");
       CG107_CDATIVID = pXseedJDBC.TAB.getString("CDATIVID");
       CG107_CDEMPRES = pXseedJDBC.TAB.getDouble("CDEMPRES");
       CG107_CDORILAN = pXseedJDBC.TAB.getDouble("CDORILAN");
       CG107_DILANCTO = pXseedJDBC.TAB.getDouble("DILANCTO");
       CG107_INSITREG = pXseedJDBC.TAB.getString("INSITREG");
       CG107_NRFORMCG = pXseedJDBC.TAB.getDouble("NRFORMCG");
       CG107_NRLOTECG = pXseedJDBC.TAB.getDouble("NRLOTECG");
       CG107_NRUSUCRI = pXseedJDBC.TAB.getDouble("NRUSUCRI");
       CG107_TPLANCTO = pXseedJDBC.TAB.getDouble("TPLANCTO");
       CG107_ROWID = pXseedJDBC.TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG107_TableToFile","");
    }
}
private String CG10703_DetermineEvery(double CDEMPRES ,double TPLANCTO ,double DILANCTO ,double CDORILAN ,double NRLOTECG ,double NRFORMCG)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        CG107_XSEEDEOF = false;
        CG107_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG107_FIELDS + " FROM CG107 with (NOLOCK INDEX=CG10703) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And TPLANCTO = " + cStr(TPLANCTO);
        sqlCommand = sqlCommand + "  And DILANCTO = " + cStr(DILANCTO);
        sqlCommand = sqlCommand + "  And CDORILAN = " + cStr(CDORILAN);
        sqlCommand = sqlCommand + "  And NRLOTECG = " + cStr(NRLOTECG);
        sqlCommand = sqlCommand + "  And NRFORMCG = " + cStr(NRFORMCG);
        sqlCommand = sqlCommand + ") And (" + "NRFORMCG <> 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,TPLANCTO  ";
        sqlCommand = sqlCommand + " ,DILANCTO  ";
        sqlCommand = sqlCommand + " ,CDORILAN  ";
        sqlCommand = sqlCommand + " ,NRLOTECG  ";
        sqlCommand = sqlCommand + " ,NRFORMCG  ";
        if (CG107_CMD == null)
        {   CG107_CMD = CG107_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG107_TAB != null)
        {   CG107_TAB.close();
        }
        CG107_TAB = CG107_CMD.executeQuery(sqlCommand);
        if (CG107_TAB.next())
        {   xsdStatus = "";
            CG107_TableToFile();
        }
        else
        {   CG107_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG107_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CG10703_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG107_XSEEDEOF == true)
        {   return;
        }
        if (CG107_XSEEDSEEK == false)
        {    if (CG107_TAB.next())
             {    CG107_TableToFile ();
             }
             else
             {    CG107_XSEEDEOF = true;
             }
        }
        {    CG107_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG107_DetermineMoveNext", "");
    }
}
private void CG107_InitFile()
{
    CG107_CDATIVID = "";
    CG107_CDEMPRES = 0;
    CG107_CDORILAN = 0;
    CG107_DILANCTO = 0;
    CG107_INLOTLIS = 0;
    CG107_INSITREG = "";
    CG107_NRFORMCG = 0;
    CG107_NRLOTECG = 0;
    CG107_NRUSUALT = 0;
    CG107_NRUSUCRI = 0;
    CG107_TPLANCTO = 0;
    CG107_VLDIFLAN = bigZeros;
    CG107_VLLANCRE = bigZeros;
    CG107_VLLANDEB = bigZeros;
}
private void CG107_TableToFile ()
  throws Exception
{   try
    {
        if (CG107_XSEEDEOF == true)
        {    return;
        }
       CG107_VLLANCRE = CG107_TAB.getBigDecimal("VLLANCRE");
       CG107_VLLANDEB = CG107_TAB.getBigDecimal("VLLANDEB");
       CG107_VLDIFLAN = CG107_TAB.getBigDecimal("VLDIFLAN");
       CG107_INLOTLIS = CG107_TAB.getDouble("INLOTLIS");
       CG107_NRUSUALT = CG107_TAB.getDouble("NRUSUALT");
       CG107_CDATIVID = CG107_TAB.getString("CDATIVID");
       CG107_CDEMPRES = CG107_TAB.getDouble("CDEMPRES");
       CG107_CDORILAN = CG107_TAB.getDouble("CDORILAN");
       CG107_DILANCTO = CG107_TAB.getDouble("DILANCTO");
       CG107_INSITREG = CG107_TAB.getString("INSITREG");
       CG107_NRFORMCG = CG107_TAB.getDouble("NRFORMCG");
       CG107_NRLOTECG = CG107_TAB.getDouble("NRLOTECG");
       CG107_NRUSUCRI = CG107_TAB.getDouble("NRUSUCRI");
       CG107_TPLANCTO = CG107_TAB.getDouble("TPLANCTO");
       CG107_ROWID = CG107_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG107_TableToFile","");
    }
}
private void CG107_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG107 set ";
        sqlCommand = sqlCommand + "VLLANCRE = " + cStr(CG107_VLLANCRE);
        sqlCommand = sqlCommand + ",VLLANDEB = " + cStr(CG107_VLLANDEB);
        sqlCommand = sqlCommand + ",VLDIFLAN = " + cStr(CG107_VLDIFLAN);
        sqlCommand = sqlCommand + ",INLOTLIS = " + cStr(CG107_INLOTLIS);
        sqlCommand = sqlCommand + ",NRUSUALT = " + cStr(CG107_NRUSUALT);
        if (CG107_CDATIVID.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",CDATIVID = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",CDATIVID = '" + ReplaceQuotes(rTrim(CG107_CDATIVID)) + "'";
        }
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(CG107_CDEMPRES);
        sqlCommand = sqlCommand + ",CDORILAN = " + cStr(CG107_CDORILAN);
        sqlCommand = sqlCommand + ",DILANCTO = " + cStr(CG107_DILANCTO);
        if (CG107_INSITREG.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INSITREG = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INSITREG = '" + ReplaceQuotes(rTrim(CG107_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + ",NRFORMCG = " + cStr(CG107_NRFORMCG);
        sqlCommand = sqlCommand + ",NRLOTECG = " + cStr(CG107_NRLOTECG);
        sqlCommand = sqlCommand + ",NRUSUCRI = " + cStr(CG107_NRUSUCRI);
        sqlCommand = sqlCommand + ",TPLANCTO = " + cStr(CG107_TPLANCTO);
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG107_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG107_Modify");
         }
     }
}
private void CG107_Delete()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "delete /*+ CGR032 */ from CG107 where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG107_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
        if (recordsAffected == 0)
        {   GLB.STATUS = "*****";
        }
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else
        {   ShowErrorMsg (e,"CG107_Delete");
        }
     }
}
private void CG107_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG107 (";
        sqlCommand = sqlCommand + " CDATIVID";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",CDORILAN";
        sqlCommand = sqlCommand + ",DILANCTO";
        sqlCommand = sqlCommand + ",INLOTLIS";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",NRFORMCG";
        sqlCommand = sqlCommand + ",NRLOTECG";
        sqlCommand = sqlCommand + ",NRUSUALT";
        sqlCommand = sqlCommand + ",NRUSUCRI";
        sqlCommand = sqlCommand + ",TPLANCTO";
        sqlCommand = sqlCommand + ",VLDIFLAN";
        sqlCommand = sqlCommand + ",VLLANCRE";
        sqlCommand = sqlCommand + ",VLLANDEB";
        sqlCommand = sqlCommand + ") values (";
        if (CG107_CDATIVID.trim().equals("") == true)
        {   sqlCommand = sqlCommand + " ' '";
        }
        else
        {    sqlCommand = sqlCommand + " '" + ReplaceQuotes(rTrim(CG107_CDATIVID)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG107_CDEMPRES);
        sqlCommand = sqlCommand + "," + cStr(CG107_CDORILAN);
        sqlCommand = sqlCommand + "," + cStr(CG107_DILANCTO);
        sqlCommand = sqlCommand + "," + cStr(CG107_INLOTLIS);
        if (CG107_INSITREG.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG107_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG107_NRFORMCG);
        sqlCommand = sqlCommand + "," + cStr(CG107_NRLOTECG);
        sqlCommand = sqlCommand + "," + cStr(CG107_NRUSUALT);
        sqlCommand = sqlCommand + "," + cStr(CG107_NRUSUCRI);
        sqlCommand = sqlCommand + "," + cStr(CG107_TPLANCTO);
        sqlCommand = sqlCommand + "," + cStr(CG107_VLDIFLAN);
        sqlCommand = sqlCommand + "," + cStr(CG107_VLLANCRE);
        sqlCommand = sqlCommand + "," + cStr(CG107_VLLANDEB);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG107_Insert");
            }
        }
    }
}
private void CG107_AutoToFile()
{
    CG107_InitFile();
    CG107_VLLANCRE = AU_CG107_VLLANCRE;
    CG107_VLLANDEB = AU_CG107_VLLANDEB;
    CG107_VLDIFLAN = AU_CG107_VLDIFLAN;
    CG107_INLOTLIS = AU_CG107_INLOTLIS;
    CG107_NRUSUALT = AU_CG107_NRUSUALT;
    CG107_CDATIVID = AU_CG107_CDATIVID;
    CG107_CDEMPRES = AU_CG107_CDEMPRES;
    CG107_CDORILAN = AU_CG107_CDORILAN;
    CG107_DILANCTO = AU_CG107_DILANCTO;
    CG107_INSITREG = AU_CG107_INSITREG;
    CG107_NRFORMCG = AU_CG107_NRFORMCG;
    CG107_NRLOTECG = AU_CG107_NRLOTECG;
    CG107_NRUSUCRI = AU_CG107_NRUSUCRI;
    CG107_TPLANCTO = AU_CG107_TPLANCTO;
    CG107_ROWID = AU_CG107_ROWID;
}
private void CG107_FileToAuto()
{    AU_CG107_VLLANCRE = CG107_VLLANCRE;
    AU_CG107_VLLANDEB = CG107_VLLANDEB;
    AU_CG107_VLDIFLAN = CG107_VLDIFLAN;
    AU_CG107_INLOTLIS = CG107_INLOTLIS;
    AU_CG107_NRUSUALT = CG107_NRUSUALT;
    AU_CG107_CDATIVID = CG107_CDATIVID;
    AU_CG107_CDEMPRES = CG107_CDEMPRES;
    AU_CG107_CDORILAN = CG107_CDORILAN;
    AU_CG107_DILANCTO = CG107_DILANCTO;
    AU_CG107_INSITREG = CG107_INSITREG;
    AU_CG107_NRFORMCG = CG107_NRFORMCG;
    AU_CG107_NRLOTECG = CG107_NRLOTECG;
    AU_CG107_NRUSUCRI = CG107_NRUSUCRI;
    AU_CG107_TPLANCTO = CG107_TPLANCTO;
    AU_CG107_ROWID = CG107_ROWID;
 }
private void CG107_InitAuto()
{
    AU_CG107_VLLANCRE = bigZeros;
    AU_CG107_VLLANDEB = bigZeros;
    AU_CG107_VLDIFLAN = bigZeros;
    AU_CG107_INLOTLIS = 0;
    AU_CG107_NRUSUALT = 0;
    AU_CG107_CDATIVID = "";
    AU_CG107_CDEMPRES = 0;
    AU_CG107_CDORILAN = 0;
    AU_CG107_DILANCTO = 0;
    AU_CG107_INSITREG = "";
    AU_CG107_NRFORMCG = 0;
    AU_CG107_NRLOTECG = 0;
    AU_CG107_NRUSUCRI = 0;
    AU_CG107_TPLANCTO = 0;
    AU_CG107_ROWID = 0;
}
private String CG10704_DetermineEvery(double CDEMPRES ,double TPLANCTO ,double DILANCTO ,double CDORILAN ,double NRLOTECG)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        CG107_XSEEDEOF = false;
        CG107_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG107_FIELDS + " FROM CG107 with (NOLOCK INDEX=CG10704) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And TPLANCTO = " + cStr(TPLANCTO);
        sqlCommand = sqlCommand + "  And DILANCTO = " + cStr(DILANCTO);
        sqlCommand = sqlCommand + "  And CDORILAN = " + cStr(CDORILAN);
        sqlCommand = sqlCommand + "  And NRLOTECG = " + cStr(NRLOTECG);
        sqlCommand = sqlCommand + ") And (" + "VLDIFLAN <> 0 AND NRFORMCG = 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,TPLANCTO  ";
        sqlCommand = sqlCommand + " ,DILANCTO  ";
        sqlCommand = sqlCommand + " ,CDORILAN  ";
        sqlCommand = sqlCommand + " ,NRLOTECG  ";
        if (CG107_CMD == null)
        {   CG107_CMD = CG107_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG107_TAB != null)
        {   CG107_TAB.close();
        }
        CG107_TAB = CG107_CMD.executeQuery(sqlCommand);
        if (CG107_TAB.next())
        {   xsdStatus = "";
            CG107_TableToFile();
        }
        else
        {   CG107_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG107_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CG10704_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG107_XSEEDEOF == true)
        {   return;
        }
        if (CG107_XSEEDSEEK == false)
        {    if (CG107_TAB.next())
             {    CG107_TableToFile ();
             }
             else
             {    CG107_XSEEDEOF = true;
             }
        }
        {    CG107_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG107_DetermineMoveNext", "");
    }
}
private String CG10401_DetermineLast(double CDEMPRES ,double TPLANCTO ,double DILANCTO ,double NRLOTECG ,double NRFORMCG ,double NRSEQLAN)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG104_XSEEDEOF = false;
        CG104_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG104_FIELDS + " FROM CG104 with (NOLOCK INDEX=CG10401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " TPLANCTO =  " + cStr(TPLANCTO) +  " And ";
        sqlCommand = sqlCommand + " DILANCTO =  " + cStr(DILANCTO) +  " And ";
        sqlCommand = sqlCommand + " NRLOTECG =  " + cStr(NRLOTECG) +  " And ";
        sqlCommand = sqlCommand + " NRFORMCG =  " + cStr(NRFORMCG) +  " And ";
        sqlCommand = sqlCommand + " NRSEQLAN <=  " + cStr(NRSEQLAN);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPLANCTO DESC";
        sqlCommand = sqlCommand + " ,DILANCTO DESC";
        sqlCommand = sqlCommand + " ,NRLOTECG DESC";
        sqlCommand = sqlCommand + " ,NRFORMCG DESC";
        sqlCommand = sqlCommand + " ,NRSEQLAN DESC";
        if (CG104_CMD == null)
        {   CG104_CMD = CG104_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG104_TAB != null)
        {   CG104_TAB.close();
        }
        CG104_TAB = CG104_CMD.executeQuery(sqlCommand);
        if (CG104_TAB.next())
        {   xsdStatus = "";
            CG104_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG104_FIELDS + " FROM CG104 with (NOLOCK INDEX=CG10401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " TPLANCTO =  " + cStr(TPLANCTO) +  " And ";
        sqlCommand = sqlCommand + " DILANCTO =  " + cStr(DILANCTO) +  " And ";
        sqlCommand = sqlCommand + " NRLOTECG =  " + cStr(NRLOTECG) +  " And ";
        sqlCommand = sqlCommand + " NRFORMCG <  " + cStr(NRFORMCG);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPLANCTO DESC";
        sqlCommand = sqlCommand + " ,DILANCTO DESC";
        sqlCommand = sqlCommand + " ,NRLOTECG DESC";
        sqlCommand = sqlCommand + " ,NRFORMCG DESC";
        sqlCommand = sqlCommand + " ,NRSEQLAN DESC";
        if (CG104_CMD == null)
        {   CG104_CMD = CG104_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG104_TAB != null)
        {   CG104_TAB.close();
        }
        CG104_TAB = CG104_CMD.executeQuery(sqlCommand);
        if (CG104_TAB.next())
        {   xsdStatus = "";
            CG104_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG104_FIELDS + " FROM CG104 with (NOLOCK INDEX=CG10401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " TPLANCTO =  " + cStr(TPLANCTO) +  " And ";
        sqlCommand = sqlCommand + " DILANCTO =  " + cStr(DILANCTO) +  " And ";
        sqlCommand = sqlCommand + " NRLOTECG <  " + cStr(NRLOTECG);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPLANCTO DESC";
        sqlCommand = sqlCommand + " ,DILANCTO DESC";
        sqlCommand = sqlCommand + " ,NRLOTECG DESC";
        sqlCommand = sqlCommand + " ,NRFORMCG DESC";
        sqlCommand = sqlCommand + " ,NRSEQLAN DESC";
        if (CG104_CMD == null)
        {   CG104_CMD = CG104_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG104_TAB != null)
        {   CG104_TAB.close();
        }
        CG104_TAB = CG104_CMD.executeQuery(sqlCommand);
        if (CG104_TAB.next())
        {   xsdStatus = "";
            CG104_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG104_FIELDS + " FROM CG104 with (NOLOCK INDEX=CG10401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " TPLANCTO =  " + cStr(TPLANCTO) +  " And ";
        sqlCommand = sqlCommand + " DILANCTO <  " + cStr(DILANCTO);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPLANCTO DESC";
        sqlCommand = sqlCommand + " ,DILANCTO DESC";
        sqlCommand = sqlCommand + " ,NRLOTECG DESC";
        sqlCommand = sqlCommand + " ,NRFORMCG DESC";
        sqlCommand = sqlCommand + " ,NRSEQLAN DESC";
        if (CG104_CMD == null)
        {   CG104_CMD = CG104_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG104_TAB != null)
        {   CG104_TAB.close();
        }
        CG104_TAB = CG104_CMD.executeQuery(sqlCommand);
        if (CG104_TAB.next())
        {   xsdStatus = "";
            CG104_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG104_FIELDS + " FROM CG104 with (NOLOCK INDEX=CG10401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES =  " + cStr(CDEMPRES) +  " And ";
        sqlCommand = sqlCommand + " TPLANCTO <  " + cStr(TPLANCTO);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPLANCTO DESC";
        sqlCommand = sqlCommand + " ,DILANCTO DESC";
        sqlCommand = sqlCommand + " ,NRLOTECG DESC";
        sqlCommand = sqlCommand + " ,NRFORMCG DESC";
        sqlCommand = sqlCommand + " ,NRSEQLAN DESC";
        if (CG104_CMD == null)
        {   CG104_CMD = CG104_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG104_TAB != null)
        {   CG104_TAB.close();
        }
        CG104_TAB = CG104_CMD.executeQuery(sqlCommand);
        if (CG104_TAB.next())
        {   xsdStatus = "";
            CG104_TableToFile();
            return(xsdStatus);
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG104_FIELDS + " FROM CG104 with (NOLOCK INDEX=CG10401) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES <  " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES DESC";
        sqlCommand = sqlCommand + " ,TPLANCTO DESC";
        sqlCommand = sqlCommand + " ,DILANCTO DESC";
        sqlCommand = sqlCommand + " ,NRLOTECG DESC";
        sqlCommand = sqlCommand + " ,NRFORMCG DESC";
        sqlCommand = sqlCommand + " ,NRSEQLAN DESC";
        if (CG104_CMD == null)
        {   CG104_CMD = CG104_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG104_TAB != null)
        {   CG104_TAB.close();
        }
        CG104_TAB = CG104_CMD.executeQuery(sqlCommand);
        if (CG104_TAB.next())
        {   xsdStatus = "";
            CG104_TableToFile();
            return(xsdStatus);
        }
        CG104_XSEEDEOF = true;
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG104_DetermineLast", sqlCommand);
        return(xsdStatus);
    }
}
private void CG104_InitFile()
{
    CG104_CDCLACUS = 0;
    CG104_CDCTACON = 0;
    CG104_CDEMPRES = 0;
    CG104_CDHISTOR = 0;
    CG104_CDORILAN = 0;
    CG104_DILANCTO = 0;
    CG104_DSCOMPHI = "";
    CG104_INMVTOCX = "";
    CG104_INSINLAN = 0;
    CG104_INSITREG = "";
    CG104_NRCGCNUM = 0;
    CG104_NRFORMCG = 0;
    CG104_NRLOTECG = 0;
    CG104_NRSEQLAN = 0;
    CG104_TPLANCTO = 0;
    CG104_VLLANCAM = bigZeros;
}
private void CG104_TableToFile ()
  throws Exception
{   try
    {
        if (CG104_XSEEDEOF == true)
        {    return;
        }
       CG104_TPLANCTO = CG104_TAB.getDouble("TPLANCTO");
       CG104_DILANCTO = CG104_TAB.getDouble("DILANCTO");
       CG104_NRLOTECG = CG104_TAB.getDouble("NRLOTECG");
       CG104_NRFORMCG = CG104_TAB.getDouble("NRFORMCG");
       CG104_NRSEQLAN = CG104_TAB.getDouble("NRSEQLAN");
       CG104_CDCLACUS = CG104_TAB.getDouble("CDCLACUS");
       CG104_CDCTACON = CG104_TAB.getDouble("CDCTACON");
       CG104_CDORILAN = CG104_TAB.getDouble("CDORILAN");
       CG104_CDEMPRES = CG104_TAB.getDouble("CDEMPRES");
       CG104_CDHISTOR = CG104_TAB.getDouble("CDHISTOR");
       CG104_DSCOMPHI = CG104_TAB.getString("DSCOMPHI");
       CG104_INSINLAN = CG104_TAB.getDouble("INSINLAN");
       CG104_INSITREG = CG104_TAB.getString("INSITREG");
       CG104_VLLANCAM = CG104_TAB.getBigDecimal("VLLANCAM");
       CG104_ROWID = CG104_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG104_TableToFile","");
    }
}
private void CG104_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG104 (";
        sqlCommand = sqlCommand + " CDCLACUS";
        sqlCommand = sqlCommand + ",CDCTACON";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",CDHISTOR";
        sqlCommand = sqlCommand + ",CDORILAN";
        sqlCommand = sqlCommand + ",DILANCTO";
        sqlCommand = sqlCommand + ",DSCOMPHI";
        sqlCommand = sqlCommand + ",INMVTOCX";
        sqlCommand = sqlCommand + ",INSINLAN";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",NRCGCNUM";
        sqlCommand = sqlCommand + ",NRFORMCG";
        sqlCommand = sqlCommand + ",NRLOTECG";
        sqlCommand = sqlCommand + ",NRSEQLAN";
        sqlCommand = sqlCommand + ",TPLANCTO";
        sqlCommand = sqlCommand + ",VLLANCAM";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CG104_CDCLACUS);
        sqlCommand = sqlCommand + "," + cStr(CG104_CDCTACON);
        sqlCommand = sqlCommand + "," + cStr(CG104_CDEMPRES);
        sqlCommand = sqlCommand + "," + cStr(CG104_CDHISTOR);
        sqlCommand = sqlCommand + "," + cStr(CG104_CDORILAN);
        sqlCommand = sqlCommand + "," + cStr(CG104_DILANCTO);
        if (CG104_DSCOMPHI.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG104_DSCOMPHI)) + "'";
        }
        sqlCommand = sqlCommand + ",' '";
        sqlCommand = sqlCommand + "," + cStr(CG104_INSINLAN);
        if (CG104_INSITREG.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG104_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + ", 0";
        sqlCommand = sqlCommand + "," + cStr(CG104_NRFORMCG);
        sqlCommand = sqlCommand + "," + cStr(CG104_NRLOTECG);
        sqlCommand = sqlCommand + "," + cStr(CG104_NRSEQLAN);
        sqlCommand = sqlCommand + "," + cStr(CG104_TPLANCTO);
        sqlCommand = sqlCommand + "," + cStr(CG104_VLLANCAM);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG104_Insert");
            }
        }
    }
}
private void CG104_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG104 set ";
        sqlCommand = sqlCommand + "TPLANCTO = " + cStr(CG104_TPLANCTO);
        sqlCommand = sqlCommand + ",DILANCTO = " + cStr(CG104_DILANCTO);
        sqlCommand = sqlCommand + ",NRLOTECG = " + cStr(CG104_NRLOTECG);
        sqlCommand = sqlCommand + ",NRFORMCG = " + cStr(CG104_NRFORMCG);
        sqlCommand = sqlCommand + ",NRSEQLAN = " + cStr(CG104_NRSEQLAN);
        sqlCommand = sqlCommand + ",CDCLACUS = " + cStr(CG104_CDCLACUS);
        sqlCommand = sqlCommand + ",CDCTACON = " + cStr(CG104_CDCTACON);
        sqlCommand = sqlCommand + ",CDORILAN = " + cStr(CG104_CDORILAN);
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(CG104_CDEMPRES);
        sqlCommand = sqlCommand + ",CDHISTOR = " + cStr(CG104_CDHISTOR);
        if (CG104_DSCOMPHI.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",DSCOMPHI = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",DSCOMPHI = '" + ReplaceQuotes(rTrim(CG104_DSCOMPHI)) + "'";
        }
        sqlCommand = sqlCommand + ",INSINLAN = " + cStr(CG104_INSINLAN);
        if (CG104_INSITREG.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INSITREG = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INSITREG = '" + ReplaceQuotes(rTrim(CG104_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + ",VLLANCAM = " + cStr(CG104_VLLANCAM);
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG104_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG104_Modify");
         }
     }
}
private void CG104_AutoToFile()
{
    CG104_InitFile();
    CG104_TPLANCTO = AU_CG104_TPLANCTO;
    CG104_DILANCTO = AU_CG104_DILANCTO;
    CG104_NRLOTECG = AU_CG104_NRLOTECG;
    CG104_NRFORMCG = AU_CG104_NRFORMCG;
    CG104_NRSEQLAN = AU_CG104_NRSEQLAN;
    CG104_CDCLACUS = AU_CG104_CDCLACUS;
    CG104_CDCTACON = AU_CG104_CDCTACON;
    CG104_CDORILAN = AU_CG104_CDORILAN;
    CG104_CDEMPRES = AU_CG104_CDEMPRES;
    CG104_CDHISTOR = AU_CG104_CDHISTOR;
    CG104_DSCOMPHI = AU_CG104_DSCOMPHI;
    CG104_INSINLAN = AU_CG104_INSINLAN;
    CG104_INSITREG = AU_CG104_INSITREG;
    CG104_VLLANCAM = AU_CG104_VLLANCAM;
    CG104_ROWID = AU_CG104_ROWID;
}
private void CG104_FileToAuto()
{    AU_CG104_TPLANCTO = CG104_TPLANCTO;
    AU_CG104_DILANCTO = CG104_DILANCTO;
    AU_CG104_NRLOTECG = CG104_NRLOTECG;
    AU_CG104_NRFORMCG = CG104_NRFORMCG;
    AU_CG104_NRSEQLAN = CG104_NRSEQLAN;
    AU_CG104_CDCLACUS = CG104_CDCLACUS;
    AU_CG104_CDCTACON = CG104_CDCTACON;
    AU_CG104_CDORILAN = CG104_CDORILAN;
    AU_CG104_CDEMPRES = CG104_CDEMPRES;
    AU_CG104_CDHISTOR = CG104_CDHISTOR;
    AU_CG104_DSCOMPHI = CG104_DSCOMPHI;
    AU_CG104_INSINLAN = CG104_INSINLAN;
    AU_CG104_INSITREG = CG104_INSITREG;
    AU_CG104_VLLANCAM = CG104_VLLANCAM;
    AU_CG104_ROWID = CG104_ROWID;
 }
private void CG104_InitAuto()
{
    AU_CG104_TPLANCTO = 0;
    AU_CG104_DILANCTO = 0;
    AU_CG104_NRLOTECG = 0;
    AU_CG104_NRFORMCG = 0;
    AU_CG104_NRSEQLAN = 0;
    AU_CG104_CDCLACUS = 0;
    AU_CG104_CDCTACON = 0;
    AU_CG104_CDORILAN = 0;
    AU_CG104_CDEMPRES = 0;
    AU_CG104_CDHISTOR = 0;
    AU_CG104_DSCOMPHI = "";
    AU_CG104_INSINLAN = 0;
    AU_CG104_INSITREG = "";
    AU_CG104_VLLANCAM = bigZeros;
    AU_CG104_ROWID = 0;
}
private void CG118_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG118 (";
        sqlCommand = sqlCommand + " CDCTACON";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",DICONCIL";
        sqlCommand = sqlCommand + ",DILANCTO";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",NRFORMCG";
        sqlCommand = sqlCommand + ",NRLOTECG";
        sqlCommand = sqlCommand + ",NRSEQLAN";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CG118_CDCTACON);
        sqlCommand = sqlCommand + "," + cStr(CG118_CDEMPRES);
        sqlCommand = sqlCommand + "," + cStr(CG118_DICONCIL);
        sqlCommand = sqlCommand + "," + cStr(CG118_DILANCTO);
        if (CG118_INSITREG.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG118_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG118_NRFORMCG);
        sqlCommand = sqlCommand + "," + cStr(CG118_NRLOTECG);
        sqlCommand = sqlCommand + "," + cStr(CG118_NRSEQLAN);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG118_Insert");
            }
        }
    }
}
private void CG118_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG118 set ";
        sqlCommand = sqlCommand + "CDCTACON = " + cStr(CG118_CDCTACON);
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(CG118_CDEMPRES);
        sqlCommand = sqlCommand + ",DICONCIL = " + cStr(CG118_DICONCIL);
        sqlCommand = sqlCommand + ",DILANCTO = " + cStr(CG118_DILANCTO);
        if (CG118_INSITREG.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INSITREG = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INSITREG = '" + ReplaceQuotes(rTrim(CG118_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + ",NRFORMCG = " + cStr(CG118_NRFORMCG);
        sqlCommand = sqlCommand + ",NRLOTECG = " + cStr(CG118_NRLOTECG);
        sqlCommand = sqlCommand + ",NRSEQLAN = " + cStr(CG118_NRSEQLAN);
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG118_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG118_Modify");
         }
     }
}
private void CG118_AutoToFile()
{
    CG118_InitFile();
    CG118_CDCTACON = AU_CG118_CDCTACON;
    CG118_CDEMPRES = AU_CG118_CDEMPRES;
    CG118_DICONCIL = AU_CG118_DICONCIL;
    CG118_DILANCTO = AU_CG118_DILANCTO;
    CG118_INSITREG = AU_CG118_INSITREG;
    CG118_NRFORMCG = AU_CG118_NRFORMCG;
    CG118_NRLOTECG = AU_CG118_NRLOTECG;
    CG118_NRSEQLAN = AU_CG118_NRSEQLAN;
    CG118_ROWID = AU_CG118_ROWID;
}
private void CG118_FileToAuto()
{    AU_CG118_CDCTACON = CG118_CDCTACON;
    AU_CG118_CDEMPRES = CG118_CDEMPRES;
    AU_CG118_DICONCIL = CG118_DICONCIL;
    AU_CG118_DILANCTO = CG118_DILANCTO;
    AU_CG118_INSITREG = CG118_INSITREG;
    AU_CG118_NRFORMCG = CG118_NRFORMCG;
    AU_CG118_NRLOTECG = CG118_NRLOTECG;
    AU_CG118_NRSEQLAN = CG118_NRSEQLAN;
    AU_CG118_ROWID = CG118_ROWID;
 }
private void CG118_InitAuto()
{
    AU_CG118_CDCTACON = 0;
    AU_CG118_CDEMPRES = 0;
    AU_CG118_DICONCIL = 0;
    AU_CG118_DILANCTO = 0;
    AU_CG118_INSITREG = "";
    AU_CG118_NRFORMCG = 0;
    AU_CG118_NRLOTECG = 0;
    AU_CG118_NRSEQLAN = 0;
    AU_CG118_ROWID = 0;
}
private void CG118_InitFile()
{
    CG118_CDCTACON = 0;
    CG118_CDEMPRES = 0;
    CG118_DICONCIL = 0;
    CG118_DILANCTO = 0;
    CG118_INSITREG = "";
    CG118_NRFORMCG = 0;
    CG118_NRLOTECG = 0;
    CG118_NRSEQLAN = 0;
}
private void CG118_TableToFile ()
  throws Exception
{   try
    {
        if (CG118_XSEEDEOF == true)
        {    return;
        }
       CG118_CDCTACON = CG118_TAB.getDouble("CDCTACON");
       CG118_CDEMPRES = CG118_TAB.getDouble("CDEMPRES");
       CG118_DICONCIL = CG118_TAB.getDouble("DICONCIL");
       CG118_DILANCTO = CG118_TAB.getDouble("DILANCTO");
       CG118_INSITREG = CG118_TAB.getString("INSITREG");
       CG118_NRFORMCG = CG118_TAB.getDouble("NRFORMCG");
       CG118_NRLOTECG = CG118_TAB.getDouble("NRLOTECG");
       CG118_NRSEQLAN = CG118_TAB.getDouble("NRSEQLAN");
       CG118_ROWID = CG118_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG118_TableToFile","");
    }
}
private String GS10703_DetermineEvery(double NRUSUARI)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        GS107_XSEEDEOF = false;
        GS107_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_GS107_FIELDS + " FROM GS107 with (NOLOCK INDEX=GS10703) WHERE (";
        sqlCommand = sqlCommand + " NRUSUARI = " + cStr(NRUSUARI);
        sqlCommand = sqlCommand + ") And (" + "NRUSUARI <> 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " NRUSUARI  ";
        if (GS107_CMD == null)
        {   GS107_CMD = GS107_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (GS107_TAB != null)
        {   GS107_TAB.close();
        }
        GS107_TAB = GS107_CMD.executeQuery(sqlCommand);
        if (GS107_TAB.next())
        {   xsdStatus = "";
            GS107_TableToFile();
        }
        else
        {   GS107_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS107_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void GS10703_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (GS107_XSEEDEOF == true)
        {   return;
        }
        if (GS107_XSEEDSEEK == false)
        {    if (GS107_TAB.next())
             {    GS107_TableToFile ();
             }
             else
             {    GS107_XSEEDEOF = true;
             }
        }
        {    GS107_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS107_DetermineMoveNext", "");
    }
}
private void GS107_InitFile()
{
    GS107_CDATIVID = "";
    GS107_CDCARGOX = 0;
    GS107_CDCLACUS = 0;
    GS107_CDCORPAD = 0;
    GS107_CDDEPEND = 0;
    GS107_CDEMPANI = 0;
    GS107_CDEMPINI = 0;
    GS107_CDEMPRES = 0;
    GS107_CDEMPRVF = 0;
    GS107_CDFILVEN = 0;
    GS107_CDGRUEMP = 0;
    GS107_CDNIVSEG = 0;
    GS107_CDREFCAD = 0;
    GS107_CDSITSLV = "";
    GS107_CDSITUSU = "";
    GS107_CDSUBDOM = 0;
    GS107_CDUSUARI = "";
    GS107_DIACESSO = 0;
    GS107_DIALTSEN = 0;
    GS107_DIDESATI = 0;
    GS107_DIINCLUS = 0;
    GS107_DINASCIM = 0;
    GS107_DSBAIRRO = "";
    GS107_DSCARGOX = "";
    GS107_DSCENCUS = "";
    GS107_DSCONASA = "";
    GS107_DSCONASB = "";
    GS107_DSCONASC = "";
    GS107_DSDEPASS = "";
    GS107_DSENDERE = "";
    GS107_DSSAUASS = "";
    GS107_DSSENHAX = "";
    GS107_INACECHA = 0;
    GS107_INACESBI = 0;
    GS107_INADMLIN = 0;
    GS107_INALTSEN = "";
    GS107_INEMANUV = 0;
    GS107_INHORCON = 0;
    GS107_INSAUDAC = 0;
    GS107_INSITBLO = 0;
    GS107_INSITREG = "";
    GS107_NMEMAILP = "";
    GS107_NMEMAILX = "";
    GS107_NMFUNASS = "";
    GS107_NMUSUARI = "";
    GS107_NRCELUSU = "";
    GS107_NRCEPRES = 0;
    GS107_NRCOMRES = 0;
    GS107_NRENDLOC = 0;
    GS107_NRFAXCOM = "";
    GS107_NRIPLIBE = "";
    GS107_NRMSGPEN = 0;
    GS107_NRNUMCPF = 0;
    GS107_NRTELCOM = "";
    GS107_NRTELRES = "";
    GS107_NRUSUALT = 0;
    GS107_NRUSUARI = 0;
    GS107_TPUSUARI = "";
}
private void GS107_TableToFile ()
  throws Exception
{   try
    {
        if (GS107_XSEEDEOF == true)
        {    return;
        }
       GS107_NMEMAILX = GS107_TAB.getString("NMEMAILX");
       GS107_NMUSUARI = GS107_TAB.getString("NMUSUARI");
       GS107_DSCARGOX = GS107_TAB.getString("DSCARGOX");
       GS107_DSSAUASS = GS107_TAB.getString("DSSAUASS");
       GS107_NMFUNASS = GS107_TAB.getString("NMFUNASS");
       GS107_DSDEPASS = GS107_TAB.getString("DSDEPASS");
       GS107_DSCONASA = GS107_TAB.getString("DSCONASA");
       GS107_DSCONASB = GS107_TAB.getString("DSCONASB");
       GS107_DSCONASC = GS107_TAB.getString("DSCONASC");
       GS107_NRFAXCOM = GS107_TAB.getString("NRFAXCOM");
       GS107_CDUSUARI = GS107_TAB.getString("CDUSUARI");
       GS107_NRCEPRES = GS107_TAB.getDouble("NRCEPRES");
       GS107_ROWID = GS107_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "GS107_TableToFile","");
    }
}
private String DS10301_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDGRUCHA ,double NRUSUARI, double CDGRUCHAUntil,double NRUSUARIUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        DS103_XSEEDEOF = false;
        DS103_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_DS103_FIELDS + " FROM DS103 with (NOLOCK INDEX=DS10301) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDGRUCHA = " + cStr(CDGRUCHA) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + DS10301_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDGRUCHA,NRUSUARI, CDGRUCHAUntil,NRUSUARIUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + DS10301_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDGRUCHA,NRUSUARI, CDGRUCHAUntil,NRUSUARIUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDGRUCHA  ";
        sqlCommand = sqlCommand + " ,NRUSUARI  ";
        if (DS103_CMD == null)
        {   DS103_CMD = DS103_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (DS103_TAB != null)
        {   DS103_TAB.close();
        }
        DS103_TAB = DS103_CMD.executeQuery(sqlCommand);
        if (DS103_TAB.next())
        {   xsdStatus = "";
            DS103_TableToFile();
        }
        else
        {   DS103_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"DS103_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String DS10301_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDGRUCHA ,double NRUSUARI, double CDGRUCHAUntil,double NRUSUARIUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDGRUCHA =  " + cStr(CDGRUCHA) + " And " +
    " NRUSUARI >=  " + cStr(NRUSUARI) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDGRUCHA >  " + cStr(CDGRUCHA) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDGRUCHA =  " + cStr(CDGRUCHAUntil) + " And " +
       " NRUSUARI <=  " + cStr(NRUSUARIUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDGRUCHA <  " + cStr(CDGRUCHAUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String DS10301_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDGRUCHA ,double NRUSUARI, double CDGRUCHAUntil,double NRUSUARIUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " NRUSUARI >=  " + cStr(NRUSUARI) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " NRUSUARI <=  " + cStr(NRUSUARIUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void DS10301_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (DS103_XSEEDEOF == true)
        {   return;
        }
        if (DS103_XSEEDSEEK == false)
        {    if (DS103_TAB.next())
             {    DS103_TableToFile ();
             }
             else
             {    DS103_XSEEDEOF = true;
             }
        }
        {    DS103_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"DS103_DetermineMoveNext", "");
    }
}
private void DS103_InitFile()
{
    DS103_CDGRUCHA = 0;
    DS103_INRESPON = "";
    DS103_NRUSUARI = 0;
}
private void DS103_TableToFile ()
  throws Exception
{   try
    {
        if (DS103_XSEEDEOF == true)
        {    return;
        }
       DS103_NRUSUARI = DS103_TAB.getDouble("NRUSUARI");
       DS103_ROWID = DS103_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "DS103_TableToFile","");
    }
}
private String CG140_Lock()
   throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "select /*+ CGR032 */ " + ODBC_CG140_FIELDS + " from CG140 ";
        sqlCommand = sqlCommand + " WITH (UPDLOCK INDEX=FCG140ROWID) where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG140_ROWID);
        if (CG140_Lk.CMD == null)
        {   CG140_Lk.CMD = GLB.CONNECTION.createStatement();
        }
        if (CG140_Lk.TAB != null)
        {   CG140_Lk.TAB.close();
        }
        CG140_Lk.TAB = CG140_Lk.CMD.executeQuery(sqlCommand);
        if (CG140_Lk.TAB.next() == true)
        {   xsdStatus = "";
            CG140_TableToFile(CG140_Lk);
        }
        else
        {   CG140_Lk.EOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG140_Lock",sqlCommand);
        return(xsdStatus);
    }
}
private void CG140_TableToFile (XseedJDBC pXseedJDBC )
  throws Exception
{   try
    {
        if (pXseedJDBC.EOF == true)
        {    return;
        }
       CG140_TPREGIST = pXseedJDBC.TAB.getDouble("TPREGIST");
       CG140_CDEMPRES = pXseedJDBC.TAB.getDouble("CDEMPRES");
       CG140_CDFILIAL = pXseedJDBC.TAB.getDouble("CDFILIAL");
       CG140_AMMOVTOX = pXseedJDBC.TAB.getDouble("AMMOVTOX");
       CG140_CDUFMUNI = pXseedJDBC.TAB.getString("CDUFMUNI");
       CG140_CDFISCAL = pXseedJDBC.TAB.getDouble("CDFISCAL");
       CG140_NRSEQUEN = pXseedJDBC.TAB.getDouble("NRSEQUEN");
       CG140_CDAJAPUR = pXseedJDBC.TAB.getString("CDAJAPUR");
       CG140_DIIMPORT = pXseedJDBC.TAB.getDouble("DIIMPORT");
       CG140_DSIMPOST = pXseedJDBC.TAB.getString("DSIMPOST");
       CG140_TPIMPOST = pXseedJDBC.TAB.getDouble("TPIMPOST");
       CG140_VLICMSTR = pXseedJDBC.TAB.getDouble("VLICMSTR");
       CG140_VLCONTAB = pXseedJDBC.TAB.getDouble("VLCONTAB");
       CG140_VLBASSTR = pXseedJDBC.TAB.getDouble("VLBASSTR");
       CG140_ROWID = pXseedJDBC.TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG140_TableToFile","");
    }
}
private String CG14002_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPREGIST ,double CDFILIAL ,double AMMOVTOX ,String CDUFMUNI ,double TPIMPOST ,double CDFISCAL ,double NRSEQUEN, double CDEMPRESUntil,double TPREGISTUntil,double CDFILIALUntil,double AMMOVTOXUntil,String CDUFMUNIUntil,double TPIMPOSTUntil,double CDFISCALUntil,double NRSEQUENUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        CG140_XSEEDEOF = false;
        CG140_XSEEDSEEK = true;
        CDUFMUNI = rTrim(CDUFMUNI);
        if (CDUFMUNI.equals("") == true)
        {   CDUFMUNI = " ";
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG140_FIELDS + " FROM CG140 with (NOLOCK INDEX=CG14002) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " TPREGIST = " + cStr(TPREGIST) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " TPREGIST = " + cStr(TPREGIST) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " TPREGIST = " + cStr(TPREGIST) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) +
           " ) And (";
           break;
         case 5:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " TPREGIST = " + cStr(TPREGIST) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " CDUFMUNI = '" + CDUFMUNI + "'" +
           " ) And (";
           break;
         case 6:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " TPREGIST = " + cStr(TPREGIST) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " CDUFMUNI = '" + CDUFMUNI + "'" + " And " +
           " TPIMPOST = " + cStr(TPIMPOST) +
           " ) And (";
           break;
         case 7:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " TPREGIST = " + cStr(TPREGIST) + " And " +
           " CDFILIAL = " + cStr(CDFILIAL) + " And " +
           " AMMOVTOX = " + cStr(AMMOVTOX) + " And " +
           " CDUFMUNI = '" + CDUFMUNI + "'" + " And " +
           " TPIMPOST = " + cStr(TPIMPOST) + " And " +
           " CDFISCAL = " + cStr(CDFISCAL) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + CG14002_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,TPREGIST,CDFILIAL,AMMOVTOX,CDUFMUNI,TPIMPOST,CDFISCAL,NRSEQUEN, CDEMPRESUntil,TPREGISTUntil,CDFILIALUntil,AMMOVTOXUntil,CDUFMUNIUntil,TPIMPOSTUntil,CDFISCALUntil,NRSEQUENUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + CG14002_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,TPREGIST,CDFILIAL,AMMOVTOX,CDUFMUNI,TPIMPOST,CDFISCAL,NRSEQUEN, CDEMPRESUntil,TPREGISTUntil,CDFILIALUntil,AMMOVTOXUntil,CDUFMUNIUntil,TPIMPOSTUntil,CDFISCALUntil,NRSEQUENUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + CG14002_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,TPREGIST,CDFILIAL,AMMOVTOX,CDUFMUNI,TPIMPOST,CDFISCAL,NRSEQUEN, CDEMPRESUntil,TPREGISTUntil,CDFILIALUntil,AMMOVTOXUntil,CDUFMUNIUntil,TPIMPOSTUntil,CDFISCALUntil,NRSEQUENUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + CG14002_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,TPREGIST,CDFILIAL,AMMOVTOX,CDUFMUNI,TPIMPOST,CDFISCAL,NRSEQUEN, CDEMPRESUntil,TPREGISTUntil,CDFILIALUntil,AMMOVTOXUntil,CDUFMUNIUntil,TPIMPOSTUntil,CDFISCALUntil,NRSEQUENUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + CG14002_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,TPREGIST,CDFILIAL,AMMOVTOX,CDUFMUNI,TPIMPOST,CDFISCAL,NRSEQUEN, CDEMPRESUntil,TPREGISTUntil,CDFILIALUntil,AMMOVTOXUntil,CDUFMUNIUntil,TPIMPOSTUntil,CDFISCALUntil,NRSEQUENUntil);
          break;
        case 5:
           sqlCommand = sqlCommand + CG14002_DetermineGroupFrom_5 (DtgFix, FlagUntil, CDEMPRES,TPREGIST,CDFILIAL,AMMOVTOX,CDUFMUNI,TPIMPOST,CDFISCAL,NRSEQUEN, CDEMPRESUntil,TPREGISTUntil,CDFILIALUntil,AMMOVTOXUntil,CDUFMUNIUntil,TPIMPOSTUntil,CDFISCALUntil,NRSEQUENUntil);
          break;
        case 6:
           sqlCommand = sqlCommand + CG14002_DetermineGroupFrom_6 (DtgFix, FlagUntil, CDEMPRES,TPREGIST,CDFILIAL,AMMOVTOX,CDUFMUNI,TPIMPOST,CDFISCAL,NRSEQUEN, CDEMPRESUntil,TPREGISTUntil,CDFILIALUntil,AMMOVTOXUntil,CDUFMUNIUntil,TPIMPOSTUntil,CDFISCALUntil,NRSEQUENUntil);
          break;
        case 7:
           sqlCommand = sqlCommand + CG14002_DetermineGroupFrom_7 (DtgFix, FlagUntil, CDEMPRES,TPREGIST,CDFILIAL,AMMOVTOX,CDUFMUNI,TPIMPOST,CDFISCAL,NRSEQUEN, CDEMPRESUntil,TPREGISTUntil,CDFILIALUntil,AMMOVTOXUntil,CDUFMUNIUntil,TPIMPOSTUntil,CDFISCALUntil,NRSEQUENUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,TPREGIST  ";
        sqlCommand = sqlCommand + " ,CDFILIAL  ";
        sqlCommand = sqlCommand + " ,AMMOVTOX  ";
        sqlCommand = sqlCommand + " ,CDUFMUNI  ";
        sqlCommand = sqlCommand + " ,TPIMPOST  ";
        sqlCommand = sqlCommand + " ,CDFISCAL  ";
        sqlCommand = sqlCommand + " ,NRSEQUEN  ";
        if (CG140_CMD == null)
        {   CG140_CMD = CG140_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG140_TAB != null)
        {   CG140_TAB.close();
        }
        CG140_TAB = CG140_CMD.executeQuery(sqlCommand);
        if (CG140_TAB.next())
        {   xsdStatus = "";
            CG140_TableToFile();
        }
        else
        {   CG140_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG140_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String CG14002_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPREGIST ,double CDFILIAL ,double AMMOVTOX ,String CDUFMUNI ,double TPIMPOST ,double CDFISCAL ,double NRSEQUEN, double CDEMPRESUntil,double TPREGISTUntil,double CDFILIALUntil,double AMMOVTOXUntil,String CDUFMUNIUntil,double TPIMPOSTUntil,double CDFISCALUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST >  " + cStr(TPIMPOST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI >  '" + ReplaceQuotes(CDUFMUNI) + "' " +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST <  " + cStr(TPIMPOSTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI <  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG14002_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPREGIST ,double CDFILIAL ,double AMMOVTOX ,String CDUFMUNI ,double TPIMPOST ,double CDFISCAL ,double NRSEQUEN, double CDEMPRESUntil,double TPREGISTUntil,double CDFILIALUntil,double AMMOVTOXUntil,String CDUFMUNIUntil,double TPIMPOSTUntil,double CDFISCALUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST >  " + cStr(TPIMPOST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI >  '" + ReplaceQuotes(CDUFMUNI) + "' " +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIST =  " + cStr(TPREGIST) + " And " +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPREGIST >  " + cStr(TPREGIST) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST <  " + cStr(TPIMPOSTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI <  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIST =  " + cStr(TPREGISTUntil) + " And " +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPREGIST <  " + cStr(TPREGISTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG14002_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPREGIST ,double CDFILIAL ,double AMMOVTOX ,String CDUFMUNI ,double TPIMPOST ,double CDFISCAL ,double NRSEQUEN, double CDEMPRESUntil,double TPREGISTUntil,double CDFILIALUntil,double AMMOVTOXUntil,String CDUFMUNIUntil,double TPIMPOSTUntil,double CDFISCALUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST >  " + cStr(TPIMPOST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI >  '" + ReplaceQuotes(CDUFMUNI) + "' " +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL =  " + cStr(CDFILIAL) + " And " +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFILIAL >  " + cStr(CDFILIAL) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST <  " + cStr(TPIMPOSTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI <  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL =  " + cStr(CDFILIALUntil) + " And " +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFILIAL <  " + cStr(CDFILIALUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG14002_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPREGIST ,double CDFILIAL ,double AMMOVTOX ,String CDUFMUNI ,double TPIMPOST ,double CDFISCAL ,double NRSEQUEN, double CDEMPRESUntil,double TPREGISTUntil,double CDFILIALUntil,double AMMOVTOXUntil,String CDUFMUNIUntil,double TPIMPOSTUntil,double CDFISCALUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST >  " + cStr(TPIMPOST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX =  " + cStr(AMMOVTOX) + " And " +
    " CDUFMUNI >  '" + ReplaceQuotes(CDUFMUNI) + "' " +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " AMMOVTOX >  " + cStr(AMMOVTOX) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST <  " + cStr(TPIMPOSTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX =  " + cStr(AMMOVTOXUntil) + " And " +
      " CDUFMUNI <  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " AMMOVTOX <  " + cStr(AMMOVTOXUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG14002_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPREGIST ,double CDFILIAL ,double AMMOVTOX ,String CDUFMUNI ,double TPIMPOST ,double CDFISCAL ,double NRSEQUEN, double CDEMPRESUntil,double TPREGISTUntil,double CDFILIALUntil,double AMMOVTOXUntil,String CDUFMUNIUntil,double TPIMPOSTUntil,double CDFISCALUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNI) + "' " + " And " +
    " TPIMPOST >  " + cStr(TPIMPOST) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDUFMUNI >  '" + ReplaceQuotes(CDUFMUNI) + "' " +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
      " CDUFMUNI =  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " + " And " +
       " TPIMPOST <  " + cStr(TPIMPOSTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
      " CDUFMUNI <  '" + ReplaceQuotes(CDUFMUNIUntil) + "' " +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG14002_DetermineGroupFrom_5(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPREGIST ,double CDFILIAL ,double AMMOVTOX ,String CDUFMUNI ,double TPIMPOST ,double CDFISCAL ,double NRSEQUEN, double CDEMPRESUntil,double TPREGISTUntil,double CDFILIALUntil,double AMMOVTOXUntil,String CDUFMUNIUntil,double TPIMPOSTUntil,double CDFISCALUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPIMPOST =  " + cStr(TPIMPOST) + " And " +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " TPIMPOST >  " + cStr(TPIMPOST) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPIMPOST =  " + cStr(TPIMPOSTUntil) + " And " +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " TPIMPOST <  " + cStr(TPIMPOSTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG14002_DetermineGroupFrom_6(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPREGIST ,double CDFILIAL ,double AMMOVTOX ,String CDUFMUNI ,double TPIMPOST ,double CDFISCAL ,double NRSEQUEN, double CDEMPRESUntil,double TPREGISTUntil,double CDFILIALUntil,double AMMOVTOXUntil,String CDUFMUNIUntil,double TPIMPOSTUntil,double CDFISCALUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDFISCAL =  " + cStr(CDFISCAL) + " And " +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDFISCAL >  " + cStr(CDFISCAL) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDFISCAL =  " + cStr(CDFISCALUntil) + " And " +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDFISCAL <  " + cStr(CDFISCALUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String CG14002_DetermineGroupFrom_7(int DtgFix, boolean FlagUntil, double CDEMPRES ,double TPREGIST ,double CDFILIAL ,double AMMOVTOX ,String CDUFMUNI ,double TPIMPOST ,double CDFISCAL ,double NRSEQUEN, double CDEMPRESUntil,double TPREGISTUntil,double CDFILIALUntil,double AMMOVTOXUntil,String CDUFMUNIUntil,double TPIMPOSTUntil,double CDFISCALUntil,double NRSEQUENUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " NRSEQUEN >=  " + cStr(NRSEQUEN) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " NRSEQUEN <=  " + cStr(NRSEQUENUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void CG14002_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG140_XSEEDEOF == true)
        {   return;
        }
        if (CG140_XSEEDSEEK == false)
        {    if (CG140_TAB.next())
             {    CG140_TableToFile ();
             }
             else
             {    CG140_XSEEDEOF = true;
             }
        }
        {    CG140_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG140_DetermineMoveNext", "");
    }
}
private void CG140_Delete()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "delete /*+ CGR032 */ from CG140 where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG140_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
        if (recordsAffected == 0)
        {   GLB.STATUS = "*****";
        }
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else
        {   ShowErrorMsg (e,"CG140_Delete");
        }
     }
}
private String GS13001_DetermineEvery(String CDDOITEM ,double CDEMPRES ,String CDELEM16)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        GS130_XSEEDEOF = false;
        GS130_XSEEDSEEK = true;
        CDDOITEM = rTrim(CDDOITEM);
        if (CDDOITEM.equals("") == true)
        {   CDDOITEM = " ";
        }
        CDELEM16 = rTrim(CDELEM16);
        if (CDELEM16.equals("") == true)
        {   CDELEM16 = " ";
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_GS130_FIELDS + " FROM GS130 with (NOLOCK INDEX=GS13001) WHERE (";
        sqlCommand = sqlCommand + " CDDOITEM = '" +  ReplaceQuotes(CDDOITEM) + "'";
        sqlCommand = sqlCommand + "  And CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDELEM16 = '" +  ReplaceQuotes(CDELEM16) + "'";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDDOITEM  ";
        sqlCommand = sqlCommand + " ,CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDELEM16  ";
        if (GS130_CMD == null)
        {   GS130_CMD = GS130_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (GS130_TAB != null)
        {   GS130_TAB.close();
        }
        GS130_TAB = GS130_CMD.executeQuery(sqlCommand);
        if (GS130_TAB.next())
        {   xsdStatus = "";
            GS130_TableToFile();
        }
        else
        {   GS130_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS130_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void GS13001_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (GS130_XSEEDEOF == true)
        {   return;
        }
        if (GS130_XSEEDSEEK == false)
        {    if (GS130_TAB.next())
             {    GS130_TableToFile ();
             }
             else
             {    GS130_XSEEDEOF = true;
             }
        }
        {    GS130_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS130_DetermineMoveNext", "");
    }
}
private void GS130_InitFile()
{
    GS130_CDDOITEM = "";
    GS130_CDELEM16 = "";
    GS130_CDEMPRES = 0;
    GS130_DSELEMEN = "";
    GS130_INSITREG = "";
    GS130_VLELEM16 = bigZeros;
}
private void GS130_TableToFile ()
  throws Exception
{   try
    {
        if (GS130_XSEEDEOF == true)
        {    return;
        }
       GS130_DSELEMEN = GS130_TAB.getString("DSELEMEN");
       GS130_VLELEM16 = GS130_TAB.getBigDecimal("VLELEM16");
       GS130_CDDOITEM = GS130_TAB.getString("CDDOITEM");
       GS130_CDELEM16 = GS130_TAB.getString("CDELEM16");
       GS130_CDEMPRES = GS130_TAB.getDouble("CDEMPRES");
       GS130_INSITREG = GS130_TAB.getString("INSITREG");
       GS130_ROWID = GS130_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "GS130_TableToFile","");
    }
}
private String GS130_Lock()
   throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "select /*+ CGR032 */ " + ODBC_GS130_FIELDS + " from GS130 ";
        sqlCommand = sqlCommand + " WITH (UPDLOCK INDEX=FGS130ROWID) where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(GS130_ROWID);
        if (GS130_Lk.CMD == null)
        {   GS130_Lk.CMD = GLB.CONNECTION.createStatement();
        }
        if (GS130_Lk.TAB != null)
        {   GS130_Lk.TAB.close();
        }
        GS130_Lk.TAB = GS130_Lk.CMD.executeQuery(sqlCommand);
        if (GS130_Lk.TAB.next() == true)
        {   xsdStatus = "";
            GS130_TableToFile(GS130_Lk);
        }
        else
        {   GS130_Lk.EOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS130_Lock",sqlCommand);
        return(xsdStatus);
    }
}
private void GS130_TableToFile (XseedJDBC pXseedJDBC )
  throws Exception
{   try
    {
        if (pXseedJDBC.EOF == true)
        {    return;
        }
       GS130_DSELEMEN = pXseedJDBC.TAB.getString("DSELEMEN");
       GS130_VLELEM16 = pXseedJDBC.TAB.getBigDecimal("VLELEM16");
       GS130_CDDOITEM = pXseedJDBC.TAB.getString("CDDOITEM");
       GS130_CDELEM16 = pXseedJDBC.TAB.getString("CDELEM16");
       GS130_CDEMPRES = pXseedJDBC.TAB.getDouble("CDEMPRES");
       GS130_INSITREG = pXseedJDBC.TAB.getString("INSITREG");
       GS130_ROWID = pXseedJDBC.TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "GS130_TableToFile","");
    }
}
private String GS10601_DetermineEvery(String CDDOITEM)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        GS106_XSEEDEOF = false;
        GS106_XSEEDSEEK = true;
        CDDOITEM = rTrim(CDDOITEM);
        if (CDDOITEM.equals("") == true)
        {   CDDOITEM = " ";
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_GS106_FIELDS + " FROM GS106 with (NOLOCK INDEX=GS10601) WHERE (";
        sqlCommand = sqlCommand + " CDDOITEM = '" +  ReplaceQuotes(CDDOITEM) + "'";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDDOITEM  ";
        if (GS106_CMD == null)
        {   GS106_CMD = GS106_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (GS106_TAB != null)
        {   GS106_TAB.close();
        }
        GS106_TAB = GS106_CMD.executeQuery(sqlCommand);
        if (GS106_TAB.next())
        {   xsdStatus = "";
            GS106_TableToFile();
        }
        else
        {   GS106_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS106_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void GS10601_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (GS106_XSEEDEOF == true)
        {   return;
        }
        if (GS106_XSEEDSEEK == false)
        {    if (GS106_TAB.next())
             {    GS106_TableToFile ();
             }
             else
             {    GS106_XSEEDEOF = true;
             }
        }
        {    GS106_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS106_DetermineMoveNext", "");
    }
}
private void GS106_InitFile()
{
    GS106_CDDOITEM = "";
    GS106_CDEDICAO = "";
    GS106_CDELEINV = "";
    GS106_CDITEORI = "";
    GS106_CDMODPRI = "";
    GS106_DIALTCAD = 0;
    GS106_DIALTDOC = 0;
    GS106_INBRADES = "";
    GS106_INCHAVDS = "";
    GS106_INIMPRIM = "";
    GS106_INPOREMP = "";
    GS106_INPROESP = "";
    GS106_INSITREG = "";
    GS106_INZEROVL = "";
    GS106_NMDOITEM = "";
    GS106_NRCARDEC = 0;
    GS106_NRCARDES = 0;
    GS106_NRCARELE = 0;
    GS106_TPCODIFI = "";
}
private void GS106_TableToFile ()
  throws Exception
{   try
    {
        if (GS106_XSEEDEOF == true)
        {    return;
        }
       GS106_CDITEORI = GS106_TAB.getString("CDITEORI");
       GS106_TPCODIFI = GS106_TAB.getString("TPCODIFI");
       GS106_INPOREMP = GS106_TAB.getString("INPOREMP");
       GS106_INCHAVDS = GS106_TAB.getString("INCHAVDS");
       GS106_ROWID = GS106_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "GS106_TableToFile","");
    }
}
private void GS125_Delete()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "delete /*+ CGR032 */ from GS125 where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(GS125_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
        if (recordsAffected == 0)
        {   GLB.STATUS = "*****";
        }
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else
        {   ShowErrorMsg (e,"GS125_Delete");
        }
     }
}
private void GS130_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into GS130 (";
        sqlCommand = sqlCommand + " CDDOITEM";
        sqlCommand = sqlCommand + ",CDELEM16";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",DSELEMEN";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",VLELEM16";
        sqlCommand = sqlCommand + ") values (";
        if (GS130_CDDOITEM.trim().equals("") == true)
        {   sqlCommand = sqlCommand + " ' '";
        }
        else
        {    sqlCommand = sqlCommand + " '" + ReplaceQuotes(rTrim(GS130_CDDOITEM)) + "'";
        }
        if (GS130_CDELEM16.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(GS130_CDELEM16)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(GS130_CDEMPRES);
        if (GS130_DSELEMEN.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(GS130_DSELEMEN)) + "'";
        }
        if (GS130_INSITREG.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(GS130_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(GS130_VLELEM16);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"GS130_Insert");
            }
        }
    }
}
private void GS130_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ GS130 set ";
        if (GS130_DSELEMEN.trim().equals("") == true)
        {    sqlCommand = sqlCommand + "DSELEMEN = ' '";
        }
        else
        {   sqlCommand = sqlCommand + "DSELEMEN = '" + ReplaceQuotes(rTrim(GS130_DSELEMEN)) + "'";
        }
        sqlCommand = sqlCommand + ",VLELEM16 = " + cStr(GS130_VLELEM16);
        if (GS130_CDDOITEM.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",CDDOITEM = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",CDDOITEM = '" + ReplaceQuotes(rTrim(GS130_CDDOITEM)) + "'";
        }
        if (GS130_CDELEM16.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",CDELEM16 = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",CDELEM16 = '" + ReplaceQuotes(rTrim(GS130_CDELEM16)) + "'";
        }
        sqlCommand = sqlCommand + ",CDEMPRES = " + cStr(GS130_CDEMPRES);
        if (GS130_INSITREG.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INSITREG = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INSITREG = '" + ReplaceQuotes(rTrim(GS130_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(GS130_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"GS130_Modify");
         }
     }
}
private void GS130_AutoToFile()
{
    GS130_InitFile();
    GS130_DSELEMEN = AU_GS130_DSELEMEN;
    GS130_VLELEM16 = AU_GS130_VLELEM16;
    GS130_CDDOITEM = AU_GS130_CDDOITEM;
    GS130_CDELEM16 = AU_GS130_CDELEM16;
    GS130_CDEMPRES = AU_GS130_CDEMPRES;
    GS130_INSITREG = AU_GS130_INSITREG;
    GS130_ROWID = AU_GS130_ROWID;
}
private void GS130_FileToAuto()
{    AU_GS130_DSELEMEN = GS130_DSELEMEN;
    AU_GS130_VLELEM16 = GS130_VLELEM16;
    AU_GS130_CDDOITEM = GS130_CDDOITEM;
    AU_GS130_CDELEM16 = GS130_CDELEM16;
    AU_GS130_CDEMPRES = GS130_CDEMPRES;
    AU_GS130_INSITREG = GS130_INSITREG;
    AU_GS130_ROWID = GS130_ROWID;
 }
private void GS130_InitAuto()
{
    AU_GS130_DSELEMEN = "";
    AU_GS130_VLELEM16 = bigZeros;
    AU_GS130_CDDOITEM = "";
    AU_GS130_CDELEM16 = "";
    AU_GS130_CDEMPRES = 0;
    AU_GS130_INSITREG = "";
    AU_GS130_ROWID = 0;
}
private void GS130_Delete()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "delete /*+ CGR032 */ from GS130 where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(GS130_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
        if (recordsAffected == 0)
        {   GLB.STATUS = "*****";
        }
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else
        {   ShowErrorMsg (e,"GS130_Delete");
        }
     }
}
private String GS10701_DetermineEvery(String CDUSUARI)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        GS107_XSEEDEOF = false;
        GS107_XSEEDSEEK = true;
        CDUSUARI = rTrim(CDUSUARI);
        if (CDUSUARI.equals("") == true)
        {   CDUSUARI = " ";
        }
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_GS107_FIELDS + " FROM GS107 with (NOLOCK INDEX=GS10701) WHERE (";
        sqlCommand = sqlCommand + " CDUSUARI = '" +  ReplaceQuotes(CDUSUARI) + "'";
        sqlCommand = sqlCommand + ") And (" + "NRUSUARI <> 0";
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDUSUARI  ";
        if (GS107_CMD == null)
        {   GS107_CMD = GS107_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (GS107_TAB != null)
        {   GS107_TAB.close();
        }
        GS107_TAB = GS107_CMD.executeQuery(sqlCommand);
        if (GS107_TAB.next())
        {   xsdStatus = "";
            GS107_TableToFile();
        }
        else
        {   GS107_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS107_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void GS10701_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (GS107_XSEEDEOF == true)
        {   return;
        }
        if (GS107_XSEEDSEEK == false)
        {    if (GS107_TAB.next())
             {    GS107_TableToFile ();
             }
             else
             {    GS107_XSEEDEOF = true;
             }
        }
        {    GS107_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS107_DetermineMoveNext", "");
    }
}
private String GS103_LookupEvery()
   throws Exception
{   String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        GS103_XSEEDEOF = false;
        GS103_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_GS103_FIELDS + " FROM GS103 ORDER BY ROWID  " ;
        if (GS103_CMD == null)
        {   GS103_CMD = GS103_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (GS103_TAB != null)
        {   GS103_TAB.close();
        }
        GS103_TAB = GS103_CMD.executeQuery(sqlCommand);
        if (GS103_TAB.next())
        {   xsdStatus = "";
            GS103_TableToFile();
        }
        else
        {   GS103_XSEEDEOF = true;
        }
        return(xsdStatus);
       }
    catch (SQLException e)
    {
        ShowDataMsg(e,"GS103_LookupEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void GS103_LookupMoveNext()
   throws Exception
{   try
    {
        if (GS103_XSEEDEOF == true)
        {   return;
        }
        if (GS103_XSEEDSEEK == false)
        {   if (GS103_TAB.next())
            {    GS103_TableToFile();
            }
            else
            {   GS103_XSEEDEOF = true;
            }
         }
         else
         {    GS103_XSEEDSEEK = false;
         }
    }
    catch (SQLException e)
    {
     ShowDataMsg(e,"GS103_LookupMoveNext", "");
    }
}
private void GS103_InitFile()
{
    GS103_CDDOPAIS = 0;
    GS103_CDMUNIBG = 0;
    GS103_CDUFMUNI = "";
    GS103_INSITREG = "";
    GS103_NMLOCALI = "";
    GS103_NMMUNICI = "";
    GS103_NRCEPBAS = 0;
    GS103_NRCEPCOM = 0;
    GS103_NRCEPLOC = 0;
    GS103_NRCEPMUN = 0;
    GS103_TPLOCALI = "";
}
private void GS103_TableToFile ()
  throws Exception
{   try
    {
        if (GS103_XSEEDEOF == true)
        {    return;
        }
       GS103_CDUFMUNI = GS103_TAB.getString("CDUFMUNI");
       GS103_ROWID = GS103_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "GS103_TableToFile","");
    }
}
private void QAV12006_SelectEvery(double pCDEMPRES ,double pCDFILIAL ,double pCDMODENF ,double pTPREGIST ,double pNRNOTAFI)
    throws Exception
{   String sqlCommand="";
    try
    {   GLB.STATUS = "*****";
        sqlCommand = "SELECT " + ODBC_AV120_FIELDS + " FROM AV120 (NOLOCK) WHERE AV120.CDEMPRES =  " + pCDEMPRES + " AND       AV120.CDFILIAL =  " + pCDFILIAL + " AND       AV120.CDMODENF =  " + pCDMODENF + " AND       AV120.TPREGIST =  " + pTPREGIST + " AND       AV120.NRNOTAFI =  " + pNRNOTAFI + " ORDER BY AV120.CDNATOPE,AV120.CDNATCOM,AV120.CDOCONAT ";
        QAV12006_XSEEDEOF = false;
        QAV12006_XSEEDSEEK = true;
        if (QAV12006_CMD == null)
        {   QAV12006_CMD = QAV12006_CON.createStatement();
        }
        if (QAV12006_TAB != null)
        {   QAV12006_TAB.close();
        }
        QAV12006_TAB = QAV12006_CMD.executeQuery(sqlCommand);
        if (QAV12006_TAB.next())
        {   GLB.STATUS = "";
            QAV12006_TableToFile();
        }
        else
        {   QAV12006_XSEEDEOF = true;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"QAV12006_SelectEvery",sqlCommand);
    }
}
private void QAV12006_TableToFile()
    throws Exception
{   try
    {
       AV120_VLPISCZF = QAV12006_TAB.getDouble("VLPISCZF");
       AV120_VLLIQUID = QAV12006_TAB.getDouble("VLLIQUID");
       AV120_CDNATOPE = QAV12006_TAB.getDouble("CDNATOPE");
       AV120_VLBRUTOP = QAV12006_TAB.getDouble("VLBRUTOP");
       AV120_PCICMPRO = QAV12006_TAB.getDouble("PCICMPRO");
       AV120_VLICMPRO = QAV12006_TAB.getDouble("VLICMPRO");
       AV120_VLICMZFP = QAV12006_TAB.getDouble("VLICMZFP");
       AV120_CDEMPRES = QAV12006_TAB.getDouble("CDEMPRES");
       AV120_CDFILIAL = QAV12006_TAB.getDouble("CDFILIAL");
       AV120_CDMODENF = QAV12006_TAB.getDouble("CDMODENF");
       AV120_TPREGIST = QAV12006_TAB.getDouble("TPREGIST");
       AV120_NRNOTAFI = QAV12006_TAB.getDouble("NRNOTAFI");
       AV120_CDCONCRE = QAV12006_TAB.getDouble("CDCONCRE");
       AV120_CDNATCOM = QAV12006_TAB.getDouble("CDNATCOM");
       AV120_PCIPIPRO = QAV12006_TAB.getDouble("PCIPIPRO");
       AV120_INBRIDNF = QAV12006_TAB.getDouble("INBRIDNF");
       AV120_VLDESCNT = QAV12006_TAB.getDouble("VLDESCNT");
       AV120_CDOCONAT = QAV12006_TAB.getDouble("CDOCONAT");
       AV120_VLIPIPRO = QAV12006_TAB.getDouble("VLIPIPRO");
       AV120_INIPIDBC = QAV12006_TAB.getDouble("INIPIDBC");
       AV120_VLIPIDEV = QAV12006_TAB.getDouble("VLIPIDEV");
       AV120_VLADIBIC = QAV12006_TAB.getDouble("VLADIBIC");
       AV120_VLBASRIC = QAV12006_TAB.getDouble("VLBASRIC");
       AV120_VLBASSTR = QAV12006_TAB.getDouble("VLBASSTR");
       AV120_VLBASDID = QAV12006_TAB.getDouble("VLBASDID");
       AV120_VLICMDID = QAV12006_TAB.getDouble("VLICMDID");
       AV120_VLICMDIO = QAV12006_TAB.getDouble("VLICMDIO");
       AV120_VLFCPDES = QAV12006_TAB.getDouble("VLFCPDES");
       AV120_VLICMSTR = QAV12006_TAB.getDouble("VLICMSTR");
       AV120_VLFCPSTR = QAV12006_TAB.getDouble("VLFCPSTR");
       AV120_CDCLAFIS = QAV12006_TAB.getDouble("CDCLAFIS");
       AV120_CDPRODUT = QAV12006_TAB.getDouble("CDPRODUT");
       AV120_CDITEMXX = QAV12006_TAB.getDouble("CDITEMXX");
       AV120_CDDEBICM = QAV12006_TAB.getDouble("CDDEBICM");
       AV120_VLDESCON = QAV12006_TAB.getDouble("VLDESCON");
       AV120_INORIPRO = QAV12006_TAB.getDouble("INORIPRO");
       AV120_QTFATURA = QAV12006_TAB.getDouble("QTFATURA");
       AV120_CDTRIDIF = QAV12006_TAB.getDouble("CDTRIDIF");
       AV120_INBRINDE = QAV12006_TAB.getDouble("INBRINDE");
       AV120_ROWID = QAV12006_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "QAV12006_TableToFile","");
    }
}
private void QAV12006_MoveNext()
  throws Exception
{    try
     {
        if (QAV12006_XSEEDEOF == true)
        {   return;
        }
        if (QAV12006_XSEEDSEEK == false)
        {   if (QAV12006_TAB.next())
            {    QAV12006_TableToFile();
            }
            else
            {   QAV12006_XSEEDEOF = true;
            }
         }
         else
         {    QAV12006_XSEEDSEEK = false;
         }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"QAV12006_MoveNext","");
    }
}
private String CG11001_DetermineEvery(double CDEMPRES ,double CDNATOPE ,double CDNATCOM ,double CDOCONAT)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        CG110_XSEEDEOF = false;
        CG110_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CG110_FIELDS + " FROM CG110 with (NOLOCK INDEX=CG11001) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDNATOPE = " + cStr(CDNATOPE);
        sqlCommand = sqlCommand + "  And CDNATCOM = " + cStr(CDNATCOM);
        sqlCommand = sqlCommand + "  And CDOCONAT = " + cStr(CDOCONAT);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDNATOPE  ";
        sqlCommand = sqlCommand + " ,CDNATCOM  ";
        sqlCommand = sqlCommand + " ,CDOCONAT  ";
        if (CG110_CMD == null)
        {   CG110_CMD = CG110_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CG110_TAB != null)
        {   CG110_TAB.close();
        }
        CG110_TAB = CG110_CMD.executeQuery(sqlCommand);
        if (CG110_TAB.next())
        {   xsdStatus = "";
            CG110_TableToFile();
        }
        else
        {   CG110_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG110_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CG11001_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CG110_XSEEDEOF == true)
        {   return;
        }
        if (CG110_XSEEDSEEK == false)
        {    if (CG110_TAB.next())
             {    CG110_TableToFile ();
             }
             else
             {    CG110_XSEEDEOF = true;
             }
        }
        {    CG110_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CG110_DetermineMoveNext", "");
    }
}
private void CG110_InitFile()
{
    CG110_CDBCCCOF = 0;
    CG110_CDBCCPIS = 0;
    CG110_CDCRECOF = 0;
    CG110_CDCREDIM = 0;
    CG110_CDCREICM = 0;
    CG110_CDCREIPI = 0;
    CG110_CDCREPIS = 0;
    CG110_CDCRESTR = 0;
    CG110_CDDEBCOF = 0;
    CG110_CDDEBICM = 0;
    CG110_CDDEBIPI = 0;
    CG110_CDDEBPIS = 0;
    CG110_CDDEBSTR = 0;
    CG110_CDEMPRES = 0;
    CG110_CDENQIPI = 0;
    CG110_CDNATCOM = 0;
    CG110_CDNATNFE = 0;
    CG110_CDNATOPE = 0;
    CG110_CDOCONAT = 0;
    CG110_CDOPEFIS = 0;
    CG110_CDSITCOF = 0;
    CG110_CDSITIPI = 0;
    CG110_CDSITPIS = 0;
    CG110_CDTRICMS = 0;
    CG110_CDTRIDIM = 0;
    CG110_CDTRIICM = 0;
    CG110_CDTRIIPI = 0;
    CG110_INATIVOX = 0;
    CG110_INATUDIP = 0;
    CG110_INCALCST = 0;
    CG110_INCALDIM = 0;
    CG110_INCALICM = 0;
    CG110_INCALIPI = 0;
    CG110_INCALPIS = 0;
    CG110_INCOFINS = 0;
    CG110_INCREIMO = 0;
    CG110_INCREPRE = 0;
    CG110_INCRESII = 0;
    CG110_INFATCON = 0;
    CG110_INSITREG = "";
    CG110_PCALICOF = 0;
    CG110_PCALIPIS = 0;
    CG110_PCCOFFRE = 0;
    CG110_PCDFICMF = 0;
    CG110_PCICMFIS = 0;
    CG110_PCICMINT = 0;
    CG110_PCPISFRE = 0;
    CG110_TPNATOPE = 0;
}
private void CG110_TableToFile ()
  throws Exception
{   try
    {
        if (CG110_XSEEDEOF == true)
        {    return;
        }
       CG110_PCICMFIS = CG110_TAB.getDouble("PCICMFIS");
       CG110_CDNATOPE = CG110_TAB.getDouble("CDNATOPE");
       CG110_CDNATCOM = CG110_TAB.getDouble("CDNATCOM");
       CG110_CDOCONAT = CG110_TAB.getDouble("CDOCONAT");
       CG110_CDTRIICM = CG110_TAB.getDouble("CDTRIICM");
       CG110_INCALICM = CG110_TAB.getDouble("INCALICM");
       CG110_INCALCST = CG110_TAB.getDouble("INCALCST");
       CG110_CDTRIIPI = CG110_TAB.getDouble("CDTRIIPI");
       CG110_INATUDIP = CG110_TAB.getDouble("INATUDIP");
       CG110_ROWID = CG110_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CG110_TableToFile","");
    }
}
private String PR10101_DetermineEvery(double CDEMPRES ,double CDPRODUT ,double CDCORPRO)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        PR101_XSEEDEOF = false;
        PR101_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_PR101_FIELDS + " FROM PR101 with (NOLOCK INDEX=PR10101) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDPRODUT = " + cStr(CDPRODUT);
        sqlCommand = sqlCommand + "  And CDCORPRO = " + cStr(CDCORPRO);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDPRODUT  ";
        sqlCommand = sqlCommand + " ,CDCORPRO  ";
        if (PR101_CMD == null)
        {   PR101_CMD = PR101_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (PR101_TAB != null)
        {   PR101_TAB.close();
        }
        PR101_TAB = PR101_CMD.executeQuery(sqlCommand);
        if (PR101_TAB.next())
        {   xsdStatus = "";
            PR101_TableToFile();
        }
        else
        {   PR101_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"PR101_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void PR10101_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (PR101_XSEEDEOF == true)
        {   return;
        }
        if (PR101_XSEEDSEEK == false)
        {    if (PR101_TAB.next())
             {    PR101_TableToFile ();
             }
             else
             {    PR101_XSEEDEOF = true;
             }
        }
        {    PR101_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"PR101_DetermineMoveNext", "");
    }
}
private void PR101_InitFile()
{
    PR101_CDALTSUG = 0;
    PR101_CDCARLIN = "";
    PR101_CDCATPRO = 0;
    PR101_CDCLACUS = 0;
    PR101_CDCLAFIS = 0;
    PR101_CDCLIENT = 0;
    PR101_CDCORPRO = 0;
    PR101_CDCORTIN = 0;
    PR101_CDDIVNEG = 0;
    PR101_CDDOCEST = 0;
    PR101_CDDUNCON = 0;
    PR101_CDDUNCOR = 0;
    PR101_CDEANCON = 0;
    PR101_CDEANCOR = 0;
    PR101_CDEANPRO = 0;
    PR101_CDEMPORI = 0;
    PR101_CDEMPRES = 0;
    PR101_CDEXCNCM = "";
    PR101_CDFORACO = 0;
    PR101_CDFRANQU = 0;
    PR101_CDGENITE = 0;
    PR101_CDGRUMAQ = 0;
    PR101_CDLIGEST = 0;
    PR101_CDLINPRO = 0;
    PR101_CDMARCAX = 0;
    PR101_CDMERCAD = 0;
    PR101_CDMOLPRO = "";
    PR101_CDNIVPRO = 0;
    PR101_CDPAIORI = 0;
    PR101_CDPRIMOL = 0;
    PR101_CDPROALF = "";
    PR101_CDPROANP = 0;
    PR101_CDPROANT = 0;
    PR101_CDPRODMI = 0;
    PR101_CDPRODUT = 0;
    PR101_CDPROFIC = 0;
    PR101_CDPROJUN = 0;
    PR101_CDPROORI = 0;
    PR101_CDPROVDA = 0;
    PR101_CDQUAFIO = 0;
    PR101_CDSEGMER = 0;
    PR101_CDSEGMOL = 0;
    PR101_CDSITORI = 0;
    PR101_CDSUBCAR = 0;
    PR101_CDSUBNCM = 0;
    PR101_CDSUBPRO = 0;
    PR101_CDTERMOL = 0;
    PR101_CDTEXTNF = 0;
    PR101_CDTIPIPR = 0;
    PR101_CDTRIBUT = 0;
    PR101_CDTRIDIF = 0;
    PR101_CDUMMIXP = "";
    PR101_CDUNIMED = "";
    PR101_CDVIAJAN = "";
    PR101_DIALTFIC = 0;
    PR101_DIBLOINV = 0;
    PR101_DICADPRO = 0;
    PR101_DIDESCOR = 0;
    PR101_DIDESVDA = 0;
    PR101_DIFINSUS = 0;
    PR101_DIINISUS = 0;
    PR101_DILANCOR = 0;
    PR101_DIREVCMR = 0;
    PR101_DIREVCTB = 0;
    PR101_DIULTINV = 0;
    PR101_DIULTLAN = 0;
    PR101_DSDESCOM = "";
    PR101_DSEMBPRI = "";
    PR101_DSENDPRO = "";
    PR101_DSFILPVC = "";
    PR101_DSPROCOR = "";
    PR101_DSPRODUT = "";
    PR101_DSREFETI = "";
    PR101_DSREFPRO = "";
    PR101_DSTIPACE = "";
    PR101_DSTIPEMB = "";
    PR101_INATIVOX = 0;
    PR101_INBLOCAD = 0;
    PR101_INBLOINV = 0;
    PR101_INDECORA = 0;
    PR101_INESTJOG = 0;
    PR101_INFINMKT = 0;
    PR101_INFTPCOR = 0;
    PR101_INGAZEAD = 0;
    PR101_INIMPICM = 0;
    PR101_INMERCER = 0;
    PR101_INMONSUG = 0;
    PR101_INMOVEST = 0;
    PR101_INMPPCOR = 0;
    PR101_INNAOCAR = 0;
    PR101_INPARAFI = 0;
    PR101_INPENCMR = 0;
    PR101_INPENCTB = 0;
    PR101_INPENTEA = 0;
    PR101_INPOTCON = 0;
    PR101_INPROBLF = 0;
    PR101_INPROCES = 0;
    PR101_INPROLIC = 0;
    PR101_INPRORES = 0;
    PR101_INPROUNI = 0;
    PR101_INPROVDA = 0;
    PR101_INPRSMEA = 0;
    PR101_INRETORC = 0;
    PR101_INREVOPE = 0;
    PR101_INSENTOR = 0;
    PR101_INSISTIT = 0;
    PR101_INSITREG = "";
    PR101_INTEMCOR = 0;
    PR101_INTINTUR = 0;
    PR101_INTRABMA = 0;
    PR101_INVDVARE = 0;
    PR101_INVENDAX = 0;
    PR101_NMCORCOR = "";
    PR101_NRCONSTA = 0;
    PR101_NRCONSTB = 0;
    PR101_NRDIAMEA = 0;
    PR101_NRDIANEL = 0;
    PR101_NRENDLSO = 0;
    PR101_NRENDPIC = 0;
    PR101_NRESTACA = 0;
    PR101_NRESTSIM = 0;
    PR101_NRFUSOSX = 0;
    PR101_NRMAQPRO = 0;
    PR101_NRMPMMAQ = 0;
    PR101_NRMULFUN = 0;
    PR101_NRMULVEN = 0;
    PR101_NRPINHAO = 0;
    PR101_NRPPMMAQ = 0;
    PR101_NRRPMMAQ = 0;
    PR101_NRSEQDES = 0;
    PR101_NRSQORDE = 0;
    PR101_NRTITFIO = 0;
    PR101_NRTORPOL = 0;
    PR101_NRUSUCMR = 0;
    PR101_NRUSUCTB = 0;
    PR101_PCALIINT = 0;
    PR101_PCIMPIMP = 0;
    PR101_PCIPIPRO = 0;
    PR101_PCPARCUS = 0;
    PR101_PCPARPRO = 0;
    PR101_PCPARTIC = 0;
    PR101_PCVARPES = 0;
    PR101_PGCAIXAS = 0;
    PR101_PGGRAMAT = 0;
    PR101_PGMEADAP = 0;
    PR101_PGPADESP = 0;
    PR101_PGPADSAI = 0;
    PR101_PQBRUPRO = 0;
    PR101_PQLIQFRE = 0;
    PR101_PQLIQPRO = 0;
    PR101_QTALTEMB = 0;
    PR101_QTALTEUN = 0;
    PR101_QTALTPRO = 0;
    PR101_QTBLOINV = 0;
    PR101_QTCABOS1 = 0;
    PR101_QTCABOS2 = 0;
    PR101_QTCABOS3 = 0;
    PR101_QTCABOS4 = 0;
    PR101_QTCAPAPR = 0;
    PR101_QTCOMEMB = 0;
    PR101_QTCOMEUN = 0;
    PR101_QTCOMMET = 0;
    PR101_QTCOMPPR = 0;
    PR101_QTCONENT = 0;
    PR101_QTCXMAXI = 0;
    PR101_QTCXMINI = 0;
    PR101_QTDIAEMB = 0;
    PR101_QTDIAPRO = 0;
    PR101_QTEMIETI = 0;
    PR101_QTLAREMB = 0;
    PR101_QTLAREUN = 0;
    PR101_QTLARMET = 0;
    PR101_QTLARPRO = 0;
    PR101_QTLOTCOM = 0;
    PR101_QTMAQOPE = 0;
    PR101_QTMCEMBA = 0;
    PR101_QTMINSOR = 0;
    PR101_QTOPEMAQ = 0;
    PR101_QTPACOCX = 0;
    PR101_QTPCCFAC = 0;
    PR101_QTPECCON = 0;
    PR101_QTPECUNI = 0;
    PR101_QTUNITAR = 0;
    PR101_THDESCAN = 0;
    PR101_TPCODEXP = 0;
    PR101_TPCORCOR = 0;
    PR101_TPCORTIN = 0;
    PR101_TPCXTRAN = 0;
    PR101_TPEMBALA = 0;
    PR101_TPEMBEXT = 0;
    PR101_TPFORBAR = 0;
    PR101_TPFORPRO = 0;
    PR101_TPMARCAP = 0;
    PR101_TPSUBSTR = 0;
    PR101_TPSUBTIN = 0;
    PR101_TSPADRAO = 0;
    PR101_VLIPIPRO = 0;
}
private void PR101_TableToFile ()
  throws Exception
{   try
    {
        if (PR101_XSEEDEOF == true)
        {    return;
        }
       PR101_DSPRODUT = PR101_TAB.getString("DSPRODUT");
       PR101_PQLIQPRO = PR101_TAB.getDouble("PQLIQPRO");
       PR101_CDTRIDIF = PR101_TAB.getDouble("CDTRIDIF");
       PR101_INVENDAX = PR101_TAB.getDouble("INVENDAX");
       PR101_CDLINPRO = PR101_TAB.getDouble("CDLINPRO");
       PR101_CDCLAFIS = PR101_TAB.getDouble("CDCLAFIS");
       PR101_ROWID = PR101_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "PR101_TableToFile","");
    }
}
private String SU10301_DetermineEvery(double CDEMPRES ,double CDMATERI)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        SU103_XSEEDEOF = false;
        SU103_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_SU103_FIELDS + " FROM SU103 with (NOLOCK INDEX=SU10301) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDMATERI = " + cStr(CDMATERI);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDMATERI  ";
        if (SU103_CMD == null)
        {   SU103_CMD = SU103_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (SU103_TAB != null)
        {   SU103_TAB.close();
        }
        SU103_TAB = SU103_CMD.executeQuery(sqlCommand);
        if (SU103_TAB.next())
        {   xsdStatus = "";
            SU103_TableToFile();
        }
        else
        {   SU103_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"SU103_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void SU10301_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (SU103_XSEEDEOF == true)
        {   return;
        }
        if (SU103_XSEEDSEEK == false)
        {    if (SU103_TAB.next())
             {    SU103_TableToFile ();
             }
             else
             {    SU103_XSEEDEOF = true;
             }
        }
        {    SU103_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"SU103_DetermineMoveNext", "");
    }
}
private void SU103_InitFile()
{
    SU103_CDALMOXA = 0;
    SU103_CDATVMAT = 0;
    SU103_CDCLABCD = "";
    SU103_CDCLAFIS = 0;
    SU103_CDDIVMAT = 0;
    SU103_CDDOCEST = 0;
    SU103_CDEMPRES = 0;
    SU103_CDEXCNCM = "";
    SU103_CDFAMILI = 0;
    SU103_CDGENITE = 0;
    SU103_CDMATERI = 0;
    SU103_CDPROANP = 0;
    SU103_CDSITORI = 0;
    SU103_CDTIPIPR = 0;
    SU103_CDTRIBUT = 0;
    SU103_CDTRIDIF = 0;
    SU103_CDUMALTE = "";
    SU103_CDUNIMED = "";
    SU103_DDESTSEG = 0;
    SU103_DICADAST = 0;
    SU103_DIULTENT = 0;
    SU103_DIULTSAI = 0;
    SU103_DSCORMAT = "";
    SU103_DSMATERI = "";
    SU103_DSMATPRI = "";
    SU103_INCOMCFC = 0;
    SU103_INCONSIG = 0;
    SU103_INCREICM = 0;
    SU103_INCREIPI = 0;
    SU103_INEMALAB = 0;
    SU103_INENTABC = 0;
    SU103_INIMPICM = 0;
    SU103_INQUICOR = 0;
    SU103_INSITREG = "";
    SU103_INUMCUST = 0;
    SU103_INVENDAX = 0;
    SU103_NRDDRESS = 0;
    SU103_NRFATCON = 0;
    SU103_NRFATTIN = 0;
    SU103_NRPRATEL = "";
    SU103_NRSEMMAX = 0;
    SU103_NRSEMMIN = 0;
    SU103_NRSEMSEG = 0;
    SU103_PCALIINT = 0;
    SU103_QTALTPRO = 0;
    SU103_QTCOMPPR = 0;
    SU103_QTDENSID = 0;
    SU103_QTDIAPRO = 0;
    SU103_QTEMIETI = 0;
    SU103_QTESPCXA = 0;
    SU103_QTESTMAX = 0;
    SU103_QTESTMIN = 0;
    SU103_QTESTSEG = 0;
    SU103_QTLARPRO = 0;
    SU103_QTLOTCOM = 0;
    SU103_QTLOTMAX = 0;
    SU103_QTLOTMIN = 0;
    SU103_QTLOTMUL = 0;
    SU103_QTPBRMAT = 0;
    SU103_QTPESMAT = 0;
    SU103_TPITEEFD = 0;
    SU103_TPLOTCOM = 0;
}
private void SU103_TableToFile ()
  throws Exception
{   try
    {
        if (SU103_XSEEDEOF == true)
        {    return;
        }
       SU103_QTPESMAT = SU103_TAB.getDouble("QTPESMAT");
       SU103_ROWID = SU103_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "SU103_TableToFile","");
    }
}
private String AV11201_DetermineEvery(double CDEMPRES ,double CDPRODUT)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        AV112_XSEEDEOF = false;
        AV112_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_AV112_FIELDS + " FROM AV112 with (NOLOCK INDEX=AV11201) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDPRODUT = " + cStr(CDPRODUT);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDPRODUT  ";
        if (AV112_CMD == null)
        {   AV112_CMD = AV112_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (AV112_TAB != null)
        {   AV112_TAB.close();
        }
        AV112_TAB = AV112_CMD.executeQuery(sqlCommand);
        if (AV112_TAB.next())
        {   xsdStatus = "";
            AV112_TableToFile();
        }
        else
        {   AV112_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"AV112_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void AV11201_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (AV112_XSEEDEOF == true)
        {   return;
        }
        if (AV112_XSEEDSEEK == false)
        {    if (AV112_TAB.next())
             {    AV112_TableToFile ();
             }
             else
             {    AV112_XSEEDEOF = true;
             }
        }
        {    AV112_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"AV112_DetermineMoveNext", "");
    }
}
private void AV112_InitFile()
{
    AV112_CDCLAFIS = 0;
    AV112_CDDIVNEG = 0;
    AV112_CDDOCEST = 0;
    AV112_CDEMPRES = 0;
    AV112_CDEXCNCM = "";
    AV112_CDGENITE = 0;
    AV112_CDPROANP = 0;
    AV112_CDPRODUT = 0;
    AV112_CDSITORI = 0;
    AV112_CDTABDES = 0;
    AV112_CDTIPIPR = 0;
    AV112_CDTRBUTA = 0;
    AV112_CDTRIDIF = 0;
    AV112_DSABRINT = "";
    AV112_DSPRODUT = "";
    AV112_INIMPICM = 0;
    AV112_INSITREG = "";
    AV112_INVENDAX = 0;
    AV112_PCALIINT = 0;
    AV112_PCIPIPRO = 0;
    AV112_PQBRUPRO = 0;
    AV112_TPITEEFD = 0;
    AV112_VLPMPROF = 0;
    AV112_VLPREFAT = 0;
}
private void AV112_TableToFile ()
  throws Exception
{   try
    {
        if (AV112_XSEEDEOF == true)
        {    return;
        }
       AV112_VLPMPROF = AV112_TAB.getDouble("VLPMPROF");
       AV112_ROWID = AV112_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "AV112_TableToFile","");
    }
}
private String TP10101_DetermineEvery(double CDEMPRES ,double CDPRODUT)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        TP101_XSEEDEOF = false;
        TP101_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_TP101_FIELDS + " FROM TP101 with (NOLOCK INDEX=TP10101) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDPRODUT = " + cStr(CDPRODUT);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDPRODUT  ";
        if (TP101_CMD == null)
        {   TP101_CMD = TP101_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (TP101_TAB != null)
        {   TP101_TAB.close();
        }
        TP101_TAB = TP101_CMD.executeQuery(sqlCommand);
        if (TP101_TAB.next())
        {   xsdStatus = "";
            TP101_TableToFile();
        }
        else
        {   TP101_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"TP101_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void TP10101_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (TP101_XSEEDEOF == true)
        {   return;
        }
        if (TP101_XSEEDSEEK == false)
        {    if (TP101_TAB.next())
             {    TP101_TableToFile ();
             }
             else
             {    TP101_XSEEDEOF = true;
             }
        }
        {    TP101_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"TP101_DetermineMoveNext", "");
    }
}
private void TP101_InitFile()
{
    TP101_CDARQGRA = 0;
    TP101_CDCLAFIS = 0;
    TP101_CDCORGR1 = 0;
    TP101_CDCORGR2 = 0;
    TP101_CDCORGR3 = 0;
    TP101_CDCORGR4 = 0;
    TP101_CDCORGR5 = 0;
    TP101_CDCORGR6 = 0;
    TP101_CDCORGR7 = 0;
    TP101_CDCPAPEL = 0;
    TP101_CDDIVGRA = 0;
    TP101_CDEMPRES = 0;
    TP101_CDMATERI = 0;
    TP101_CDPRODUT = 0;
    TP101_CDUNIMED = "";
    TP101_DSFORMA2 = "";
    TP101_DSPRODUT = "";
    TP101_DSUSUARI = "";
    TP101_INCAPAXX = "";
    TP101_INDIFCOR = 0;
    TP101_INFATURA = "";
    TP101_INFVERSO = "";
    TP101_INLOCALG = 0;
    TP101_INLOCIM1 = 0;
    TP101_INLOCIM2 = 0;
    TP101_INLOCIM3 = 0;
    TP101_INLOCIM4 = 0;
    TP101_INLOCIM5 = 0;
    TP101_INLOCIM6 = 0;
    TP101_INLOCIM7 = 0;
    TP101_INREQUIS = "";
    TP101_INSITREG = "";
    TP101_NRFATCON = 0;
    TP101_QTIMPFOL = 0;
    TP101_QTIMPFOR = 0;
    TP101_QTIMPPRO = 0;
    TP101_QTJOGBLO = 0;
    TP101_QTSOBRAP = 0;
    TP101_TPATIGRA = 0;
    TP101_VLPMPROF = 0;
}
private void TP101_TableToFile ()
  throws Exception
{   try
    {
        if (TP101_XSEEDEOF == true)
        {    return;
        }
       TP101_VLPMPROF = TP101_TAB.getDouble("VLPMPROF");
       TP101_ROWID = TP101_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "TP101_TableToFile","");
    }
}
private void CG168_Insert()
   throws Exception
{   String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {
        GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "insert /*+ CGR032 */ into CG168 (";
        sqlCommand = sqlCommand + " CDCLAFIS";
        sqlCommand = sqlCommand + ",CDEMPRES";
        sqlCommand = sqlCommand + ",INSITREG";
        sqlCommand = sqlCommand + ",VLMOVIME";
        sqlCommand = sqlCommand + ") values (";
        sqlCommand = sqlCommand + " " + cStr(CG168_CDCLAFIS);
        sqlCommand = sqlCommand + "," + cStr(CG168_CDEMPRES);
        if (CG168_INSITREG.trim().equals("") == true)
        {   sqlCommand = sqlCommand + ",' '";
        }
        else
        {    sqlCommand = sqlCommand + ",'" + ReplaceQuotes(rTrim(CG168_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + "," + cStr(CG168_VLMOVIME);
        sqlCommand = sqlCommand + ")";
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        updateCmd.close();
    }
    catch (SQLException e)
    {
       GLB.DBCODE = e.getErrorCode();
       switch (e.getErrorCode())
       {
        case 2627:
            GLB.STATUS = "*****";
            break;
        case 547:
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
             break;
        default:
            if (GLB.DBCODE >= 50000)
            {   GLB.STATUS = "*****";
                GLB.DBMSG = e.getMessage();
            }
            else
            {   ShowErrorMsg (e,"CG168_Insert");
            }
        }
    }
}
private void CG168_Modify()
   throws Exception
{
    String sqlCommand="";
    Statement updateCmd=null;
    int recordsAffected=0;
    try
    {   GLB.STATUS = "";
        GLB.DBCODE = 0;
        GLB.DBMSG = "";
        sqlCommand = "update /*+ CGR032 */ CG168 set ";
        sqlCommand = sqlCommand + "CDEMPRES = " + cStr(CG168_CDEMPRES);
        sqlCommand = sqlCommand + ",CDCLAFIS = " + cStr(CG168_CDCLAFIS);
        sqlCommand = sqlCommand + ",VLMOVIME = " + cStr(CG168_VLMOVIME);
        if (CG168_INSITREG.trim().equals("") == true)
        {    sqlCommand = sqlCommand + ",INSITREG = ' '";
        }
        else
        {   sqlCommand = sqlCommand + ",INSITREG = '" + ReplaceQuotes(rTrim(CG168_INSITREG)) + "'";
        }
        sqlCommand = sqlCommand + " where ";
        sqlCommand = sqlCommand + " ROWID = " + cStr(CG168_ROWID);
        if (updateCmd == null)
        {   updateCmd = GLB.CONNECTION.createStatement();
        }
        recordsAffected = updateCmd.executeUpdate(sqlCommand);
        if (recordsAffected == 0)
        {    GLB.STATUS = "*****";
        }
        updateCmd.close();
    }
    catch (SQLException e)
    {
        GLB.DBCODE = e.getErrorCode();
        if (GLB.DBCODE == 547)
        {
            GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
        }
        else if (GLB.DBCODE >= 50000)
        {   GLB.STATUS = "*****";
            GLB.DBMSG = e.getMessage();
         }
         else
         {   ShowErrorMsg (e,"CG168_Modify");
         }
     }
}
private void CG168_AutoToFile()
{
    CG168_InitFile();
    CG168_CDEMPRES = AU_CG168_CDEMPRES;
    CG168_CDCLAFIS = AU_CG168_CDCLAFIS;
    CG168_VLMOVIME = AU_CG168_VLMOVIME;
    CG168_INSITREG = AU_CG168_INSITREG;
    CG168_ROWID = AU_CG168_ROWID;
}
private void CG168_FileToAuto()
{    AU_CG168_CDEMPRES = CG168_CDEMPRES;
    AU_CG168_CDCLAFIS = CG168_CDCLAFIS;
    AU_CG168_VLMOVIME = CG168_VLMOVIME;
    AU_CG168_INSITREG = CG168_INSITREG;
    AU_CG168_ROWID = CG168_ROWID;
 }
private void CG168_InitAuto()
{
    AU_CG168_CDEMPRES = 0;
    AU_CG168_CDCLAFIS = 0;
    AU_CG168_VLMOVIME = 0;
    AU_CG168_INSITREG = "";
    AU_CG168_ROWID = 0;
}
private String CE12101_DetermineEvery(double CDEMPRES ,double CDCLIENT)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        CE121_XSEEDEOF = false;
        CE121_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CE121_FIELDS + " FROM CE121 with (NOLOCK INDEX=CE12101) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDCLIENT = " + cStr(CDCLIENT);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDCLIENT  ";
        if (CE121_CMD == null)
        {   CE121_CMD = CE121_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CE121_TAB != null)
        {   CE121_TAB.close();
        }
        CE121_TAB = CE121_CMD.executeQuery(sqlCommand);
        if (CE121_TAB.next())
        {   xsdStatus = "";
            CE121_TableToFile();
        }
        else
        {   CE121_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CE121_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CE12101_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CE121_XSEEDEOF == true)
        {   return;
        }
        if (CE121_XSEEDSEEK == false)
        {    if (CE121_TAB.next())
             {    CE121_TableToFile ();
             }
             else
             {    CE121_XSEEDEOF = true;
             }
        }
        {    CE121_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CE121_DetermineMoveNext", "");
    }
}
private void CE121_InitFile()
{
    CE121_CDCLIENT = 0;
    CE121_CDDISTRI = 0;
    CE121_CDDOPAIS = 0;
    CE121_CDEMPRES = 0;
    CE121_DSBAIRRO = "";
    CE121_DSENDERE = "";
    CE121_INSITREG = "";
    CE121_NMCLIENT = "";
    CE121_NMEMAILX = "";
    CE121_NMPESCON = "";
    CE121_NRCELDDD = 0;
    CE121_NRCELNUM = 0;
    CE121_NRCEPCOM = 0;
    CE121_NRCEPLOC = 0;
    CE121_NRCGCDIG = 0;
    CE121_NRCGCFIL = 0;
    CE121_NRCGCNUM = 0;
    CE121_NRENDLOC = 0;
    CE121_NRINSCRE = "";
    CE121_NRTELDDD = 0;
    CE121_NRTELNUM = 0;
    CE121_NRTELOUT = "";
    CE121_QTLOJGRU = 0;
    CE121_TPESTABE = 0;
}
private void CE121_TableToFile ()
  throws Exception
{   try
    {
        if (CE121_XSEEDEOF == true)
        {    return;
        }
       CE121_CDDOPAIS = CE121_TAB.getDouble("CDDOPAIS");
       CE121_NRCEPLOC = CE121_TAB.getDouble("NRCEPLOC");
       CE121_ROWID = CE121_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CE121_TableToFile","");
    }
}
private String CE11801_DetermineEvery(double CDEMPRES ,double CDAGENTE)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        sqlCommand = "";
        CE118_XSEEDEOF = false;
        CE118_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_CE118_FIELDS + " FROM CE118 with (NOLOCK INDEX=CE11801) WHERE (";
        sqlCommand = sqlCommand + " CDEMPRES = " + cStr(CDEMPRES);
        sqlCommand = sqlCommand + "  And CDAGENTE = " + cStr(CDAGENTE);
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,CDAGENTE  ";
        if (CE118_CMD == null)
        {   CE118_CMD = CE118_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (CE118_TAB != null)
        {   CE118_TAB.close();
        }
        CE118_TAB = CE118_CMD.executeQuery(sqlCommand);
        if (CE118_TAB.next())
        {   xsdStatus = "";
            CE118_TableToFile();
        }
        else
        {   CE118_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CE118_DetermineEvery", sqlCommand);
        return(xsdStatus);
    }
}
private void CE11801_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (CE118_XSEEDEOF == true)
        {   return;
        }
        if (CE118_XSEEDSEEK == false)
        {    if (CE118_TAB.next())
             {    CE118_TableToFile ();
             }
             else
             {    CE118_XSEEDEOF = true;
             }
        }
        {    CE118_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"CE118_DetermineMoveNext", "");
    }
}
private void CE118_InitFile()
{
    CE118_CDAGENTE = 0;
    CE118_CDDOPAIS = 0;
    CE118_CDEMPRES = 0;
    CE118_CDFISJUR = 0;
    CE118_DIINCLUS = 0;
    CE118_DSBAIRRO = "";
    CE118_DSENDER2 = "";
    CE118_DSENDERE = "";
    CE118_INPAGDIR = "";
    CE118_INSITREG = "";
    CE118_NMAGENTE = "";
    CE118_NMCONTAT = "";
    CE118_NMEMAILX = "";
    CE118_NRCEPCOM = 0;
    CE118_NRCEPLOC = 0;
    CE118_NRCGCDIG = 0;
    CE118_NRCGCFIL = 0;
    CE118_NRCGCNUM = 0;
    CE118_NRENDLOC = 0;
    CE118_NRFAXOUT = "";
    CE118_NRINSCRE = "";
    CE118_NRTELALT = "";
    CE118_NRTELOUT = "";
    CE118_PCAGENTE = 0;
}
private void CE118_TableToFile ()
  throws Exception
{   try
    {
        if (CE118_XSEEDEOF == true)
        {    return;
        }
       CE118_CDDOPAIS = CE118_TAB.getDouble("CDDOPAIS");
       CE118_NRCEPLOC = CE118_TAB.getDouble("NRCEPLOC");
       CE118_ROWID = CE118_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "CE118_TableToFile","");
    }
}
private String AV28101_DetermineGroupFrom(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCLIFOR ,double CDCLIENT ,double DIALTERA ,double THALTERA, double CDEMPRESUntil,double INCLIFORUntil,double CDCLIENTUntil,double DIALTERAUntil,double THALTERAUntil)
  throws Exception
{
    String sqlCommand="";
    String xsdStatus = "*****";
    try
    {
        AV281_XSEEDEOF = false;
        AV281_XSEEDSEEK = true;
        sqlCommand = "SELECT /*+ CGR032 */ " + ODBC_AV281_FIELDS + " FROM AV281 with (NOLOCK INDEX=AV28101) WHERE (";
       switch (DtgFix)
       {
         case 1:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) +
           " ) And (";
           break;
         case 2:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " INCLIFOR = " + cStr(INCLIFOR) +
           " ) And (";
           break;
         case 3:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " INCLIFOR = " + cStr(INCLIFOR) + " And " +
           " CDCLIENT = " + cStr(CDCLIENT) +
           " ) And (";
           break;
         case 4:
           sqlCommand = sqlCommand +
           " CDEMPRES = " + cStr(CDEMPRES) + " And " +
           " INCLIFOR = " + cStr(INCLIFOR) + " And " +
           " CDCLIENT = " + cStr(CDCLIENT) + " And " +
           " DIALTERA = " + cStr(DIALTERA) +
           " ) And (";
           break;
       }
        switch (DtgFix)
        {
        case 0:
           sqlCommand = sqlCommand + AV28101_DetermineGroupFrom_0 (DtgFix, FlagUntil, CDEMPRES,INCLIFOR,CDCLIENT,DIALTERA,THALTERA, CDEMPRESUntil,INCLIFORUntil,CDCLIENTUntil,DIALTERAUntil,THALTERAUntil);
          break;
        case 1:
           sqlCommand = sqlCommand + AV28101_DetermineGroupFrom_1 (DtgFix, FlagUntil, CDEMPRES,INCLIFOR,CDCLIENT,DIALTERA,THALTERA, CDEMPRESUntil,INCLIFORUntil,CDCLIENTUntil,DIALTERAUntil,THALTERAUntil);
          break;
        case 2:
           sqlCommand = sqlCommand + AV28101_DetermineGroupFrom_2 (DtgFix, FlagUntil, CDEMPRES,INCLIFOR,CDCLIENT,DIALTERA,THALTERA, CDEMPRESUntil,INCLIFORUntil,CDCLIENTUntil,DIALTERAUntil,THALTERAUntil);
          break;
        case 3:
           sqlCommand = sqlCommand + AV28101_DetermineGroupFrom_3 (DtgFix, FlagUntil, CDEMPRES,INCLIFOR,CDCLIENT,DIALTERA,THALTERA, CDEMPRESUntil,INCLIFORUntil,CDCLIENTUntil,DIALTERAUntil,THALTERAUntil);
          break;
        case 4:
           sqlCommand = sqlCommand + AV28101_DetermineGroupFrom_4 (DtgFix, FlagUntil, CDEMPRES,INCLIFOR,CDCLIENT,DIALTERA,THALTERA, CDEMPRESUntil,INCLIFORUntil,CDCLIENTUntil,DIALTERAUntil,THALTERAUntil);
          break;
        }
        sqlCommand = sqlCommand + ") order by ";
        sqlCommand = sqlCommand + " CDEMPRES  ";
        sqlCommand = sqlCommand + " ,INCLIFOR  ";
        sqlCommand = sqlCommand + " ,CDCLIENT  ";
        sqlCommand = sqlCommand + " ,DIALTERA  ";
        sqlCommand = sqlCommand + " ,THALTERA  ";
        if (AV281_CMD == null)
        {   AV281_CMD = AV281_CON.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        }
        if (AV281_TAB != null)
        {   AV281_TAB.close();
        }
        AV281_TAB = AV281_CMD.executeQuery(sqlCommand);
        if (AV281_TAB.next())
        {   xsdStatus = "";
            AV281_TableToFile();
        }
        else
        {   AV281_XSEEDEOF = true;
        }
        return(xsdStatus);
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"AV281_DetermineGroupFrom", sqlCommand);
        return(xsdStatus);
    }
}
private String AV28101_DetermineGroupFrom_0(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCLIFOR ,double CDCLIENT ,double DIALTERA ,double THALTERA, double CDEMPRESUntil,double INCLIFORUntil,double CDCLIENTUntil,double DIALTERAUntil,double THALTERAUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INCLIFOR =  " + cStr(INCLIFOR) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " DIALTERA =  " + cStr(DIALTERA) + " And " +
    " THALTERA >=  " + cStr(THALTERA) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INCLIFOR =  " + cStr(INCLIFOR) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " DIALTERA >  " + cStr(DIALTERA) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INCLIFOR =  " + cStr(INCLIFOR) + " And " +
    " CDCLIENT >  " + cStr(CDCLIENT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES =  " + cStr(CDEMPRES) + " And " +
    " INCLIFOR >  " + cStr(INCLIFOR) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDEMPRES >  " + cStr(CDEMPRES) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INCLIFOR =  " + cStr(INCLIFORUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " DIALTERA =  " + cStr(DIALTERAUntil) + " And " +
       " THALTERA <=  " + cStr(THALTERAUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INCLIFOR =  " + cStr(INCLIFORUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " DIALTERA <  " + cStr(DIALTERAUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INCLIFOR =  " + cStr(INCLIFORUntil) + " And " +
       " CDCLIENT <  " + cStr(CDCLIENTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES =  " + cStr(CDEMPRESUntil) + " And " +
       " INCLIFOR <  " + cStr(INCLIFORUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDEMPRES <  " + cStr(CDEMPRESUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV28101_DetermineGroupFrom_1(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCLIFOR ,double CDCLIENT ,double DIALTERA ,double THALTERA, double CDEMPRESUntil,double INCLIFORUntil,double CDCLIENTUntil,double DIALTERAUntil,double THALTERAUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " INCLIFOR =  " + cStr(INCLIFOR) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " DIALTERA =  " + cStr(DIALTERA) + " And " +
    " THALTERA >=  " + cStr(THALTERA) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INCLIFOR =  " + cStr(INCLIFOR) + " And " +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " DIALTERA >  " + cStr(DIALTERA) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INCLIFOR =  " + cStr(INCLIFOR) + " And " +
    " CDCLIENT >  " + cStr(CDCLIENT) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " INCLIFOR >  " + cStr(INCLIFOR) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " INCLIFOR =  " + cStr(INCLIFORUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " DIALTERA =  " + cStr(DIALTERAUntil) + " And " +
       " THALTERA <=  " + cStr(THALTERAUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INCLIFOR =  " + cStr(INCLIFORUntil) + " And " +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " DIALTERA <  " + cStr(DIALTERAUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INCLIFOR =  " + cStr(INCLIFORUntil) + " And " +
       " CDCLIENT <  " + cStr(CDCLIENTUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " INCLIFOR <  " + cStr(INCLIFORUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV28101_DetermineGroupFrom_2(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCLIFOR ,double CDCLIENT ,double DIALTERA ,double THALTERA, double CDEMPRESUntil,double INCLIFORUntil,double CDCLIENTUntil,double DIALTERAUntil,double THALTERAUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " DIALTERA =  " + cStr(DIALTERA) + " And " +
    " THALTERA >=  " + cStr(THALTERA) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDCLIENT =  " + cStr(CDCLIENT) + " And " +
    " DIALTERA >  " + cStr(DIALTERA) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " CDCLIENT >  " + cStr(CDCLIENT) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " DIALTERA =  " + cStr(DIALTERAUntil) + " And " +
       " THALTERA <=  " + cStr(THALTERAUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDCLIENT =  " + cStr(CDCLIENTUntil) + " And " +
       " DIALTERA <  " + cStr(DIALTERAUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " CDCLIENT <  " + cStr(CDCLIENTUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV28101_DetermineGroupFrom_3(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCLIFOR ,double CDCLIENT ,double DIALTERA ,double THALTERA, double CDEMPRESUntil,double INCLIFORUntil,double CDCLIENTUntil,double DIALTERAUntil,double THALTERAUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " DIALTERA =  " + cStr(DIALTERA) + " And " +
    " THALTERA >=  " + cStr(THALTERA) +
    ")";
    sqlCommand = sqlCommand + " Or (" +
    " DIALTERA >  " + cStr(DIALTERA) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " DIALTERA =  " + cStr(DIALTERAUntil) + " And " +
       " THALTERA <=  " + cStr(THALTERAUntil) +
      ")";
      sqlCommand = sqlCommand + " Or (" +
       " DIALTERA <  " + cStr(DIALTERAUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}

private String AV28101_DetermineGroupFrom_4(int DtgFix, boolean FlagUntil, double CDEMPRES ,double INCLIFOR ,double CDCLIENT ,double DIALTERA ,double THALTERA, double CDEMPRESUntil,double INCLIFORUntil,double CDCLIENTUntil,double DIALTERAUntil,double THALTERAUntil)
 throws Exception
{  String sqlCommand="";
   try
   {
    sqlCommand = sqlCommand + "(" +
    " THALTERA >=  " + cStr(THALTERA) +
    ")";
    if (FlagUntil == true)
    {  sqlCommand = sqlCommand + " ) And ( ";
      sqlCommand = sqlCommand + "(" +
       " THALTERA <=  " + cStr(THALTERAUntil) +
      ")";
        }
       return(sqlCommand);
   }
   catch (Exception e)
        {  throw e;
        }
}


private void AV28101_DetermineMoveNext()
  throws Exception
{
    try
    {
        if (AV281_XSEEDEOF == true)
        {   return;
        }
        if (AV281_XSEEDSEEK == false)
        {    if (AV281_TAB.next())
             {    AV281_TableToFile ();
             }
             else
             {    AV281_XSEEDEOF = true;
             }
        }
        {    AV281_XSEEDSEEK = false;
        }
    }
    catch (SQLException e)
    {
        ShowDataMsg(e,"AV281_DetermineMoveNext", "");
    }
}
private void AV281_InitFile()
{
    AV281_CDAGEAUX = 0;
    AV281_CDAGEFOR = 0;
    AV281_CDAGENCI = 0;
    AV281_CDBANAUX = 0;
    AV281_CDBANCOX = 0;
    AV281_CDBANFOR = 0;
    AV281_CDBLOQUE = 0;
    AV281_CDCLIENT = 0;
    AV281_CDCLIVIP = "";
    AV281_CDDCTFOR = "";
    AV281_CDDESMER = 0;
    AV281_CDDIGAGE = "";
    AV281_CDDIGCON = "";
    AV281_CDDIGFOR = "";
    AV281_CDDOPAIS = 0;
    AV281_CDEMPRES = 0;
    AV281_CDFILFAT = 0;
    AV281_CDFISJUR = 0;
    AV281_CDGERENT = 0;
    AV281_CDMERNEG = 0;
    AV281_CDMOTEXC = 0;
    AV281_CDREEMBO = 0;
    AV281_CDREGIAO = 0;
    AV281_CDREGINT = 0;
    AV281_CDREPRES = 0;
    AV281_CDSUFRAM = "";
    AV281_CDTEXTNF = 0;
    AV281_CDVDCONS = 0;
    AV281_CDVENDED = 0;
    AV281_DDINTFAT = 0;
    AV281_DIALTERA = 0;
    AV281_DIFUNDAC = 0;
    AV281_DIVALSUF = 0;
    AV281_DSBAIRRO = "";
    AV281_DSCOMPLO = "";
    AV281_DSENDERE = "";
    AV281_DSREFBA1 = "";
    AV281_DSREFBA2 = "";
    AV281_DSREFBAN = "";
    AV281_DSREFCO1 = "";
    AV281_DSREFCO2 = "";
    AV281_DSREFCOM = "";
    AV281_INACOPED = 0;
    AV281_INCLIDDA = 0;
    AV281_INCLIFOR = 0;
    AV281_INCLIMEI = 0;
    AV281_INCLSMEI = 0;
    AV281_INCOMELE = 0;
    AV281_INDESPIS = 0;
    AV281_INENVCOB = 0;
    AV281_INENVEMA = 0;
    AV281_INENVSER = 0;
    AV281_INFATVOL = 0;
    AV281_INIMPBOL = 0;
    AV281_INJUNCAO = 0;
    AV281_INSALPED = 0;
    AV281_INSEPBON = 0;
    AV281_INSIMNAC = 0;
    AV281_INSITREG = "";
    AV281_INSITUAC = 0;
    AV281_INSUTRIB = 0;
    AV281_INTELPED = 0;
    AV281_NMCLIENT = "";
    AV281_NMEMACPG = "";
    AV281_NMEMADEV = "";
    AV281_NMEMAIL1 = "";
    AV281_NMEMAILX = "";
    AV281_NMEMANF2 = "";
    AV281_NMEMANFE = "";
    AV281_NMEMAXML = "";
    AV281_NMFANTAS = "";
    AV281_NMPESCON = "";
    AV281_NMPESXML = "";
    AV281_NRCELDDD = 0;
    AV281_NRCELNUM = 0;
    AV281_NRCEPCOM = 0;
    AV281_NRCEPLOC = 0;
    AV281_NRCFDFXX = "";
    AV281_NRCGCDIG = 0;
    AV281_NRCGCFAV = 0;
    AV281_NRCGCFIL = 0;
    AV281_NRCGCNUM = 0;
    AV281_NRCTACOR = "";
    AV281_NRCTAFOR = 0;
    AV281_NRDDDXML = 0;
    AV281_NRDIGFAV = 0;
    AV281_NRENDLOC = 0;
    AV281_NRFAXDDD = 0;
    AV281_NRFAXNUM = 0;
    AV281_NRFILFAV = 0;
    AV281_NRINSCRE = "";
    AV281_NRTE1DDD = 0;
    AV281_NRTE2DDD = 0;
    AV281_NRTECDDD = 0;
    AV281_NRTELDDD = 0;
    AV281_NRTELEC1 = 0;
    AV281_NRTELEC2 = 0;
    AV281_NRTELECO = 0;
    AV281_NRTELNUM = 0;
    AV281_NRTELXML = 0;
    AV281_NRUSUARI = 0;
    AV281_NRZAPDDD = 0;
    AV281_NRZAPNUM = 0;
    AV281_THALTERA = 0;
    AV281_TPBONIFI = 0;
    AV281_TPCLIENT = 0;
    AV281_TPESTABE = 0;
    AV281_TPPORAUX = 0;
    AV281_TPPORTAD = 0;
    AV281_TPVENDAX = 0;
}
private void AV281_TableToFile ()
  throws Exception
{   try
    {
        if (AV281_XSEEDEOF == true)
        {    return;
        }
       AV281_CDDOPAIS = AV281_TAB.getDouble("CDDOPAIS");
       AV281_NRCEPLOC = AV281_TAB.getDouble("NRCEPLOC");
       AV281_NRCEPCOM = AV281_TAB.getDouble("NRCEPCOM");
       AV281_ROWID = AV281_TAB.getDouble("ROWID");
    }
    catch (SQLException e)
    {
        ShowDataMsg(e, "AV281_TableToFile","");
    }
}

private void GSDNRPOSCCU_GROUP ()
   throws Exception
{   try
    {
        GSDNRPOSCC1 = XseedFunctions.subItem(GSDNRPOSCC1,GSDNRPOSCCU,0,2,2,0,"UNSIGNED");
        GSDNRPOSCC2 = XseedFunctions.subItem(GSDNRPOSCC2,GSDNRPOSCCU,2,4,2,0,"UNSIGNED");
        GSDNRPOSCC3 = XseedFunctions.subItem(GSDNRPOSCC3,GSDNRPOSCCU,4,6,2,0,"UNSIGNED");
        GSDNRPOSCC4 = XseedFunctions.subItem(GSDNRPOSCC4,GSDNRPOSCCU,6,8,2,0,"UNSIGNED");
        GSDNRPOSCC5 = XseedFunctions.subItem(GSDNRPOSCC5,GSDNRPOSCCU,8,10,2,0,"UNSIGNED");
        GSDNRPOSCC6 = XseedFunctions.subItem(GSDNRPOSCC6,GSDNRPOSCCU,10,12,2,0,"UNSIGNED");
        GSDNRPOSCC7 = XseedFunctions.subItem(GSDNRPOSCC7,GSDNRPOSCCU,12,14,2,0,"UNSIGNED");
        GSDNRPOSCC8 = XseedFunctions.subItem(GSDNRPOSCC8,GSDNRPOSCCU,14,16,2,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDCOMCCU_GROUP ()
   throws Exception
{   try
    {
        GSDDSCOMCCU = XseedFunctions.subItem(GSDDSCOMCCU,GSDCDCOMCCU,0,12,12);
        GSDNRNIVCCU = XseedFunctions.subItem(GSDNRNIVCCU,GSDCDCOMCCU,12,14,2,0,"UNSIGNED");
        GSDNRPOSCCU = XseedFunctions.subItem(GSDNRPOSCCU,GSDCDCOMCCU,14,30,16);
        GSDNRPOSCCU_GROUP();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCTA_GROUP ()
   throws Exception
{   try
    {
        GSDNRPOSCT1 = XseedFunctions.subItem(GSDNRPOSCT1,GSDNRPOSCTA,0,2,2,0,"UNSIGNED");
        GSDNRPOSCT2 = XseedFunctions.subItem(GSDNRPOSCT2,GSDNRPOSCTA,2,4,2,0,"UNSIGNED");
        GSDNRPOSCT3 = XseedFunctions.subItem(GSDNRPOSCT3,GSDNRPOSCTA,4,6,2,0,"UNSIGNED");
        GSDNRPOSCT4 = XseedFunctions.subItem(GSDNRPOSCT4,GSDNRPOSCTA,6,8,2,0,"UNSIGNED");
        GSDNRPOSCT5 = XseedFunctions.subItem(GSDNRPOSCT5,GSDNRPOSCTA,8,10,2,0,"UNSIGNED");
        GSDNRPOSCT6 = XseedFunctions.subItem(GSDNRPOSCT6,GSDNRPOSCTA,10,12,2,0,"UNSIGNED");
        GSDNRPOSCT7 = XseedFunctions.subItem(GSDNRPOSCT7,GSDNRPOSCTA,12,14,2,0,"UNSIGNED");
        GSDNRPOSCT8 = XseedFunctions.subItem(GSDNRPOSCT8,GSDNRPOSCTA,14,16,2,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDCOMCTA_GROUP ()
   throws Exception
{   try
    {
        GSDDSCOMCTA = XseedFunctions.subItem(GSDDSCOMCTA,GSDCDCOMCTA,0,12,12);
        GSDNRNIVCTA = XseedFunctions.subItem(GSDNRNIVCTA,GSDCDCOMCTA,12,14,2,0,"UNSIGNED");
        GSDNRPOSCTA = XseedFunctions.subItem(GSDNRPOSCTA,GSDCDCOMCTA,14,30,16);
        GSDNRPOSCTA_GROUP();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDCTAALF_GROUP ()
   throws Exception
{   try
    {
        GSDCDCTANUM = XseedFunctions.subItem(GSDCDCTANUM,GSDCDCTAALF,0,12,12,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDELEA16_GROUP ()
   throws Exception
{   try
    {
        GSDCDELEN16 = XseedFunctions.subItem(GSDCDELEN16,GSDCDELEA16,0,16,16,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDELEALF_GROUP ()
   throws Exception
{   try
    {
        GSDCDELENUM = XseedFunctions.subItem(GSDCDELENUM,GSDCDELEALF,0,10,10,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDISASAMD_GROUP ()
   throws Exception
{   try
    {
        GSDDISSSAMD = XseedFunctions.subItem(GSDDISSSAMD,GSDDISASAMD,0,2,2,0,"UNSIGNED");
        GSDDIAASAMD = XseedFunctions.subItem(GSDDIAASAMD,GSDDISASAMD,2,4,2,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDIAMSAMD_GROUP ()
   throws Exception
{   try
    {
        GSDDISASAMD = XseedFunctions.subItem(GSDDISASAMD,GSDDIAMSAMD,0,4,4);
        GSDDISASAMD_GROUP();
        GSDDIMMSAMD = XseedFunctions.subItem(GSDDIMMSAMD,GSDDIAMSAMD,4,6,2,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDIDISAMD_GROUP ()
   throws Exception
{   try
    {
        GSDDIAMSAMD = XseedFunctions.subItem(GSDDIAMSAMD,GSDDIDISAMD,0,6,6);
        GSDDIAMSAMD_GROUP();
        GSDDIDDSAMD = XseedFunctions.subItem(GSDDIDDSAMD,GSDDIDISAMD,6,8,2,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDSMENSAG_GROUP ()
   throws Exception
{   try
    {
        GSDCDSENHAN = XseedFunctions.subItem(GSDCDSENHAN,GSDDSMENSAG,0,5,5,0,"UNSIGNED");
        GSDCDSENHAX = XseedFunctions.subItem(GSDCDSENHAX,GSDDSMENSAG,5,50,45);
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDSPARREP_GROUP ()
   throws Exception
{   try
    {
        GSDCDCOMAND = XseedFunctions.subItem(GSDCDCOMAND,GSDDSPARREP,0,10,10);
        GSDDSMENSAG = XseedFunctions.subItem(GSDDSMENSAG,GSDDSPARREP,10,60,50);
        GSDDSMENSAG_GROUP();
        GSDNRSOLICI = XseedFunctions.subItem(GSDNRSOLICI,GSDDSPARREP,60,66,6,0,"UNSIGNED");
        GSDCDRELATO = XseedFunctions.subItem(GSDCDRELATO,GSDDSPARREP,66,72,6);
        GSICDUSUARI = XseedFunctions.subItem(GSICDUSUARI,GSDDSPARREP,72,97,25);
        GSICDEMPRES = XseedFunctions.subItem(GSICDEMPRES,GSDDSPARREP,97,99,2,0,"UNSIGNED");
        GSICDFILVEN = XseedFunctions.subItem(GSICDFILVEN,GSDDSPARREP,99,101,2,0,"UNSIGNED");
        GSINMEMPRES = XseedFunctions.subItem(GSINMEMPRES,GSDDSPARREP,101,117,16);
        GSDNMESTINI = XseedFunctions.subItem(GSDNMESTINI,GSDDSPARREP,117,134,17);
        GSDNMESTSOL = XseedFunctions.subItem(GSDNMESTSOL,GSDDSPARREP,134,151,17);
        GSIDISISTEM = XseedFunctions.subItem(GSIDISISTEM,GSDDSPARREP,151,157,6,0,"UNSIGNED");
        GSIDTSISTEM = XseedFunctions.subItem(GSIDTSISTEM,GSDDSPARREP,157,163,6,0,"UNSIGNED");
        GSDTHHHMMED = XseedFunctions.subItem(GSDTHHHMMED,GSDDSPARREP,163,168,5);
        GSDNRREGLID = XseedFunctions.subItem(GSDNRREGLID,GSDDSPARREP,168,176,8,0,"UNSIGNED");
        GSDNRREGGRA = XseedFunctions.subItem(GSDNRREGGRA,GSDDSPARREP,176,184,8,0,"UNSIGNED");
        GSDNRMIXREL = XseedFunctions.subItem(GSDNRMIXREL,GSDDSPARREP,184,188,4,0,"UNSIGNED");
        GSIINPROREF = XseedFunctions.subItem(GSIINPROREF,GSDDSPARREP,188,189,1,0,"UNSIGNED");
        GSIINESTPRO = XseedFunctions.subItem(GSIINESTPRO,GSDDSPARREP,189,190,1,0,"UNSIGNED");
        GSIINFILFAT = XseedFunctions.subItem(GSIINFILFAT,GSDDSPARREP,190,191,1,0,"UNSIGNED");
        GSIINESTGER = XseedFunctions.subItem(GSIINESTGER,GSDDSPARREP,191,192,1,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPARAME_GROUP ()
   throws Exception
{   try
    {
        GSDNRSOLREL = XseedFunctions.subItem(GSDNRSOLREL,GSDNRPARAME,0,6,6,0,"UNSIGNED");
        GSDNRPARREL = XseedFunctions.subItem(GSDNRPARREL,GSDNRPARAME,6,8,2,0,"UNSIGNED");
        GSDNRSEQPAR = XseedFunctions.subItem(GSDNRSEQPAR,GSDNRPARAME,8,10,2,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRULTPAR_GROUP ()
   throws Exception
{   try
    {
        GSDNRULTSOL = XseedFunctions.subItem(GSDNRULTSOL,GSDNRULTPAR,0,6,6,0,"UNSIGNED");
        GSDNRULTSEQ = XseedFunctions.subItem(GSDNRULTSEQ,GSDNRULTPAR,6,10,4,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCC1_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCCU = XseedFunctions.groupItem(GSDNRPOSCC1, GSDNRPOSCCU, 0, 2,2, 0,"UNSIGNED");
    GSDNRPOSCCU_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCC2_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCCU = XseedFunctions.groupItem(GSDNRPOSCC2, GSDNRPOSCCU, 2, 4,2, 0,"UNSIGNED");
    GSDNRPOSCCU_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCC3_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCCU = XseedFunctions.groupItem(GSDNRPOSCC3, GSDNRPOSCCU, 4, 6,2, 0,"UNSIGNED");
    GSDNRPOSCCU_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCC4_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCCU = XseedFunctions.groupItem(GSDNRPOSCC4, GSDNRPOSCCU, 6, 8,2, 0,"UNSIGNED");
    GSDNRPOSCCU_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCC5_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCCU = XseedFunctions.groupItem(GSDNRPOSCC5, GSDNRPOSCCU, 8, 10,2, 0,"UNSIGNED");
    GSDNRPOSCCU_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCC6_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCCU = XseedFunctions.groupItem(GSDNRPOSCC6, GSDNRPOSCCU, 10, 12,2, 0,"UNSIGNED");
    GSDNRPOSCCU_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCC7_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCCU = XseedFunctions.groupItem(GSDNRPOSCC7, GSDNRPOSCCU, 12, 14,2, 0,"UNSIGNED");
    GSDNRPOSCCU_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCC8_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCCU = XseedFunctions.groupItem(GSDNRPOSCC8, GSDNRPOSCCU, 14, 16,2, 0,"UNSIGNED");
    GSDNRPOSCCU_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDSCOMCCU_ITEM ()
   throws Exception
{   try
    {
        GSDCDCOMCCU = XseedFunctions.groupItem(GSDDSCOMCCU, GSDCDCOMCCU, 0, 12, 12);
        GSDDSCOMCCU = rTrim (GSDDSCOMCCU,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRNIVCCU_ITEM ()
   throws Exception
{   try
    {
        GSDCDCOMCCU = XseedFunctions.groupItem(GSDNRNIVCCU, GSDCDCOMCCU, 12, 14,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCCU_ITEM ()
   throws Exception
{   try
    {
        GSDCDCOMCCU = XseedFunctions.groupItem(GSDNRPOSCCU, GSDCDCOMCCU, 14, 30, 16);
        GSDNRPOSCCU = rTrim (GSDNRPOSCCU,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCT1_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCTA = XseedFunctions.groupItem(GSDNRPOSCT1, GSDNRPOSCTA, 0, 2,2, 0,"UNSIGNED");
    GSDNRPOSCTA_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCT2_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCTA = XseedFunctions.groupItem(GSDNRPOSCT2, GSDNRPOSCTA, 2, 4,2, 0,"UNSIGNED");
    GSDNRPOSCTA_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCT3_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCTA = XseedFunctions.groupItem(GSDNRPOSCT3, GSDNRPOSCTA, 4, 6,2, 0,"UNSIGNED");
    GSDNRPOSCTA_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCT4_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCTA = XseedFunctions.groupItem(GSDNRPOSCT4, GSDNRPOSCTA, 6, 8,2, 0,"UNSIGNED");
    GSDNRPOSCTA_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCT5_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCTA = XseedFunctions.groupItem(GSDNRPOSCT5, GSDNRPOSCTA, 8, 10,2, 0,"UNSIGNED");
    GSDNRPOSCTA_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCT6_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCTA = XseedFunctions.groupItem(GSDNRPOSCT6, GSDNRPOSCTA, 10, 12,2, 0,"UNSIGNED");
    GSDNRPOSCTA_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCT7_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCTA = XseedFunctions.groupItem(GSDNRPOSCT7, GSDNRPOSCTA, 12, 14,2, 0,"UNSIGNED");
    GSDNRPOSCTA_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCT8_ITEM ()
   throws Exception
{   try
    {
        GSDNRPOSCTA = XseedFunctions.groupItem(GSDNRPOSCT8, GSDNRPOSCTA, 14, 16,2, 0,"UNSIGNED");
    GSDNRPOSCTA_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDSCOMCTA_ITEM ()
   throws Exception
{   try
    {
        GSDCDCOMCTA = XseedFunctions.groupItem(GSDDSCOMCTA, GSDCDCOMCTA, 0, 12, 12);
        GSDDSCOMCTA = rTrim (GSDDSCOMCTA,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRNIVCTA_ITEM ()
   throws Exception
{   try
    {
        GSDCDCOMCTA = XseedFunctions.groupItem(GSDNRNIVCTA, GSDCDCOMCTA, 12, 14,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCTA_ITEM ()
   throws Exception
{   try
    {
        GSDCDCOMCTA = XseedFunctions.groupItem(GSDNRPOSCTA, GSDCDCOMCTA, 14, 30, 16);
        GSDNRPOSCTA = rTrim (GSDNRPOSCTA,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDCTANUM_ITEM ()
   throws Exception
{   try
    {
        GSDCDCTAALF = XseedFunctions.groupItem(GSDCDCTANUM, GSDCDCTAALF, 0, 12,12, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDCUSNUM_ITEM ()
   throws Exception
{   try
    {
        GSDCDCUSALF = XseedFunctions.groupItem(GSDCDCUSNUM, GSDCDCUSALF, 0, 8,8, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDELEN16_ITEM ()
   throws Exception
{   try
    {
        GSDCDELEA16 = XseedFunctions.groupItem(GSDCDELEN16, GSDCDELEA16, 0, 16,16, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDELENUM_ITEM ()
   throws Exception
{   try
    {
        GSDCDELEALF = XseedFunctions.groupItem(GSDCDELENUM, GSDCDELEALF, 0, 10,10, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDISSSAMD_ITEM ()
   throws Exception
{   try
    {
        GSDDISASAMD = XseedFunctions.groupItem(GSDDISSSAMD, GSDDISASAMD, 0, 2,2, 0,"UNSIGNED");
    GSDDISASAMD_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDIAASAMD_ITEM ()
   throws Exception
{   try
    {
        GSDDISASAMD = XseedFunctions.groupItem(GSDDIAASAMD, GSDDISASAMD, 2, 4,2, 0,"UNSIGNED");
    GSDDISASAMD_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDISASAMD_ITEM ()
   throws Exception
{   try
    {
        GSDDIAMSAMD = XseedFunctions.groupItem(GSDDISASAMD, GSDDIAMSAMD, 0, 4, 4);
    GSDDIAMSAMD_ITEM();
        GSDDISASAMD = rTrim (GSDDISASAMD,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDIMMSAMD_ITEM ()
   throws Exception
{   try
    {
        GSDDIAMSAMD = XseedFunctions.groupItem(GSDDIMMSAMD, GSDDIAMSAMD, 4, 6,2, 0,"UNSIGNED");
    GSDDIAMSAMD_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDIAMSAMD_ITEM ()
   throws Exception
{   try
    {
        GSDDIDISAMD = XseedFunctions.groupItem(GSDDIAMSAMD, GSDDIDISAMD, 0, 6, 6);
        GSDDIAMSAMD = rTrim (GSDDIAMSAMD,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDIDDSAMD_ITEM ()
   throws Exception
{   try
    {
        GSDDIDISAMD = XseedFunctions.groupItem(GSDDIDDSAMD, GSDDIDISAMD, 6, 8,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDSENHAN_ITEM ()
   throws Exception
{   try
    {
        GSDDSMENSAG = XseedFunctions.groupItem(GSDCDSENHAN, GSDDSMENSAG, 0, 5,5, 0,"UNSIGNED");
    GSDDSMENSAG_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDSENHAX_ITEM ()
   throws Exception
{   try
    {
        GSDDSMENSAG = XseedFunctions.groupItem(GSDCDSENHAX, GSDDSMENSAG, 5, 50, 45);
    GSDDSMENSAG_ITEM();
        GSDCDSENHAX = rTrim (GSDCDSENHAX,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDCOMAND_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSDCDCOMAND, GSDDSPARREP, 0, 10, 10);
        GSDCDCOMAND = rTrim (GSDCDCOMAND,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDSMENSAG_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSDDSMENSAG, GSDDSPARREP, 10, 60, 50);
        GSDDSMENSAG = rTrim (GSDDSMENSAG,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRSOLICI_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSDNRSOLICI, GSDDSPARREP, 60, 66,6, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDRELATO_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSDCDRELATO, GSDDSPARREP, 66, 72, 6);
        GSDCDRELATO = rTrim (GSDCDRELATO,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSICDUSUARI_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSICDUSUARI, GSDDSPARREP, 72, 97, 25);
        GSICDUSUARI = rTrim (GSICDUSUARI,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSICDEMPRES_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSICDEMPRES, GSDDSPARREP, 97, 99,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSICDFILVEN_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSICDFILVEN, GSDDSPARREP, 99, 101,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSINMEMPRES_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSINMEMPRES, GSDDSPARREP, 101, 117, 16);
        GSINMEMPRES = rTrim (GSINMEMPRES,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNMESTINI_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSDNMESTINI, GSDDSPARREP, 117, 134, 17);
        GSDNMESTINI = rTrim (GSDNMESTINI,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNMESTSOL_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSDNMESTSOL, GSDDSPARREP, 134, 151, 17);
        GSDNMESTSOL = rTrim (GSDNMESTSOL,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSIDISISTEM_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSIDISISTEM, GSDDSPARREP, 151, 157,6, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSIDTSISTEM_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSIDTSISTEM, GSDDSPARREP, 157, 163,6, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDTHHHMMED_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSDTHHHMMED, GSDDSPARREP, 163, 168, 5);
        GSDTHHHMMED = rTrim (GSDTHHHMMED,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRREGLID_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSDNRREGLID, GSDDSPARREP, 168, 176,8, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRREGGRA_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSDNRREGGRA, GSDDSPARREP, 176, 184,8, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRMIXREL_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSDNRMIXREL, GSDDSPARREP, 184, 188,4, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSIINPROREF_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSIINPROREF, GSDDSPARREP, 188, 189,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSIINESTPRO_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSIINESTPRO, GSDDSPARREP, 189, 190,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSIINFILFAT_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSIINFILFAT, GSDDSPARREP, 190, 191,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSIINESTGER_ITEM ()
   throws Exception
{   try
    {
        GSDDSPARREP = XseedFunctions.groupItem(GSIINESTGER, GSDDSPARREP, 191, 192,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDUSUARI_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDCDUSUARI, GSDGLB_WORK, 1600, 1625, 25);
        GSDCDUSUARI = rTrim (GSDCDUSUARI,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDEMPRES_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDCDEMPRES, GSDGLB_WORK, 1625, 1627,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDNIVSEG_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDCDNIVSEG, GSDGLB_WORK, 1629, 1631,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDFILVEN_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDCDFILVEN, GSDGLB_WORK, 1632, 1634,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNMABREMP_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDNMABREMP, GSDGLB_WORK, 1634, 1650, 16);
        GSDNMABREMP = rTrim (GSDNMABREMP,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDATIVID_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDCDATIVID, GSDGLB_WORK, 1650, 1656, 6);
        GSDCDATIVID = rTrim (GSDCDATIVID,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDTSISTEM_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDDTSISTEM, GSDGLB_WORK, 1668, 1674,6, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRUSUARI_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDNRUSUARI, GSDGLB_WORK, 1675, 1679,4, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDINPROREF_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDINPROREF, GSDGLB_WORK, 1689, 1690,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDISISSEC_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDDISISSEC, GSDGLB_WORK, 1690, 1698,8, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDTSISSEC_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDDTSISSEC, GSDGLB_WORK, 1698, 1706,8, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDINESTPRO_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDINESTPRO, GSDGLB_WORK, 1706, 1707,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDINFILFAT_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDINFILFAT, GSDGLB_WORK, 1707, 1708,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDINESTGER_ITEM ()
   throws Exception
{   try
    {
        GSDGLB_WORK = XseedFunctions.groupItem(GSDINESTGER, GSDGLB_WORK, 1708, 1709,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRSOLREL_ITEM ()
   throws Exception
{   try
    {
        GSDNRPARAME = XseedFunctions.groupItem(GSDNRSOLREL, GSDNRPARAME, 0, 6,6, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPARREL_ITEM ()
   throws Exception
{   try
    {
        GSDNRPARAME = XseedFunctions.groupItem(GSDNRPARREL, GSDNRPARAME, 6, 8,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRSEQPAR_ITEM ()
   throws Exception
{   try
    {
        GSDNRPARAME = XseedFunctions.groupItem(GSDNRSEQPAR, GSDNRPARAME, 8, 10,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRULTSOL_ITEM ()
   throws Exception
{   try
    {
        GSDNRULTPAR = XseedFunctions.groupItem(GSDNRULTSOL, GSDNRULTPAR, 0, 6,6, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRULTSEQ_ITEM ()
   throws Exception
{   try
    {
        GSDNRULTPAR = XseedFunctions.groupItem(GSDNRULTSEQ, GSDNRULTPAR, 6, 10,4, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRAMREFERE_GROUP ()
   throws Exception
{   try
    {
        GEDSFILLER = XseedFunctions.subItem(GEDSFILLER,GRAMREFERE,0,9,9,0,"UNSIGNED");
        GENRDECEND = XseedFunctions.subItem(GENRDECEND,GRAMREFERE,9,10,1,0,"UNSIGNED");
        GEAMREFERE = XseedFunctions.subItem(GEAMREFERE,GRAMREFERE,10,16,6,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRAMREFERE_GROUP_INIT ()
   throws Exception
{   try
    {
        GRAMREFERE = "0000000000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRCDNATALF_GROUP ()
   throws Exception
{   try
    {
        GECDNATNUM = XseedFunctions.subItem(GECDNATNUM,GRCDNATALF,0,4,4,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRCDNATALF_GROUP_INIT ()
   throws Exception
{   try
    {
        GRCDNATALF = "0000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRCDNATGR1_GROUP ()
   throws Exception
{   try
    {
        GECDPO1GR1 = XseedFunctions.subItem(GECDPO1GR1,GRCDNATGR1,0,1,1);
        GECDPO2GR1 = XseedFunctions.subItem(GECDPO2GR1,GRCDNATGR1,1,2,1);
        GECDPO3GR1 = XseedFunctions.subItem(GECDPO3GR1,GRCDNATGR1,2,4,2);
        GECDPO4GR1 = XseedFunctions.subItem(GECDPO4GR1,GRCDNATGR1,4,5,1);
        GECDPO5GR1 = XseedFunctions.subItem(GECDPO5GR1,GRCDNATGR1,5,7,2);
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRCDNATGR1_GROUP_INIT ()
   throws Exception
{   try
    {
        GRCDNATGR1 = " .     ";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRCDNATGR2_GROUP ()
   throws Exception
{   try
    {
        GECDPO1GR2 = XseedFunctions.subItem(GECDPO1GR2,GRCDNATGR2,0,1,1);
        GECDPO2GR2 = XseedFunctions.subItem(GECDPO2GR2,GRCDNATGR2,1,2,1);
        GECDPO3GR2 = XseedFunctions.subItem(GECDPO3GR2,GRCDNATGR2,2,5,3);
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRCDNATGR2_GROUP_INIT ()
   throws Exception
{   try
    {
        GRCDNATGR2 = " .   ";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRCDNATTRA_GROUP ()
   throws Exception
{   try
    {
        GECDSEGPOS = XseedFunctions.subItem(GECDSEGPOS,GRCDNATTRA,0,1,1,0,"UNSIGNED");
        GECDULTPOS = XseedFunctions.subItem(GECDULTPOS,GRCDNATTRA,1,3,2,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRCDNATTRA_GROUP_INIT ()
   throws Exception
{   try
    {
        GRCDNATTRA = "000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRCDNATONU_GROUP ()
   throws Exception
{   try
    {
        GECDPRIPOS = XseedFunctions.subItem(GECDPRIPOS,GRCDNATONU,0,1,1,0,"UNSIGNED");
        GRCDNATTRA = XseedFunctions.subItem(GRCDNATTRA,GRCDNATONU,1,4,3);
        GRCDNATTRA_GROUP();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRCDNATONU_GROUP_INIT ()
   throws Exception
{   try
    {
        GRCDNATTRA_GROUP_INIT();
        GRCDNATONU = "0" + GRCDNATTRA + "";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRNRCPFEDI_GROUP ()
   throws Exception
{   try
    {
        GENRCPFED1 = XseedFunctions.subItem(GENRCPFED1,GRNRCPFEDI,0,3,3,0,"UNSIGNED");
        GEDSLIMI01 = XseedFunctions.subItem(GEDSLIMI01,GRNRCPFEDI,3,4,1);
        GENRCPFED2 = XseedFunctions.subItem(GENRCPFED2,GRNRCPFEDI,4,7,3,0,"UNSIGNED");
        GEDSLIMI02 = XseedFunctions.subItem(GEDSLIMI02,GRNRCPFEDI,7,8,1);
        GENRCPFED3 = XseedFunctions.subItem(GENRCPFED3,GRNRCPFEDI,8,11,3,0,"UNSIGNED");
        GEDSHIFENX = XseedFunctions.subItem(GEDSHIFENX,GRNRCPFEDI,11,12,1);
        GENRCPFDIG = XseedFunctions.subItem(GENRCPFDIG,GRNRCPFEDI,12,14,2,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRNRCPFEDI_GROUP_INIT ()
   throws Exception
{   try
    {
        GRNRCPFEDI = "000.000.000-00";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRNRCPFSRF_GROUP ()
   throws Exception
{   try
    {
        GENRCPF001 = XseedFunctions.subItem(GENRCPF001,GRNRCPFSRF,0,3,3,0,"UNSIGNED");
        GENRCPF002 = XseedFunctions.subItem(GENRCPF002,GRNRCPFSRF,3,6,3,0,"UNSIGNED");
        GENRCPF003 = XseedFunctions.subItem(GENRCPF003,GRNRCPFSRF,6,9,3,0,"UNSIGNED");
        GENRCPF004 = XseedFunctions.subItem(GENRCPF004,GRNRCPFSRF,9,11,2,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRNRCPFSRF_GROUP_INIT ()
   throws Exception
{   try
    {
        GRNRCPFSRF = "00000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRNRINFORM_GROUP ()
   throws Exception
{   try
    {
        GENRINFORM = XseedFunctions.subItem(GENRINFORM,GRNRINFORM,0,5,5,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRNRINFORM_GROUP_INIT ()
   throws Exception
{   try
    {
        GRNRINFORM = "00000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRNRNFICMP_GROUP ()
   throws Exception
{   try
    {
        GECDZEROSX = XseedFunctions.subItem(GECDZEROSX,GRNRNFICMP,0,4,4,0,"UNSIGNED");
        GECDMODICM = XseedFunctions.subItem(GECDMODICM,GRNRNFICMP,4,5,1,0,"UNSIGNED");
        GECDFILICM = XseedFunctions.subItem(GECDFILICM,GRNRNFICMP,5,7,2,0,"UNSIGNED");
        GENRNFICMP = XseedFunctions.subItem(GENRNFICMP,GRNRNFICMP,7,16,9,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRNRNFICMP_GROUP_INIT ()
   throws Exception
{   try
    {
        GRNRNFICMP = "0000000000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRVLATUALI_GROUP ()
   throws Exception
{   try
    {
        GEINDEBIPI = XseedFunctions.subItem(GEINDEBIPI,GRVLATUALI,0,1,1,0,"UNSIGNED");
        GEDSESTADO = XseedFunctions.subItem(GEDSESTADO,GRVLATUALI,1,5,4);
        GECDNATCOM = XseedFunctions.subItem(GECDNATCOM,GRVLATUALI,5,7,2,0,"UNSIGNED");
        GEQTPESOKG = XseedFunctions.subItem(GEQTPESOKG,GRVLATUALI,7,17,10,1,"UNSIGNED");
        GEVLAUXIL1 = XseedFunctions.subItem(GEVLAUXIL1,GRVLATUALI,17,31,14,2,"UNSIGNED");
        GEVLAUXIL2 = XseedFunctions.subItem(GEVLAUXIL2,GRVLATUALI,31,45,14,2,"UNSIGNED");
        GEVLBASICM = XseedFunctions.subItem(GEVLBASICM,GRVLATUALI,45,59,14,2,"UNSIGNED");
        GEVLBASIPI = XseedFunctions.subItem(GEVLBASIPI,GRVLATUALI,59,73,14,2,"UNSIGNED");
        GEVLCONTAB = XseedFunctions.subItem(GEVLCONTAB,GRVLATUALI,73,87,14,2,"UNSIGNED");
        GEVLIMPICM = XseedFunctions.subItem(GEVLIMPICM,GRVLATUALI,87,101,14,2,"UNSIGNED");
        GEVLIMPIPI = XseedFunctions.subItem(GEVLIMPIPI,GRVLATUALI,101,115,14,2,"UNSIGNED");
        GEVLINTEGR = XseedFunctions.subItem(GEVLINTEGR,GRVLATUALI,115,129,14,2,"UNSIGNED");
        GEVLINTICM = XseedFunctions.subItem(GEVLINTICM,GRVLATUALI,129,143,14,2,"UNSIGNED");
        GEVLINTIPI = XseedFunctions.subItem(GEVLINTIPI,GRVLATUALI,143,157,14,2,"UNSIGNED");
        GEVLOUTICM = XseedFunctions.subItem(GEVLOUTICM,GRVLATUALI,157,171,14,2,"UNSIGNED");
        GEVLOUTIPI = XseedFunctions.subItem(GEVLOUTIPI,GRVLATUALI,171,185,14,2,"UNSIGNED");
        GEVLCONTNC = XseedFunctions.subItem(GEVLCONTNC,GRVLATUALI,185,199,14,2,"UNSIGNED");
        GEVLBICMNC = XseedFunctions.subItem(GEVLBICMNC,GRVLATUALI,199,213,14,2,"UNSIGNED");
        GEVLBASSTR = XseedFunctions.subItem(GEVLBASSTR,GRVLATUALI,213,227,14,2,"UNSIGNED");
        GEVLICMSTR = XseedFunctions.subItem(GEVLICMSTR,GRVLATUALI,227,241,14,2,"UNSIGNED");
        GEVLTRAB01 = XseedFunctions.subItem(GEVLTRAB01,GRVLATUALI,241,255,14,2,"UNSIGNED");
        GEVLTRAB02 = XseedFunctions.subItem(GEVLTRAB02,GRVLATUALI,255,269,14,2,"UNSIGNED");
        GEVLTRAB03 = XseedFunctions.subItem(GEVLTRAB03,GRVLATUALI,269,283,14,2,"UNSIGNED");
        GEVLTRAB04 = XseedFunctions.subItem(GEVLTRAB04,GRVLATUALI,283,297,14,2,"UNSIGNED");
        GEVLTRAB05 = XseedFunctions.subItem(GEVLTRAB05,GRVLATUALI,297,311,14,2,"UNSIGNED");
        GEVLTRAB06 = XseedFunctions.subItem(GEVLTRAB06,GRVLATUALI,311,325,14,2,"UNSIGNED");
        GEVLTRAB07 = XseedFunctions.subItem(GEVLTRAB07,GRVLATUALI,325,339,14,2,"UNSIGNED");
        GEVLTRAB08 = XseedFunctions.subItem(GEVLTRAB08,GRVLATUALI,339,353,14,2,"UNSIGNED");
        GEVLTRAB09 = XseedFunctions.subItem(GEVLTRAB09,GRVLATUALI,353,367,14,2,"UNSIGNED");
        GEVLTRAB10 = XseedFunctions.subItem(GEVLTRAB10,GRVLATUALI,367,381,14,2,"UNSIGNED");
        GEVLTRAB11 = XseedFunctions.subItem(GEVLTRAB11,GRVLATUALI,381,395,14,2,"UNSIGNED");
        GEVLTRAB12 = XseedFunctions.subItem(GEVLTRAB12,GRVLATUALI,395,409,14,2,"UNSIGNED");
        GEVLTRAB13 = XseedFunctions.subItem(GEVLTRAB13,GRVLATUALI,409,423,14,2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRVLATUALI_GROUP_INIT ()
   throws Exception
{   try
    {
        GRVLATUALI = "0    0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRVLREDICM_GROUP ()
   throws Exception
{   try
    {
        GEVLFILRED = XseedFunctions.subItem(GEVLFILRED,GRVLREDICM,0,6,6,0,"UNSIGNED");
        GECDTEXRED = XseedFunctions.subItem(GECDTEXRED,GRVLREDICM,6,12,6,0,"UNSIGNED");
        GEPCREDICM = XseedFunctions.subItem(GEPCREDICM,GRVLREDICM,12,18,6,4,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRVLREDICM_GROUP_INIT ()
   throws Exception
{   try
    {
        GRVLREDICM = "000000000000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRDSCABECA_GROUP ()
   throws Exception
{   try
    {
        GEDSNOTAFI = XseedFunctions.subItem(GEDSNOTAFI,GRDSCABECA,0,9,9);
        GEDSESPA01 = XseedFunctions.subItem(GEDSESPA01,GRDSCABECA,9,10,1);
        GEDSEMISSA = XseedFunctions.subItem(GEDSEMISSA,GRDSCABECA,10,18,8);
        GEDSESPA04 = XseedFunctions.subItem(GEDSESPA04,GRDSCABECA,18,19,1);
        GEDSCLIENT = XseedFunctions.subItem(GEDSCLIENT,GRDSCABECA,19,26,7);
        GEDSESPA02 = XseedFunctions.subItem(GEDSESPA02,GRDSCABECA,26,27,1);
        GEDSCLIEN1 = XseedFunctions.subItem(GEDSCLIEN1,GRDSCABECA,27,87,60);
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRDSCABECA_GROUP_INIT ()
   throws Exception
{   try
    {
        GRDSCABECA = "     N.F. EMISSAO  CLIENTE                                                             ";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRDSLINHAX_GROUP ()
   throws Exception
{   try
    {
        GENRNOTDEP = XseedFunctions.subItem(GENRNOTDEP,GRDSLINHAX,0,9,9);
        GEDSESPA06 = XseedFunctions.subItem(GEDSESPA06,GRDSLINHAX,9,10,1);
        GEDIEMIDEP = XseedFunctions.subItem(GEDIEMIDEP,GRDSLINHAX,10,18,8);
        GEDSESPA09 = XseedFunctions.subItem(GEDSESPA09,GRDSLINHAX,18,19,1);
        GECDCLIDEP = XseedFunctions.subItem(GECDCLIDEP,GRDSLINHAX,19,26,7);
        GEDSESPA07 = XseedFunctions.subItem(GEDSESPA07,GRDSLINHAX,26,27,1);
        GENMCLIENT = XseedFunctions.subItem(GENMCLIENT,GRDSLINHAX,27,87,60);
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRDSLINHAX_GROUP_INIT ()
   throws Exception
{   try
    {
        GRDSLINHAX = "                                                                                       ";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GRDSMASCAR_GROUP ()
   throws Exception
{   try
    {
        CGP001GEVLGRUPO1 = XseedFunctions.subItem(CGP001GEVLGRUPO1,CGP001GRDSMASCAR,0,1,1,0,"UNSIGNED");
        CGP001GEVLGRUPO2 = XseedFunctions.subItem(CGP001GEVLGRUPO2,CGP001GRDSMASCAR,1,2,1,0,"UNSIGNED");
        CGP001GEVLGRUPO3 = XseedFunctions.subItem(CGP001GEVLGRUPO3,CGP001GRDSMASCAR,2,3,1,0,"UNSIGNED");
        CGP001GEVLGRUPO4 = XseedFunctions.subItem(CGP001GEVLGRUPO4,CGP001GRDSMASCAR,3,4,1,0,"UNSIGNED");
        CGP001GEVLGRUPO5 = XseedFunctions.subItem(CGP001GEVLGRUPO5,CGP001GRDSMASCAR,4,5,1,0,"UNSIGNED");
        CGP001GEVLGRUPO6 = XseedFunctions.subItem(CGP001GEVLGRUPO6,CGP001GRDSMASCAR,5,6,1,0,"UNSIGNED");
        CGP001GEVLGRUPO7 = XseedFunctions.subItem(CGP001GEVLGRUPO7,CGP001GRDSMASCAR,6,7,1,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GRDSMASCAR_GROUP_INIT ()
   throws Exception
{   try
    {
        CGP001GRDSMASCAR = "0000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GRVLEDITAD_GROUP ()
   throws Exception
{   try
    {
        CGP001GEDSVLREDI = XseedFunctions.subItem(CGP001GEDSVLREDI,CGP001GRVLEDITAD,0,23,23);
        CGP001GEDSSINEDI = XseedFunctions.subItem(CGP001GEDSSINEDI,CGP001GRVLEDITAD,23,24,1);
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GRVLEDITAD_GROUP_INIT ()
   throws Exception
{   try
    {
        CGP001GRVLEDITAD = "                        ";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GRVLINDICE_GROUP ()
   throws Exception
{   try
    {
        CGP001GEVLINDICE = XseedFunctions.subItem(CGP001GEVLINDICE,CGP001GRVLINDICE,0,17,17,0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GRVLINDICE_GROUP_INIT ()
   throws Exception
{   try
    {
        CGP001GRVLINDICE = "00000000000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSFILLER_ITEM ()
   throws Exception
{   try
    {
        GRAMREFERE = XseedFunctions.groupItem(GEDSFILLER, GRAMREFERE, 0, 9,9, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRDECEND_ITEM ()
   throws Exception
{   try
    {
        GRAMREFERE = XseedFunctions.groupItem(GENRDECEND, GRAMREFERE, 9, 10,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEAMREFERE_ITEM ()
   throws Exception
{   try
    {
        GRAMREFERE = XseedFunctions.groupItem(GEAMREFERE, GRAMREFERE, 10, 16,6, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDNATNUM_ITEM ()
   throws Exception
{   try
    {
        GRCDNATALF = XseedFunctions.groupItem(GECDNATNUM, GRCDNATALF, 0, 4,4, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDPO1GR1_ITEM ()
   throws Exception
{   try
    {
        GRCDNATGR1 = XseedFunctions.groupItem(GECDPO1GR1, GRCDNATGR1, 0, 1, 1);
        GECDPO1GR1 = rTrim (GECDPO1GR1,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDPO2GR1_ITEM ()
   throws Exception
{   try
    {
        GRCDNATGR1 = XseedFunctions.groupItem(GECDPO2GR1, GRCDNATGR1, 1, 2, 1);
        GECDPO2GR1 = rTrim (GECDPO2GR1,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDPO3GR1_ITEM ()
   throws Exception
{   try
    {
        GRCDNATGR1 = XseedFunctions.groupItem(GECDPO3GR1, GRCDNATGR1, 2, 4, 2);
        GECDPO3GR1 = rTrim (GECDPO3GR1,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDPO4GR1_ITEM ()
   throws Exception
{   try
    {
        GRCDNATGR1 = XseedFunctions.groupItem(GECDPO4GR1, GRCDNATGR1, 4, 5, 1);
        GECDPO4GR1 = rTrim (GECDPO4GR1,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDPO5GR1_ITEM ()
   throws Exception
{   try
    {
        GRCDNATGR1 = XseedFunctions.groupItem(GECDPO5GR1, GRCDNATGR1, 5, 7, 2);
        GECDPO5GR1 = rTrim (GECDPO5GR1,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDPO1GR2_ITEM ()
   throws Exception
{   try
    {
        GRCDNATGR2 = XseedFunctions.groupItem(GECDPO1GR2, GRCDNATGR2, 0, 1, 1);
        GECDPO1GR2 = rTrim (GECDPO1GR2,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDPO2GR2_ITEM ()
   throws Exception
{   try
    {
        GRCDNATGR2 = XseedFunctions.groupItem(GECDPO2GR2, GRCDNATGR2, 1, 2, 1);
        GECDPO2GR2 = rTrim (GECDPO2GR2,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDPO3GR2_ITEM ()
   throws Exception
{   try
    {
        GRCDNATGR2 = XseedFunctions.groupItem(GECDPO3GR2, GRCDNATGR2, 2, 5, 3);
        GECDPO3GR2 = rTrim (GECDPO3GR2,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDSEGPOS_ITEM ()
   throws Exception
{   try
    {
        GRCDNATTRA = XseedFunctions.groupItem(GECDSEGPOS, GRCDNATTRA, 0, 1,1, 0,"UNSIGNED");
        GRCDNATTRA_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDULTPOS_ITEM ()
   throws Exception
{   try
    {
        GRCDNATTRA = XseedFunctions.groupItem(GECDULTPOS, GRCDNATTRA, 1, 3,2, 0,"UNSIGNED");
        GRCDNATTRA_ITEM();
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDPRIPOS_ITEM ()
   throws Exception
{   try
    {
        GRCDNATONU = XseedFunctions.groupItem(GECDPRIPOS, GRCDNATONU, 0, 1,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GRCDNATTRA_ITEM ()
   throws Exception
{   try
    {
        GRCDNATONU = XseedFunctions.groupItem(GRCDNATTRA, GRCDNATONU, 1, 4, 3);
        GRCDNATTRA = rTrim (GRCDNATTRA,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRCPFED1_ITEM ()
   throws Exception
{   try
    {
        GRNRCPFEDI = XseedFunctions.groupItem(GENRCPFED1, GRNRCPFEDI, 0, 3,3, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSLIMI01_ITEM ()
   throws Exception
{   try
    {
        GRNRCPFEDI = XseedFunctions.groupItem(GEDSLIMI01, GRNRCPFEDI, 3, 4, 1);
        GEDSLIMI01 = rTrim (GEDSLIMI01,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRCPFED2_ITEM ()
   throws Exception
{   try
    {
        GRNRCPFEDI = XseedFunctions.groupItem(GENRCPFED2, GRNRCPFEDI, 4, 7,3, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSLIMI02_ITEM ()
   throws Exception
{   try
    {
        GRNRCPFEDI = XseedFunctions.groupItem(GEDSLIMI02, GRNRCPFEDI, 7, 8, 1);
        GEDSLIMI02 = rTrim (GEDSLIMI02,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRCPFED3_ITEM ()
   throws Exception
{   try
    {
        GRNRCPFEDI = XseedFunctions.groupItem(GENRCPFED3, GRNRCPFEDI, 8, 11,3, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSHIFENX_ITEM ()
   throws Exception
{   try
    {
        GRNRCPFEDI = XseedFunctions.groupItem(GEDSHIFENX, GRNRCPFEDI, 11, 12, 1);
        GEDSHIFENX = rTrim (GEDSHIFENX,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRCPFDIG_ITEM ()
   throws Exception
{   try
    {
        GRNRCPFEDI = XseedFunctions.groupItem(GENRCPFDIG, GRNRCPFEDI, 12, 14,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRCPF001_ITEM ()
   throws Exception
{   try
    {
        GRNRCPFSRF = XseedFunctions.groupItem(GENRCPF001, GRNRCPFSRF, 0, 3,3, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRCPF002_ITEM ()
   throws Exception
{   try
    {
        GRNRCPFSRF = XseedFunctions.groupItem(GENRCPF002, GRNRCPFSRF, 3, 6,3, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRCPF003_ITEM ()
   throws Exception
{   try
    {
        GRNRCPFSRF = XseedFunctions.groupItem(GENRCPF003, GRNRCPFSRF, 6, 9,3, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRCPF004_ITEM ()
   throws Exception
{   try
    {
        GRNRCPFSRF = XseedFunctions.groupItem(GENRCPF004, GRNRCPFSRF, 9, 11,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRINFORM_ITEM ()
   throws Exception
{   try
    {
        GRNRINFORM = XseedFunctions.groupItem(GENRINFORM, GRNRINFORM, 0, 5,5, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDZEROSX_ITEM ()
   throws Exception
{   try
    {
        GRNRNFICMP = XseedFunctions.groupItem(GECDZEROSX, GRNRNFICMP, 0, 4,4, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDMODICM_ITEM ()
   throws Exception
{   try
    {
        GRNRNFICMP = XseedFunctions.groupItem(GECDMODICM, GRNRNFICMP, 4, 5,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDFILICM_ITEM ()
   throws Exception
{   try
    {
        GRNRNFICMP = XseedFunctions.groupItem(GECDFILICM, GRNRNFICMP, 5, 7,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRNFICMP_ITEM ()
   throws Exception
{   try
    {
        GRNRNFICMP = XseedFunctions.groupItem(GENRNFICMP, GRNRNFICMP, 7, 16,9, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEINDEBIPI_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEINDEBIPI, GRVLATUALI, 0, 1,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSESTADO_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEDSESTADO, GRVLATUALI, 1, 5, 4);
        GEDSESTADO = rTrim (GEDSESTADO,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDNATCOM_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GECDNATCOM, GRVLATUALI, 5, 7,2, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEQTPESOKG_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEQTPESOKG, GRVLATUALI, 7, 17,10, 1,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLAUXIL1_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLAUXIL1, GRVLATUALI, 17, 31,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLAUXIL2_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLAUXIL2, GRVLATUALI, 31, 45,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLBASICM_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLBASICM, GRVLATUALI, 45, 59,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLBASIPI_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLBASIPI, GRVLATUALI, 59, 73,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLCONTAB_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLCONTAB, GRVLATUALI, 73, 87,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLIMPICM_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLIMPICM, GRVLATUALI, 87, 101,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLIMPIPI_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLIMPIPI, GRVLATUALI, 101, 115,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLINTEGR_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLINTEGR, GRVLATUALI, 115, 129,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLINTICM_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLINTICM, GRVLATUALI, 129, 143,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLINTIPI_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLINTIPI, GRVLATUALI, 143, 157,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLOUTICM_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLOUTICM, GRVLATUALI, 157, 171,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLOUTIPI_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLOUTIPI, GRVLATUALI, 171, 185,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLCONTNC_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLCONTNC, GRVLATUALI, 185, 199,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLBICMNC_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLBICMNC, GRVLATUALI, 199, 213,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLBASSTR_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLBASSTR, GRVLATUALI, 213, 227,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLICMSTR_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLICMSTR, GRVLATUALI, 227, 241,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB01_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB01, GRVLATUALI, 241, 255,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB02_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB02, GRVLATUALI, 255, 269,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB03_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB03, GRVLATUALI, 269, 283,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB04_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB04, GRVLATUALI, 283, 297,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB05_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB05, GRVLATUALI, 297, 311,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB06_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB06, GRVLATUALI, 311, 325,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB07_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB07, GRVLATUALI, 325, 339,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB08_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB08, GRVLATUALI, 339, 353,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB09_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB09, GRVLATUALI, 353, 367,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB10_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB10, GRVLATUALI, 367, 381,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB11_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB11, GRVLATUALI, 381, 395,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB12_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB12, GRVLATUALI, 395, 409,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLTRAB13_ITEM ()
   throws Exception
{   try
    {
        GRVLATUALI = XseedFunctions.groupItem(GEVLTRAB13, GRVLATUALI, 409, 423,14, 2,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEVLFILRED_ITEM ()
   throws Exception
{   try
    {
        GRVLREDICM = XseedFunctions.groupItem(GEVLFILRED, GRVLREDICM, 0, 6,6, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDTEXRED_ITEM ()
   throws Exception
{   try
    {
        GRVLREDICM = XseedFunctions.groupItem(GECDTEXRED, GRVLREDICM, 6, 12,6, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEPCREDICM_ITEM ()
   throws Exception
{   try
    {
        GRVLREDICM = XseedFunctions.groupItem(GEPCREDICM, GRVLREDICM, 12, 18,6, 4,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSNOTAFI_ITEM ()
   throws Exception
{   try
    {
        GRDSCABECA = XseedFunctions.groupItem(GEDSNOTAFI, GRDSCABECA, 0, 9, 9);
        GEDSNOTAFI = rTrim (GEDSNOTAFI,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSESPA01_ITEM ()
   throws Exception
{   try
    {
        GRDSCABECA = XseedFunctions.groupItem(GEDSESPA01, GRDSCABECA, 9, 10, 1);
        GEDSESPA01 = rTrim (GEDSESPA01,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSEMISSA_ITEM ()
   throws Exception
{   try
    {
        GRDSCABECA = XseedFunctions.groupItem(GEDSEMISSA, GRDSCABECA, 10, 18, 8);
        GEDSEMISSA = rTrim (GEDSEMISSA,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSESPA04_ITEM ()
   throws Exception
{   try
    {
        GRDSCABECA = XseedFunctions.groupItem(GEDSESPA04, GRDSCABECA, 18, 19, 1);
        GEDSESPA04 = rTrim (GEDSESPA04,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSCLIENT_ITEM ()
   throws Exception
{   try
    {
        GRDSCABECA = XseedFunctions.groupItem(GEDSCLIENT, GRDSCABECA, 19, 26, 7);
        GEDSCLIENT = rTrim (GEDSCLIENT,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSESPA02_ITEM ()
   throws Exception
{   try
    {
        GRDSCABECA = XseedFunctions.groupItem(GEDSESPA02, GRDSCABECA, 26, 27, 1);
        GEDSESPA02 = rTrim (GEDSESPA02,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSCLIEN1_ITEM ()
   throws Exception
{   try
    {
        GRDSCABECA = XseedFunctions.groupItem(GEDSCLIEN1, GRDSCABECA, 27, 87, 60);
        GEDSCLIEN1 = rTrim (GEDSCLIEN1,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENRNOTDEP_ITEM ()
   throws Exception
{   try
    {
        GRDSLINHAX = XseedFunctions.groupItem(GENRNOTDEP, GRDSLINHAX, 0, 9, 9);
        GENRNOTDEP = rTrim (GENRNOTDEP,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSESPA06_ITEM ()
   throws Exception
{   try
    {
        GRDSLINHAX = XseedFunctions.groupItem(GEDSESPA06, GRDSLINHAX, 9, 10, 1);
        GEDSESPA06 = rTrim (GEDSESPA06,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDIEMIDEP_ITEM ()
   throws Exception
{   try
    {
        GRDSLINHAX = XseedFunctions.groupItem(GEDIEMIDEP, GRDSLINHAX, 10, 18, 8);
        GEDIEMIDEP = rTrim (GEDIEMIDEP,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSESPA09_ITEM ()
   throws Exception
{   try
    {
        GRDSLINHAX = XseedFunctions.groupItem(GEDSESPA09, GRDSLINHAX, 18, 19, 1);
        GEDSESPA09 = rTrim (GEDSESPA09,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GECDCLIDEP_ITEM ()
   throws Exception
{   try
    {
        GRDSLINHAX = XseedFunctions.groupItem(GECDCLIDEP, GRDSLINHAX, 19, 26, 7);
        GECDCLIDEP = rTrim (GECDCLIDEP,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GEDSESPA07_ITEM ()
   throws Exception
{   try
    {
        GRDSLINHAX = XseedFunctions.groupItem(GEDSESPA07, GRDSLINHAX, 26, 27, 1);
        GEDSESPA07 = rTrim (GEDSESPA07,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GENMCLIENT_ITEM ()
   throws Exception
{   try
    {
        GRDSLINHAX = XseedFunctions.groupItem(GENMCLIENT, GRDSLINHAX, 27, 87, 60);
        GENMCLIENT = rTrim (GENMCLIENT,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GEVLGRUPO1_ITEM ()
   throws Exception
{   try
    {
        CGP001GRDSMASCAR = XseedFunctions.groupItem(CGP001GEVLGRUPO1, CGP001GRDSMASCAR, 0, 1,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GEVLGRUPO2_ITEM ()
   throws Exception
{   try
    {
        CGP001GRDSMASCAR = XseedFunctions.groupItem(CGP001GEVLGRUPO2, CGP001GRDSMASCAR, 1, 2,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GEVLGRUPO3_ITEM ()
   throws Exception
{   try
    {
        CGP001GRDSMASCAR = XseedFunctions.groupItem(CGP001GEVLGRUPO3, CGP001GRDSMASCAR, 2, 3,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GEVLGRUPO4_ITEM ()
   throws Exception
{   try
    {
        CGP001GRDSMASCAR = XseedFunctions.groupItem(CGP001GEVLGRUPO4, CGP001GRDSMASCAR, 3, 4,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GEVLGRUPO5_ITEM ()
   throws Exception
{   try
    {
        CGP001GRDSMASCAR = XseedFunctions.groupItem(CGP001GEVLGRUPO5, CGP001GRDSMASCAR, 4, 5,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GEVLGRUPO6_ITEM ()
   throws Exception
{   try
    {
        CGP001GRDSMASCAR = XseedFunctions.groupItem(CGP001GEVLGRUPO6, CGP001GRDSMASCAR, 5, 6,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GEVLGRUPO7_ITEM ()
   throws Exception
{   try
    {
        CGP001GRDSMASCAR = XseedFunctions.groupItem(CGP001GEVLGRUPO7, CGP001GRDSMASCAR, 6, 7,1, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GEDSVLREDI_ITEM ()
   throws Exception
{   try
    {
        CGP001GRVLEDITAD = XseedFunctions.groupItem(CGP001GEDSVLREDI, CGP001GRVLEDITAD, 0, 23, 23);
        CGP001GEDSVLREDI = rTrim (CGP001GEDSVLREDI,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GEDSSINEDI_ITEM ()
   throws Exception
{   try
    {
        CGP001GRVLEDITAD = XseedFunctions.groupItem(CGP001GEDSSINEDI, CGP001GRVLEDITAD, 23, 24, 1);
        CGP001GEDSSINEDI = rTrim (CGP001GEDSSINEDI,"*");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void CGP001GEVLINDICE_ITEM ()
   throws Exception
{   try
    {
        CGP001GRVLINDICE = XseedFunctions.groupItem(CGP001GEVLINDICE, CGP001GRVLINDICE, 0, 17,17, 0,"UNSIGNED");
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}

private void P_InitialValuesGSD()
    throws Exception
{
    try
    {
        GSDINCONCIL = "";
        GSDQTMESESX = 0;
        GSDQTMESDIF = 0;
        GSDTPCALDAT = 0;
        GSDAMREFSEC = 0;
        GSDAMREFFIN = 0;
        GSDAMSALCON = 0;
        GSDCDCLACCU = 0;
        GSDCDCLACON = "";
        GSDDSCOMCCU = "";
        GSDNRNIVCCU = 0;
        GSDNRPOSCC1 = 0;
        GSDNRPOSCC2 = 0;
        GSDNRPOSCC3 = 0;
        GSDNRPOSCC4 = 0;
        GSDNRPOSCC5 = 0;
        GSDNRPOSCC6 = 0;
        GSDNRPOSCC7 = 0;
        GSDNRPOSCC8 = 0;
        GSDDSCOMCTA = "";
        GSDNRNIVCTA = 0;
        GSDNRPOSCT1 = 0;
        GSDNRPOSCT2 = 0;
        GSDNRPOSCT3 = 0;
        GSDNRPOSCT4 = 0;
        GSDNRPOSCT5 = 0;
        GSDNRPOSCT6 = 0;
        GSDNRPOSCT7 = 0;
        GSDNRPOSCT8 = 0;
        GSDCDCTANUM = 0;
        GSDCDCTACON = 0;
        GSDCDCUSNUM = 0;
        GSDCDDEPANT = "";
        GSDCDDOITEM = "";
        GSDCDECUSTO = 0;
        GSDCDELEN16 = bigZeros;
        GSDCDELENUM = 0;
        GSDCDHISTOR = 0;
        GSDCDINDANT = 0;
        GSDCDITEAN4 = "";
        GSDCDITEAN8 = "";
        GSDCDORILAN = 0;
        GSDCDRAZAUX = 0;
        GSDDISSSAMD = 0;
        GSDDIAASAMD = 0;
        GSDDIMMSAMD = 0;
        GSDDIDDSAMD = 0;
        GSDDILANCTO = 0;
        GSDDIREFSEC = 0;
        GSDDSALFA01 = "";
        GSDDSCOMPHI = "";
        GSDDSELEMEN = "";
        GSDDSPARAME = "";
        GSDCDCOMAND = "";
        GSDCDSENHAN = 0;
        GSDCDSENHAX = "";
        GSDNRSOLICI = 0;
        GSDCDRELATO = "";
        GSICDUSUARI = "";
        GSICDEMPRES = 0;
        GSICDFILVEN = 0;
        GSINMEMPRES = "";
        GSDNMESTINI = "";
        GSDNMESTSOL = "";
        GSIDISISTEM = 0;
        GSIDTSISTEM = 0;
        GSDTHHHMMED = "";
        GSDNRREGLID = 0;
        GSDNRREGGRA = 0;
        GSDNRMIXREL = 0;
        GSIINPROREF = 0;
        GSIINESTPRO = 0;
        GSIINFILFAT = 0;
        GSIINESTGER = 0;
        GSDCDUSUARI = "";
        GSDCDEMPRES = 0;
        GSDCDNIVSEG = 0;
        GSDCDFILVEN = 0;
        GSDNMABREMP = "";
        GSDCDATIVID = "";
        GSDDTSISTEM = 0;
        GSDNRUSUARI = 0;
        GSDINPROREF = 0;
        GSDDISISSEC = 0;
        GSDDTSISSEC = 0;
        GSDINESTPRO = 0;
        GSDINFILFAT = 0;
        GSDINESTGER = 0;
        GSDINADDSUB = "";
        GSDINASTERI = "";
        GSDINCHAANT = "";
        GSDINELESIN = "";
        GSDINEMPANT = "";
        GSDINITEMOK = 0;
        GSDINLEIANT = 0;
        GSDINLEIDIR = 0;
        GSDINREAISX = "";
        GSDINSINLAN = 0;
        GSDINSITREG = "";
        GSDNRCONSLP = 0;
        GSDNRDECIMA = 0;
        GSDNRFORMCG = 0;
        GSDNRLOTECG = 0;
        GSDNRSOLREL = 0;
        GSDNRPARREL = 0;
        GSDNRSEQPAR = 0;
        GSDNRULTSOL = 0;
        GSDNRULTSEQ = 0;
        GSDNRSEQLAN = 0;
    GSDNRSLEEPS = 100.0;
        GSDTPCODANT = "";
        GSDTPCTACON = 0;
        GSDTPEDIIND = 0;
        GSDTPLANCTO = 0;
        GSDVLELEMEN = bigZeros;
        GSDVLELESIN = bigZeros;
        GSDVLINDEDI = "";
        GSDVLINDICE = bigZeros;
        GSDVLLANCAM = bigZeros;
        GSDVLLANCRE = bigZeros;
        GSDVLLANDEB = bigZeros;
        GSDVLPARAME = 0;
        GSDVLPROGMO = 0;
        GSDVLPROUMG = 0;
        GSDVLREALCR = 0;
        GSDVLREALMG = 0;
        GSDVLREALMO = 0;
        GSDVLRZEROS = bigZeros;
        GSDDSCOMAND = "";
        GSDNRECORDS = 0;
        GSDDSFECPAR = "";
        GSDINSLDCON = 0;
        GSDDSASSINA = "";
        GSDCDATVEMA = "";
        GSDCDPAISGL = 0;
        GSDNRCLOCGL = 0;
        GSDNRCCOMGL = 0;
        GSDINTEMCEP = 0;
        GSDNRCGCCON = 0;
    GSDNRPOSCCU_GROUP_INIT ();
    GSDCDCOMCCU_GROUP_INIT ();
    GSDNRPOSCTA_GROUP_INIT ();
    GSDCDCOMCTA_GROUP_INIT ();
    GSDCDCTAALF_GROUP_INIT ();
    GSDCDCUSALF_GROUP_INIT ();
    GSDCDELEA16_GROUP_INIT ();
    GSDCDELEALF_GROUP_INIT ();
    GSDDISASAMD_GROUP_INIT ();
    GSDDIAMSAMD_GROUP_INIT ();
    GSDDIDISAMD_GROUP_INIT ();
    GSDDSMENSAG_GROUP_INIT ();
    GSDDSPARREP_GROUP_INIT ();
    GSDGLB_WORK_GROUP_INIT ();
    GSDNRPARAME_GROUP_INIT ();
    GSDNRULTPAR_GROUP_INIT ();
    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "P_InitialValuesGSD");;
    }
}


private void GSDNRPOSCCU_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDNRPOSCCU = "0000000000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDCOMCCU_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDNRPOSCCU_GROUP_INIT();
        GSDCDCOMCCU = "            00" + GSDNRPOSCCU + "";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPOSCTA_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDNRPOSCTA = "0000000000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDCOMCTA_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDNRPOSCTA_GROUP_INIT();
        GSDCDCOMCTA = "            00" + GSDNRPOSCTA + "";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDCTAALF_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDCDCTAALF = "000000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDCUSALF_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDCDCUSALF = "00000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDELEA16_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDCDELEA16 = "0000000000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDCDELEALF_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDCDELEALF = "0000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDISASAMD_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDDISASAMD = "0000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDIAMSAMD_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDDISASAMD_GROUP_INIT();
        GSDDIAMSAMD = "" + GSDDISASAMD + "00";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDIDISAMD_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDDIAMSAMD_GROUP_INIT();
        GSDDIDISAMD = "" + GSDDIAMSAMD + "00";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDSMENSAG_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDDSMENSAG = "00000                                             ";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDDSPARREP_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDDSMENSAG_GROUP_INIT();
        GSDDSPARREP = "          " + GSDDSMENSAG + "000000                               0000                                                  000000000000     000000000000000000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDGLB_WORK_GROUP_INIT ()
   throws Exception
{   try
    {

    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRPARAME_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDNRPARAME = "0000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}
private void GSDNRULTPAR_GROUP_INIT ()
   throws Exception
{   try
    {
        GSDNRULTPAR = "0000000000";
    }
    catch (Exception e)
    {   ShowErrorMsg (e);
    }
}

private void InitialSettings()
    throws Exception
{
    try
    {
        GLB.RANDOM = 2729;
        GLB.APPNAME = "SINGE";
        GLB.DBTITLE = GLB.FILESDIR.trim() + File.separatorChar + "SINGE.MDB";
        GLB.BASE = 1921;
        GLB.CENTURY = Double.parseDouble(String.valueOf(GLB.BASE).substring(0,2).trim());
        GLB.DCTYPE = "UK";
        GLB.EXTRACTPREFIX = GLB.EXTRACTSDIR.trim() + File.separatorChar;
        GLB.PAGEMARK = "\14";
        GLB.CONSOLE = false;
         GLB.STATION = GLB.STN;
         GLB.DEVICE = GLB.DEVICE.trim();

         if ( (GLB.DEVICE.equals("LP") == false) &&
              (GLB.DEVICE.equals("RP") == false) &&
              (GLB.DEVICE.equals("TP") == false) &&
              (GLB.DEVICE.equals("VD") == false) )
         {
            GLB.DEVICE = "LP";
         }

         P_InitialValues();
         P_InitialValuesGSD();

         initBPArray ();

         currentDate();

    }
    catch(Exception e)
    {
        ShowErrorMsg(e, "InitialSettings");;
    }
}

private void abortTransaction(String msg)
{
    try
    {
        GLB.ABORT = true;
        ClosePrintFiles();
        AuditERR(msg);
        RollBackTransaction();
        CloseFiles();
        if (GLB.TASK == 0) {
            GLB.TASK = 1.0;
        }

    }
    catch (Exception e)
    {	if (GLB.TASK == 0) {
            GLB.TASK = 1.0;
        }
        /* do not throw exception! */
    }
}


public String getGlbParam ()
   throws Exception
{   try
    {   return(GLB.PARAM);
    }
    catch (Exception e)
    {
        ShowErrorMsg(e, "getGlbParam");
        return("");
    }
}

public void setGlbParam (String pParam)
   throws Exception
{   try
    {   GLB.PARAM = move(pParam, GLB.PARAM , 2000);
        GLB.PARAM = format(GLB.PARAM , 2000);
    }
    catch (Exception e)
    {
        ShowErrorMsg(e, "setGlbParam");
    }
}
public double getGlbTask ()
   throws Exception
{   try
    {   return(GLB.TASK);
    }
    catch (Exception e)
    {
        ShowErrorMsg(e, "getGlbTask");
        return(0.0);
    }
}

public String getGlbRepStatus ()
   throws Exception
{   try
    {   return(GLB.REPSTATUS);
    }
    catch (Exception e)
    {
        ShowErrorMsg(e, "getGlbRepStatus");
        return("");
    }
}

private void ASSOCIA_COMBO (XseedCombobox pCOMBO)
{
    COMBOX = pCOMBO;
}


private void X_COPIACOMBO (XseedCombobox pORIG, XseedCombobox pDEST)
{
    if (pDEST.maxindex == 0)
    {
        pDEST.maxindex = 1000;
        pDEST.listname = new String [(int)pDEST.maxindex];
        pDEST.listvalue = new String [(int)pDEST.maxindex];
    }
    for (int i=0; (i < pORIG.maxindex) && (pORIG.listname[i]!=null); i++)
    {
        pDEST.listname [i] = pORIG.listname [i];
        pDEST.listvalue [i] = pORIG.listvalue [i];
    }
    pDEST.listindex = pORIG.listindex;
}
private void AGUARDE(long appNRMILSEG) throws Exception
{
    try
	{
		Thread thread = new Thread(esperaTempo);
		thread.start();
		Thread.sleep(appNRMILSEG);
		thread.join();
		thread = null;
	}
    catch (Exception e)
    {
        ShowErrorMsg(e, "AGUARDE");
    }
}

private String nulo_NFe (String pValor)
{
    String sddsreturn = "";
    if (pValor.trim().equals("") == false) {
        try {
            sddsreturn = "'" + ReplaceQuotes(pValor).trim() + "'";
        }
        catch (Exception e) {
        }
    }
    else {
        sddsreturn = "null";
    }
    return sddsreturn;
}

private String nulo_NFe (int pValor)
{
    String sddsreturn = "";
    if (pValor != 0) {
        sddsreturn = String.valueOf(pValor);
    }
    else {
        sddsreturn = "null";
    }
    return sddsreturn;
}

private String nulo_NFe (double pValor)
{
    String sddsreturn = "";
    if (pValor != 0) {
        sddsreturn = String.valueOf(pValor);
    }
    else {
        sddsreturn = "null";
    }
    return sddsreturn;
}


private String nulo_NFe (long pValor)
{
    String sddsreturn = "";
    if (pValor != 0) {
        sddsreturn = String.valueOf(pValor);
    }
    else {
        sddsreturn = "null";
    }
    return sddsreturn;
}

private void P_STDONCHANGE()
  throws Exception
{
    BigDecimal avg = bigZeros;
}

}
